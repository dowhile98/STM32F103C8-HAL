
005_HC-05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08002fec  08002fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f0  080030f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080030f0  080030f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030f0  080030f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08003168  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003168  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008817  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001884  00000000  00000000  000288b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000720  00000000  00000000  0002a138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000658  00000000  00000000  0002a858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000148e9  00000000  00000000  0002aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000066f6  00000000  00000000  0003f799  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b525  00000000  00000000  00045e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b13b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002290  00000000  00000000  000b1430  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fd4 	.word	0x08002fd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002fd4 	.word	0x08002fd4

0800014c <__io_putchar>:
static void GPIO_Init(void);
static void USART1_UART_Init(void);
static void USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
  {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  	uint8_t c;
  	c = ch & 0x00FF;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	b2db      	uxtb	r3, r3
 8000158:	73fb      	strb	r3, [r7, #15]
  	HAL_UART_Transmit(&huart1, &c, 1, 10);
 800015a:	f107 010f 	add.w	r1, r7, #15
 800015e:	230a      	movs	r3, #10
 8000160:	2201      	movs	r2, #1
 8000162:	4804      	ldr	r0, [pc, #16]	; (8000174 <__io_putchar+0x28>)
 8000164:	f001 fb19 	bl	800179a <HAL_UART_Transmit>
  	return ch;
 8000168:	687b      	ldr	r3, [r7, #4]
  }
 800016a:	4618      	mov	r0, r3
 800016c:	3710      	adds	r7, #16
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	20000098 	.word	0x20000098

08000178 <_write>:

  int _write(int file,char *ptr, int len)
  {
 8000178:	b580      	push	{r7, lr}
 800017a:	b086      	sub	sp, #24
 800017c:	af00      	add	r7, sp, #0
 800017e:	60f8      	str	r0, [r7, #12]
 8000180:	60b9      	str	r1, [r7, #8]
 8000182:	607a      	str	r2, [r7, #4]
  	int DataIdx;
  	for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000184:	2300      	movs	r3, #0
 8000186:	617b      	str	r3, [r7, #20]
 8000188:	e009      	b.n	800019e <_write+0x26>
  	{
  		__io_putchar(*ptr++);
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	1c5a      	adds	r2, r3, #1
 800018e:	60ba      	str	r2, [r7, #8]
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	4618      	mov	r0, r3
 8000194:	f7ff ffda 	bl	800014c <__io_putchar>
  	for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000198:	697b      	ldr	r3, [r7, #20]
 800019a:	3301      	adds	r3, #1
 800019c:	617b      	str	r3, [r7, #20]
 800019e:	697a      	ldr	r2, [r7, #20]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	429a      	cmp	r2, r3
 80001a4:	dbf1      	blt.n	800018a <_write+0x12>
  	}
  	return len;
 80001a6:	687b      	ldr	r3, [r7, #4]
 }
 80001a8:	4618      	mov	r0, r3
 80001aa:	3718      	adds	r7, #24
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}

080001b0 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/

int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b6:	f000 fb2f 	bl	8000818 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80001ba:	f000 f885 	bl	80002c8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  GPIO_Init();
 80001be:	f000 f913 	bl	80003e8 <GPIO_Init>
  USART1_UART_Init();
 80001c2:	f000 f8bd 	bl	8000340 <USART1_UART_Init>
  USART2_UART_Init();
 80001c6:	f000 f8e5 	bl	8000394 <USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("INICIALIZACION DE USART1 Y USART2 EXITOSA\r\n");
 80001ca:	483a      	ldr	r0, [pc, #232]	; (80002b4 <main+0x104>)
 80001cc:	f002 f824 	bl	8002218 <puts>
  uint8_t data;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(USART2->SR & USART_SR_RXNE){
 80001d0:	4b39      	ldr	r3, [pc, #228]	; (80002b8 <main+0x108>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d00b      	beq.n	80001f4 <main+0x44>
		  HAL_UART_Receive(&huart2, &data, 1,HAL_MAX_DELAY);
 80001dc:	1df9      	adds	r1, r7, #7
 80001de:	f04f 33ff 	mov.w	r3, #4294967295
 80001e2:	2201      	movs	r2, #1
 80001e4:	4835      	ldr	r0, [pc, #212]	; (80002bc <main+0x10c>)
 80001e6:	f001 fb71 	bl	80018cc <HAL_UART_Receive>
		  printf("se recibio->%d\r\n",data);
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	4619      	mov	r1, r3
 80001ee:	4834      	ldr	r0, [pc, #208]	; (80002c0 <main+0x110>)
 80001f0:	f001 ff9e 	bl	8002130 <iprintf>

	  }
	  if(data==1){
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d105      	bne.n	8000206 <main+0x56>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2101      	movs	r1, #1
 80001fe:	4831      	ldr	r0, [pc, #196]	; (80002c4 <main+0x114>)
 8000200:	f000 fe4a 	bl	8000e98 <HAL_GPIO_WritePin>
 8000204:	e7e4      	b.n	80001d0 <main+0x20>

	  }
	  else if(data==2){
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	2b02      	cmp	r3, #2
 800020a:	d105      	bne.n	8000218 <main+0x68>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	2101      	movs	r1, #1
 8000210:	482c      	ldr	r0, [pc, #176]	; (80002c4 <main+0x114>)
 8000212:	f000 fe41 	bl	8000e98 <HAL_GPIO_WritePin>
 8000216:	e7db      	b.n	80001d0 <main+0x20>
	  }
	  else if(data==3){
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	2b03      	cmp	r3, #3
 800021c:	d105      	bne.n	800022a <main+0x7a>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	2102      	movs	r1, #2
 8000222:	4828      	ldr	r0, [pc, #160]	; (80002c4 <main+0x114>)
 8000224:	f000 fe38 	bl	8000e98 <HAL_GPIO_WritePin>
 8000228:	e7d2      	b.n	80001d0 <main+0x20>

	  }
	  else if(data==4){
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b04      	cmp	r3, #4
 800022e:	d105      	bne.n	800023c <main+0x8c>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	2102      	movs	r1, #2
 8000234:	4823      	ldr	r0, [pc, #140]	; (80002c4 <main+0x114>)
 8000236:	f000 fe2f 	bl	8000e98 <HAL_GPIO_WritePin>
 800023a:	e7c9      	b.n	80001d0 <main+0x20>
	  }
	  else if(data==5){
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	2b05      	cmp	r3, #5
 8000240:	d106      	bne.n	8000250 <main+0xa0>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000242:	2201      	movs	r2, #1
 8000244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000248:	481e      	ldr	r0, [pc, #120]	; (80002c4 <main+0x114>)
 800024a:	f000 fe25 	bl	8000e98 <HAL_GPIO_WritePin>
 800024e:	e7bf      	b.n	80001d0 <main+0x20>

	  }
	  else if(data==6){
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	2b06      	cmp	r3, #6
 8000254:	d106      	bne.n	8000264 <main+0xb4>
	   	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800025c:	4819      	ldr	r0, [pc, #100]	; (80002c4 <main+0x114>)
 800025e:	f000 fe1b 	bl	8000e98 <HAL_GPIO_WritePin>
 8000262:	e7b5      	b.n	80001d0 <main+0x20>
 	  }
	  else if(data==7){
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b07      	cmp	r3, #7
 8000268:	d106      	bne.n	8000278 <main+0xc8>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000270:	4814      	ldr	r0, [pc, #80]	; (80002c4 <main+0x114>)
 8000272:	f000 fe11 	bl	8000e98 <HAL_GPIO_WritePin>
 8000276:	e7ab      	b.n	80001d0 <main+0x20>
	  }
	  else if(data==8){
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	2b08      	cmp	r3, #8
 800027c:	d106      	bne.n	800028c <main+0xdc>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000284:	480f      	ldr	r0, [pc, #60]	; (80002c4 <main+0x114>)
 8000286:	f000 fe07 	bl	8000e98 <HAL_GPIO_WritePin>
 800028a:	e7a1      	b.n	80001d0 <main+0x20>
	  }
	  else if(data==9){
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	2b09      	cmp	r3, #9
 8000290:	d106      	bne.n	80002a0 <main+0xf0>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_10,GPIO_PIN_SET);
 8000292:	2201      	movs	r2, #1
 8000294:	f241 4103 	movw	r1, #5123	; 0x1403
 8000298:	480a      	ldr	r0, [pc, #40]	; (80002c4 <main+0x114>)
 800029a:	f000 fdfd 	bl	8000e98 <HAL_GPIO_WritePin>
 800029e:	e797      	b.n	80001d0 <main+0x20>
	  }
	  else if(data==10){
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	2b0a      	cmp	r3, #10
 80002a4:	d194      	bne.n	80001d0 <main+0x20>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_10,GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f241 4103 	movw	r1, #5123	; 0x1403
 80002ac:	4805      	ldr	r0, [pc, #20]	; (80002c4 <main+0x114>)
 80002ae:	f000 fdf3 	bl	8000e98 <HAL_GPIO_WritePin>
	  if(USART2->SR & USART_SR_RXNE){
 80002b2:	e78d      	b.n	80001d0 <main+0x20>
 80002b4:	08002fec 	.word	0x08002fec
 80002b8:	40004400 	.word	0x40004400
 80002bc:	200000d8 	.word	0x200000d8
 80002c0:	08003018 	.word	0x08003018
 80002c4:	40010c00 	.word	0x40010c00

080002c8 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b090      	sub	sp, #64	; 0x40
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2228      	movs	r2, #40	; 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 ff22 	bl	8002120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ea:	2302      	movs	r3, #2
 80002ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ee:	2301      	movs	r3, #1
 80002f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f2:	2310      	movs	r3, #16
 80002f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f6:	2300      	movs	r3, #0
 80002f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fde2 	bl	8000ec8 <HAL_RCC_OscConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800030a:	f000 f8b9 	bl	8000480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	230f      	movs	r3, #15
 8000310:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000312:	2300      	movs	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f001 f84e 	bl	80013c8 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000332:	f000 f8a5 	bl	8000480 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3740      	adds	r7, #64	; 0x40
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void USART1_UART_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <USART1_UART_Init+0x4c>)
 8000346:	4a12      	ldr	r2, [pc, #72]	; (8000390 <USART1_UART_Init+0x50>)
 8000348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <USART1_UART_Init+0x4c>)
 800034c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <USART1_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <USART1_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <USART1_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <USART1_UART_Init+0x4c>)
 8000366:	220c      	movs	r2, #12
 8000368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <USART1_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <USART1_UART_Init+0x4c>)
 8000372:	2200      	movs	r2, #0
 8000374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <USART1_UART_Init+0x4c>)
 8000378:	f001 f9c2 	bl	8001700 <HAL_UART_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000382:	f000 f87d 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000098 	.word	0x20000098
 8000390:	40013800 	.word	0x40013800

08000394 <USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void USART2_UART_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <USART2_UART_Init+0x4c>)
 800039a:	4a12      	ldr	r2, [pc, #72]	; (80003e4 <USART2_UART_Init+0x50>)
 800039c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800039e:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <USART2_UART_Init+0x4c>)
 80003a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <USART2_UART_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <USART2_UART_Init+0x4c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <USART2_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <USART2_UART_Init+0x4c>)
 80003ba:	220c      	movs	r2, #12
 80003bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <USART2_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <USART2_UART_Init+0x4c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ca:	4805      	ldr	r0, [pc, #20]	; (80003e0 <USART2_UART_Init+0x4c>)
 80003cc:	f001 f998 	bl	8001700 <HAL_UART_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003d6:	f000 f853 	bl	8000480 <Error_Handler>
  }

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200000d8 	.word	0x200000d8
 80003e4:	40004400 	.word	0x40004400

080003e8 <GPIO_Init>:

static void GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0308 	add.w	r3, r7, #8
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	4b1e      	ldr	r3, [pc, #120]	; (8000478 <GPIO_Init+0x90>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a1d      	ldr	r2, [pc, #116]	; (8000478 <GPIO_Init+0x90>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <GPIO_Init+0x90>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0304 	and.w	r3, r3, #4
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	4b18      	ldr	r3, [pc, #96]	; (8000478 <GPIO_Init+0x90>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a17      	ldr	r2, [pc, #92]	; (8000478 <GPIO_Init+0x90>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b15      	ldr	r3, [pc, #84]	; (8000478 <GPIO_Init+0x90>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0308 	and.w	r3, r3, #8
 8000428:	603b      	str	r3, [r7, #0]
 800042a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_10, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	f241 4103 	movw	r1, #5123	; 0x1403
 8000432:	4812      	ldr	r0, [pc, #72]	; (800047c <GPIO_Init+0x94>)
 8000434:	f000 fd30 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_10;
 8000438:	f241 4303 	movw	r3, #5123	; 0x1403
 800043c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043e:	2301      	movs	r3, #1
 8000440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	2302      	movs	r3, #2
 8000448:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044a:	f107 0308 	add.w	r3, r7, #8
 800044e:	4619      	mov	r1, r3
 8000450:	480a      	ldr	r0, [pc, #40]	; (800047c <GPIO_Init+0x94>)
 8000452:	f000 fbc7 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000456:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800045a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000460:	2302      	movs	r3, #2
 8000462:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000464:	f107 0308 	add.w	r3, r7, #8
 8000468:	4619      	mov	r1, r3
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <GPIO_Init+0x94>)
 800046c:	f000 fbba 	bl	8000be4 <HAL_GPIO_Init>

}
 8000470:	bf00      	nop
 8000472:	3718      	adds	r7, #24
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40021000 	.word	0x40021000
 800047c:	40010c00 	.word	0x40010c00

08000480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000492:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <HAL_MspInit+0x5c>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a14      	ldr	r2, [pc, #80]	; (80004e8 <HAL_MspInit+0x5c>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <HAL_MspInit+0x5c>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <HAL_MspInit+0x5c>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <HAL_MspInit+0x5c>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <HAL_MspInit+0x5c>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <HAL_MspInit+0x60>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <HAL_MspInit+0x60>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010000 	.word	0x40010000

080004f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	f107 0318 	add.w	r3, r7, #24
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a3b      	ldr	r2, [pc, #236]	; (80005f8 <HAL_UART_MspInit+0x108>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d132      	bne.n	8000576 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000510:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <HAL_UART_MspInit+0x10c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a39      	ldr	r2, [pc, #228]	; (80005fc <HAL_UART_MspInit+0x10c>)
 8000516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b37      	ldr	r3, [pc, #220]	; (80005fc <HAL_UART_MspInit+0x10c>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b34      	ldr	r3, [pc, #208]	; (80005fc <HAL_UART_MspInit+0x10c>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a33      	ldr	r2, [pc, #204]	; (80005fc <HAL_UART_MspInit+0x10c>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b31      	ldr	r3, [pc, #196]	; (80005fc <HAL_UART_MspInit+0x10c>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000546:	2302      	movs	r3, #2
 8000548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054a:	2303      	movs	r3, #3
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	4619      	mov	r1, r3
 8000554:	482a      	ldr	r0, [pc, #168]	; (8000600 <HAL_UART_MspInit+0x110>)
 8000556:	f000 fb45 	bl	8000be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800055a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800055e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	f107 0318 	add.w	r3, r7, #24
 800056c:	4619      	mov	r1, r3
 800056e:	4824      	ldr	r0, [pc, #144]	; (8000600 <HAL_UART_MspInit+0x110>)
 8000570:	f000 fb38 	bl	8000be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000574:	e03c      	b.n	80005f0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a22      	ldr	r2, [pc, #136]	; (8000604 <HAL_UART_MspInit+0x114>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d137      	bne.n	80005f0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <HAL_UART_MspInit+0x10c>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4a1d      	ldr	r2, [pc, #116]	; (80005fc <HAL_UART_MspInit+0x10c>)
 8000586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058a:	61d3      	str	r3, [r2, #28]
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <HAL_UART_MspInit+0x10c>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <HAL_UART_MspInit+0x10c>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a17      	ldr	r2, [pc, #92]	; (80005fc <HAL_UART_MspInit+0x10c>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_UART_MspInit+0x10c>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0304 	and.w	r3, r3, #4
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005b0:	2304      	movs	r3, #4
 80005b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b8:	2303      	movs	r3, #3
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f107 0318 	add.w	r3, r7, #24
 80005c0:	4619      	mov	r1, r3
 80005c2:	480f      	ldr	r0, [pc, #60]	; (8000600 <HAL_UART_MspInit+0x110>)
 80005c4:	f000 fb0e 	bl	8000be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005c8:	2308      	movs	r3, #8
 80005ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0318 	add.w	r3, r7, #24
 80005d8:	4619      	mov	r1, r3
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <HAL_UART_MspInit+0x110>)
 80005dc:	f000 fb02 	bl	8000be4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2100      	movs	r1, #0
 80005e4:	2026      	movs	r0, #38	; 0x26
 80005e6:	f000 fa50 	bl	8000a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005ea:	2026      	movs	r0, #38	; 0x26
 80005ec:	f000 fa69 	bl	8000ac2 <HAL_NVIC_EnableIRQ>
}
 80005f0:	bf00      	nop
 80005f2:	3728      	adds	r7, #40	; 0x28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40013800 	.word	0x40013800
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010800 	.word	0x40010800
 8000604:	40004400 	.word	0x40004400

08000608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <HardFault_Handler+0x4>

0800061a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800061e:	e7fe      	b.n	800061e <MemManage_Handler+0x4>

08000620 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <BusFault_Handler+0x4>

08000626 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <UsageFault_Handler+0x4>

0800062c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000654:	f000 f926 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <USART2_IRQHandler+0x10>)
 8000662:	f001 f9d9 	bl	8001a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200000d8 	.word	0x200000d8

08000670 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e00a      	b.n	8000698 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000682:	f3af 8000 	nop.w
 8000686:	4601      	mov	r1, r0
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	60ba      	str	r2, [r7, #8]
 800068e:	b2ca      	uxtb	r2, r1
 8000690:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3301      	adds	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	429a      	cmp	r2, r3
 800069e:	dbf0      	blt.n	8000682 <_read+0x12>
	}

return len;
 80006a0:	687b      	ldr	r3, [r7, #4]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <_close>:
	}
	return len;
}

int _close(int file)
{
 80006aa:	b480      	push	{r7}
 80006ac:	b083      	sub	sp, #12
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
	return -1;
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006d0:	605a      	str	r2, [r3, #4]
	return 0;
 80006d2:	2300      	movs	r3, #0
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <_isatty>:

int _isatty(int file)
{
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
	return 1;
 80006e6:	2301      	movs	r3, #1
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b085      	sub	sp, #20
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	60f8      	str	r0, [r7, #12]
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
	return 0;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
	...

0800070c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <_sbrk+0x50>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <_sbrk+0x16>
		heap_end = &end;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <_sbrk+0x50>)
 800071e:	4a10      	ldr	r2, [pc, #64]	; (8000760 <_sbrk+0x54>)
 8000720:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <_sbrk+0x50>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <_sbrk+0x50>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	466a      	mov	r2, sp
 8000732:	4293      	cmp	r3, r2
 8000734:	d907      	bls.n	8000746 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000736:	f001 fcc9 	bl	80020cc <__errno>
 800073a:	4602      	mov	r2, r0
 800073c:	230c      	movs	r3, #12
 800073e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	e006      	b.n	8000754 <_sbrk+0x48>
	}

	heap_end += incr;
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <_sbrk+0x50>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	4a03      	ldr	r2, [pc, #12]	; (800075c <_sbrk+0x50>)
 8000750:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000752:	68fb      	ldr	r3, [r7, #12]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000008c 	.word	0x2000008c
 8000760:	20000120 	.word	0x20000120

08000764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <SystemInit+0x5c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <SystemInit+0x5c>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <SystemInit+0x5c>)
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	4911      	ldr	r1, [pc, #68]	; (80007c0 <SystemInit+0x5c>)
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <SystemInit+0x60>)
 800077c:	4013      	ands	r3, r2
 800077e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <SystemInit+0x5c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <SystemInit+0x5c>)
 8000786:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800078a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800078e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <SystemInit+0x5c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <SystemInit+0x5c>)
 8000796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800079a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <SystemInit+0x5c>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <SystemInit+0x5c>)
 80007a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <SystemInit+0x5c>)
 80007aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <SystemInit+0x64>)
 80007b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	40021000 	.word	0x40021000
 80007c4:	f8ff0000 	.word	0xf8ff0000
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007ce:	e003      	b.n	80007d8 <LoopCopyDataInit>

080007d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007d6:	3104      	adds	r1, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007e0:	d3f6      	bcc.n	80007d0 <CopyDataInit>
  ldr r2, =_sbss
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007e4:	e002      	b.n	80007ec <LoopFillZerobss>

080007e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007e8:	f842 3b04 	str.w	r3, [r2], #4

080007ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007f0:	d3f9      	bcc.n	80007e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007f2:	f7ff ffb7 	bl	8000764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f6:	f001 fc6f 	bl	80020d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fa:	f7ff fcd9 	bl	80001b0 <main>
  bx lr
 80007fe:	4770      	bx	lr
  ldr r3, =_sidata
 8000800:	080030f8 	.word	0x080030f8
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000808:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800080c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000810:	20000120 	.word	0x20000120

08000814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_2_IRQHandler>
	...

08000818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_Init+0x28>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a07      	ldr	r2, [pc, #28]	; (8000840 <HAL_Init+0x28>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000828:	2003      	movs	r0, #3
 800082a:	f000 f923 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082e:	2000      	movs	r0, #0
 8000830:	f000 f808 	bl	8000844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000834:	f7ff fe2a 	bl	800048c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40022000 	.word	0x40022000

08000844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x54>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_InitTick+0x58>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085a:	fbb3 f3f1 	udiv	r3, r3, r1
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f93b 	bl	8000ade <HAL_SYSTICK_Config>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e00e      	b.n	8000890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d80a      	bhi.n	800088e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f000 f903 	bl	8000a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <HAL_InitTick+0x5c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000000 	.word	0x20000000
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000004 	.word	0x20000004

080008a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x1c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_IncTick+0x20>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a03      	ldr	r2, [pc, #12]	; (80008c4 <HAL_IncTick+0x20>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000118 	.word	0x20000118

080008c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return uwTick;
 80008cc:	4b02      	ldr	r3, [pc, #8]	; (80008d8 <HAL_GetTick+0x10>)
 80008ce:	681b      	ldr	r3, [r3, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	20000118 	.word	0x20000118

080008dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <__NVIC_GetPriorityGrouping+0x18>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 0307 	and.w	r3, r3, #7
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	2b00      	cmp	r3, #0
 8000950:	db0b      	blt.n	800096a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	f003 021f 	and.w	r2, r3, #31
 8000958:	4906      	ldr	r1, [pc, #24]	; (8000974 <__NVIC_EnableIRQ+0x34>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	095b      	lsrs	r3, r3, #5
 8000960:	2001      	movs	r0, #1
 8000962:	fa00 f202 	lsl.w	r2, r0, r2
 8000966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100

08000978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	db0a      	blt.n	80009a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	490c      	ldr	r1, [pc, #48]	; (80009c4 <__NVIC_SetPriority+0x4c>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a0:	e00a      	b.n	80009b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4908      	ldr	r1, [pc, #32]	; (80009c8 <__NVIC_SetPriority+0x50>)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	3b04      	subs	r3, #4
 80009b0:	0112      	lsls	r2, r2, #4
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	440b      	add	r3, r1
 80009b6:	761a      	strb	r2, [r3, #24]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b089      	sub	sp, #36	; 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f1c3 0307 	rsb	r3, r3, #7
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	bf28      	it	cs
 80009ea:	2304      	movcs	r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3304      	adds	r3, #4
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d902      	bls.n	80009fc <NVIC_EncodePriority+0x30>
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3b03      	subs	r3, #3
 80009fa:	e000      	b.n	80009fe <NVIC_EncodePriority+0x32>
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43da      	mvns	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43d9      	mvns	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	4313      	orrs	r3, r2
         );
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3724      	adds	r7, #36	; 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a40:	d301      	bcc.n	8000a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00f      	b.n	8000a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <SysTick_Config+0x40>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4e:	210f      	movs	r1, #15
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f7ff ff90 	bl	8000978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <SysTick_Config+0x40>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <SysTick_Config+0x40>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff2d 	bl	80008dc <__NVIC_SetPriorityGrouping>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a9c:	f7ff ff42 	bl	8000924 <__NVIC_GetPriorityGrouping>
 8000aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	68b9      	ldr	r1, [r7, #8]
 8000aa6:	6978      	ldr	r0, [r7, #20]
 8000aa8:	f7ff ff90 	bl	80009cc <NVIC_EncodePriority>
 8000aac:	4602      	mov	r2, r0
 8000aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff5f 	bl	8000978 <__NVIC_SetPriority>
}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff35 	bl	8000940 <__NVIC_EnableIRQ>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffa2 	bl	8000a30 <SysTick_Config>
 8000aec:	4603      	mov	r3, r0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d005      	beq.n	8000b1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2204      	movs	r2, #4
 8000b12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	e051      	b.n	8000bbe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f022 020e 	bic.w	r2, r2, #14
 8000b28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0201 	bic.w	r2, r2, #1
 8000b38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <HAL_DMA_Abort_IT+0xd0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d029      	beq.n	8000b98 <HAL_DMA_Abort_IT+0xa0>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <HAL_DMA_Abort_IT+0xd4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d022      	beq.n	8000b94 <HAL_DMA_Abort_IT+0x9c>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <HAL_DMA_Abort_IT+0xd8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d01a      	beq.n	8000b8e <HAL_DMA_Abort_IT+0x96>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <HAL_DMA_Abort_IT+0xdc>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d012      	beq.n	8000b88 <HAL_DMA_Abort_IT+0x90>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <HAL_DMA_Abort_IT+0xe0>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d00a      	beq.n	8000b82 <HAL_DMA_Abort_IT+0x8a>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1a      	ldr	r2, [pc, #104]	; (8000bdc <HAL_DMA_Abort_IT+0xe4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d102      	bne.n	8000b7c <HAL_DMA_Abort_IT+0x84>
 8000b76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b7a:	e00e      	b.n	8000b9a <HAL_DMA_Abort_IT+0xa2>
 8000b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b80:	e00b      	b.n	8000b9a <HAL_DMA_Abort_IT+0xa2>
 8000b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b86:	e008      	b.n	8000b9a <HAL_DMA_Abort_IT+0xa2>
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	e005      	b.n	8000b9a <HAL_DMA_Abort_IT+0xa2>
 8000b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b92:	e002      	b.n	8000b9a <HAL_DMA_Abort_IT+0xa2>
 8000b94:	2310      	movs	r3, #16
 8000b96:	e000      	b.n	8000b9a <HAL_DMA_Abort_IT+0xa2>
 8000b98:	2301      	movs	r3, #1
 8000b9a:	4a11      	ldr	r2, [pc, #68]	; (8000be0 <HAL_DMA_Abort_IT+0xe8>)
 8000b9c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	4798      	blx	r3
    } 
  }
  return status;
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40020008 	.word	0x40020008
 8000bcc:	4002001c 	.word	0x4002001c
 8000bd0:	40020030 	.word	0x40020030
 8000bd4:	40020044 	.word	0x40020044
 8000bd8:	40020058 	.word	0x40020058
 8000bdc:	4002006c 	.word	0x4002006c
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b08b      	sub	sp, #44	; 0x2c
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf6:	e127      	b.n	8000e48 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f040 8116 	bne.w	8000e42 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b12      	cmp	r3, #18
 8000c1c:	d034      	beq.n	8000c88 <HAL_GPIO_Init+0xa4>
 8000c1e:	2b12      	cmp	r3, #18
 8000c20:	d80d      	bhi.n	8000c3e <HAL_GPIO_Init+0x5a>
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d02b      	beq.n	8000c7e <HAL_GPIO_Init+0x9a>
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d804      	bhi.n	8000c34 <HAL_GPIO_Init+0x50>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d031      	beq.n	8000c92 <HAL_GPIO_Init+0xae>
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d01c      	beq.n	8000c6c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c32:	e048      	b.n	8000cc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d043      	beq.n	8000cc0 <HAL_GPIO_Init+0xdc>
 8000c38:	2b11      	cmp	r3, #17
 8000c3a:	d01b      	beq.n	8000c74 <HAL_GPIO_Init+0x90>
          break;
 8000c3c:	e043      	b.n	8000cc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c3e:	4a89      	ldr	r2, [pc, #548]	; (8000e64 <HAL_GPIO_Init+0x280>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d026      	beq.n	8000c92 <HAL_GPIO_Init+0xae>
 8000c44:	4a87      	ldr	r2, [pc, #540]	; (8000e64 <HAL_GPIO_Init+0x280>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d806      	bhi.n	8000c58 <HAL_GPIO_Init+0x74>
 8000c4a:	4a87      	ldr	r2, [pc, #540]	; (8000e68 <HAL_GPIO_Init+0x284>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d020      	beq.n	8000c92 <HAL_GPIO_Init+0xae>
 8000c50:	4a86      	ldr	r2, [pc, #536]	; (8000e6c <HAL_GPIO_Init+0x288>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d01d      	beq.n	8000c92 <HAL_GPIO_Init+0xae>
          break;
 8000c56:	e036      	b.n	8000cc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c58:	4a85      	ldr	r2, [pc, #532]	; (8000e70 <HAL_GPIO_Init+0x28c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d019      	beq.n	8000c92 <HAL_GPIO_Init+0xae>
 8000c5e:	4a85      	ldr	r2, [pc, #532]	; (8000e74 <HAL_GPIO_Init+0x290>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d016      	beq.n	8000c92 <HAL_GPIO_Init+0xae>
 8000c64:	4a84      	ldr	r2, [pc, #528]	; (8000e78 <HAL_GPIO_Init+0x294>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d013      	beq.n	8000c92 <HAL_GPIO_Init+0xae>
          break;
 8000c6a:	e02c      	b.n	8000cc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e028      	b.n	8000cc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	e023      	b.n	8000cc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	3308      	adds	r3, #8
 8000c84:	623b      	str	r3, [r7, #32]
          break;
 8000c86:	e01e      	b.n	8000cc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	330c      	adds	r3, #12
 8000c8e:	623b      	str	r3, [r7, #32]
          break;
 8000c90:	e019      	b.n	8000cc6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d102      	bne.n	8000ca0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	623b      	str	r3, [r7, #32]
          break;
 8000c9e:	e012      	b.n	8000cc6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d105      	bne.n	8000cb4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69fa      	ldr	r2, [r7, #28]
 8000cb0:	611a      	str	r2, [r3, #16]
          break;
 8000cb2:	e008      	b.n	8000cc6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69fa      	ldr	r2, [r7, #28]
 8000cbc:	615a      	str	r2, [r3, #20]
          break;
 8000cbe:	e002      	b.n	8000cc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
          break;
 8000cc4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	2bff      	cmp	r3, #255	; 0xff
 8000cca:	d801      	bhi.n	8000cd0 <HAL_GPIO_Init+0xec>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	e001      	b.n	8000cd4 <HAL_GPIO_Init+0xf0>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	2bff      	cmp	r3, #255	; 0xff
 8000cda:	d802      	bhi.n	8000ce2 <HAL_GPIO_Init+0xfe>
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	e002      	b.n	8000ce8 <HAL_GPIO_Init+0x104>
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	3b08      	subs	r3, #8
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	210f      	movs	r1, #15
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	6a39      	ldr	r1, [r7, #32]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	431a      	orrs	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 8096 	beq.w	8000e42 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d16:	4b59      	ldr	r3, [pc, #356]	; (8000e7c <HAL_GPIO_Init+0x298>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a58      	ldr	r2, [pc, #352]	; (8000e7c <HAL_GPIO_Init+0x298>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b56      	ldr	r3, [pc, #344]	; (8000e7c <HAL_GPIO_Init+0x298>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d2e:	4a54      	ldr	r2, [pc, #336]	; (8000e80 <HAL_GPIO_Init+0x29c>)
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	3302      	adds	r3, #2
 8000d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	220f      	movs	r2, #15
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a4b      	ldr	r2, [pc, #300]	; (8000e84 <HAL_GPIO_Init+0x2a0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d013      	beq.n	8000d82 <HAL_GPIO_Init+0x19e>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a4a      	ldr	r2, [pc, #296]	; (8000e88 <HAL_GPIO_Init+0x2a4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d00d      	beq.n	8000d7e <HAL_GPIO_Init+0x19a>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a49      	ldr	r2, [pc, #292]	; (8000e8c <HAL_GPIO_Init+0x2a8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d007      	beq.n	8000d7a <HAL_GPIO_Init+0x196>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a48      	ldr	r2, [pc, #288]	; (8000e90 <HAL_GPIO_Init+0x2ac>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_GPIO_Init+0x192>
 8000d72:	2303      	movs	r3, #3
 8000d74:	e006      	b.n	8000d84 <HAL_GPIO_Init+0x1a0>
 8000d76:	2304      	movs	r3, #4
 8000d78:	e004      	b.n	8000d84 <HAL_GPIO_Init+0x1a0>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e002      	b.n	8000d84 <HAL_GPIO_Init+0x1a0>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <HAL_GPIO_Init+0x1a0>
 8000d82:	2300      	movs	r3, #0
 8000d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d86:	f002 0203 	and.w	r2, r2, #3
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	4093      	lsls	r3, r2
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d94:	493a      	ldr	r1, [pc, #232]	; (8000e80 <HAL_GPIO_Init+0x29c>)
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d006      	beq.n	8000dbc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	4938      	ldr	r1, [pc, #224]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	600b      	str	r3, [r1, #0]
 8000dba:	e006      	b.n	8000dca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dbc:	4b35      	ldr	r3, [pc, #212]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	4933      	ldr	r1, [pc, #204]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d006      	beq.n	8000de4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	492e      	ldr	r1, [pc, #184]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	604b      	str	r3, [r1, #4]
 8000de2:	e006      	b.n	8000df2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	4929      	ldr	r1, [pc, #164]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d006      	beq.n	8000e0c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	4924      	ldr	r1, [pc, #144]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	608b      	str	r3, [r1, #8]
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	491f      	ldr	r1, [pc, #124]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d006      	beq.n	8000e34 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	491a      	ldr	r1, [pc, #104]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60cb      	str	r3, [r1, #12]
 8000e32:	e006      	b.n	8000e42 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	4915      	ldr	r1, [pc, #84]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	3301      	adds	r3, #1
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f47f aed0 	bne.w	8000bf8 <HAL_GPIO_Init+0x14>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	372c      	adds	r7, #44	; 0x2c
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	10210000 	.word	0x10210000
 8000e68:	10110000 	.word	0x10110000
 8000e6c:	10120000 	.word	0x10120000
 8000e70:	10310000 	.word	0x10310000
 8000e74:	10320000 	.word	0x10320000
 8000e78:	10220000 	.word	0x10220000
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010000 	.word	0x40010000
 8000e84:	40010800 	.word	0x40010800
 8000e88:	40010c00 	.word	0x40010c00
 8000e8c:	40011000 	.word	0x40011000
 8000e90:	40011400 	.word	0x40011400
 8000e94:	40010400 	.word	0x40010400

08000e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eb4:	e003      	b.n	8000ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	041a      	lsls	r2, r3, #16
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	611a      	str	r2, [r3, #16]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e26c      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8087 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee8:	4b92      	ldr	r3, [pc, #584]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d00c      	beq.n	8000f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef4:	4b8f      	ldr	r3, [pc, #572]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 030c 	and.w	r3, r3, #12
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d112      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
 8000f00:	4b8c      	ldr	r3, [pc, #560]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0c:	d10b      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0e:	4b89      	ldr	r3, [pc, #548]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d06c      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x12c>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d168      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e246      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_OscConfig+0x76>
 8000f30:	4b80      	ldr	r3, [pc, #512]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a7f      	ldr	r2, [pc, #508]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	e02e      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x98>
 8000f46:	4b7b      	ldr	r3, [pc, #492]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a7a      	ldr	r2, [pc, #488]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b78      	ldr	r3, [pc, #480]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a77      	ldr	r2, [pc, #476]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e01d      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0xbc>
 8000f6a:	4b72      	ldr	r3, [pc, #456]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a71      	ldr	r2, [pc, #452]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b6f      	ldr	r3, [pc, #444]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a6e      	ldr	r2, [pc, #440]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e00b      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f84:	4b6b      	ldr	r3, [pc, #428]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a6a      	ldr	r2, [pc, #424]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b68      	ldr	r3, [pc, #416]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a67      	ldr	r2, [pc, #412]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d013      	beq.n	8000fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fc90 	bl	80008c8 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fc8c 	bl	80008c8 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	; 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e1fa      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f0      	beq.n	8000fac <HAL_RCC_OscConfig+0xe4>
 8000fca:	e014      	b.n	8000ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fc7c 	bl	80008c8 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd4:	f7ff fc78 	bl	80008c8 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b64      	cmp	r3, #100	; 0x64
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e1e6      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	4b53      	ldr	r3, [pc, #332]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x10c>
 8000ff2:	e000      	b.n	8000ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d063      	beq.n	80010ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001002:	4b4c      	ldr	r3, [pc, #304]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800100e:	4b49      	ldr	r3, [pc, #292]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b08      	cmp	r3, #8
 8001018:	d11c      	bne.n	8001054 <HAL_RCC_OscConfig+0x18c>
 800101a:	4b46      	ldr	r3, [pc, #280]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d116      	bne.n	8001054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001026:	4b43      	ldr	r3, [pc, #268]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <HAL_RCC_OscConfig+0x176>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d001      	beq.n	800103e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e1ba      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4939      	ldr	r1, [pc, #228]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800104e:	4313      	orrs	r3, r2
 8001050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	e03a      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d020      	beq.n	800109e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800105c:	4b36      	ldr	r3, [pc, #216]	; (8001138 <HAL_RCC_OscConfig+0x270>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001062:	f7ff fc31 	bl	80008c8 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106a:	f7ff fc2d 	bl	80008c8 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e19b      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001088:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4927      	ldr	r1, [pc, #156]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001098:	4313      	orrs	r3, r2
 800109a:	600b      	str	r3, [r1, #0]
 800109c:	e015      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_RCC_OscConfig+0x270>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc10 	bl	80008c8 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ac:	f7ff fc0c 	bl	80008c8 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e17a      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d03a      	beq.n	800114c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d019      	beq.n	8001112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_RCC_OscConfig+0x274>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e4:	f7ff fbf0 	bl	80008c8 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ec:	f7ff fbec 	bl	80008c8 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e15a      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f000 fada 	bl	80016c4 <RCC_Delay>
 8001110:	e01c      	b.n	800114c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_RCC_OscConfig+0x274>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001118:	f7ff fbd6 	bl	80008c8 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111e:	e00f      	b.n	8001140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff fbd2 	bl	80008c8 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d908      	bls.n	8001140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e140      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	42420000 	.word	0x42420000
 800113c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001140:	4b9e      	ldr	r3, [pc, #632]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e9      	bne.n	8001120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80a6 	beq.w	80012a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115e:	4b97      	ldr	r3, [pc, #604]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10d      	bne.n	8001186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b94      	ldr	r3, [pc, #592]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a93      	ldr	r2, [pc, #588]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b91      	ldr	r3, [pc, #580]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001182:	2301      	movs	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001186:	4b8e      	ldr	r3, [pc, #568]	; (80013c0 <HAL_RCC_OscConfig+0x4f8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	2b00      	cmp	r3, #0
 8001190:	d118      	bne.n	80011c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001192:	4b8b      	ldr	r3, [pc, #556]	; (80013c0 <HAL_RCC_OscConfig+0x4f8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a8a      	ldr	r2, [pc, #552]	; (80013c0 <HAL_RCC_OscConfig+0x4f8>)
 8001198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800119e:	f7ff fb93 	bl	80008c8 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a6:	f7ff fb8f 	bl	80008c8 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b64      	cmp	r3, #100	; 0x64
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e0fd      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b8:	4b81      	ldr	r3, [pc, #516]	; (80013c0 <HAL_RCC_OscConfig+0x4f8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x312>
 80011cc:	4b7b      	ldr	r3, [pc, #492]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4a7a      	ldr	r2, [pc, #488]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6213      	str	r3, [r2, #32]
 80011d8:	e02d      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x334>
 80011e2:	4b76      	ldr	r3, [pc, #472]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a75      	ldr	r2, [pc, #468]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	4b73      	ldr	r3, [pc, #460]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a72      	ldr	r2, [pc, #456]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80011f4:	f023 0304 	bic.w	r3, r3, #4
 80011f8:	6213      	str	r3, [r2, #32]
 80011fa:	e01c      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d10c      	bne.n	800121e <HAL_RCC_OscConfig+0x356>
 8001204:	4b6d      	ldr	r3, [pc, #436]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4a6c      	ldr	r2, [pc, #432]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6213      	str	r3, [r2, #32]
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4a69      	ldr	r2, [pc, #420]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6213      	str	r3, [r2, #32]
 800121c:	e00b      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 800121e:	4b67      	ldr	r3, [pc, #412]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a66      	ldr	r2, [pc, #408]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	4b64      	ldr	r3, [pc, #400]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a63      	ldr	r2, [pc, #396]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001230:	f023 0304 	bic.w	r3, r3, #4
 8001234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d015      	beq.n	800126a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff fb43 	bl	80008c8 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001244:	e00a      	b.n	800125c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff fb3f 	bl	80008c8 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f241 3288 	movw	r2, #5000	; 0x1388
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e0ab      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125c:	4b57      	ldr	r3, [pc, #348]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0ee      	beq.n	8001246 <HAL_RCC_OscConfig+0x37e>
 8001268:	e014      	b.n	8001294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fb2d 	bl	80008c8 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff fb29 	bl	80008c8 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e095      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001288:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1ee      	bne.n	8001272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d105      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129a:	4b48      	ldr	r3, [pc, #288]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a47      	ldr	r2, [pc, #284]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8081 	beq.w	80013b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b0:	4b42      	ldr	r3, [pc, #264]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d061      	beq.n	8001380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d146      	bne.n	8001352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c4:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <HAL_RCC_OscConfig+0x4fc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fafd 	bl	80008c8 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff faf9 	bl	80008c8 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e067      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f8:	d108      	bne.n	800130c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	492d      	ldr	r1, [pc, #180]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130c:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a19      	ldr	r1, [r3, #32]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	430b      	orrs	r3, r1
 800131e:	4927      	ldr	r1, [pc, #156]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <HAL_RCC_OscConfig+0x4fc>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff facd 	bl	80008c8 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001332:	f7ff fac9 	bl	80008c8 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e037      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x46a>
 8001350:	e02f      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <HAL_RCC_OscConfig+0x4fc>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fab6 	bl	80008c8 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fab2 	bl	80008c8 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e020      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x498>
 800137e:	e018      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e013      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	429a      	cmp	r2, r3
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40007000 	.word	0x40007000
 80013c4:	42420060 	.word	0x42420060

080013c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0d0      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d910      	bls.n	800140c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b67      	ldr	r3, [pc, #412]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 0207 	bic.w	r2, r3, #7
 80013f2:	4965      	ldr	r1, [pc, #404]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b63      	ldr	r3, [pc, #396]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0b8      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001424:	4b59      	ldr	r3, [pc, #356]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4a58      	ldr	r2, [pc, #352]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800142e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4a52      	ldr	r2, [pc, #328]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001446:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001448:	4b50      	ldr	r3, [pc, #320]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	494d      	ldr	r1, [pc, #308]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d040      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d115      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e07f      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001486:	4b41      	ldr	r3, [pc, #260]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e073      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e06b      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f023 0203 	bic.w	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4936      	ldr	r1, [pc, #216]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b8:	f7ff fa06 	bl	80008c8 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c0:	f7ff fa02 	bl	80008c8 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e053      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 020c 	and.w	r2, r3, #12
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d1eb      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014e8:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d210      	bcs.n	8001518 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 0207 	bic.w	r2, r3, #7
 80014fe:	4922      	ldr	r1, [pc, #136]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	4313      	orrs	r3, r2
 8001504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e032      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4916      	ldr	r1, [pc, #88]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	490e      	ldr	r1, [pc, #56]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001552:	4313      	orrs	r3, r2
 8001554:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001556:	f000 f821 	bl	800159c <HAL_RCC_GetSysClockFreq>
 800155a:	4601      	mov	r1, r0
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_RCC_ClockConfig+0x1c8>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	fa21 f303 	lsr.w	r3, r1, r3
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_RCC_ClockConfig+0x1cc>)
 8001570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1d0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f964 	bl	8000844 <HAL_InitTick>

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40022000 	.word	0x40022000
 800158c:	40021000 	.word	0x40021000
 8001590:	08003040 	.word	0x08003040
 8001594:	20000000 	.word	0x20000000
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800159c:	b490      	push	{r4, r7}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_RCC_GetSysClockFreq+0xb0>)
 80015a4:	1d3c      	adds	r4, r7, #4
 80015a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d002      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0x40>
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d003      	beq.n	80015e2 <HAL_RCC_GetSysClockFreq+0x46>
 80015da:	e02d      	b.n	8001638 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015de:	623b      	str	r3, [r7, #32]
      break;
 80015e0:	e02d      	b.n	800163e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	0c9b      	lsrs	r3, r3, #18
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ee:	4413      	add	r3, r2
 80015f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d013      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	0c5b      	lsrs	r3, r3, #17
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800160e:	4413      	add	r3, r2
 8001610:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001614:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800161a:	fb02 f203 	mul.w	r2, r2, r3
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	fbb2 f3f3 	udiv	r3, r2, r3
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
 8001626:	e004      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	4a0c      	ldr	r2, [pc, #48]	; (800165c <HAL_RCC_GetSysClockFreq+0xc0>)
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	623b      	str	r3, [r7, #32]
      break;
 8001636:	e002      	b.n	800163e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800163a:	623b      	str	r3, [r7, #32]
      break;
 800163c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800163e:	6a3b      	ldr	r3, [r7, #32]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bc90      	pop	{r4, r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	0800302c 	.word	0x0800302c
 8001650:	0800303c 	.word	0x0800303c
 8001654:	40021000 	.word	0x40021000
 8001658:	007a1200 	.word	0x007a1200
 800165c:	003d0900 	.word	0x003d0900

08001660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001664:	4b02      	ldr	r3, [pc, #8]	; (8001670 <HAL_RCC_GetHCLKFreq+0x10>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	20000000 	.word	0x20000000

08001674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001678:	f7ff fff2 	bl	8001660 <HAL_RCC_GetHCLKFreq>
 800167c:	4601      	mov	r1, r0
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001690:	4618      	mov	r0, r3
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000
 8001698:	08003050 	.word	0x08003050

0800169c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016a0:	f7ff ffde 	bl	8001660 <HAL_RCC_GetHCLKFreq>
 80016a4:	4601      	mov	r1, r0
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	0adb      	lsrs	r3, r3, #11
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	08003050 	.word	0x08003050

080016c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <RCC_Delay+0x34>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <RCC_Delay+0x38>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0a5b      	lsrs	r3, r3, #9
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016e0:	bf00      	nop
  }
  while (Delay --);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1e5a      	subs	r2, r3, #1
 80016e6:	60fa      	str	r2, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f9      	bne.n	80016e0 <RCC_Delay+0x1c>
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000000 	.word	0x20000000
 80016fc:	10624dd3 	.word	0x10624dd3

08001700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e03f      	b.n	8001792 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d106      	bne.n	800172c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7fe fee2 	bl	80004f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2224      	movs	r2, #36	; 0x24
 8001730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fbe7 	bl	8001f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695a      	ldr	r2, [r3, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2220      	movs	r2, #32
 8001784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2220      	movs	r2, #32
 800178c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b088      	sub	sp, #32
 800179e:	af02      	add	r7, sp, #8
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4613      	mov	r3, r2
 80017a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b20      	cmp	r3, #32
 80017b8:	f040 8083 	bne.w	80018c2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <HAL_UART_Transmit+0x2e>
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e07b      	b.n	80018c4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_UART_Transmit+0x40>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e074      	b.n	80018c4 <HAL_UART_Transmit+0x12a>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2221      	movs	r2, #33	; 0x21
 80017ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80017f0:	f7ff f86a 	bl	80008c8 <HAL_GetTick>
 80017f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	88fa      	ldrh	r2, [r7, #6]
 80017fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	88fa      	ldrh	r2, [r7, #6]
 8001800:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001802:	e042      	b.n	800188a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001808:	b29b      	uxth	r3, r3
 800180a:	3b01      	subs	r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800181a:	d122      	bne.n	8001862 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2200      	movs	r2, #0
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 fa0d 	bl	8001c46 <UART_WaitOnFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e046      	b.n	80018c4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001848:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d103      	bne.n	800185a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	3302      	adds	r3, #2
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	e017      	b.n	800188a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	3301      	adds	r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	e013      	b.n	800188a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2200      	movs	r2, #0
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 f9ea 	bl	8001c46 <UART_WaitOnFlagUntilTimeout>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e023      	b.n	80018c4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	60ba      	str	r2, [r7, #8]
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800188e:	b29b      	uxth	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1b7      	bne.n	8001804 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2200      	movs	r2, #0
 800189c:	2140      	movs	r1, #64	; 0x40
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 f9d1 	bl	8001c46 <UART_WaitOnFlagUntilTimeout>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e00a      	b.n	80018c4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2220      	movs	r2, #32
 80018b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80018c2:	2302      	movs	r3, #2
  }
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	4613      	mov	r3, r2
 80018da:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	f040 8090 	bne.w	8001a0e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_UART_Receive+0x2e>
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e088      	b.n	8001a10 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_UART_Receive+0x40>
 8001908:	2302      	movs	r3, #2
 800190a:	e081      	b.n	8001a10 <HAL_UART_Receive+0x144>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2222      	movs	r2, #34	; 0x22
 800191e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001922:	f7fe ffd1 	bl	80008c8 <HAL_GetTick>
 8001926:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	88fa      	ldrh	r2, [r7, #6]
 8001932:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001934:	e05c      	b.n	80019f0 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800193a:	b29b      	uxth	r3, r3
 800193c:	3b01      	subs	r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800194c:	d12b      	bne.n	80019a6 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2200      	movs	r2, #0
 8001956:	2120      	movs	r1, #32
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f974 	bl	8001c46 <UART_WaitOnFlagUntilTimeout>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e053      	b.n	8001a10 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10c      	bne.n	800198e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	b29b      	uxth	r3, r3
 800197c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001980:	b29a      	uxth	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	3302      	adds	r3, #2
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	e030      	b.n	80019f0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	b29b      	uxth	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	b29a      	uxth	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	e024      	b.n	80019f0 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2200      	movs	r2, #0
 80019ae:	2120      	movs	r1, #32
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f948 	bl	8001c46 <UART_WaitOnFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e027      	b.n	8001a10 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d108      	bne.n	80019da <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6859      	ldr	r1, [r3, #4]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	60ba      	str	r2, [r7, #8]
 80019d4:	b2ca      	uxtb	r2, r1
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	e00a      	b.n	80019f0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1c59      	adds	r1, r3, #1
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d19d      	bne.n	8001936 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2220      	movs	r2, #32
 80019fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001a0e:	2302      	movs	r3, #2
  }
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10d      	bne.n	8001a6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_UART_IRQHandler+0x52>
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f9d7 	bl	8001e16 <UART_Receive_IT>
      return;
 8001a68:	e0cc      	b.n	8001c04 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80ab 	beq.w	8001bc8 <HAL_UART_IRQHandler+0x1b0>
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <HAL_UART_IRQHandler+0x70>
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80a0 	beq.w	8001bc8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00a      	beq.n	8001aa8 <HAL_UART_IRQHandler+0x90>
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_UART_IRQHandler+0xb0>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac0:	f043 0202 	orr.w	r2, r3, #2
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00a      	beq.n	8001ae8 <HAL_UART_IRQHandler+0xd0>
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae0:	f043 0204 	orr.w	r2, r3, #4
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00a      	beq.n	8001b08 <HAL_UART_IRQHandler+0xf0>
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b00:	f043 0208 	orr.w	r2, r3, #8
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d078      	beq.n	8001c02 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0320 	and.w	r3, r3, #32
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_UART_IRQHandler+0x112>
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f003 0320 	and.w	r3, r3, #32
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f976 	bl	8001e16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bf14      	ite	ne
 8001b38:	2301      	movne	r3, #1
 8001b3a:	2300      	moveq	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <HAL_UART_IRQHandler+0x13a>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d031      	beq.n	8001bb6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f8c1 	bl	8001cda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d023      	beq.n	8001bae <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d013      	beq.n	8001ba6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b82:	4a22      	ldr	r2, [pc, #136]	; (8001c0c <HAL_UART_IRQHandler+0x1f4>)
 8001b84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe ffb4 	bl	8000af8 <HAL_DMA_Abort_IT>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d016      	beq.n	8001bc4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ba4:	e00e      	b.n	8001bc4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f844 	bl	8001c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bac:	e00a      	b.n	8001bc4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f840 	bl	8001c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bb4:	e006      	b.n	8001bc4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f83c 	bl	8001c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001bc2:	e01e      	b.n	8001c02 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bc4:	bf00      	nop
    return;
 8001bc6:	e01c      	b.n	8001c02 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d008      	beq.n	8001be4 <HAL_UART_IRQHandler+0x1cc>
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f8ad 	bl	8001d3c <UART_Transmit_IT>
    return;
 8001be2:	e00f      	b.n	8001c04 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <HAL_UART_IRQHandler+0x1ec>
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f8f4 	bl	8001de6 <UART_EndTransmit_IT>
    return;
 8001bfe:	bf00      	nop
 8001c00:	e000      	b.n	8001c04 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001c02:	bf00      	nop
  }
}
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	08001d15 	.word	0x08001d15

08001c10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4613      	mov	r3, r2
 8001c54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c56:	e02c      	b.n	8001cb2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5e:	d028      	beq.n	8001cb2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c66:	f7fe fe2f 	bl	80008c8 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d21d      	bcs.n	8001cb2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c84:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e00f      	b.n	8001cd2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	bf0c      	ite	eq
 8001cc2:	2301      	moveq	r3, #1
 8001cc4:	2300      	movne	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d0c3      	beq.n	8001c58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001cf0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0201 	bic.w	r2, r2, #1
 8001d00:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2220      	movs	r2, #32
 8001d06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f7ff ff80 	bl	8001c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b21      	cmp	r3, #33	; 0x21
 8001d4e:	d144      	bne.n	8001dda <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d58:	d11a      	bne.n	8001d90 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d6e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	1c9a      	adds	r2, r3, #2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	621a      	str	r2, [r3, #32]
 8001d82:	e00e      	b.n	8001da2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	621a      	str	r2, [r3, #32]
 8001d8e:	e008      	b.n	8001da2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	1c59      	adds	r1, r3, #1
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6211      	str	r1, [r2, #32]
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4619      	mov	r1, r3
 8001db0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10f      	bne.n	8001dd6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001dda:	2302      	movs	r3, #2
  }
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2220      	movs	r2, #32
 8001e02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ff02 	bl	8001c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b22      	cmp	r3, #34	; 0x22
 8001e28:	d171      	bne.n	8001f0e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e32:	d123      	bne.n	8001e7c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10e      	bne.n	8001e60 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	1c9a      	adds	r2, r3, #2
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e5e:	e029      	b.n	8001eb4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
 8001e7a:	e01b      	b.n	8001eb4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6858      	ldr	r0, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	1c59      	adds	r1, r3, #1
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6291      	str	r1, [r2, #40]	; 0x28
 8001e94:	b2c2      	uxtb	r2, r0
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	e00c      	b.n	8001eb4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	1c58      	adds	r0, r3, #1
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	6288      	str	r0, [r1, #40]	; 0x28
 8001eac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d120      	bne.n	8001f0a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0220 	bic.w	r2, r2, #32
 8001ed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fe8e 	bl	8001c22 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e002      	b.n	8001f10 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e000      	b.n	8001f10 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
  }
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f52:	f023 030c 	bic.w	r3, r3, #12
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	68f9      	ldr	r1, [r7, #12]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <UART_SetConfig+0x1ac>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d14e      	bne.n	800201e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f80:	f7ff fb8c 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8001f84:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009a      	lsls	r2, r3, #2
 8001f90:	441a      	add	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	4a4a      	ldr	r2, [pc, #296]	; (80020c8 <UART_SetConfig+0x1b0>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	0119      	lsls	r1, r3, #4
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	009a      	lsls	r2, r3, #2
 8001fb0:	441a      	add	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fbc:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <UART_SetConfig+0x1b0>)
 8001fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2064      	movs	r0, #100	; 0x64
 8001fc6:	fb00 f303 	mul.w	r3, r0, r3
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	3332      	adds	r3, #50	; 0x32
 8001fd0:	4a3d      	ldr	r2, [pc, #244]	; (80020c8 <UART_SetConfig+0x1b0>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fdc:	4419      	add	r1, r3
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009a      	lsls	r2, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff4:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <UART_SetConfig+0x1b0>)
 8001ff6:	fba3 0302 	umull	r0, r3, r3, r2
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2064      	movs	r0, #100	; 0x64
 8001ffe:	fb00 f303 	mul.w	r3, r0, r3
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	3332      	adds	r3, #50	; 0x32
 8002008:	4a2f      	ldr	r2, [pc, #188]	; (80020c8 <UART_SetConfig+0x1b0>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	f003 020f 	and.w	r2, r3, #15
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	440a      	add	r2, r1
 800201a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800201c:	e04d      	b.n	80020ba <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800201e:	f7ff fb29 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8002022:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	009a      	lsls	r2, r3, #2
 800202e:	441a      	add	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <UART_SetConfig+0x1b0>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	0119      	lsls	r1, r3, #4
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	009a      	lsls	r2, r3, #2
 800204e:	441a      	add	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	fbb2 f2f3 	udiv	r2, r2, r3
 800205a:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <UART_SetConfig+0x1b0>)
 800205c:	fba3 0302 	umull	r0, r3, r3, r2
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	2064      	movs	r0, #100	; 0x64
 8002064:	fb00 f303 	mul.w	r3, r0, r3
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	3332      	adds	r3, #50	; 0x32
 800206e:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <UART_SetConfig+0x1b0>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	095b      	lsrs	r3, r3, #5
 8002076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800207a:	4419      	add	r1, r3
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	009a      	lsls	r2, r3, #2
 8002086:	441a      	add	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <UART_SetConfig+0x1b0>)
 8002094:	fba3 0302 	umull	r0, r3, r3, r2
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	2064      	movs	r0, #100	; 0x64
 800209c:	fb00 f303 	mul.w	r3, r0, r3
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	3332      	adds	r3, #50	; 0x32
 80020a6:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <UART_SetConfig+0x1b0>)
 80020a8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ac:	095b      	lsrs	r3, r3, #5
 80020ae:	f003 020f 	and.w	r2, r3, #15
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	440a      	add	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40013800 	.word	0x40013800
 80020c8:	51eb851f 	.word	0x51eb851f

080020cc <__errno>:
 80020cc:	4b01      	ldr	r3, [pc, #4]	; (80020d4 <__errno+0x8>)
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	2000000c 	.word	0x2000000c

080020d8 <__libc_init_array>:
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	2500      	movs	r5, #0
 80020dc:	4e0c      	ldr	r6, [pc, #48]	; (8002110 <__libc_init_array+0x38>)
 80020de:	4c0d      	ldr	r4, [pc, #52]	; (8002114 <__libc_init_array+0x3c>)
 80020e0:	1ba4      	subs	r4, r4, r6
 80020e2:	10a4      	asrs	r4, r4, #2
 80020e4:	42a5      	cmp	r5, r4
 80020e6:	d109      	bne.n	80020fc <__libc_init_array+0x24>
 80020e8:	f000 ff74 	bl	8002fd4 <_init>
 80020ec:	2500      	movs	r5, #0
 80020ee:	4e0a      	ldr	r6, [pc, #40]	; (8002118 <__libc_init_array+0x40>)
 80020f0:	4c0a      	ldr	r4, [pc, #40]	; (800211c <__libc_init_array+0x44>)
 80020f2:	1ba4      	subs	r4, r4, r6
 80020f4:	10a4      	asrs	r4, r4, #2
 80020f6:	42a5      	cmp	r5, r4
 80020f8:	d105      	bne.n	8002106 <__libc_init_array+0x2e>
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
 80020fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002100:	4798      	blx	r3
 8002102:	3501      	adds	r5, #1
 8002104:	e7ee      	b.n	80020e4 <__libc_init_array+0xc>
 8002106:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800210a:	4798      	blx	r3
 800210c:	3501      	adds	r5, #1
 800210e:	e7f2      	b.n	80020f6 <__libc_init_array+0x1e>
 8002110:	080030f0 	.word	0x080030f0
 8002114:	080030f0 	.word	0x080030f0
 8002118:	080030f0 	.word	0x080030f0
 800211c:	080030f4 	.word	0x080030f4

08002120 <memset>:
 8002120:	4603      	mov	r3, r0
 8002122:	4402      	add	r2, r0
 8002124:	4293      	cmp	r3, r2
 8002126:	d100      	bne.n	800212a <memset+0xa>
 8002128:	4770      	bx	lr
 800212a:	f803 1b01 	strb.w	r1, [r3], #1
 800212e:	e7f9      	b.n	8002124 <memset+0x4>

08002130 <iprintf>:
 8002130:	b40f      	push	{r0, r1, r2, r3}
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <iprintf+0x2c>)
 8002134:	b513      	push	{r0, r1, r4, lr}
 8002136:	681c      	ldr	r4, [r3, #0]
 8002138:	b124      	cbz	r4, 8002144 <iprintf+0x14>
 800213a:	69a3      	ldr	r3, [r4, #24]
 800213c:	b913      	cbnz	r3, 8002144 <iprintf+0x14>
 800213e:	4620      	mov	r0, r4
 8002140:	f000 fa22 	bl	8002588 <__sinit>
 8002144:	ab05      	add	r3, sp, #20
 8002146:	9a04      	ldr	r2, [sp, #16]
 8002148:	68a1      	ldr	r1, [r4, #8]
 800214a:	4620      	mov	r0, r4
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	f000 fbd7 	bl	8002900 <_vfiprintf_r>
 8002152:	b002      	add	sp, #8
 8002154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002158:	b004      	add	sp, #16
 800215a:	4770      	bx	lr
 800215c:	2000000c 	.word	0x2000000c

08002160 <_puts_r>:
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	460e      	mov	r6, r1
 8002164:	4605      	mov	r5, r0
 8002166:	b118      	cbz	r0, 8002170 <_puts_r+0x10>
 8002168:	6983      	ldr	r3, [r0, #24]
 800216a:	b90b      	cbnz	r3, 8002170 <_puts_r+0x10>
 800216c:	f000 fa0c 	bl	8002588 <__sinit>
 8002170:	69ab      	ldr	r3, [r5, #24]
 8002172:	68ac      	ldr	r4, [r5, #8]
 8002174:	b913      	cbnz	r3, 800217c <_puts_r+0x1c>
 8002176:	4628      	mov	r0, r5
 8002178:	f000 fa06 	bl	8002588 <__sinit>
 800217c:	4b23      	ldr	r3, [pc, #140]	; (800220c <_puts_r+0xac>)
 800217e:	429c      	cmp	r4, r3
 8002180:	d117      	bne.n	80021b2 <_puts_r+0x52>
 8002182:	686c      	ldr	r4, [r5, #4]
 8002184:	89a3      	ldrh	r3, [r4, #12]
 8002186:	071b      	lsls	r3, r3, #28
 8002188:	d51d      	bpl.n	80021c6 <_puts_r+0x66>
 800218a:	6923      	ldr	r3, [r4, #16]
 800218c:	b1db      	cbz	r3, 80021c6 <_puts_r+0x66>
 800218e:	3e01      	subs	r6, #1
 8002190:	68a3      	ldr	r3, [r4, #8]
 8002192:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002196:	3b01      	subs	r3, #1
 8002198:	60a3      	str	r3, [r4, #8]
 800219a:	b9e9      	cbnz	r1, 80021d8 <_puts_r+0x78>
 800219c:	2b00      	cmp	r3, #0
 800219e:	da2e      	bge.n	80021fe <_puts_r+0x9e>
 80021a0:	4622      	mov	r2, r4
 80021a2:	210a      	movs	r1, #10
 80021a4:	4628      	mov	r0, r5
 80021a6:	f000 f83f 	bl	8002228 <__swbuf_r>
 80021aa:	3001      	adds	r0, #1
 80021ac:	d011      	beq.n	80021d2 <_puts_r+0x72>
 80021ae:	200a      	movs	r0, #10
 80021b0:	e011      	b.n	80021d6 <_puts_r+0x76>
 80021b2:	4b17      	ldr	r3, [pc, #92]	; (8002210 <_puts_r+0xb0>)
 80021b4:	429c      	cmp	r4, r3
 80021b6:	d101      	bne.n	80021bc <_puts_r+0x5c>
 80021b8:	68ac      	ldr	r4, [r5, #8]
 80021ba:	e7e3      	b.n	8002184 <_puts_r+0x24>
 80021bc:	4b15      	ldr	r3, [pc, #84]	; (8002214 <_puts_r+0xb4>)
 80021be:	429c      	cmp	r4, r3
 80021c0:	bf08      	it	eq
 80021c2:	68ec      	ldreq	r4, [r5, #12]
 80021c4:	e7de      	b.n	8002184 <_puts_r+0x24>
 80021c6:	4621      	mov	r1, r4
 80021c8:	4628      	mov	r0, r5
 80021ca:	f000 f87f 	bl	80022cc <__swsetup_r>
 80021ce:	2800      	cmp	r0, #0
 80021d0:	d0dd      	beq.n	800218e <_puts_r+0x2e>
 80021d2:	f04f 30ff 	mov.w	r0, #4294967295
 80021d6:	bd70      	pop	{r4, r5, r6, pc}
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da04      	bge.n	80021e6 <_puts_r+0x86>
 80021dc:	69a2      	ldr	r2, [r4, #24]
 80021de:	429a      	cmp	r2, r3
 80021e0:	dc06      	bgt.n	80021f0 <_puts_r+0x90>
 80021e2:	290a      	cmp	r1, #10
 80021e4:	d004      	beq.n	80021f0 <_puts_r+0x90>
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	6022      	str	r2, [r4, #0]
 80021ec:	7019      	strb	r1, [r3, #0]
 80021ee:	e7cf      	b.n	8002190 <_puts_r+0x30>
 80021f0:	4622      	mov	r2, r4
 80021f2:	4628      	mov	r0, r5
 80021f4:	f000 f818 	bl	8002228 <__swbuf_r>
 80021f8:	3001      	adds	r0, #1
 80021fa:	d1c9      	bne.n	8002190 <_puts_r+0x30>
 80021fc:	e7e9      	b.n	80021d2 <_puts_r+0x72>
 80021fe:	200a      	movs	r0, #10
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	6022      	str	r2, [r4, #0]
 8002206:	7018      	strb	r0, [r3, #0]
 8002208:	e7e5      	b.n	80021d6 <_puts_r+0x76>
 800220a:	bf00      	nop
 800220c:	0800307c 	.word	0x0800307c
 8002210:	0800309c 	.word	0x0800309c
 8002214:	0800305c 	.word	0x0800305c

08002218 <puts>:
 8002218:	4b02      	ldr	r3, [pc, #8]	; (8002224 <puts+0xc>)
 800221a:	4601      	mov	r1, r0
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	f7ff bf9f 	b.w	8002160 <_puts_r>
 8002222:	bf00      	nop
 8002224:	2000000c 	.word	0x2000000c

08002228 <__swbuf_r>:
 8002228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222a:	460e      	mov	r6, r1
 800222c:	4614      	mov	r4, r2
 800222e:	4605      	mov	r5, r0
 8002230:	b118      	cbz	r0, 800223a <__swbuf_r+0x12>
 8002232:	6983      	ldr	r3, [r0, #24]
 8002234:	b90b      	cbnz	r3, 800223a <__swbuf_r+0x12>
 8002236:	f000 f9a7 	bl	8002588 <__sinit>
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <__swbuf_r+0x98>)
 800223c:	429c      	cmp	r4, r3
 800223e:	d12a      	bne.n	8002296 <__swbuf_r+0x6e>
 8002240:	686c      	ldr	r4, [r5, #4]
 8002242:	69a3      	ldr	r3, [r4, #24]
 8002244:	60a3      	str	r3, [r4, #8]
 8002246:	89a3      	ldrh	r3, [r4, #12]
 8002248:	071a      	lsls	r2, r3, #28
 800224a:	d52e      	bpl.n	80022aa <__swbuf_r+0x82>
 800224c:	6923      	ldr	r3, [r4, #16]
 800224e:	b363      	cbz	r3, 80022aa <__swbuf_r+0x82>
 8002250:	6923      	ldr	r3, [r4, #16]
 8002252:	6820      	ldr	r0, [r4, #0]
 8002254:	b2f6      	uxtb	r6, r6
 8002256:	1ac0      	subs	r0, r0, r3
 8002258:	6963      	ldr	r3, [r4, #20]
 800225a:	4637      	mov	r7, r6
 800225c:	4283      	cmp	r3, r0
 800225e:	dc04      	bgt.n	800226a <__swbuf_r+0x42>
 8002260:	4621      	mov	r1, r4
 8002262:	4628      	mov	r0, r5
 8002264:	f000 f926 	bl	80024b4 <_fflush_r>
 8002268:	bb28      	cbnz	r0, 80022b6 <__swbuf_r+0x8e>
 800226a:	68a3      	ldr	r3, [r4, #8]
 800226c:	3001      	adds	r0, #1
 800226e:	3b01      	subs	r3, #1
 8002270:	60a3      	str	r3, [r4, #8]
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	6022      	str	r2, [r4, #0]
 8002278:	701e      	strb	r6, [r3, #0]
 800227a:	6963      	ldr	r3, [r4, #20]
 800227c:	4283      	cmp	r3, r0
 800227e:	d004      	beq.n	800228a <__swbuf_r+0x62>
 8002280:	89a3      	ldrh	r3, [r4, #12]
 8002282:	07db      	lsls	r3, r3, #31
 8002284:	d519      	bpl.n	80022ba <__swbuf_r+0x92>
 8002286:	2e0a      	cmp	r6, #10
 8002288:	d117      	bne.n	80022ba <__swbuf_r+0x92>
 800228a:	4621      	mov	r1, r4
 800228c:	4628      	mov	r0, r5
 800228e:	f000 f911 	bl	80024b4 <_fflush_r>
 8002292:	b190      	cbz	r0, 80022ba <__swbuf_r+0x92>
 8002294:	e00f      	b.n	80022b6 <__swbuf_r+0x8e>
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <__swbuf_r+0x9c>)
 8002298:	429c      	cmp	r4, r3
 800229a:	d101      	bne.n	80022a0 <__swbuf_r+0x78>
 800229c:	68ac      	ldr	r4, [r5, #8]
 800229e:	e7d0      	b.n	8002242 <__swbuf_r+0x1a>
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <__swbuf_r+0xa0>)
 80022a2:	429c      	cmp	r4, r3
 80022a4:	bf08      	it	eq
 80022a6:	68ec      	ldreq	r4, [r5, #12]
 80022a8:	e7cb      	b.n	8002242 <__swbuf_r+0x1a>
 80022aa:	4621      	mov	r1, r4
 80022ac:	4628      	mov	r0, r5
 80022ae:	f000 f80d 	bl	80022cc <__swsetup_r>
 80022b2:	2800      	cmp	r0, #0
 80022b4:	d0cc      	beq.n	8002250 <__swbuf_r+0x28>
 80022b6:	f04f 37ff 	mov.w	r7, #4294967295
 80022ba:	4638      	mov	r0, r7
 80022bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022be:	bf00      	nop
 80022c0:	0800307c 	.word	0x0800307c
 80022c4:	0800309c 	.word	0x0800309c
 80022c8:	0800305c 	.word	0x0800305c

080022cc <__swsetup_r>:
 80022cc:	4b32      	ldr	r3, [pc, #200]	; (8002398 <__swsetup_r+0xcc>)
 80022ce:	b570      	push	{r4, r5, r6, lr}
 80022d0:	681d      	ldr	r5, [r3, #0]
 80022d2:	4606      	mov	r6, r0
 80022d4:	460c      	mov	r4, r1
 80022d6:	b125      	cbz	r5, 80022e2 <__swsetup_r+0x16>
 80022d8:	69ab      	ldr	r3, [r5, #24]
 80022da:	b913      	cbnz	r3, 80022e2 <__swsetup_r+0x16>
 80022dc:	4628      	mov	r0, r5
 80022de:	f000 f953 	bl	8002588 <__sinit>
 80022e2:	4b2e      	ldr	r3, [pc, #184]	; (800239c <__swsetup_r+0xd0>)
 80022e4:	429c      	cmp	r4, r3
 80022e6:	d10f      	bne.n	8002308 <__swsetup_r+0x3c>
 80022e8:	686c      	ldr	r4, [r5, #4]
 80022ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	0715      	lsls	r5, r2, #28
 80022f2:	d42c      	bmi.n	800234e <__swsetup_r+0x82>
 80022f4:	06d0      	lsls	r0, r2, #27
 80022f6:	d411      	bmi.n	800231c <__swsetup_r+0x50>
 80022f8:	2209      	movs	r2, #9
 80022fa:	6032      	str	r2, [r6, #0]
 80022fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002300:	81a3      	strh	r3, [r4, #12]
 8002302:	f04f 30ff 	mov.w	r0, #4294967295
 8002306:	e03e      	b.n	8002386 <__swsetup_r+0xba>
 8002308:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <__swsetup_r+0xd4>)
 800230a:	429c      	cmp	r4, r3
 800230c:	d101      	bne.n	8002312 <__swsetup_r+0x46>
 800230e:	68ac      	ldr	r4, [r5, #8]
 8002310:	e7eb      	b.n	80022ea <__swsetup_r+0x1e>
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <__swsetup_r+0xd8>)
 8002314:	429c      	cmp	r4, r3
 8002316:	bf08      	it	eq
 8002318:	68ec      	ldreq	r4, [r5, #12]
 800231a:	e7e6      	b.n	80022ea <__swsetup_r+0x1e>
 800231c:	0751      	lsls	r1, r2, #29
 800231e:	d512      	bpl.n	8002346 <__swsetup_r+0x7a>
 8002320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002322:	b141      	cbz	r1, 8002336 <__swsetup_r+0x6a>
 8002324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002328:	4299      	cmp	r1, r3
 800232a:	d002      	beq.n	8002332 <__swsetup_r+0x66>
 800232c:	4630      	mov	r0, r6
 800232e:	f000 fa19 	bl	8002764 <_free_r>
 8002332:	2300      	movs	r3, #0
 8002334:	6363      	str	r3, [r4, #52]	; 0x34
 8002336:	89a3      	ldrh	r3, [r4, #12]
 8002338:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800233c:	81a3      	strh	r3, [r4, #12]
 800233e:	2300      	movs	r3, #0
 8002340:	6063      	str	r3, [r4, #4]
 8002342:	6923      	ldr	r3, [r4, #16]
 8002344:	6023      	str	r3, [r4, #0]
 8002346:	89a3      	ldrh	r3, [r4, #12]
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	81a3      	strh	r3, [r4, #12]
 800234e:	6923      	ldr	r3, [r4, #16]
 8002350:	b94b      	cbnz	r3, 8002366 <__swsetup_r+0x9a>
 8002352:	89a3      	ldrh	r3, [r4, #12]
 8002354:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800235c:	d003      	beq.n	8002366 <__swsetup_r+0x9a>
 800235e:	4621      	mov	r1, r4
 8002360:	4630      	mov	r0, r6
 8002362:	f000 f9bf 	bl	80026e4 <__smakebuf_r>
 8002366:	89a2      	ldrh	r2, [r4, #12]
 8002368:	f012 0301 	ands.w	r3, r2, #1
 800236c:	d00c      	beq.n	8002388 <__swsetup_r+0xbc>
 800236e:	2300      	movs	r3, #0
 8002370:	60a3      	str	r3, [r4, #8]
 8002372:	6963      	ldr	r3, [r4, #20]
 8002374:	425b      	negs	r3, r3
 8002376:	61a3      	str	r3, [r4, #24]
 8002378:	6923      	ldr	r3, [r4, #16]
 800237a:	b953      	cbnz	r3, 8002392 <__swsetup_r+0xc6>
 800237c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002380:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002384:	d1ba      	bne.n	80022fc <__swsetup_r+0x30>
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	0792      	lsls	r2, r2, #30
 800238a:	bf58      	it	pl
 800238c:	6963      	ldrpl	r3, [r4, #20]
 800238e:	60a3      	str	r3, [r4, #8]
 8002390:	e7f2      	b.n	8002378 <__swsetup_r+0xac>
 8002392:	2000      	movs	r0, #0
 8002394:	e7f7      	b.n	8002386 <__swsetup_r+0xba>
 8002396:	bf00      	nop
 8002398:	2000000c 	.word	0x2000000c
 800239c:	0800307c 	.word	0x0800307c
 80023a0:	0800309c 	.word	0x0800309c
 80023a4:	0800305c 	.word	0x0800305c

080023a8 <__sflush_r>:
 80023a8:	898a      	ldrh	r2, [r1, #12]
 80023aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023ae:	4605      	mov	r5, r0
 80023b0:	0710      	lsls	r0, r2, #28
 80023b2:	460c      	mov	r4, r1
 80023b4:	d458      	bmi.n	8002468 <__sflush_r+0xc0>
 80023b6:	684b      	ldr	r3, [r1, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	dc05      	bgt.n	80023c8 <__sflush_r+0x20>
 80023bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	dc02      	bgt.n	80023c8 <__sflush_r+0x20>
 80023c2:	2000      	movs	r0, #0
 80023c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d0f9      	beq.n	80023c2 <__sflush_r+0x1a>
 80023ce:	2300      	movs	r3, #0
 80023d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80023d4:	682f      	ldr	r7, [r5, #0]
 80023d6:	6a21      	ldr	r1, [r4, #32]
 80023d8:	602b      	str	r3, [r5, #0]
 80023da:	d032      	beq.n	8002442 <__sflush_r+0x9a>
 80023dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80023de:	89a3      	ldrh	r3, [r4, #12]
 80023e0:	075a      	lsls	r2, r3, #29
 80023e2:	d505      	bpl.n	80023f0 <__sflush_r+0x48>
 80023e4:	6863      	ldr	r3, [r4, #4]
 80023e6:	1ac0      	subs	r0, r0, r3
 80023e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023ea:	b10b      	cbz	r3, 80023f0 <__sflush_r+0x48>
 80023ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023ee:	1ac0      	subs	r0, r0, r3
 80023f0:	2300      	movs	r3, #0
 80023f2:	4602      	mov	r2, r0
 80023f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023f6:	6a21      	ldr	r1, [r4, #32]
 80023f8:	4628      	mov	r0, r5
 80023fa:	47b0      	blx	r6
 80023fc:	1c43      	adds	r3, r0, #1
 80023fe:	89a3      	ldrh	r3, [r4, #12]
 8002400:	d106      	bne.n	8002410 <__sflush_r+0x68>
 8002402:	6829      	ldr	r1, [r5, #0]
 8002404:	291d      	cmp	r1, #29
 8002406:	d848      	bhi.n	800249a <__sflush_r+0xf2>
 8002408:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <__sflush_r+0x108>)
 800240a:	40ca      	lsrs	r2, r1
 800240c:	07d6      	lsls	r6, r2, #31
 800240e:	d544      	bpl.n	800249a <__sflush_r+0xf2>
 8002410:	2200      	movs	r2, #0
 8002412:	6062      	str	r2, [r4, #4]
 8002414:	6922      	ldr	r2, [r4, #16]
 8002416:	04d9      	lsls	r1, r3, #19
 8002418:	6022      	str	r2, [r4, #0]
 800241a:	d504      	bpl.n	8002426 <__sflush_r+0x7e>
 800241c:	1c42      	adds	r2, r0, #1
 800241e:	d101      	bne.n	8002424 <__sflush_r+0x7c>
 8002420:	682b      	ldr	r3, [r5, #0]
 8002422:	b903      	cbnz	r3, 8002426 <__sflush_r+0x7e>
 8002424:	6560      	str	r0, [r4, #84]	; 0x54
 8002426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002428:	602f      	str	r7, [r5, #0]
 800242a:	2900      	cmp	r1, #0
 800242c:	d0c9      	beq.n	80023c2 <__sflush_r+0x1a>
 800242e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002432:	4299      	cmp	r1, r3
 8002434:	d002      	beq.n	800243c <__sflush_r+0x94>
 8002436:	4628      	mov	r0, r5
 8002438:	f000 f994 	bl	8002764 <_free_r>
 800243c:	2000      	movs	r0, #0
 800243e:	6360      	str	r0, [r4, #52]	; 0x34
 8002440:	e7c0      	b.n	80023c4 <__sflush_r+0x1c>
 8002442:	2301      	movs	r3, #1
 8002444:	4628      	mov	r0, r5
 8002446:	47b0      	blx	r6
 8002448:	1c41      	adds	r1, r0, #1
 800244a:	d1c8      	bne.n	80023de <__sflush_r+0x36>
 800244c:	682b      	ldr	r3, [r5, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0c5      	beq.n	80023de <__sflush_r+0x36>
 8002452:	2b1d      	cmp	r3, #29
 8002454:	d001      	beq.n	800245a <__sflush_r+0xb2>
 8002456:	2b16      	cmp	r3, #22
 8002458:	d101      	bne.n	800245e <__sflush_r+0xb6>
 800245a:	602f      	str	r7, [r5, #0]
 800245c:	e7b1      	b.n	80023c2 <__sflush_r+0x1a>
 800245e:	89a3      	ldrh	r3, [r4, #12]
 8002460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002464:	81a3      	strh	r3, [r4, #12]
 8002466:	e7ad      	b.n	80023c4 <__sflush_r+0x1c>
 8002468:	690f      	ldr	r7, [r1, #16]
 800246a:	2f00      	cmp	r7, #0
 800246c:	d0a9      	beq.n	80023c2 <__sflush_r+0x1a>
 800246e:	0793      	lsls	r3, r2, #30
 8002470:	bf18      	it	ne
 8002472:	2300      	movne	r3, #0
 8002474:	680e      	ldr	r6, [r1, #0]
 8002476:	bf08      	it	eq
 8002478:	694b      	ldreq	r3, [r1, #20]
 800247a:	eba6 0807 	sub.w	r8, r6, r7
 800247e:	600f      	str	r7, [r1, #0]
 8002480:	608b      	str	r3, [r1, #8]
 8002482:	f1b8 0f00 	cmp.w	r8, #0
 8002486:	dd9c      	ble.n	80023c2 <__sflush_r+0x1a>
 8002488:	4643      	mov	r3, r8
 800248a:	463a      	mov	r2, r7
 800248c:	6a21      	ldr	r1, [r4, #32]
 800248e:	4628      	mov	r0, r5
 8002490:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002492:	47b0      	blx	r6
 8002494:	2800      	cmp	r0, #0
 8002496:	dc06      	bgt.n	80024a6 <__sflush_r+0xfe>
 8002498:	89a3      	ldrh	r3, [r4, #12]
 800249a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800249e:	81a3      	strh	r3, [r4, #12]
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	e78e      	b.n	80023c4 <__sflush_r+0x1c>
 80024a6:	4407      	add	r7, r0
 80024a8:	eba8 0800 	sub.w	r8, r8, r0
 80024ac:	e7e9      	b.n	8002482 <__sflush_r+0xda>
 80024ae:	bf00      	nop
 80024b0:	20400001 	.word	0x20400001

080024b4 <_fflush_r>:
 80024b4:	b538      	push	{r3, r4, r5, lr}
 80024b6:	690b      	ldr	r3, [r1, #16]
 80024b8:	4605      	mov	r5, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	b1db      	cbz	r3, 80024f6 <_fflush_r+0x42>
 80024be:	b118      	cbz	r0, 80024c8 <_fflush_r+0x14>
 80024c0:	6983      	ldr	r3, [r0, #24]
 80024c2:	b90b      	cbnz	r3, 80024c8 <_fflush_r+0x14>
 80024c4:	f000 f860 	bl	8002588 <__sinit>
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <_fflush_r+0x48>)
 80024ca:	429c      	cmp	r4, r3
 80024cc:	d109      	bne.n	80024e2 <_fflush_r+0x2e>
 80024ce:	686c      	ldr	r4, [r5, #4]
 80024d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024d4:	b17b      	cbz	r3, 80024f6 <_fflush_r+0x42>
 80024d6:	4621      	mov	r1, r4
 80024d8:	4628      	mov	r0, r5
 80024da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024de:	f7ff bf63 	b.w	80023a8 <__sflush_r>
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <_fflush_r+0x4c>)
 80024e4:	429c      	cmp	r4, r3
 80024e6:	d101      	bne.n	80024ec <_fflush_r+0x38>
 80024e8:	68ac      	ldr	r4, [r5, #8]
 80024ea:	e7f1      	b.n	80024d0 <_fflush_r+0x1c>
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <_fflush_r+0x50>)
 80024ee:	429c      	cmp	r4, r3
 80024f0:	bf08      	it	eq
 80024f2:	68ec      	ldreq	r4, [r5, #12]
 80024f4:	e7ec      	b.n	80024d0 <_fflush_r+0x1c>
 80024f6:	2000      	movs	r0, #0
 80024f8:	bd38      	pop	{r3, r4, r5, pc}
 80024fa:	bf00      	nop
 80024fc:	0800307c 	.word	0x0800307c
 8002500:	0800309c 	.word	0x0800309c
 8002504:	0800305c 	.word	0x0800305c

08002508 <std>:
 8002508:	2300      	movs	r3, #0
 800250a:	b510      	push	{r4, lr}
 800250c:	4604      	mov	r4, r0
 800250e:	e9c0 3300 	strd	r3, r3, [r0]
 8002512:	6083      	str	r3, [r0, #8]
 8002514:	8181      	strh	r1, [r0, #12]
 8002516:	6643      	str	r3, [r0, #100]	; 0x64
 8002518:	81c2      	strh	r2, [r0, #14]
 800251a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800251e:	6183      	str	r3, [r0, #24]
 8002520:	4619      	mov	r1, r3
 8002522:	2208      	movs	r2, #8
 8002524:	305c      	adds	r0, #92	; 0x5c
 8002526:	f7ff fdfb 	bl	8002120 <memset>
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <std+0x38>)
 800252c:	6224      	str	r4, [r4, #32]
 800252e:	6263      	str	r3, [r4, #36]	; 0x24
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <std+0x3c>)
 8002532:	62a3      	str	r3, [r4, #40]	; 0x28
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <std+0x40>)
 8002536:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <std+0x44>)
 800253a:	6323      	str	r3, [r4, #48]	; 0x30
 800253c:	bd10      	pop	{r4, pc}
 800253e:	bf00      	nop
 8002540:	08002e5d 	.word	0x08002e5d
 8002544:	08002e7f 	.word	0x08002e7f
 8002548:	08002eb7 	.word	0x08002eb7
 800254c:	08002edb 	.word	0x08002edb

08002550 <_cleanup_r>:
 8002550:	4901      	ldr	r1, [pc, #4]	; (8002558 <_cleanup_r+0x8>)
 8002552:	f000 b885 	b.w	8002660 <_fwalk_reent>
 8002556:	bf00      	nop
 8002558:	080024b5 	.word	0x080024b5

0800255c <__sfmoreglue>:
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	2568      	movs	r5, #104	; 0x68
 8002560:	1e4a      	subs	r2, r1, #1
 8002562:	4355      	muls	r5, r2
 8002564:	460e      	mov	r6, r1
 8002566:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800256a:	f000 f947 	bl	80027fc <_malloc_r>
 800256e:	4604      	mov	r4, r0
 8002570:	b140      	cbz	r0, 8002584 <__sfmoreglue+0x28>
 8002572:	2100      	movs	r1, #0
 8002574:	e9c0 1600 	strd	r1, r6, [r0]
 8002578:	300c      	adds	r0, #12
 800257a:	60a0      	str	r0, [r4, #8]
 800257c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002580:	f7ff fdce 	bl	8002120 <memset>
 8002584:	4620      	mov	r0, r4
 8002586:	bd70      	pop	{r4, r5, r6, pc}

08002588 <__sinit>:
 8002588:	6983      	ldr	r3, [r0, #24]
 800258a:	b510      	push	{r4, lr}
 800258c:	4604      	mov	r4, r0
 800258e:	bb33      	cbnz	r3, 80025de <__sinit+0x56>
 8002590:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002594:	6503      	str	r3, [r0, #80]	; 0x50
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <__sinit+0x58>)
 8002598:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <__sinit+0x5c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6282      	str	r2, [r0, #40]	; 0x28
 800259e:	4298      	cmp	r0, r3
 80025a0:	bf04      	itt	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	6183      	streq	r3, [r0, #24]
 80025a6:	f000 f81f 	bl	80025e8 <__sfp>
 80025aa:	6060      	str	r0, [r4, #4]
 80025ac:	4620      	mov	r0, r4
 80025ae:	f000 f81b 	bl	80025e8 <__sfp>
 80025b2:	60a0      	str	r0, [r4, #8]
 80025b4:	4620      	mov	r0, r4
 80025b6:	f000 f817 	bl	80025e8 <__sfp>
 80025ba:	2200      	movs	r2, #0
 80025bc:	60e0      	str	r0, [r4, #12]
 80025be:	2104      	movs	r1, #4
 80025c0:	6860      	ldr	r0, [r4, #4]
 80025c2:	f7ff ffa1 	bl	8002508 <std>
 80025c6:	2201      	movs	r2, #1
 80025c8:	2109      	movs	r1, #9
 80025ca:	68a0      	ldr	r0, [r4, #8]
 80025cc:	f7ff ff9c 	bl	8002508 <std>
 80025d0:	2202      	movs	r2, #2
 80025d2:	2112      	movs	r1, #18
 80025d4:	68e0      	ldr	r0, [r4, #12]
 80025d6:	f7ff ff97 	bl	8002508 <std>
 80025da:	2301      	movs	r3, #1
 80025dc:	61a3      	str	r3, [r4, #24]
 80025de:	bd10      	pop	{r4, pc}
 80025e0:	08003058 	.word	0x08003058
 80025e4:	08002551 	.word	0x08002551

080025e8 <__sfp>:
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <__sfp+0x70>)
 80025ec:	4607      	mov	r7, r0
 80025ee:	681e      	ldr	r6, [r3, #0]
 80025f0:	69b3      	ldr	r3, [r6, #24]
 80025f2:	b913      	cbnz	r3, 80025fa <__sfp+0x12>
 80025f4:	4630      	mov	r0, r6
 80025f6:	f7ff ffc7 	bl	8002588 <__sinit>
 80025fa:	3648      	adds	r6, #72	; 0x48
 80025fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002600:	3b01      	subs	r3, #1
 8002602:	d503      	bpl.n	800260c <__sfp+0x24>
 8002604:	6833      	ldr	r3, [r6, #0]
 8002606:	b133      	cbz	r3, 8002616 <__sfp+0x2e>
 8002608:	6836      	ldr	r6, [r6, #0]
 800260a:	e7f7      	b.n	80025fc <__sfp+0x14>
 800260c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002610:	b16d      	cbz	r5, 800262e <__sfp+0x46>
 8002612:	3468      	adds	r4, #104	; 0x68
 8002614:	e7f4      	b.n	8002600 <__sfp+0x18>
 8002616:	2104      	movs	r1, #4
 8002618:	4638      	mov	r0, r7
 800261a:	f7ff ff9f 	bl	800255c <__sfmoreglue>
 800261e:	6030      	str	r0, [r6, #0]
 8002620:	2800      	cmp	r0, #0
 8002622:	d1f1      	bne.n	8002608 <__sfp+0x20>
 8002624:	230c      	movs	r3, #12
 8002626:	4604      	mov	r4, r0
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	4620      	mov	r0, r4
 800262c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <__sfp+0x74>)
 8002630:	6665      	str	r5, [r4, #100]	; 0x64
 8002632:	e9c4 5500 	strd	r5, r5, [r4]
 8002636:	60a5      	str	r5, [r4, #8]
 8002638:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800263c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002640:	2208      	movs	r2, #8
 8002642:	4629      	mov	r1, r5
 8002644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002648:	f7ff fd6a 	bl	8002120 <memset>
 800264c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002654:	e7e9      	b.n	800262a <__sfp+0x42>
 8002656:	bf00      	nop
 8002658:	08003058 	.word	0x08003058
 800265c:	ffff0001 	.word	0xffff0001

08002660 <_fwalk_reent>:
 8002660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002664:	4680      	mov	r8, r0
 8002666:	4689      	mov	r9, r1
 8002668:	2600      	movs	r6, #0
 800266a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800266e:	b914      	cbnz	r4, 8002676 <_fwalk_reent+0x16>
 8002670:	4630      	mov	r0, r6
 8002672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002676:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800267a:	3f01      	subs	r7, #1
 800267c:	d501      	bpl.n	8002682 <_fwalk_reent+0x22>
 800267e:	6824      	ldr	r4, [r4, #0]
 8002680:	e7f5      	b.n	800266e <_fwalk_reent+0xe>
 8002682:	89ab      	ldrh	r3, [r5, #12]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d907      	bls.n	8002698 <_fwalk_reent+0x38>
 8002688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800268c:	3301      	adds	r3, #1
 800268e:	d003      	beq.n	8002698 <_fwalk_reent+0x38>
 8002690:	4629      	mov	r1, r5
 8002692:	4640      	mov	r0, r8
 8002694:	47c8      	blx	r9
 8002696:	4306      	orrs	r6, r0
 8002698:	3568      	adds	r5, #104	; 0x68
 800269a:	e7ee      	b.n	800267a <_fwalk_reent+0x1a>

0800269c <__swhatbuf_r>:
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	460e      	mov	r6, r1
 80026a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026a4:	b096      	sub	sp, #88	; 0x58
 80026a6:	2900      	cmp	r1, #0
 80026a8:	4614      	mov	r4, r2
 80026aa:	461d      	mov	r5, r3
 80026ac:	da07      	bge.n	80026be <__swhatbuf_r+0x22>
 80026ae:	2300      	movs	r3, #0
 80026b0:	602b      	str	r3, [r5, #0]
 80026b2:	89b3      	ldrh	r3, [r6, #12]
 80026b4:	061a      	lsls	r2, r3, #24
 80026b6:	d410      	bmi.n	80026da <__swhatbuf_r+0x3e>
 80026b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026bc:	e00e      	b.n	80026dc <__swhatbuf_r+0x40>
 80026be:	466a      	mov	r2, sp
 80026c0:	f000 fc32 	bl	8002f28 <_fstat_r>
 80026c4:	2800      	cmp	r0, #0
 80026c6:	dbf2      	blt.n	80026ae <__swhatbuf_r+0x12>
 80026c8:	9a01      	ldr	r2, [sp, #4]
 80026ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80026ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80026d2:	425a      	negs	r2, r3
 80026d4:	415a      	adcs	r2, r3
 80026d6:	602a      	str	r2, [r5, #0]
 80026d8:	e7ee      	b.n	80026b8 <__swhatbuf_r+0x1c>
 80026da:	2340      	movs	r3, #64	; 0x40
 80026dc:	2000      	movs	r0, #0
 80026de:	6023      	str	r3, [r4, #0]
 80026e0:	b016      	add	sp, #88	; 0x58
 80026e2:	bd70      	pop	{r4, r5, r6, pc}

080026e4 <__smakebuf_r>:
 80026e4:	898b      	ldrh	r3, [r1, #12]
 80026e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026e8:	079d      	lsls	r5, r3, #30
 80026ea:	4606      	mov	r6, r0
 80026ec:	460c      	mov	r4, r1
 80026ee:	d507      	bpl.n	8002700 <__smakebuf_r+0x1c>
 80026f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80026f4:	6023      	str	r3, [r4, #0]
 80026f6:	6123      	str	r3, [r4, #16]
 80026f8:	2301      	movs	r3, #1
 80026fa:	6163      	str	r3, [r4, #20]
 80026fc:	b002      	add	sp, #8
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
 8002700:	ab01      	add	r3, sp, #4
 8002702:	466a      	mov	r2, sp
 8002704:	f7ff ffca 	bl	800269c <__swhatbuf_r>
 8002708:	9900      	ldr	r1, [sp, #0]
 800270a:	4605      	mov	r5, r0
 800270c:	4630      	mov	r0, r6
 800270e:	f000 f875 	bl	80027fc <_malloc_r>
 8002712:	b948      	cbnz	r0, 8002728 <__smakebuf_r+0x44>
 8002714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002718:	059a      	lsls	r2, r3, #22
 800271a:	d4ef      	bmi.n	80026fc <__smakebuf_r+0x18>
 800271c:	f023 0303 	bic.w	r3, r3, #3
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	81a3      	strh	r3, [r4, #12]
 8002726:	e7e3      	b.n	80026f0 <__smakebuf_r+0xc>
 8002728:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <__smakebuf_r+0x7c>)
 800272a:	62b3      	str	r3, [r6, #40]	; 0x28
 800272c:	89a3      	ldrh	r3, [r4, #12]
 800272e:	6020      	str	r0, [r4, #0]
 8002730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002734:	81a3      	strh	r3, [r4, #12]
 8002736:	9b00      	ldr	r3, [sp, #0]
 8002738:	6120      	str	r0, [r4, #16]
 800273a:	6163      	str	r3, [r4, #20]
 800273c:	9b01      	ldr	r3, [sp, #4]
 800273e:	b15b      	cbz	r3, 8002758 <__smakebuf_r+0x74>
 8002740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002744:	4630      	mov	r0, r6
 8002746:	f000 fc01 	bl	8002f4c <_isatty_r>
 800274a:	b128      	cbz	r0, 8002758 <__smakebuf_r+0x74>
 800274c:	89a3      	ldrh	r3, [r4, #12]
 800274e:	f023 0303 	bic.w	r3, r3, #3
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	81a3      	strh	r3, [r4, #12]
 8002758:	89a3      	ldrh	r3, [r4, #12]
 800275a:	431d      	orrs	r5, r3
 800275c:	81a5      	strh	r5, [r4, #12]
 800275e:	e7cd      	b.n	80026fc <__smakebuf_r+0x18>
 8002760:	08002551 	.word	0x08002551

08002764 <_free_r>:
 8002764:	b538      	push	{r3, r4, r5, lr}
 8002766:	4605      	mov	r5, r0
 8002768:	2900      	cmp	r1, #0
 800276a:	d043      	beq.n	80027f4 <_free_r+0x90>
 800276c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002770:	1f0c      	subs	r4, r1, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	bfb8      	it	lt
 8002776:	18e4      	addlt	r4, r4, r3
 8002778:	f000 fc18 	bl	8002fac <__malloc_lock>
 800277c:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <_free_r+0x94>)
 800277e:	6813      	ldr	r3, [r2, #0]
 8002780:	4610      	mov	r0, r2
 8002782:	b933      	cbnz	r3, 8002792 <_free_r+0x2e>
 8002784:	6063      	str	r3, [r4, #4]
 8002786:	6014      	str	r4, [r2, #0]
 8002788:	4628      	mov	r0, r5
 800278a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800278e:	f000 bc0e 	b.w	8002fae <__malloc_unlock>
 8002792:	42a3      	cmp	r3, r4
 8002794:	d90b      	bls.n	80027ae <_free_r+0x4a>
 8002796:	6821      	ldr	r1, [r4, #0]
 8002798:	1862      	adds	r2, r4, r1
 800279a:	4293      	cmp	r3, r2
 800279c:	bf01      	itttt	eq
 800279e:	681a      	ldreq	r2, [r3, #0]
 80027a0:	685b      	ldreq	r3, [r3, #4]
 80027a2:	1852      	addeq	r2, r2, r1
 80027a4:	6022      	streq	r2, [r4, #0]
 80027a6:	6063      	str	r3, [r4, #4]
 80027a8:	6004      	str	r4, [r0, #0]
 80027aa:	e7ed      	b.n	8002788 <_free_r+0x24>
 80027ac:	4613      	mov	r3, r2
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	b10a      	cbz	r2, 80027b6 <_free_r+0x52>
 80027b2:	42a2      	cmp	r2, r4
 80027b4:	d9fa      	bls.n	80027ac <_free_r+0x48>
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	1858      	adds	r0, r3, r1
 80027ba:	42a0      	cmp	r0, r4
 80027bc:	d10b      	bne.n	80027d6 <_free_r+0x72>
 80027be:	6820      	ldr	r0, [r4, #0]
 80027c0:	4401      	add	r1, r0
 80027c2:	1858      	adds	r0, r3, r1
 80027c4:	4282      	cmp	r2, r0
 80027c6:	6019      	str	r1, [r3, #0]
 80027c8:	d1de      	bne.n	8002788 <_free_r+0x24>
 80027ca:	6810      	ldr	r0, [r2, #0]
 80027cc:	6852      	ldr	r2, [r2, #4]
 80027ce:	4401      	add	r1, r0
 80027d0:	6019      	str	r1, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	e7d8      	b.n	8002788 <_free_r+0x24>
 80027d6:	d902      	bls.n	80027de <_free_r+0x7a>
 80027d8:	230c      	movs	r3, #12
 80027da:	602b      	str	r3, [r5, #0]
 80027dc:	e7d4      	b.n	8002788 <_free_r+0x24>
 80027de:	6820      	ldr	r0, [r4, #0]
 80027e0:	1821      	adds	r1, r4, r0
 80027e2:	428a      	cmp	r2, r1
 80027e4:	bf01      	itttt	eq
 80027e6:	6811      	ldreq	r1, [r2, #0]
 80027e8:	6852      	ldreq	r2, [r2, #4]
 80027ea:	1809      	addeq	r1, r1, r0
 80027ec:	6021      	streq	r1, [r4, #0]
 80027ee:	6062      	str	r2, [r4, #4]
 80027f0:	605c      	str	r4, [r3, #4]
 80027f2:	e7c9      	b.n	8002788 <_free_r+0x24>
 80027f4:	bd38      	pop	{r3, r4, r5, pc}
 80027f6:	bf00      	nop
 80027f8:	20000090 	.word	0x20000090

080027fc <_malloc_r>:
 80027fc:	b570      	push	{r4, r5, r6, lr}
 80027fe:	1ccd      	adds	r5, r1, #3
 8002800:	f025 0503 	bic.w	r5, r5, #3
 8002804:	3508      	adds	r5, #8
 8002806:	2d0c      	cmp	r5, #12
 8002808:	bf38      	it	cc
 800280a:	250c      	movcc	r5, #12
 800280c:	2d00      	cmp	r5, #0
 800280e:	4606      	mov	r6, r0
 8002810:	db01      	blt.n	8002816 <_malloc_r+0x1a>
 8002812:	42a9      	cmp	r1, r5
 8002814:	d903      	bls.n	800281e <_malloc_r+0x22>
 8002816:	230c      	movs	r3, #12
 8002818:	6033      	str	r3, [r6, #0]
 800281a:	2000      	movs	r0, #0
 800281c:	bd70      	pop	{r4, r5, r6, pc}
 800281e:	f000 fbc5 	bl	8002fac <__malloc_lock>
 8002822:	4a21      	ldr	r2, [pc, #132]	; (80028a8 <_malloc_r+0xac>)
 8002824:	6814      	ldr	r4, [r2, #0]
 8002826:	4621      	mov	r1, r4
 8002828:	b991      	cbnz	r1, 8002850 <_malloc_r+0x54>
 800282a:	4c20      	ldr	r4, [pc, #128]	; (80028ac <_malloc_r+0xb0>)
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	b91b      	cbnz	r3, 8002838 <_malloc_r+0x3c>
 8002830:	4630      	mov	r0, r6
 8002832:	f000 fb03 	bl	8002e3c <_sbrk_r>
 8002836:	6020      	str	r0, [r4, #0]
 8002838:	4629      	mov	r1, r5
 800283a:	4630      	mov	r0, r6
 800283c:	f000 fafe 	bl	8002e3c <_sbrk_r>
 8002840:	1c43      	adds	r3, r0, #1
 8002842:	d124      	bne.n	800288e <_malloc_r+0x92>
 8002844:	230c      	movs	r3, #12
 8002846:	4630      	mov	r0, r6
 8002848:	6033      	str	r3, [r6, #0]
 800284a:	f000 fbb0 	bl	8002fae <__malloc_unlock>
 800284e:	e7e4      	b.n	800281a <_malloc_r+0x1e>
 8002850:	680b      	ldr	r3, [r1, #0]
 8002852:	1b5b      	subs	r3, r3, r5
 8002854:	d418      	bmi.n	8002888 <_malloc_r+0x8c>
 8002856:	2b0b      	cmp	r3, #11
 8002858:	d90f      	bls.n	800287a <_malloc_r+0x7e>
 800285a:	600b      	str	r3, [r1, #0]
 800285c:	18cc      	adds	r4, r1, r3
 800285e:	50cd      	str	r5, [r1, r3]
 8002860:	4630      	mov	r0, r6
 8002862:	f000 fba4 	bl	8002fae <__malloc_unlock>
 8002866:	f104 000b 	add.w	r0, r4, #11
 800286a:	1d23      	adds	r3, r4, #4
 800286c:	f020 0007 	bic.w	r0, r0, #7
 8002870:	1ac3      	subs	r3, r0, r3
 8002872:	d0d3      	beq.n	800281c <_malloc_r+0x20>
 8002874:	425a      	negs	r2, r3
 8002876:	50e2      	str	r2, [r4, r3]
 8002878:	e7d0      	b.n	800281c <_malloc_r+0x20>
 800287a:	684b      	ldr	r3, [r1, #4]
 800287c:	428c      	cmp	r4, r1
 800287e:	bf16      	itet	ne
 8002880:	6063      	strne	r3, [r4, #4]
 8002882:	6013      	streq	r3, [r2, #0]
 8002884:	460c      	movne	r4, r1
 8002886:	e7eb      	b.n	8002860 <_malloc_r+0x64>
 8002888:	460c      	mov	r4, r1
 800288a:	6849      	ldr	r1, [r1, #4]
 800288c:	e7cc      	b.n	8002828 <_malloc_r+0x2c>
 800288e:	1cc4      	adds	r4, r0, #3
 8002890:	f024 0403 	bic.w	r4, r4, #3
 8002894:	42a0      	cmp	r0, r4
 8002896:	d005      	beq.n	80028a4 <_malloc_r+0xa8>
 8002898:	1a21      	subs	r1, r4, r0
 800289a:	4630      	mov	r0, r6
 800289c:	f000 face 	bl	8002e3c <_sbrk_r>
 80028a0:	3001      	adds	r0, #1
 80028a2:	d0cf      	beq.n	8002844 <_malloc_r+0x48>
 80028a4:	6025      	str	r5, [r4, #0]
 80028a6:	e7db      	b.n	8002860 <_malloc_r+0x64>
 80028a8:	20000090 	.word	0x20000090
 80028ac:	20000094 	.word	0x20000094

080028b0 <__sfputc_r>:
 80028b0:	6893      	ldr	r3, [r2, #8]
 80028b2:	b410      	push	{r4}
 80028b4:	3b01      	subs	r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	6093      	str	r3, [r2, #8]
 80028ba:	da07      	bge.n	80028cc <__sfputc_r+0x1c>
 80028bc:	6994      	ldr	r4, [r2, #24]
 80028be:	42a3      	cmp	r3, r4
 80028c0:	db01      	blt.n	80028c6 <__sfputc_r+0x16>
 80028c2:	290a      	cmp	r1, #10
 80028c4:	d102      	bne.n	80028cc <__sfputc_r+0x1c>
 80028c6:	bc10      	pop	{r4}
 80028c8:	f7ff bcae 	b.w	8002228 <__swbuf_r>
 80028cc:	6813      	ldr	r3, [r2, #0]
 80028ce:	1c58      	adds	r0, r3, #1
 80028d0:	6010      	str	r0, [r2, #0]
 80028d2:	7019      	strb	r1, [r3, #0]
 80028d4:	4608      	mov	r0, r1
 80028d6:	bc10      	pop	{r4}
 80028d8:	4770      	bx	lr

080028da <__sfputs_r>:
 80028da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028dc:	4606      	mov	r6, r0
 80028de:	460f      	mov	r7, r1
 80028e0:	4614      	mov	r4, r2
 80028e2:	18d5      	adds	r5, r2, r3
 80028e4:	42ac      	cmp	r4, r5
 80028e6:	d101      	bne.n	80028ec <__sfputs_r+0x12>
 80028e8:	2000      	movs	r0, #0
 80028ea:	e007      	b.n	80028fc <__sfputs_r+0x22>
 80028ec:	463a      	mov	r2, r7
 80028ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028f2:	4630      	mov	r0, r6
 80028f4:	f7ff ffdc 	bl	80028b0 <__sfputc_r>
 80028f8:	1c43      	adds	r3, r0, #1
 80028fa:	d1f3      	bne.n	80028e4 <__sfputs_r+0xa>
 80028fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002900 <_vfiprintf_r>:
 8002900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002904:	460c      	mov	r4, r1
 8002906:	b09d      	sub	sp, #116	; 0x74
 8002908:	4617      	mov	r7, r2
 800290a:	461d      	mov	r5, r3
 800290c:	4606      	mov	r6, r0
 800290e:	b118      	cbz	r0, 8002918 <_vfiprintf_r+0x18>
 8002910:	6983      	ldr	r3, [r0, #24]
 8002912:	b90b      	cbnz	r3, 8002918 <_vfiprintf_r+0x18>
 8002914:	f7ff fe38 	bl	8002588 <__sinit>
 8002918:	4b7c      	ldr	r3, [pc, #496]	; (8002b0c <_vfiprintf_r+0x20c>)
 800291a:	429c      	cmp	r4, r3
 800291c:	d158      	bne.n	80029d0 <_vfiprintf_r+0xd0>
 800291e:	6874      	ldr	r4, [r6, #4]
 8002920:	89a3      	ldrh	r3, [r4, #12]
 8002922:	0718      	lsls	r0, r3, #28
 8002924:	d55e      	bpl.n	80029e4 <_vfiprintf_r+0xe4>
 8002926:	6923      	ldr	r3, [r4, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d05b      	beq.n	80029e4 <_vfiprintf_r+0xe4>
 800292c:	2300      	movs	r3, #0
 800292e:	9309      	str	r3, [sp, #36]	; 0x24
 8002930:	2320      	movs	r3, #32
 8002932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002936:	2330      	movs	r3, #48	; 0x30
 8002938:	f04f 0b01 	mov.w	fp, #1
 800293c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002940:	9503      	str	r5, [sp, #12]
 8002942:	46b8      	mov	r8, r7
 8002944:	4645      	mov	r5, r8
 8002946:	f815 3b01 	ldrb.w	r3, [r5], #1
 800294a:	b10b      	cbz	r3, 8002950 <_vfiprintf_r+0x50>
 800294c:	2b25      	cmp	r3, #37	; 0x25
 800294e:	d154      	bne.n	80029fa <_vfiprintf_r+0xfa>
 8002950:	ebb8 0a07 	subs.w	sl, r8, r7
 8002954:	d00b      	beq.n	800296e <_vfiprintf_r+0x6e>
 8002956:	4653      	mov	r3, sl
 8002958:	463a      	mov	r2, r7
 800295a:	4621      	mov	r1, r4
 800295c:	4630      	mov	r0, r6
 800295e:	f7ff ffbc 	bl	80028da <__sfputs_r>
 8002962:	3001      	adds	r0, #1
 8002964:	f000 80c2 	beq.w	8002aec <_vfiprintf_r+0x1ec>
 8002968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800296a:	4453      	add	r3, sl
 800296c:	9309      	str	r3, [sp, #36]	; 0x24
 800296e:	f898 3000 	ldrb.w	r3, [r8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80ba 	beq.w	8002aec <_vfiprintf_r+0x1ec>
 8002978:	2300      	movs	r3, #0
 800297a:	f04f 32ff 	mov.w	r2, #4294967295
 800297e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002982:	9304      	str	r3, [sp, #16]
 8002984:	9307      	str	r3, [sp, #28]
 8002986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800298a:	931a      	str	r3, [sp, #104]	; 0x68
 800298c:	46a8      	mov	r8, r5
 800298e:	2205      	movs	r2, #5
 8002990:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002994:	485e      	ldr	r0, [pc, #376]	; (8002b10 <_vfiprintf_r+0x210>)
 8002996:	f000 fafb 	bl	8002f90 <memchr>
 800299a:	9b04      	ldr	r3, [sp, #16]
 800299c:	bb78      	cbnz	r0, 80029fe <_vfiprintf_r+0xfe>
 800299e:	06d9      	lsls	r1, r3, #27
 80029a0:	bf44      	itt	mi
 80029a2:	2220      	movmi	r2, #32
 80029a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029a8:	071a      	lsls	r2, r3, #28
 80029aa:	bf44      	itt	mi
 80029ac:	222b      	movmi	r2, #43	; 0x2b
 80029ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029b2:	782a      	ldrb	r2, [r5, #0]
 80029b4:	2a2a      	cmp	r2, #42	; 0x2a
 80029b6:	d02a      	beq.n	8002a0e <_vfiprintf_r+0x10e>
 80029b8:	46a8      	mov	r8, r5
 80029ba:	2000      	movs	r0, #0
 80029bc:	250a      	movs	r5, #10
 80029be:	9a07      	ldr	r2, [sp, #28]
 80029c0:	4641      	mov	r1, r8
 80029c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029c6:	3b30      	subs	r3, #48	; 0x30
 80029c8:	2b09      	cmp	r3, #9
 80029ca:	d969      	bls.n	8002aa0 <_vfiprintf_r+0x1a0>
 80029cc:	b360      	cbz	r0, 8002a28 <_vfiprintf_r+0x128>
 80029ce:	e024      	b.n	8002a1a <_vfiprintf_r+0x11a>
 80029d0:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <_vfiprintf_r+0x214>)
 80029d2:	429c      	cmp	r4, r3
 80029d4:	d101      	bne.n	80029da <_vfiprintf_r+0xda>
 80029d6:	68b4      	ldr	r4, [r6, #8]
 80029d8:	e7a2      	b.n	8002920 <_vfiprintf_r+0x20>
 80029da:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <_vfiprintf_r+0x218>)
 80029dc:	429c      	cmp	r4, r3
 80029de:	bf08      	it	eq
 80029e0:	68f4      	ldreq	r4, [r6, #12]
 80029e2:	e79d      	b.n	8002920 <_vfiprintf_r+0x20>
 80029e4:	4621      	mov	r1, r4
 80029e6:	4630      	mov	r0, r6
 80029e8:	f7ff fc70 	bl	80022cc <__swsetup_r>
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d09d      	beq.n	800292c <_vfiprintf_r+0x2c>
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	b01d      	add	sp, #116	; 0x74
 80029f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029fa:	46a8      	mov	r8, r5
 80029fc:	e7a2      	b.n	8002944 <_vfiprintf_r+0x44>
 80029fe:	4a44      	ldr	r2, [pc, #272]	; (8002b10 <_vfiprintf_r+0x210>)
 8002a00:	4645      	mov	r5, r8
 8002a02:	1a80      	subs	r0, r0, r2
 8002a04:	fa0b f000 	lsl.w	r0, fp, r0
 8002a08:	4318      	orrs	r0, r3
 8002a0a:	9004      	str	r0, [sp, #16]
 8002a0c:	e7be      	b.n	800298c <_vfiprintf_r+0x8c>
 8002a0e:	9a03      	ldr	r2, [sp, #12]
 8002a10:	1d11      	adds	r1, r2, #4
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	9103      	str	r1, [sp, #12]
 8002a16:	2a00      	cmp	r2, #0
 8002a18:	db01      	blt.n	8002a1e <_vfiprintf_r+0x11e>
 8002a1a:	9207      	str	r2, [sp, #28]
 8002a1c:	e004      	b.n	8002a28 <_vfiprintf_r+0x128>
 8002a1e:	4252      	negs	r2, r2
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	9207      	str	r2, [sp, #28]
 8002a26:	9304      	str	r3, [sp, #16]
 8002a28:	f898 3000 	ldrb.w	r3, [r8]
 8002a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8002a2e:	d10e      	bne.n	8002a4e <_vfiprintf_r+0x14e>
 8002a30:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002a34:	2b2a      	cmp	r3, #42	; 0x2a
 8002a36:	d138      	bne.n	8002aaa <_vfiprintf_r+0x1aa>
 8002a38:	9b03      	ldr	r3, [sp, #12]
 8002a3a:	f108 0802 	add.w	r8, r8, #2
 8002a3e:	1d1a      	adds	r2, r3, #4
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	9203      	str	r2, [sp, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bfb8      	it	lt
 8002a48:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a4c:	9305      	str	r3, [sp, #20]
 8002a4e:	4d33      	ldr	r5, [pc, #204]	; (8002b1c <_vfiprintf_r+0x21c>)
 8002a50:	2203      	movs	r2, #3
 8002a52:	f898 1000 	ldrb.w	r1, [r8]
 8002a56:	4628      	mov	r0, r5
 8002a58:	f000 fa9a 	bl	8002f90 <memchr>
 8002a5c:	b140      	cbz	r0, 8002a70 <_vfiprintf_r+0x170>
 8002a5e:	2340      	movs	r3, #64	; 0x40
 8002a60:	1b40      	subs	r0, r0, r5
 8002a62:	fa03 f000 	lsl.w	r0, r3, r0
 8002a66:	9b04      	ldr	r3, [sp, #16]
 8002a68:	f108 0801 	add.w	r8, r8, #1
 8002a6c:	4303      	orrs	r3, r0
 8002a6e:	9304      	str	r3, [sp, #16]
 8002a70:	f898 1000 	ldrb.w	r1, [r8]
 8002a74:	2206      	movs	r2, #6
 8002a76:	482a      	ldr	r0, [pc, #168]	; (8002b20 <_vfiprintf_r+0x220>)
 8002a78:	f108 0701 	add.w	r7, r8, #1
 8002a7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a80:	f000 fa86 	bl	8002f90 <memchr>
 8002a84:	2800      	cmp	r0, #0
 8002a86:	d037      	beq.n	8002af8 <_vfiprintf_r+0x1f8>
 8002a88:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <_vfiprintf_r+0x224>)
 8002a8a:	bb1b      	cbnz	r3, 8002ad4 <_vfiprintf_r+0x1d4>
 8002a8c:	9b03      	ldr	r3, [sp, #12]
 8002a8e:	3307      	adds	r3, #7
 8002a90:	f023 0307 	bic.w	r3, r3, #7
 8002a94:	3308      	adds	r3, #8
 8002a96:	9303      	str	r3, [sp, #12]
 8002a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a9a:	444b      	add	r3, r9
 8002a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a9e:	e750      	b.n	8002942 <_vfiprintf_r+0x42>
 8002aa0:	fb05 3202 	mla	r2, r5, r2, r3
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	4688      	mov	r8, r1
 8002aa8:	e78a      	b.n	80029c0 <_vfiprintf_r+0xc0>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	250a      	movs	r5, #10
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f108 0801 	add.w	r8, r8, #1
 8002ab4:	9305      	str	r3, [sp, #20]
 8002ab6:	4640      	mov	r0, r8
 8002ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002abc:	3a30      	subs	r2, #48	; 0x30
 8002abe:	2a09      	cmp	r2, #9
 8002ac0:	d903      	bls.n	8002aca <_vfiprintf_r+0x1ca>
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0c3      	beq.n	8002a4e <_vfiprintf_r+0x14e>
 8002ac6:	9105      	str	r1, [sp, #20]
 8002ac8:	e7c1      	b.n	8002a4e <_vfiprintf_r+0x14e>
 8002aca:	fb05 2101 	mla	r1, r5, r1, r2
 8002ace:	2301      	movs	r3, #1
 8002ad0:	4680      	mov	r8, r0
 8002ad2:	e7f0      	b.n	8002ab6 <_vfiprintf_r+0x1b6>
 8002ad4:	ab03      	add	r3, sp, #12
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	4622      	mov	r2, r4
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <_vfiprintf_r+0x228>)
 8002adc:	a904      	add	r1, sp, #16
 8002ade:	4630      	mov	r0, r6
 8002ae0:	f3af 8000 	nop.w
 8002ae4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ae8:	4681      	mov	r9, r0
 8002aea:	d1d5      	bne.n	8002a98 <_vfiprintf_r+0x198>
 8002aec:	89a3      	ldrh	r3, [r4, #12]
 8002aee:	065b      	lsls	r3, r3, #25
 8002af0:	f53f af7e 	bmi.w	80029f0 <_vfiprintf_r+0xf0>
 8002af4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002af6:	e77d      	b.n	80029f4 <_vfiprintf_r+0xf4>
 8002af8:	ab03      	add	r3, sp, #12
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	4622      	mov	r2, r4
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <_vfiprintf_r+0x228>)
 8002b00:	a904      	add	r1, sp, #16
 8002b02:	4630      	mov	r0, r6
 8002b04:	f000 f888 	bl	8002c18 <_printf_i>
 8002b08:	e7ec      	b.n	8002ae4 <_vfiprintf_r+0x1e4>
 8002b0a:	bf00      	nop
 8002b0c:	0800307c 	.word	0x0800307c
 8002b10:	080030bc 	.word	0x080030bc
 8002b14:	0800309c 	.word	0x0800309c
 8002b18:	0800305c 	.word	0x0800305c
 8002b1c:	080030c2 	.word	0x080030c2
 8002b20:	080030c6 	.word	0x080030c6
 8002b24:	00000000 	.word	0x00000000
 8002b28:	080028db 	.word	0x080028db

08002b2c <_printf_common>:
 8002b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b30:	4691      	mov	r9, r2
 8002b32:	461f      	mov	r7, r3
 8002b34:	688a      	ldr	r2, [r1, #8]
 8002b36:	690b      	ldr	r3, [r1, #16]
 8002b38:	4606      	mov	r6, r0
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	bfb8      	it	lt
 8002b3e:	4613      	movlt	r3, r2
 8002b40:	f8c9 3000 	str.w	r3, [r9]
 8002b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b48:	460c      	mov	r4, r1
 8002b4a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b4e:	b112      	cbz	r2, 8002b56 <_printf_common+0x2a>
 8002b50:	3301      	adds	r3, #1
 8002b52:	f8c9 3000 	str.w	r3, [r9]
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	0699      	lsls	r1, r3, #26
 8002b5a:	bf42      	ittt	mi
 8002b5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002b60:	3302      	addmi	r3, #2
 8002b62:	f8c9 3000 	strmi.w	r3, [r9]
 8002b66:	6825      	ldr	r5, [r4, #0]
 8002b68:	f015 0506 	ands.w	r5, r5, #6
 8002b6c:	d107      	bne.n	8002b7e <_printf_common+0x52>
 8002b6e:	f104 0a19 	add.w	sl, r4, #25
 8002b72:	68e3      	ldr	r3, [r4, #12]
 8002b74:	f8d9 2000 	ldr.w	r2, [r9]
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	42ab      	cmp	r3, r5
 8002b7c:	dc29      	bgt.n	8002bd2 <_printf_common+0xa6>
 8002b7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002b82:	6822      	ldr	r2, [r4, #0]
 8002b84:	3300      	adds	r3, #0
 8002b86:	bf18      	it	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	0692      	lsls	r2, r2, #26
 8002b8c:	d42e      	bmi.n	8002bec <_printf_common+0xc0>
 8002b8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b92:	4639      	mov	r1, r7
 8002b94:	4630      	mov	r0, r6
 8002b96:	47c0      	blx	r8
 8002b98:	3001      	adds	r0, #1
 8002b9a:	d021      	beq.n	8002be0 <_printf_common+0xb4>
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	68e5      	ldr	r5, [r4, #12]
 8002ba0:	f003 0306 	and.w	r3, r3, #6
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	bf18      	it	ne
 8002ba8:	2500      	movne	r5, #0
 8002baa:	f8d9 2000 	ldr.w	r2, [r9]
 8002bae:	f04f 0900 	mov.w	r9, #0
 8002bb2:	bf08      	it	eq
 8002bb4:	1aad      	subeq	r5, r5, r2
 8002bb6:	68a3      	ldr	r3, [r4, #8]
 8002bb8:	6922      	ldr	r2, [r4, #16]
 8002bba:	bf08      	it	eq
 8002bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	bfc4      	itt	gt
 8002bc4:	1a9b      	subgt	r3, r3, r2
 8002bc6:	18ed      	addgt	r5, r5, r3
 8002bc8:	341a      	adds	r4, #26
 8002bca:	454d      	cmp	r5, r9
 8002bcc:	d11a      	bne.n	8002c04 <_printf_common+0xd8>
 8002bce:	2000      	movs	r0, #0
 8002bd0:	e008      	b.n	8002be4 <_printf_common+0xb8>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	4652      	mov	r2, sl
 8002bd6:	4639      	mov	r1, r7
 8002bd8:	4630      	mov	r0, r6
 8002bda:	47c0      	blx	r8
 8002bdc:	3001      	adds	r0, #1
 8002bde:	d103      	bne.n	8002be8 <_printf_common+0xbc>
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002be8:	3501      	adds	r5, #1
 8002bea:	e7c2      	b.n	8002b72 <_printf_common+0x46>
 8002bec:	2030      	movs	r0, #48	; 0x30
 8002bee:	18e1      	adds	r1, r4, r3
 8002bf0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bfa:	4422      	add	r2, r4
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c02:	e7c4      	b.n	8002b8e <_printf_common+0x62>
 8002c04:	2301      	movs	r3, #1
 8002c06:	4622      	mov	r2, r4
 8002c08:	4639      	mov	r1, r7
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	47c0      	blx	r8
 8002c0e:	3001      	adds	r0, #1
 8002c10:	d0e6      	beq.n	8002be0 <_printf_common+0xb4>
 8002c12:	f109 0901 	add.w	r9, r9, #1
 8002c16:	e7d8      	b.n	8002bca <_printf_common+0x9e>

08002c18 <_printf_i>:
 8002c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002c20:	460c      	mov	r4, r1
 8002c22:	7e09      	ldrb	r1, [r1, #24]
 8002c24:	b085      	sub	sp, #20
 8002c26:	296e      	cmp	r1, #110	; 0x6e
 8002c28:	4617      	mov	r7, r2
 8002c2a:	4606      	mov	r6, r0
 8002c2c:	4698      	mov	r8, r3
 8002c2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002c30:	f000 80b3 	beq.w	8002d9a <_printf_i+0x182>
 8002c34:	d822      	bhi.n	8002c7c <_printf_i+0x64>
 8002c36:	2963      	cmp	r1, #99	; 0x63
 8002c38:	d036      	beq.n	8002ca8 <_printf_i+0x90>
 8002c3a:	d80a      	bhi.n	8002c52 <_printf_i+0x3a>
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	f000 80b9 	beq.w	8002db4 <_printf_i+0x19c>
 8002c42:	2958      	cmp	r1, #88	; 0x58
 8002c44:	f000 8083 	beq.w	8002d4e <_printf_i+0x136>
 8002c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002c50:	e032      	b.n	8002cb8 <_printf_i+0xa0>
 8002c52:	2964      	cmp	r1, #100	; 0x64
 8002c54:	d001      	beq.n	8002c5a <_printf_i+0x42>
 8002c56:	2969      	cmp	r1, #105	; 0x69
 8002c58:	d1f6      	bne.n	8002c48 <_printf_i+0x30>
 8002c5a:	6820      	ldr	r0, [r4, #0]
 8002c5c:	6813      	ldr	r3, [r2, #0]
 8002c5e:	0605      	lsls	r5, r0, #24
 8002c60:	f103 0104 	add.w	r1, r3, #4
 8002c64:	d52a      	bpl.n	8002cbc <_printf_i+0xa4>
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6011      	str	r1, [r2, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	da03      	bge.n	8002c76 <_printf_i+0x5e>
 8002c6e:	222d      	movs	r2, #45	; 0x2d
 8002c70:	425b      	negs	r3, r3
 8002c72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c76:	486f      	ldr	r0, [pc, #444]	; (8002e34 <_printf_i+0x21c>)
 8002c78:	220a      	movs	r2, #10
 8002c7a:	e039      	b.n	8002cf0 <_printf_i+0xd8>
 8002c7c:	2973      	cmp	r1, #115	; 0x73
 8002c7e:	f000 809d 	beq.w	8002dbc <_printf_i+0x1a4>
 8002c82:	d808      	bhi.n	8002c96 <_printf_i+0x7e>
 8002c84:	296f      	cmp	r1, #111	; 0x6f
 8002c86:	d020      	beq.n	8002cca <_printf_i+0xb2>
 8002c88:	2970      	cmp	r1, #112	; 0x70
 8002c8a:	d1dd      	bne.n	8002c48 <_printf_i+0x30>
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	f043 0320 	orr.w	r3, r3, #32
 8002c92:	6023      	str	r3, [r4, #0]
 8002c94:	e003      	b.n	8002c9e <_printf_i+0x86>
 8002c96:	2975      	cmp	r1, #117	; 0x75
 8002c98:	d017      	beq.n	8002cca <_printf_i+0xb2>
 8002c9a:	2978      	cmp	r1, #120	; 0x78
 8002c9c:	d1d4      	bne.n	8002c48 <_printf_i+0x30>
 8002c9e:	2378      	movs	r3, #120	; 0x78
 8002ca0:	4865      	ldr	r0, [pc, #404]	; (8002e38 <_printf_i+0x220>)
 8002ca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ca6:	e055      	b.n	8002d54 <_printf_i+0x13c>
 8002ca8:	6813      	ldr	r3, [r2, #0]
 8002caa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cae:	1d19      	adds	r1, r3, #4
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6011      	str	r1, [r2, #0]
 8002cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e08c      	b.n	8002dd6 <_printf_i+0x1be>
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cc2:	6011      	str	r1, [r2, #0]
 8002cc4:	bf18      	it	ne
 8002cc6:	b21b      	sxthne	r3, r3
 8002cc8:	e7cf      	b.n	8002c6a <_printf_i+0x52>
 8002cca:	6813      	ldr	r3, [r2, #0]
 8002ccc:	6825      	ldr	r5, [r4, #0]
 8002cce:	1d18      	adds	r0, r3, #4
 8002cd0:	6010      	str	r0, [r2, #0]
 8002cd2:	0628      	lsls	r0, r5, #24
 8002cd4:	d501      	bpl.n	8002cda <_printf_i+0xc2>
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	e002      	b.n	8002ce0 <_printf_i+0xc8>
 8002cda:	0668      	lsls	r0, r5, #25
 8002cdc:	d5fb      	bpl.n	8002cd6 <_printf_i+0xbe>
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	296f      	cmp	r1, #111	; 0x6f
 8002ce2:	bf14      	ite	ne
 8002ce4:	220a      	movne	r2, #10
 8002ce6:	2208      	moveq	r2, #8
 8002ce8:	4852      	ldr	r0, [pc, #328]	; (8002e34 <_printf_i+0x21c>)
 8002cea:	2100      	movs	r1, #0
 8002cec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cf0:	6865      	ldr	r5, [r4, #4]
 8002cf2:	2d00      	cmp	r5, #0
 8002cf4:	60a5      	str	r5, [r4, #8]
 8002cf6:	f2c0 8095 	blt.w	8002e24 <_printf_i+0x20c>
 8002cfa:	6821      	ldr	r1, [r4, #0]
 8002cfc:	f021 0104 	bic.w	r1, r1, #4
 8002d00:	6021      	str	r1, [r4, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d13d      	bne.n	8002d82 <_printf_i+0x16a>
 8002d06:	2d00      	cmp	r5, #0
 8002d08:	f040 808e 	bne.w	8002e28 <_printf_i+0x210>
 8002d0c:	4665      	mov	r5, ip
 8002d0e:	2a08      	cmp	r2, #8
 8002d10:	d10b      	bne.n	8002d2a <_printf_i+0x112>
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	07db      	lsls	r3, r3, #31
 8002d16:	d508      	bpl.n	8002d2a <_printf_i+0x112>
 8002d18:	6923      	ldr	r3, [r4, #16]
 8002d1a:	6862      	ldr	r2, [r4, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	bfde      	ittt	le
 8002d20:	2330      	movle	r3, #48	; 0x30
 8002d22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d2a:	ebac 0305 	sub.w	r3, ip, r5
 8002d2e:	6123      	str	r3, [r4, #16]
 8002d30:	f8cd 8000 	str.w	r8, [sp]
 8002d34:	463b      	mov	r3, r7
 8002d36:	aa03      	add	r2, sp, #12
 8002d38:	4621      	mov	r1, r4
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f7ff fef6 	bl	8002b2c <_printf_common>
 8002d40:	3001      	adds	r0, #1
 8002d42:	d14d      	bne.n	8002de0 <_printf_i+0x1c8>
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	b005      	add	sp, #20
 8002d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d4e:	4839      	ldr	r0, [pc, #228]	; (8002e34 <_printf_i+0x21c>)
 8002d50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002d54:	6813      	ldr	r3, [r2, #0]
 8002d56:	6821      	ldr	r1, [r4, #0]
 8002d58:	1d1d      	adds	r5, r3, #4
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6015      	str	r5, [r2, #0]
 8002d5e:	060a      	lsls	r2, r1, #24
 8002d60:	d50b      	bpl.n	8002d7a <_printf_i+0x162>
 8002d62:	07ca      	lsls	r2, r1, #31
 8002d64:	bf44      	itt	mi
 8002d66:	f041 0120 	orrmi.w	r1, r1, #32
 8002d6a:	6021      	strmi	r1, [r4, #0]
 8002d6c:	b91b      	cbnz	r3, 8002d76 <_printf_i+0x15e>
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	f022 0220 	bic.w	r2, r2, #32
 8002d74:	6022      	str	r2, [r4, #0]
 8002d76:	2210      	movs	r2, #16
 8002d78:	e7b7      	b.n	8002cea <_printf_i+0xd2>
 8002d7a:	064d      	lsls	r5, r1, #25
 8002d7c:	bf48      	it	mi
 8002d7e:	b29b      	uxthmi	r3, r3
 8002d80:	e7ef      	b.n	8002d62 <_printf_i+0x14a>
 8002d82:	4665      	mov	r5, ip
 8002d84:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d88:	fb02 3311 	mls	r3, r2, r1, r3
 8002d8c:	5cc3      	ldrb	r3, [r0, r3]
 8002d8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002d92:	460b      	mov	r3, r1
 8002d94:	2900      	cmp	r1, #0
 8002d96:	d1f5      	bne.n	8002d84 <_printf_i+0x16c>
 8002d98:	e7b9      	b.n	8002d0e <_printf_i+0xf6>
 8002d9a:	6813      	ldr	r3, [r2, #0]
 8002d9c:	6825      	ldr	r5, [r4, #0]
 8002d9e:	1d18      	adds	r0, r3, #4
 8002da0:	6961      	ldr	r1, [r4, #20]
 8002da2:	6010      	str	r0, [r2, #0]
 8002da4:	0628      	lsls	r0, r5, #24
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	d501      	bpl.n	8002dae <_printf_i+0x196>
 8002daa:	6019      	str	r1, [r3, #0]
 8002dac:	e002      	b.n	8002db4 <_printf_i+0x19c>
 8002dae:	066a      	lsls	r2, r5, #25
 8002db0:	d5fb      	bpl.n	8002daa <_printf_i+0x192>
 8002db2:	8019      	strh	r1, [r3, #0]
 8002db4:	2300      	movs	r3, #0
 8002db6:	4665      	mov	r5, ip
 8002db8:	6123      	str	r3, [r4, #16]
 8002dba:	e7b9      	b.n	8002d30 <_printf_i+0x118>
 8002dbc:	6813      	ldr	r3, [r2, #0]
 8002dbe:	1d19      	adds	r1, r3, #4
 8002dc0:	6011      	str	r1, [r2, #0]
 8002dc2:	681d      	ldr	r5, [r3, #0]
 8002dc4:	6862      	ldr	r2, [r4, #4]
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4628      	mov	r0, r5
 8002dca:	f000 f8e1 	bl	8002f90 <memchr>
 8002dce:	b108      	cbz	r0, 8002dd4 <_printf_i+0x1bc>
 8002dd0:	1b40      	subs	r0, r0, r5
 8002dd2:	6060      	str	r0, [r4, #4]
 8002dd4:	6863      	ldr	r3, [r4, #4]
 8002dd6:	6123      	str	r3, [r4, #16]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dde:	e7a7      	b.n	8002d30 <_printf_i+0x118>
 8002de0:	6923      	ldr	r3, [r4, #16]
 8002de2:	462a      	mov	r2, r5
 8002de4:	4639      	mov	r1, r7
 8002de6:	4630      	mov	r0, r6
 8002de8:	47c0      	blx	r8
 8002dea:	3001      	adds	r0, #1
 8002dec:	d0aa      	beq.n	8002d44 <_printf_i+0x12c>
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	079b      	lsls	r3, r3, #30
 8002df2:	d413      	bmi.n	8002e1c <_printf_i+0x204>
 8002df4:	68e0      	ldr	r0, [r4, #12]
 8002df6:	9b03      	ldr	r3, [sp, #12]
 8002df8:	4298      	cmp	r0, r3
 8002dfa:	bfb8      	it	lt
 8002dfc:	4618      	movlt	r0, r3
 8002dfe:	e7a3      	b.n	8002d48 <_printf_i+0x130>
 8002e00:	2301      	movs	r3, #1
 8002e02:	464a      	mov	r2, r9
 8002e04:	4639      	mov	r1, r7
 8002e06:	4630      	mov	r0, r6
 8002e08:	47c0      	blx	r8
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	d09a      	beq.n	8002d44 <_printf_i+0x12c>
 8002e0e:	3501      	adds	r5, #1
 8002e10:	68e3      	ldr	r3, [r4, #12]
 8002e12:	9a03      	ldr	r2, [sp, #12]
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	42ab      	cmp	r3, r5
 8002e18:	dcf2      	bgt.n	8002e00 <_printf_i+0x1e8>
 8002e1a:	e7eb      	b.n	8002df4 <_printf_i+0x1dc>
 8002e1c:	2500      	movs	r5, #0
 8002e1e:	f104 0919 	add.w	r9, r4, #25
 8002e22:	e7f5      	b.n	8002e10 <_printf_i+0x1f8>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ac      	bne.n	8002d82 <_printf_i+0x16a>
 8002e28:	7803      	ldrb	r3, [r0, #0]
 8002e2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e32:	e76c      	b.n	8002d0e <_printf_i+0xf6>
 8002e34:	080030cd 	.word	0x080030cd
 8002e38:	080030de 	.word	0x080030de

08002e3c <_sbrk_r>:
 8002e3c:	b538      	push	{r3, r4, r5, lr}
 8002e3e:	2300      	movs	r3, #0
 8002e40:	4c05      	ldr	r4, [pc, #20]	; (8002e58 <_sbrk_r+0x1c>)
 8002e42:	4605      	mov	r5, r0
 8002e44:	4608      	mov	r0, r1
 8002e46:	6023      	str	r3, [r4, #0]
 8002e48:	f7fd fc60 	bl	800070c <_sbrk>
 8002e4c:	1c43      	adds	r3, r0, #1
 8002e4e:	d102      	bne.n	8002e56 <_sbrk_r+0x1a>
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	b103      	cbz	r3, 8002e56 <_sbrk_r+0x1a>
 8002e54:	602b      	str	r3, [r5, #0]
 8002e56:	bd38      	pop	{r3, r4, r5, pc}
 8002e58:	2000011c 	.word	0x2000011c

08002e5c <__sread>:
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	460c      	mov	r4, r1
 8002e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e64:	f000 f8a4 	bl	8002fb0 <_read_r>
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	bfab      	itete	ge
 8002e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8002e70:	181b      	addge	r3, r3, r0
 8002e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e76:	bfac      	ite	ge
 8002e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e7a:	81a3      	strhlt	r3, [r4, #12]
 8002e7c:	bd10      	pop	{r4, pc}

08002e7e <__swrite>:
 8002e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e82:	461f      	mov	r7, r3
 8002e84:	898b      	ldrh	r3, [r1, #12]
 8002e86:	4605      	mov	r5, r0
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	4616      	mov	r6, r2
 8002e8e:	d505      	bpl.n	8002e9c <__swrite+0x1e>
 8002e90:	2302      	movs	r3, #2
 8002e92:	2200      	movs	r2, #0
 8002e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e98:	f000 f868 	bl	8002f6c <_lseek_r>
 8002e9c:	89a3      	ldrh	r3, [r4, #12]
 8002e9e:	4632      	mov	r2, r6
 8002ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ea4:	81a3      	strh	r3, [r4, #12]
 8002ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eaa:	463b      	mov	r3, r7
 8002eac:	4628      	mov	r0, r5
 8002eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002eb2:	f000 b817 	b.w	8002ee4 <_write_r>

08002eb6 <__sseek>:
 8002eb6:	b510      	push	{r4, lr}
 8002eb8:	460c      	mov	r4, r1
 8002eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ebe:	f000 f855 	bl	8002f6c <_lseek_r>
 8002ec2:	1c43      	adds	r3, r0, #1
 8002ec4:	89a3      	ldrh	r3, [r4, #12]
 8002ec6:	bf15      	itete	ne
 8002ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ed2:	81a3      	strheq	r3, [r4, #12]
 8002ed4:	bf18      	it	ne
 8002ed6:	81a3      	strhne	r3, [r4, #12]
 8002ed8:	bd10      	pop	{r4, pc}

08002eda <__sclose>:
 8002eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ede:	f000 b813 	b.w	8002f08 <_close_r>
	...

08002ee4 <_write_r>:
 8002ee4:	b538      	push	{r3, r4, r5, lr}
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	4608      	mov	r0, r1
 8002eea:	4611      	mov	r1, r2
 8002eec:	2200      	movs	r2, #0
 8002eee:	4c05      	ldr	r4, [pc, #20]	; (8002f04 <_write_r+0x20>)
 8002ef0:	6022      	str	r2, [r4, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f7fd f940 	bl	8000178 <_write>
 8002ef8:	1c43      	adds	r3, r0, #1
 8002efa:	d102      	bne.n	8002f02 <_write_r+0x1e>
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	b103      	cbz	r3, 8002f02 <_write_r+0x1e>
 8002f00:	602b      	str	r3, [r5, #0]
 8002f02:	bd38      	pop	{r3, r4, r5, pc}
 8002f04:	2000011c 	.word	0x2000011c

08002f08 <_close_r>:
 8002f08:	b538      	push	{r3, r4, r5, lr}
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	4c05      	ldr	r4, [pc, #20]	; (8002f24 <_close_r+0x1c>)
 8002f0e:	4605      	mov	r5, r0
 8002f10:	4608      	mov	r0, r1
 8002f12:	6023      	str	r3, [r4, #0]
 8002f14:	f7fd fbc9 	bl	80006aa <_close>
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	d102      	bne.n	8002f22 <_close_r+0x1a>
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	b103      	cbz	r3, 8002f22 <_close_r+0x1a>
 8002f20:	602b      	str	r3, [r5, #0]
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
 8002f24:	2000011c 	.word	0x2000011c

08002f28 <_fstat_r>:
 8002f28:	b538      	push	{r3, r4, r5, lr}
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	4c06      	ldr	r4, [pc, #24]	; (8002f48 <_fstat_r+0x20>)
 8002f2e:	4605      	mov	r5, r0
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	6023      	str	r3, [r4, #0]
 8002f36:	f7fd fbc3 	bl	80006c0 <_fstat>
 8002f3a:	1c43      	adds	r3, r0, #1
 8002f3c:	d102      	bne.n	8002f44 <_fstat_r+0x1c>
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	b103      	cbz	r3, 8002f44 <_fstat_r+0x1c>
 8002f42:	602b      	str	r3, [r5, #0]
 8002f44:	bd38      	pop	{r3, r4, r5, pc}
 8002f46:	bf00      	nop
 8002f48:	2000011c 	.word	0x2000011c

08002f4c <_isatty_r>:
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	2300      	movs	r3, #0
 8002f50:	4c05      	ldr	r4, [pc, #20]	; (8002f68 <_isatty_r+0x1c>)
 8002f52:	4605      	mov	r5, r0
 8002f54:	4608      	mov	r0, r1
 8002f56:	6023      	str	r3, [r4, #0]
 8002f58:	f7fd fbc1 	bl	80006de <_isatty>
 8002f5c:	1c43      	adds	r3, r0, #1
 8002f5e:	d102      	bne.n	8002f66 <_isatty_r+0x1a>
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	b103      	cbz	r3, 8002f66 <_isatty_r+0x1a>
 8002f64:	602b      	str	r3, [r5, #0]
 8002f66:	bd38      	pop	{r3, r4, r5, pc}
 8002f68:	2000011c 	.word	0x2000011c

08002f6c <_lseek_r>:
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	4605      	mov	r5, r0
 8002f70:	4608      	mov	r0, r1
 8002f72:	4611      	mov	r1, r2
 8002f74:	2200      	movs	r2, #0
 8002f76:	4c05      	ldr	r4, [pc, #20]	; (8002f8c <_lseek_r+0x20>)
 8002f78:	6022      	str	r2, [r4, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f7fd fbb9 	bl	80006f2 <_lseek>
 8002f80:	1c43      	adds	r3, r0, #1
 8002f82:	d102      	bne.n	8002f8a <_lseek_r+0x1e>
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	b103      	cbz	r3, 8002f8a <_lseek_r+0x1e>
 8002f88:	602b      	str	r3, [r5, #0]
 8002f8a:	bd38      	pop	{r3, r4, r5, pc}
 8002f8c:	2000011c 	.word	0x2000011c

08002f90 <memchr>:
 8002f90:	b510      	push	{r4, lr}
 8002f92:	b2c9      	uxtb	r1, r1
 8002f94:	4402      	add	r2, r0
 8002f96:	4290      	cmp	r0, r2
 8002f98:	4603      	mov	r3, r0
 8002f9a:	d101      	bne.n	8002fa0 <memchr+0x10>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e003      	b.n	8002fa8 <memchr+0x18>
 8002fa0:	781c      	ldrb	r4, [r3, #0]
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	428c      	cmp	r4, r1
 8002fa6:	d1f6      	bne.n	8002f96 <memchr+0x6>
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd10      	pop	{r4, pc}

08002fac <__malloc_lock>:
 8002fac:	4770      	bx	lr

08002fae <__malloc_unlock>:
 8002fae:	4770      	bx	lr

08002fb0 <_read_r>:
 8002fb0:	b538      	push	{r3, r4, r5, lr}
 8002fb2:	4605      	mov	r5, r0
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4c05      	ldr	r4, [pc, #20]	; (8002fd0 <_read_r+0x20>)
 8002fbc:	6022      	str	r2, [r4, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f7fd fb56 	bl	8000670 <_read>
 8002fc4:	1c43      	adds	r3, r0, #1
 8002fc6:	d102      	bne.n	8002fce <_read_r+0x1e>
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	b103      	cbz	r3, 8002fce <_read_r+0x1e>
 8002fcc:	602b      	str	r3, [r5, #0]
 8002fce:	bd38      	pop	{r3, r4, r5, pc}
 8002fd0:	2000011c 	.word	0x2000011c

08002fd4 <_init>:
 8002fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd6:	bf00      	nop
 8002fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fda:	bc08      	pop	{r3}
 8002fdc:	469e      	mov	lr, r3
 8002fde:	4770      	bx	lr

08002fe0 <_fini>:
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	bf00      	nop
 8002fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe6:	bc08      	pop	{r3}
 8002fe8:	469e      	mov	lr, r3
 8002fea:	4770      	bx	lr
