
018_SPI_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e5c  08002e5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002e5c  08002e5c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e5c  08002e5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e5c  08002e5c  00012e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08002ed4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002ed4  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094c0  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018a1  00000000  00000000  00029559  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  0002ae00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  0002b670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014c57  00000000  00000000  0002be18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006da9  00000000  00000000  00040a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ce81  00000000  00000000  00047818  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b4699  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b4  00000000  00000000  000b4714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d40 	.word	0x08002d40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002d40 	.word	0x08002d40

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb07 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82d 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8cf 	bl	80002fc <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f86d 	bl	800023c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8a1 	bl	80002a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("CONFIGURACION CORRECTA DE ESCLAVO\r\n");
 8000166:	480f      	ldr	r0, [pc, #60]	; (80001a4 <main+0x58>)
 8000168:	f001 ff0c 	bl	8001f84 <puts>
  /* USER CODE END 2 */
  uint8_t RxData;
  uint8_t count = 0;
 800016c:	2300      	movs	r3, #0
 800016e:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(NSS_Slave_GPIO_Port, NSS_Slave_Pin)==0){
 8000170:	2110      	movs	r1, #16
 8000172:	480d      	ldr	r0, [pc, #52]	; (80001a8 <main+0x5c>)
 8000174:	f000 fd96 	bl	8000ca4 <HAL_GPIO_ReadPin>
 8000178:	4603      	mov	r3, r0
 800017a:	2b00      	cmp	r3, #0
 800017c:	d1f8      	bne.n	8000170 <main+0x24>
		  HAL_SPI_TransmitReceive(&hspi1, &count, &RxData,1 , HAL_MAX_DELAY);
 800017e:	1dfa      	adds	r2, r7, #7
 8000180:	1db9      	adds	r1, r7, #6
 8000182:	f04f 33ff 	mov.w	r3, #4294967295
 8000186:	9300      	str	r3, [sp, #0]
 8000188:	2301      	movs	r3, #1
 800018a:	4808      	ldr	r0, [pc, #32]	; (80001ac <main+0x60>)
 800018c:	f001 fa1f 	bl	80015ce <HAL_SPI_TransmitReceive>
		  printf("recibido del maestro->%d\r\n",RxData);
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	4619      	mov	r1, r3
 8000194:	4806      	ldr	r0, [pc, #24]	; (80001b0 <main+0x64>)
 8000196:	f001 fe81 	bl	8001e9c <iprintf>
		  count++;
 800019a:	79bb      	ldrb	r3, [r7, #6]
 800019c:	3301      	adds	r3, #1
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	71bb      	strb	r3, [r7, #6]
	  if(HAL_GPIO_ReadPin(NSS_Slave_GPIO_Port, NSS_Slave_Pin)==0){
 80001a2:	e7e5      	b.n	8000170 <main+0x24>
 80001a4:	08002d58 	.word	0x08002d58
 80001a8:	40010800 	.word	0x40010800
 80001ac:	200000d8 	.word	0x200000d8
 80001b0:	08002d7c 	.word	0x08002d7c

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	; 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 fe62 	bl	8001e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d6:	2301      	movs	r3, #1
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e8:	2302      	movs	r3, #2
 80001ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80001f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80001f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f107 0318 	add.w	r3, r7, #24
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 fd69 	bl	8000cd4 <HAL_RCC_OscConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000208:	f000 f8c4 	bl	8000394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
 800020e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000210:	2302      	movs	r3, #2
 8000212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2101      	movs	r1, #1
 8000224:	4618      	mov	r0, r3
 8000226:	f000 ffd5 	bl	80011d4 <HAL_RCC_ClockConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000230:	f000 f8b0 	bl	8000394 <Error_Handler>
  }
}
 8000234:	bf00      	nop
 8000236:	3740      	adds	r7, #64	; 0x40
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000242:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <MX_SPI1_Init+0x68>)
 8000244:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000246:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000248:	2200      	movs	r2, #0
 800024a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800024c:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <MX_SPI1_Init+0x64>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <MX_SPI1_Init+0x64>)
 800025a:	2200      	movs	r2, #0
 800025c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800025e:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000260:	2200      	movs	r2, #0
 8000262:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000264:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800026a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <MX_SPI1_Init+0x64>)
 800026e:	2200      	movs	r2, #0
 8000270:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000272:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000274:	2200      	movs	r2, #0
 8000276:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000278:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <MX_SPI1_Init+0x64>)
 800027a:	2200      	movs	r2, #0
 800027c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000280:	2200      	movs	r2, #0
 8000282:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000286:	220a      	movs	r2, #10
 8000288:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800028a:	4805      	ldr	r0, [pc, #20]	; (80002a0 <MX_SPI1_Init+0x64>)
 800028c:	f001 f93e 	bl	800150c <HAL_SPI_Init>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8000296:	f000 f87d 	bl	8000394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	200000d8 	.word	0x200000d8
 80002a4:	40013000 	.word	0x40013000

080002a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002ae:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <MX_USART1_UART_Init+0x50>)
 80002b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002ce:	220c      	movs	r2, #12
 80002d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002de:	4805      	ldr	r0, [pc, #20]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002e0:	f001 fb9f 	bl	8001a22 <HAL_UART_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002ea:	f000 f853 	bl	8000394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000098 	.word	0x20000098
 80002f8:	40013800 	.word	0x40013800

080002fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000302:	f107 0308 	add.w	r3, r7, #8
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <MX_GPIO_Init+0x64>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a12      	ldr	r2, [pc, #72]	; (8000360 <MX_GPIO_Init+0x64>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <MX_GPIO_Init+0x64>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	607b      	str	r3, [r7, #4]
 8000326:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <MX_GPIO_Init+0x64>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a0c      	ldr	r2, [pc, #48]	; (8000360 <MX_GPIO_Init+0x64>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <MX_GPIO_Init+0x64>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	603b      	str	r3, [r7, #0]
 800033e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : NSS_Slave_Pin */
  GPIO_InitStruct.Pin = NSS_Slave_Pin;
 8000340:	2310      	movs	r3, #16
 8000342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000348:	2301      	movs	r3, #1
 800034a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(NSS_Slave_GPIO_Port, &GPIO_InitStruct);
 800034c:	f107 0308 	add.w	r3, r7, #8
 8000350:	4619      	mov	r1, r3
 8000352:	4804      	ldr	r0, [pc, #16]	; (8000364 <MX_GPIO_Init+0x68>)
 8000354:	f000 fb4c 	bl	80009f0 <HAL_GPIO_Init>

}
 8000358:	bf00      	nop
 800035a:	3718      	adds	r7, #24
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40021000 	.word	0x40021000
 8000364:	40010800 	.word	0x40010800

08000368 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	uint8_t c;
	c = ch & 0x00FF;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	b2db      	uxtb	r3, r3
 8000374:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 10);
 8000376:	f107 010f 	add.w	r1, r7, #15
 800037a:	230a      	movs	r3, #10
 800037c:	2201      	movs	r2, #1
 800037e:	4804      	ldr	r0, [pc, #16]	; (8000390 <__io_putchar+0x28>)
 8000380:	f001 fb9c 	bl	8001abc <HAL_UART_Transmit>
	return ch;
 8000384:	687b      	ldr	r3, [r7, #4]
}
 8000386:	4618      	mov	r0, r3
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000098 	.word	0x20000098

08000394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <HAL_MspInit+0x5c>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a14      	ldr	r2, [pc, #80]	; (80003fc <HAL_MspInit+0x5c>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <HAL_MspInit+0x5c>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <HAL_MspInit+0x5c>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <HAL_MspInit+0x5c>)
 80003c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c8:	61d3      	str	r3, [r2, #28]
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <HAL_MspInit+0x5c>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <HAL_MspInit+0x60>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <HAL_MspInit+0x60>)
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010000 	.word	0x40010000

08000404 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a1b      	ldr	r2, [pc, #108]	; (800048c <HAL_SPI_MspInit+0x88>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d12f      	bne.n	8000484 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000424:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <HAL_SPI_MspInit+0x8c>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a19      	ldr	r2, [pc, #100]	; (8000490 <HAL_SPI_MspInit+0x8c>)
 800042a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b17      	ldr	r3, [pc, #92]	; (8000490 <HAL_SPI_MspInit+0x8c>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <HAL_SPI_MspInit+0x8c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a13      	ldr	r2, [pc, #76]	; (8000490 <HAL_SPI_MspInit+0x8c>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <HAL_SPI_MspInit+0x8c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000454:	23a0      	movs	r3, #160	; 0xa0
 8000456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	4619      	mov	r1, r3
 8000466:	480b      	ldr	r0, [pc, #44]	; (8000494 <HAL_SPI_MspInit+0x90>)
 8000468:	f000 fac2 	bl	80009f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800046c:	2340      	movs	r3, #64	; 0x40
 800046e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000470:	2302      	movs	r3, #2
 8000472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000474:	2303      	movs	r3, #3
 8000476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <HAL_SPI_MspInit+0x90>)
 8000480:	f000 fab6 	bl	80009f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000484:	bf00      	nop
 8000486:	3720      	adds	r7, #32
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40013000 	.word	0x40013000
 8000490:	40021000 	.word	0x40021000
 8000494:	40010800 	.word	0x40010800

08000498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a1c      	ldr	r2, [pc, #112]	; (8000524 <HAL_UART_MspInit+0x8c>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d131      	bne.n	800051c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a1a      	ldr	r2, [pc, #104]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a14      	ldr	r2, [pc, #80]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0304 	and.w	r3, r3, #4
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ee:	2302      	movs	r3, #2
 80004f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f2:	2303      	movs	r3, #3
 80004f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	4619      	mov	r1, r3
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <HAL_UART_MspInit+0x94>)
 80004fe:	f000 fa77 	bl	80009f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	4619      	mov	r1, r3
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <HAL_UART_MspInit+0x94>)
 8000518:	f000 fa6a 	bl	80009f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800051c:	bf00      	nop
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40013800 	.word	0x40013800
 8000528:	40021000 	.word	0x40021000
 800052c:	40010800 	.word	0x40010800

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <HardFault_Handler+0x4>

08000542 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <MemManage_Handler+0x4>

08000548 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <BusFault_Handler+0x4>

0800054e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <UsageFault_Handler+0x4>

08000554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057c:	f000 f938 	bl	80007f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	e00a      	b.n	80005ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000596:	f3af 8000 	nop.w
 800059a:	4601      	mov	r1, r0
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	60ba      	str	r2, [r7, #8]
 80005a2:	b2ca      	uxtb	r2, r1
 80005a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	3301      	adds	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	dbf0      	blt.n	8000596 <_read+0x12>
	}

return len;
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b086      	sub	sp, #24
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	60f8      	str	r0, [r7, #12]
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	e009      	b.n	80005e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	60ba      	str	r2, [r7, #8]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fec5 	bl	8000368 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	dbf1      	blt.n	80005d0 <_write+0x12>
	}
	return len;
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_close>:

int _close(int file)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
	return -1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800061c:	605a      	str	r2, [r3, #4]
	return 0;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <_isatty>:

int _isatty(int file)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
	return 1;
 8000632:	2301      	movs	r3, #1
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr

0800063e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800063e:	b480      	push	{r7}
 8000640:	b085      	sub	sp, #20
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
	return 0;
 800064a:	2300      	movs	r3, #0
}
 800064c:	4618      	mov	r0, r3
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
	...

08000658 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <_sbrk+0x50>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d102      	bne.n	800066e <_sbrk+0x16>
		heap_end = &end;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <_sbrk+0x50>)
 800066a:	4a10      	ldr	r2, [pc, #64]	; (80006ac <_sbrk+0x54>)
 800066c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <_sbrk+0x50>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <_sbrk+0x50>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4413      	add	r3, r2
 800067c:	466a      	mov	r2, sp
 800067e:	4293      	cmp	r3, r2
 8000680:	d907      	bls.n	8000692 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000682:	f001 fbd9 	bl	8001e38 <__errno>
 8000686:	4602      	mov	r2, r0
 8000688:	230c      	movs	r3, #12
 800068a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	e006      	b.n	80006a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <_sbrk+0x50>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	4a03      	ldr	r2, [pc, #12]	; (80006a8 <_sbrk+0x50>)
 800069c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800069e:	68fb      	ldr	r3, [r7, #12]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000008c 	.word	0x2000008c
 80006ac:	20000138 	.word	0x20000138

080006b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <SystemInit+0x5c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a14      	ldr	r2, [pc, #80]	; (800070c <SystemInit+0x5c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <SystemInit+0x5c>)
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	4911      	ldr	r1, [pc, #68]	; (800070c <SystemInit+0x5c>)
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <SystemInit+0x60>)
 80006c8:	4013      	ands	r3, r2
 80006ca:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <SystemInit+0x5c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <SystemInit+0x5c>)
 80006d2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <SystemInit+0x5c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0a      	ldr	r2, [pc, #40]	; (800070c <SystemInit+0x5c>)
 80006e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006e6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <SystemInit+0x5c>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	4a07      	ldr	r2, [pc, #28]	; (800070c <SystemInit+0x5c>)
 80006ee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006f2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <SystemInit+0x5c>)
 80006f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006fa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <SystemInit+0x64>)
 80006fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000702:	609a      	str	r2, [r3, #8]
#endif 
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	40021000 	.word	0x40021000
 8000710:	f8ff0000 	.word	0xf8ff0000
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000718:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800071a:	e003      	b.n	8000724 <LoopCopyDataInit>

0800071c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800071e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000720:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000722:	3104      	adds	r1, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000724:	480a      	ldr	r0, [pc, #40]	; (8000750 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000728:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800072a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800072c:	d3f6      	bcc.n	800071c <CopyDataInit>
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000730:	e002      	b.n	8000738 <LoopFillZerobss>

08000732 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000734:	f842 3b04 	str.w	r3, [r2], #4

08000738 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800073a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800073c:	d3f9      	bcc.n	8000732 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800073e:	f7ff ffb7 	bl	80006b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000742:	f001 fb7f 	bl	8001e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000746:	f7ff fd01 	bl	800014c <main>
  bx lr
 800074a:	4770      	bx	lr
  ldr r3, =_sidata
 800074c:	08002e64 	.word	0x08002e64
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000754:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000758:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800075c:	20000138 	.word	0x20000138

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_Init+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <HAL_Init+0x28>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000774:	2003      	movs	r0, #3
 8000776:	f000 f907 	bl	8000988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077a:	2000      	movs	r0, #0
 800077c:	f000 f808 	bl	8000790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000780:	f7ff fe0e 	bl	80003a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40022000 	.word	0x40022000

08000790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_InitTick+0x54>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x58>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f911 	bl	80009d6 <HAL_SYSTICK_Config>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00e      	b.n	80007dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d80a      	bhi.n	80007da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f000 f8e7 	bl	800099e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <HAL_InitTick+0x5c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000004 	.word	0x20000004

080007f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_IncTick+0x1c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_IncTick+0x20>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	4a03      	ldr	r2, [pc, #12]	; (8000810 <HAL_IncTick+0x20>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	20000008 	.word	0x20000008
 8000810:	20000130 	.word	0x20000130

08000814 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <HAL_GetTick+0x10>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	20000130 	.word	0x20000130

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	490c      	ldr	r1, [pc, #48]	; (80008d8 <__NVIC_SetPriority+0x4c>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b4:	e00a      	b.n	80008cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4908      	ldr	r1, [pc, #32]	; (80008dc <__NVIC_SetPriority+0x50>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	3b04      	subs	r3, #4
 80008c4:	0112      	lsls	r2, r2, #4
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	761a      	strb	r2, [r3, #24]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f1c3 0307 	rsb	r3, r3, #7
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	bf28      	it	cs
 80008fe:	2304      	movcs	r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	2b06      	cmp	r3, #6
 8000908:	d902      	bls.n	8000910 <NVIC_EncodePriority+0x30>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b03      	subs	r3, #3
 800090e:	e000      	b.n	8000912 <NVIC_EncodePriority+0x32>
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 32ff 	mov.w	r2, #4294967295
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	f04f 31ff 	mov.w	r1, #4294967295
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43d9      	mvns	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000954:	d301      	bcc.n	800095a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000956:	2301      	movs	r3, #1
 8000958:	e00f      	b.n	800097a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <SysTick_Config+0x40>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000962:	210f      	movs	r1, #15
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f7ff ff90 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <SysTick_Config+0x40>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <SysTick_Config+0x40>)
 8000974:	2207      	movs	r2, #7
 8000976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	e000e010 	.word	0xe000e010

08000988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff49 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b0:	f7ff ff5e 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	6978      	ldr	r0, [r7, #20]
 80009bc:	f7ff ff90 	bl	80008e0 <NVIC_EncodePriority>
 80009c0:	4602      	mov	r2, r0
 80009c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff5f 	bl	800088c <__NVIC_SetPriority>
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ffb0 	bl	8000944 <SysTick_Config>
 80009e4:	4603      	mov	r3, r0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b08b      	sub	sp, #44	; 0x2c
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a02:	e127      	b.n	8000c54 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a04:	2201      	movs	r2, #1
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	4013      	ands	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	f040 8116 	bne.w	8000c4e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	2b12      	cmp	r3, #18
 8000a28:	d034      	beq.n	8000a94 <HAL_GPIO_Init+0xa4>
 8000a2a:	2b12      	cmp	r3, #18
 8000a2c:	d80d      	bhi.n	8000a4a <HAL_GPIO_Init+0x5a>
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d02b      	beq.n	8000a8a <HAL_GPIO_Init+0x9a>
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d804      	bhi.n	8000a40 <HAL_GPIO_Init+0x50>
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d031      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d01c      	beq.n	8000a78 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a3e:	e048      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d043      	beq.n	8000acc <HAL_GPIO_Init+0xdc>
 8000a44:	2b11      	cmp	r3, #17
 8000a46:	d01b      	beq.n	8000a80 <HAL_GPIO_Init+0x90>
          break;
 8000a48:	e043      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a4a:	4a89      	ldr	r2, [pc, #548]	; (8000c70 <HAL_GPIO_Init+0x280>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d026      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
 8000a50:	4a87      	ldr	r2, [pc, #540]	; (8000c70 <HAL_GPIO_Init+0x280>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d806      	bhi.n	8000a64 <HAL_GPIO_Init+0x74>
 8000a56:	4a87      	ldr	r2, [pc, #540]	; (8000c74 <HAL_GPIO_Init+0x284>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d020      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
 8000a5c:	4a86      	ldr	r2, [pc, #536]	; (8000c78 <HAL_GPIO_Init+0x288>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d01d      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
          break;
 8000a62:	e036      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a64:	4a85      	ldr	r2, [pc, #532]	; (8000c7c <HAL_GPIO_Init+0x28c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d019      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
 8000a6a:	4a85      	ldr	r2, [pc, #532]	; (8000c80 <HAL_GPIO_Init+0x290>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d016      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
 8000a70:	4a84      	ldr	r2, [pc, #528]	; (8000c84 <HAL_GPIO_Init+0x294>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d013      	beq.n	8000a9e <HAL_GPIO_Init+0xae>
          break;
 8000a76:	e02c      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	623b      	str	r3, [r7, #32]
          break;
 8000a7e:	e028      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	3304      	adds	r3, #4
 8000a86:	623b      	str	r3, [r7, #32]
          break;
 8000a88:	e023      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	3308      	adds	r3, #8
 8000a90:	623b      	str	r3, [r7, #32]
          break;
 8000a92:	e01e      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	330c      	adds	r3, #12
 8000a9a:	623b      	str	r3, [r7, #32]
          break;
 8000a9c:	e019      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d102      	bne.n	8000aac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	623b      	str	r3, [r7, #32]
          break;
 8000aaa:	e012      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d105      	bne.n	8000ac0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	69fa      	ldr	r2, [r7, #28]
 8000abc:	611a      	str	r2, [r3, #16]
          break;
 8000abe:	e008      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	69fa      	ldr	r2, [r7, #28]
 8000ac8:	615a      	str	r2, [r3, #20]
          break;
 8000aca:	e002      	b.n	8000ad2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
          break;
 8000ad0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	2bff      	cmp	r3, #255	; 0xff
 8000ad6:	d801      	bhi.n	8000adc <HAL_GPIO_Init+0xec>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	e001      	b.n	8000ae0 <HAL_GPIO_Init+0xf0>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3304      	adds	r3, #4
 8000ae0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	2bff      	cmp	r3, #255	; 0xff
 8000ae6:	d802      	bhi.n	8000aee <HAL_GPIO_Init+0xfe>
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	e002      	b.n	8000af4 <HAL_GPIO_Init+0x104>
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	3b08      	subs	r3, #8
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	210f      	movs	r1, #15
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	401a      	ands	r2, r3
 8000b06:	6a39      	ldr	r1, [r7, #32]
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f000 8096 	beq.w	8000c4e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b22:	4b59      	ldr	r3, [pc, #356]	; (8000c88 <HAL_GPIO_Init+0x298>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a58      	ldr	r2, [pc, #352]	; (8000c88 <HAL_GPIO_Init+0x298>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b56      	ldr	r3, [pc, #344]	; (8000c88 <HAL_GPIO_Init+0x298>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b3a:	4a54      	ldr	r2, [pc, #336]	; (8000c8c <HAL_GPIO_Init+0x29c>)
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	3302      	adds	r3, #2
 8000b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b46:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	f003 0303 	and.w	r3, r3, #3
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	220f      	movs	r2, #15
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a4b      	ldr	r2, [pc, #300]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d013      	beq.n	8000b8e <HAL_GPIO_Init+0x19e>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a4a      	ldr	r2, [pc, #296]	; (8000c94 <HAL_GPIO_Init+0x2a4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d00d      	beq.n	8000b8a <HAL_GPIO_Init+0x19a>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a49      	ldr	r2, [pc, #292]	; (8000c98 <HAL_GPIO_Init+0x2a8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d007      	beq.n	8000b86 <HAL_GPIO_Init+0x196>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a48      	ldr	r2, [pc, #288]	; (8000c9c <HAL_GPIO_Init+0x2ac>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d101      	bne.n	8000b82 <HAL_GPIO_Init+0x192>
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e006      	b.n	8000b90 <HAL_GPIO_Init+0x1a0>
 8000b82:	2304      	movs	r3, #4
 8000b84:	e004      	b.n	8000b90 <HAL_GPIO_Init+0x1a0>
 8000b86:	2302      	movs	r3, #2
 8000b88:	e002      	b.n	8000b90 <HAL_GPIO_Init+0x1a0>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e000      	b.n	8000b90 <HAL_GPIO_Init+0x1a0>
 8000b8e:	2300      	movs	r3, #0
 8000b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b92:	f002 0203 	and.w	r2, r2, #3
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	4093      	lsls	r3, r2
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ba0:	493a      	ldr	r1, [pc, #232]	; (8000c8c <HAL_GPIO_Init+0x29c>)
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bba:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4938      	ldr	r1, [pc, #224]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	600b      	str	r3, [r1, #0]
 8000bc6:	e006      	b.n	8000bd6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bc8:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	4933      	ldr	r1, [pc, #204]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d006      	beq.n	8000bf0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000be2:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	492e      	ldr	r1, [pc, #184]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	604b      	str	r3, [r1, #4]
 8000bee:	e006      	b.n	8000bfe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	4929      	ldr	r1, [pc, #164]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	4924      	ldr	r1, [pc, #144]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	608b      	str	r3, [r1, #8]
 8000c16:	e006      	b.n	8000c26 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c18:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	491f      	ldr	r1, [pc, #124]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d006      	beq.n	8000c40 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	491a      	ldr	r1, [pc, #104]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60cb      	str	r3, [r1, #12]
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	4915      	ldr	r1, [pc, #84]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	3301      	adds	r3, #1
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f47f aed0 	bne.w	8000a04 <HAL_GPIO_Init+0x14>
  }
}
 8000c64:	bf00      	nop
 8000c66:	372c      	adds	r7, #44	; 0x2c
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	10210000 	.word	0x10210000
 8000c74:	10110000 	.word	0x10110000
 8000c78:	10120000 	.word	0x10120000
 8000c7c:	10310000 	.word	0x10310000
 8000c80:	10320000 	.word	0x10320000
 8000c84:	10220000 	.word	0x10220000
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	40010800 	.word	0x40010800
 8000c94:	40010c00 	.word	0x40010c00
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	40011400 	.word	0x40011400
 8000ca0:	40010400 	.word	0x40010400

08000ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d002      	beq.n	8000cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e001      	b.n	8000cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
	...

08000cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e26c      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8087 	beq.w	8000e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf4:	4b92      	ldr	r3, [pc, #584]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d00c      	beq.n	8000d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d00:	4b8f      	ldr	r3, [pc, #572]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	d112      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
 8000d0c:	4b8c      	ldr	r3, [pc, #560]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d18:	d10b      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1a:	4b89      	ldr	r3, [pc, #548]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d06c      	beq.n	8000e00 <HAL_RCC_OscConfig+0x12c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d168      	bne.n	8000e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e246      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d3a:	d106      	bne.n	8000d4a <HAL_RCC_OscConfig+0x76>
 8000d3c:	4b80      	ldr	r3, [pc, #512]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a7f      	ldr	r2, [pc, #508]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	e02e      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x98>
 8000d52:	4b7b      	ldr	r3, [pc, #492]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a7a      	ldr	r2, [pc, #488]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	4b78      	ldr	r3, [pc, #480]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a77      	ldr	r2, [pc, #476]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e01d      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0xbc>
 8000d76:	4b72      	ldr	r3, [pc, #456]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a71      	ldr	r2, [pc, #452]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4b6f      	ldr	r3, [pc, #444]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a6e      	ldr	r2, [pc, #440]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e00b      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d90:	4b6b      	ldr	r3, [pc, #428]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a6a      	ldr	r2, [pc, #424]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b68      	ldr	r3, [pc, #416]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a67      	ldr	r2, [pc, #412]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d013      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fd30 	bl	8000814 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fd2c 	bl	8000814 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	; 0x64
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e1fa      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	4b5d      	ldr	r3, [pc, #372]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0xe4>
 8000dd6:	e014      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fd1c 	bl	8000814 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fd18 	bl	8000814 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b64      	cmp	r3, #100	; 0x64
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e1e6      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f0      	bne.n	8000de0 <HAL_RCC_OscConfig+0x10c>
 8000dfe:	e000      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d063      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00b      	beq.n	8000e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e1a:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d11c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
 8000e26:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d116      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e32:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d001      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e1ba      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	4939      	ldr	r1, [pc, #228]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5e:	e03a      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d020      	beq.n	8000eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e68:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fcd1 	bl	8000814 <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e76:	f7ff fccd 	bl	8000814 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e19b      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f0      	beq.n	8000e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4927      	ldr	r1, [pc, #156]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	600b      	str	r3, [r1, #0]
 8000ea8:	e015      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fcb0 	bl	8000814 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fcac 	bl	8000814 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e17a      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d03a      	beq.n	8000f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d019      	beq.n	8000f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fc90 	bl	8000814 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fc8c 	bl	8000814 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e15a      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f0      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f000 fada 	bl	80014d0 <RCC_Delay>
 8000f1c:	e01c      	b.n	8000f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fc76 	bl	8000814 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2a:	e00f      	b.n	8000f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fc72 	bl	8000814 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d908      	bls.n	8000f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e140      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	42420000 	.word	0x42420000
 8000f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4c:	4b9e      	ldr	r3, [pc, #632]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e9      	bne.n	8000f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80a6 	beq.w	80010b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6a:	4b97      	ldr	r3, [pc, #604]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10d      	bne.n	8000f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b94      	ldr	r3, [pc, #592]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a93      	ldr	r2, [pc, #588]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b91      	ldr	r3, [pc, #580]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f92:	4b8e      	ldr	r3, [pc, #568]	; (80011cc <HAL_RCC_OscConfig+0x4f8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d118      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9e:	4b8b      	ldr	r3, [pc, #556]	; (80011cc <HAL_RCC_OscConfig+0x4f8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a8a      	ldr	r2, [pc, #552]	; (80011cc <HAL_RCC_OscConfig+0x4f8>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fc33 	bl	8000814 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb2:	f7ff fc2f 	bl	8000814 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b64      	cmp	r3, #100	; 0x64
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e0fd      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	4b81      	ldr	r3, [pc, #516]	; (80011cc <HAL_RCC_OscConfig+0x4f8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f0      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d106      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x312>
 8000fd8:	4b7b      	ldr	r3, [pc, #492]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4a7a      	ldr	r2, [pc, #488]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6213      	str	r3, [r2, #32]
 8000fe4:	e02d      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x334>
 8000fee:	4b76      	ldr	r3, [pc, #472]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	4a75      	ldr	r2, [pc, #468]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	6213      	str	r3, [r2, #32]
 8000ffa:	4b73      	ldr	r3, [pc, #460]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4a72      	ldr	r2, [pc, #456]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001000:	f023 0304 	bic.w	r3, r3, #4
 8001004:	6213      	str	r3, [r2, #32]
 8001006:	e01c      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b05      	cmp	r3, #5
 800100e:	d10c      	bne.n	800102a <HAL_RCC_OscConfig+0x356>
 8001010:	4b6d      	ldr	r3, [pc, #436]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a6c      	ldr	r2, [pc, #432]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6213      	str	r3, [r2, #32]
 800101c:	4b6a      	ldr	r3, [pc, #424]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a69      	ldr	r2, [pc, #420]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6213      	str	r3, [r2, #32]
 8001028:	e00b      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 800102a:	4b67      	ldr	r3, [pc, #412]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4a66      	ldr	r2, [pc, #408]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	6213      	str	r3, [r2, #32]
 8001036:	4b64      	ldr	r3, [pc, #400]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a63      	ldr	r2, [pc, #396]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800103c:	f023 0304 	bic.w	r3, r3, #4
 8001040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d015      	beq.n	8001076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104a:	f7ff fbe3 	bl	8000814 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001050:	e00a      	b.n	8001068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001052:	f7ff fbdf 	bl	8000814 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001060:	4293      	cmp	r3, r2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e0ab      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	4b57      	ldr	r3, [pc, #348]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0ee      	beq.n	8001052 <HAL_RCC_OscConfig+0x37e>
 8001074:	e014      	b.n	80010a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fbcd 	bl	8000814 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800107c:	e00a      	b.n	8001094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107e:	f7ff fbc9 	bl	8000814 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f241 3288 	movw	r2, #5000	; 0x1388
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e095      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001094:	4b4c      	ldr	r3, [pc, #304]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1ee      	bne.n	800107e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d105      	bne.n	80010b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a6:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a47      	ldr	r2, [pc, #284]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8081 	beq.w	80011be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010bc:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d061      	beq.n	800118c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d146      	bne.n	800115e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d0:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <HAL_RCC_OscConfig+0x4fc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fb9d 	bl	8000814 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010de:	f7ff fb99 	bl	8000814 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e067      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f0      	bne.n	80010de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001104:	d108      	bne.n	8001118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001106:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	492d      	ldr	r1, [pc, #180]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a19      	ldr	r1, [r3, #32]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	430b      	orrs	r3, r1
 800112a:	4927      	ldr	r1, [pc, #156]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <HAL_RCC_OscConfig+0x4fc>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fb6d 	bl	8000814 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113e:	f7ff fb69 	bl	8000814 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e037      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x46a>
 800115c:	e02f      	b.n	80011be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_RCC_OscConfig+0x4fc>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fb56 	bl	8000814 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116c:	f7ff fb52 	bl	8000814 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e020      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x498>
 800118a:	e018      	b.n	80011be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e013      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d106      	bne.n	80011ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d001      	beq.n	80011be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40007000 	.word	0x40007000
 80011d0:	42420060 	.word	0x42420060

080011d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0d0      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b6a      	ldr	r3, [pc, #424]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d910      	bls.n	8001218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b67      	ldr	r3, [pc, #412]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 0207 	bic.w	r2, r3, #7
 80011fe:	4965      	ldr	r1, [pc, #404]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001206:	4b63      	ldr	r3, [pc, #396]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d001      	beq.n	8001218 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0b8      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d020      	beq.n	8001266 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001230:	4b59      	ldr	r3, [pc, #356]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4a58      	ldr	r2, [pc, #352]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800123a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001248:	4b53      	ldr	r3, [pc, #332]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001252:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001254:	4b50      	ldr	r3, [pc, #320]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	494d      	ldr	r1, [pc, #308]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d040      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d115      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e07f      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001292:	4b41      	ldr	r3, [pc, #260]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e073      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e06b      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b2:	4b39      	ldr	r3, [pc, #228]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f023 0203 	bic.w	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4936      	ldr	r1, [pc, #216]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c4:	f7ff faa6 	bl	8000814 <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012cc:	f7ff faa2 	bl	8000814 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e053      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 020c 	and.w	r2, r3, #12
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d1eb      	bne.n	80012cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d210      	bcs.n	8001324 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 0207 	bic.w	r2, r3, #7
 800130a:	4922      	ldr	r1, [pc, #136]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d001      	beq.n	8001324 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e032      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d008      	beq.n	8001342 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4916      	ldr	r1, [pc, #88]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d009      	beq.n	8001362 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	490e      	ldr	r1, [pc, #56]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	4313      	orrs	r3, r2
 8001360:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001362:	f000 f821 	bl	80013a8 <HAL_RCC_GetSysClockFreq>
 8001366:	4601      	mov	r1, r0
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <HAL_RCC_ClockConfig+0x1c8>)
 8001374:	5cd3      	ldrb	r3, [r2, r3]
 8001376:	fa21 f303 	lsr.w	r3, r1, r3
 800137a:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <HAL_RCC_ClockConfig+0x1cc>)
 800137c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fa04 	bl	8000790 <HAL_InitTick>

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40022000 	.word	0x40022000
 8001398:	40021000 	.word	0x40021000
 800139c:	08002dac 	.word	0x08002dac
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a8:	b490      	push	{r4, r7}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013b0:	1d3c      	adds	r4, r7, #4
 80013b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <HAL_RCC_GetSysClockFreq+0xb4>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d002      	beq.n	80013e8 <HAL_RCC_GetSysClockFreq+0x40>
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d003      	beq.n	80013ee <HAL_RCC_GetSysClockFreq+0x46>
 80013e6:	e02d      	b.n	8001444 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013ea:	623b      	str	r3, [r7, #32]
      break;
 80013ec:	e02d      	b.n	800144a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	0c9b      	lsrs	r3, r3, #18
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013fa:	4413      	add	r3, r2
 80013fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001400:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d013      	beq.n	8001434 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_RCC_GetSysClockFreq+0xb8>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	0c5b      	lsrs	r3, r3, #17
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800141a:	4413      	add	r3, r2
 800141c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001420:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001426:	fb02 f203 	mul.w	r2, r2, r3
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
 8001432:	e004      	b.n	800143e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001438:	fb02 f303 	mul.w	r3, r2, r3
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	623b      	str	r3, [r7, #32]
      break;
 8001442:	e002      	b.n	800144a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001446:	623b      	str	r3, [r7, #32]
      break;
 8001448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800144a:	6a3b      	ldr	r3, [r7, #32]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3728      	adds	r7, #40	; 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bc90      	pop	{r4, r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	08002d98 	.word	0x08002d98
 800145c:	08002da8 	.word	0x08002da8
 8001460:	40021000 	.word	0x40021000
 8001464:	007a1200 	.word	0x007a1200
 8001468:	003d0900 	.word	0x003d0900

0800146c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <HAL_RCC_GetHCLKFreq+0x10>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000000 	.word	0x20000000

08001480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001484:	f7ff fff2 	bl	800146c <HAL_RCC_GetHCLKFreq>
 8001488:	4601      	mov	r1, r0
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	08002dbc 	.word	0x08002dbc

080014a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014ac:	f7ff ffde 	bl	800146c <HAL_RCC_GetHCLKFreq>
 80014b0:	4601      	mov	r1, r0
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	0adb      	lsrs	r3, r3, #11
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	4a03      	ldr	r2, [pc, #12]	; (80014cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	08002dbc 	.word	0x08002dbc

080014d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <RCC_Delay+0x34>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <RCC_Delay+0x38>)
 80014de:	fba2 2303 	umull	r2, r3, r2, r3
 80014e2:	0a5b      	lsrs	r3, r3, #9
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014ec:	bf00      	nop
  }
  while (Delay --);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1e5a      	subs	r2, r3, #1
 80014f2:	60fa      	str	r2, [r7, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f9      	bne.n	80014ec <RCC_Delay+0x1c>
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000000 	.word	0x20000000
 8001508:	10624dd3 	.word	0x10624dd3

0800150c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e053      	b.n	80015c6 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d106      	bne.n	800153e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7fe ff63 	bl	8000404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2202      	movs	r2, #2
 8001542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001554:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	ea42 0103 	orr.w	r1, r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	0c1a      	lsrs	r2, r3, #16
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f002 0204 	and.w	r2, r2, #4
 80015a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	69da      	ldr	r2, [r3, #28]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b08c      	sub	sp, #48	; 0x30
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80015dc:	2301      	movs	r3, #1
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_SPI_TransmitReceive+0x26>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e18a      	b.n	800190a <HAL_SPI_TransmitReceive+0x33c>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80015fc:	f7ff f90a 	bl	8000814 <HAL_GetTick>
 8001600:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161a:	2b01      	cmp	r3, #1
 800161c:	d00f      	beq.n	800163e <HAL_SPI_TransmitReceive+0x70>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001624:	d107      	bne.n	8001636 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d103      	bne.n	8001636 <HAL_SPI_TransmitReceive+0x68>
 800162e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001632:	2b04      	cmp	r3, #4
 8001634:	d003      	beq.n	800163e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001636:	2302      	movs	r3, #2
 8001638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800163c:	e15b      	b.n	80018f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_SPI_TransmitReceive+0x82>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <HAL_SPI_TransmitReceive+0x82>
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d103      	bne.n	8001658 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001656:	e14e      	b.n	80018f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b04      	cmp	r3, #4
 8001662:	d003      	beq.n	800166c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2205      	movs	r2, #5
 8001668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	887a      	ldrh	r2, [r7, #2]
 8001682:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	887a      	ldrh	r2, [r7, #2]
 800168e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ac:	2b40      	cmp	r3, #64	; 0x40
 80016ae:	d007      	beq.n	80016c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016c8:	d178      	bne.n	80017bc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <HAL_SPI_TransmitReceive+0x10a>
 80016d2:	8b7b      	ldrh	r3, [r7, #26]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d166      	bne.n	80017a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	881a      	ldrh	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	1c9a      	adds	r2, r3, #2
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80016fc:	e053      	b.n	80017a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b02      	cmp	r3, #2
 800170a:	d11b      	bne.n	8001744 <HAL_SPI_TransmitReceive+0x176>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001710:	b29b      	uxth	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d016      	beq.n	8001744 <HAL_SPI_TransmitReceive+0x176>
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	2b01      	cmp	r3, #1
 800171a:	d113      	bne.n	8001744 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	881a      	ldrh	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	1c9a      	adds	r2, r3, #2
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001736:	b29b      	uxth	r3, r3
 8001738:	3b01      	subs	r3, #1
 800173a:	b29a      	uxth	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b01      	cmp	r3, #1
 8001750:	d119      	bne.n	8001786 <HAL_SPI_TransmitReceive+0x1b8>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d014      	beq.n	8001786 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001766:	b292      	uxth	r2, r2
 8001768:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176e:	1c9a      	adds	r2, r3, #2
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001778:	b29b      	uxth	r3, r3
 800177a:	3b01      	subs	r3, #1
 800177c:	b29a      	uxth	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001782:	2301      	movs	r3, #1
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001786:	f7ff f845 	bl	8000814 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001792:	429a      	cmp	r2, r3
 8001794:	d807      	bhi.n	80017a6 <HAL_SPI_TransmitReceive+0x1d8>
 8001796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d003      	beq.n	80017a6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80017a4:	e0a7      	b.n	80018f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1a6      	bne.n	80016fe <HAL_SPI_TransmitReceive+0x130>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1a1      	bne.n	80016fe <HAL_SPI_TransmitReceive+0x130>
 80017ba:	e07c      	b.n	80018b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HAL_SPI_TransmitReceive+0x1fc>
 80017c4:	8b7b      	ldrh	r3, [r7, #26]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d16b      	bne.n	80018a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	330c      	adds	r3, #12
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017f0:	e057      	b.n	80018a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d11c      	bne.n	800183a <HAL_SPI_TransmitReceive+0x26c>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001804:	b29b      	uxth	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d017      	beq.n	800183a <HAL_SPI_TransmitReceive+0x26c>
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	2b01      	cmp	r3, #1
 800180e:	d114      	bne.n	800183a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	330c      	adds	r3, #12
 800181a:	7812      	ldrb	r2, [r2, #0]
 800181c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800182c:	b29b      	uxth	r3, r3
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b01      	cmp	r3, #1
 8001846:	d119      	bne.n	800187c <HAL_SPI_TransmitReceive+0x2ae>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800184c:	b29b      	uxth	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d014      	beq.n	800187c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800186e:	b29b      	uxth	r3, r3
 8001870:	3b01      	subs	r3, #1
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001878:	2301      	movs	r3, #1
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800187c:	f7fe ffca 	bl	8000814 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001888:	429a      	cmp	r2, r3
 800188a:	d803      	bhi.n	8001894 <HAL_SPI_TransmitReceive+0x2c6>
 800188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800188e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001892:	d102      	bne.n	800189a <HAL_SPI_TransmitReceive+0x2cc>
 8001894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001896:	2b00      	cmp	r3, #0
 8001898:	d103      	bne.n	80018a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80018a0:	e029      	b.n	80018f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1a2      	bne.n	80017f2 <HAL_SPI_TransmitReceive+0x224>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d19d      	bne.n	80017f2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80018b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 f893 	bl	80019e6 <SPI_EndRxTxTransaction>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2220      	movs	r2, #32
 80018d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80018d2:	e010      	b.n	80018f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10b      	bne.n	80018f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	e000      	b.n	80018f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80018f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001906:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800190a:	4618      	mov	r0, r3
 800190c:	3730      	adds	r7, #48	; 0x30
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001922:	e04c      	b.n	80019be <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192a:	d048      	beq.n	80019be <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800192c:	f7fe ff72 	bl	8000814 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d902      	bls.n	8001942 <SPI_WaitFlagStateUntilTimeout+0x30>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d13d      	bne.n	80019be <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001950:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800195a:	d111      	bne.n	8001980 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001964:	d004      	beq.n	8001970 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196e:	d107      	bne.n	8001980 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800197e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001988:	d10f      	bne.n	80019aa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e00f      	b.n	80019de <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4013      	ands	r3, r2
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	bf0c      	ite	eq
 80019ce:	2301      	moveq	r3, #1
 80019d0:	2300      	movne	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d1a3      	bne.n	8001924 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af02      	add	r7, sp, #8
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2200      	movs	r2, #0
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff ff88 	bl	8001912 <SPI_WaitFlagStateUntilTimeout>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0c:	f043 0220 	orr.w	r2, r3, #32
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e000      	b.n	8001a1a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e03f      	b.n	8001ab4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d106      	bne.n	8001a4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7fe fd25 	bl	8000498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2224      	movs	r2, #36	; 0x24
 8001a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f90c 	bl	8001c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2220      	movs	r2, #32
 8001aae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	f040 8083 	bne.w	8001be4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_UART_Transmit+0x2e>
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e07b      	b.n	8001be6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_UART_Transmit+0x40>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e074      	b.n	8001be6 <HAL_UART_Transmit+0x12a>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2221      	movs	r2, #33	; 0x21
 8001b0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b12:	f7fe fe7f 	bl	8000814 <HAL_GetTick>
 8001b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	88fa      	ldrh	r2, [r7, #6]
 8001b1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	88fa      	ldrh	r2, [r7, #6]
 8001b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b24:	e042      	b.n	8001bac <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b3c:	d122      	bne.n	8001b84 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2200      	movs	r2, #0
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f850 	bl	8001bee <UART_WaitOnFlagUntilTimeout>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e046      	b.n	8001be6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b6a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d103      	bne.n	8001b7c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	3302      	adds	r3, #2
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	e017      	b.n	8001bac <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	e013      	b.n	8001bac <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f82d 	bl	8001bee <UART_WaitOnFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e023      	b.n	8001be6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	60ba      	str	r2, [r7, #8]
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1b7      	bne.n	8001b26 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2140      	movs	r1, #64	; 0x40
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f814 	bl	8001bee <UART_WaitOnFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e00a      	b.n	8001be6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e000      	b.n	8001be6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001be4:	2302      	movs	r3, #2
  }
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bfe:	e02c      	b.n	8001c5a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c06:	d028      	beq.n	8001c5a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <UART_WaitOnFlagUntilTimeout+0x30>
 8001c0e:	f7fe fe01 	bl	8000814 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d21d      	bcs.n	8001c5a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c2c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695a      	ldr	r2, [r3, #20]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2220      	movs	r2, #32
 8001c42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e00f      	b.n	8001c7a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4013      	ands	r3, r2
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	bf0c      	ite	eq
 8001c6a:	2301      	moveq	r3, #1
 8001c6c:	2300      	movne	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d0c3      	beq.n	8001c00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001cbe:	f023 030c 	bic.w	r3, r3, #12
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	68f9      	ldr	r1, [r7, #12]
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a52      	ldr	r2, [pc, #328]	; (8001e30 <UART_SetConfig+0x1ac>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d14e      	bne.n	8001d8a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cec:	f7ff fbdc 	bl	80014a8 <HAL_RCC_GetPCLK2Freq>
 8001cf0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009a      	lsls	r2, r3, #2
 8001cfc:	441a      	add	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	4a4a      	ldr	r2, [pc, #296]	; (8001e34 <UART_SetConfig+0x1b0>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	0119      	lsls	r1, r3, #4
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	009a      	lsls	r2, r3, #2
 8001d1c:	441a      	add	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d28:	4b42      	ldr	r3, [pc, #264]	; (8001e34 <UART_SetConfig+0x1b0>)
 8001d2a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2064      	movs	r0, #100	; 0x64
 8001d32:	fb00 f303 	mul.w	r3, r0, r3
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	3332      	adds	r3, #50	; 0x32
 8001d3c:	4a3d      	ldr	r2, [pc, #244]	; (8001e34 <UART_SetConfig+0x1b0>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d48:	4419      	add	r1, r3
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	009a      	lsls	r2, r3, #2
 8001d54:	441a      	add	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d60:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <UART_SetConfig+0x1b0>)
 8001d62:	fba3 0302 	umull	r0, r3, r3, r2
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2064      	movs	r0, #100	; 0x64
 8001d6a:	fb00 f303 	mul.w	r3, r0, r3
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	3332      	adds	r3, #50	; 0x32
 8001d74:	4a2f      	ldr	r2, [pc, #188]	; (8001e34 <UART_SetConfig+0x1b0>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	f003 020f 	and.w	r2, r3, #15
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	440a      	add	r2, r1
 8001d86:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001d88:	e04d      	b.n	8001e26 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d8a:	f7ff fb79 	bl	8001480 <HAL_RCC_GetPCLK1Freq>
 8001d8e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	009a      	lsls	r2, r3, #2
 8001d9a:	441a      	add	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <UART_SetConfig+0x1b0>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	0119      	lsls	r1, r3, #4
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	009a      	lsls	r2, r3, #2
 8001dba:	441a      	add	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <UART_SetConfig+0x1b0>)
 8001dc8:	fba3 0302 	umull	r0, r3, r3, r2
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	2064      	movs	r0, #100	; 0x64
 8001dd0:	fb00 f303 	mul.w	r3, r0, r3
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	3332      	adds	r3, #50	; 0x32
 8001dda:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <UART_SetConfig+0x1b0>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	095b      	lsrs	r3, r3, #5
 8001de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de6:	4419      	add	r1, r3
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	009a      	lsls	r2, r3, #2
 8001df2:	441a      	add	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <UART_SetConfig+0x1b0>)
 8001e00:	fba3 0302 	umull	r0, r3, r3, r2
 8001e04:	095b      	lsrs	r3, r3, #5
 8001e06:	2064      	movs	r0, #100	; 0x64
 8001e08:	fb00 f303 	mul.w	r3, r0, r3
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	3332      	adds	r3, #50	; 0x32
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <UART_SetConfig+0x1b0>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	095b      	lsrs	r3, r3, #5
 8001e1a:	f003 020f 	and.w	r2, r3, #15
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	440a      	add	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40013800 	.word	0x40013800
 8001e34:	51eb851f 	.word	0x51eb851f

08001e38 <__errno>:
 8001e38:	4b01      	ldr	r3, [pc, #4]	; (8001e40 <__errno+0x8>)
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	2000000c 	.word	0x2000000c

08001e44 <__libc_init_array>:
 8001e44:	b570      	push	{r4, r5, r6, lr}
 8001e46:	2500      	movs	r5, #0
 8001e48:	4e0c      	ldr	r6, [pc, #48]	; (8001e7c <__libc_init_array+0x38>)
 8001e4a:	4c0d      	ldr	r4, [pc, #52]	; (8001e80 <__libc_init_array+0x3c>)
 8001e4c:	1ba4      	subs	r4, r4, r6
 8001e4e:	10a4      	asrs	r4, r4, #2
 8001e50:	42a5      	cmp	r5, r4
 8001e52:	d109      	bne.n	8001e68 <__libc_init_array+0x24>
 8001e54:	f000 ff74 	bl	8002d40 <_init>
 8001e58:	2500      	movs	r5, #0
 8001e5a:	4e0a      	ldr	r6, [pc, #40]	; (8001e84 <__libc_init_array+0x40>)
 8001e5c:	4c0a      	ldr	r4, [pc, #40]	; (8001e88 <__libc_init_array+0x44>)
 8001e5e:	1ba4      	subs	r4, r4, r6
 8001e60:	10a4      	asrs	r4, r4, #2
 8001e62:	42a5      	cmp	r5, r4
 8001e64:	d105      	bne.n	8001e72 <__libc_init_array+0x2e>
 8001e66:	bd70      	pop	{r4, r5, r6, pc}
 8001e68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e6c:	4798      	blx	r3
 8001e6e:	3501      	adds	r5, #1
 8001e70:	e7ee      	b.n	8001e50 <__libc_init_array+0xc>
 8001e72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e76:	4798      	blx	r3
 8001e78:	3501      	adds	r5, #1
 8001e7a:	e7f2      	b.n	8001e62 <__libc_init_array+0x1e>
 8001e7c:	08002e5c 	.word	0x08002e5c
 8001e80:	08002e5c 	.word	0x08002e5c
 8001e84:	08002e5c 	.word	0x08002e5c
 8001e88:	08002e60 	.word	0x08002e60

08001e8c <memset>:
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4402      	add	r2, r0
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d100      	bne.n	8001e96 <memset+0xa>
 8001e94:	4770      	bx	lr
 8001e96:	f803 1b01 	strb.w	r1, [r3], #1
 8001e9a:	e7f9      	b.n	8001e90 <memset+0x4>

08001e9c <iprintf>:
 8001e9c:	b40f      	push	{r0, r1, r2, r3}
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <iprintf+0x2c>)
 8001ea0:	b513      	push	{r0, r1, r4, lr}
 8001ea2:	681c      	ldr	r4, [r3, #0]
 8001ea4:	b124      	cbz	r4, 8001eb0 <iprintf+0x14>
 8001ea6:	69a3      	ldr	r3, [r4, #24]
 8001ea8:	b913      	cbnz	r3, 8001eb0 <iprintf+0x14>
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f000 fa22 	bl	80022f4 <__sinit>
 8001eb0:	ab05      	add	r3, sp, #20
 8001eb2:	9a04      	ldr	r2, [sp, #16]
 8001eb4:	68a1      	ldr	r1, [r4, #8]
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	f000 fbd7 	bl	800266c <_vfiprintf_r>
 8001ebe:	b002      	add	sp, #8
 8001ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ec4:	b004      	add	sp, #16
 8001ec6:	4770      	bx	lr
 8001ec8:	2000000c 	.word	0x2000000c

08001ecc <_puts_r>:
 8001ecc:	b570      	push	{r4, r5, r6, lr}
 8001ece:	460e      	mov	r6, r1
 8001ed0:	4605      	mov	r5, r0
 8001ed2:	b118      	cbz	r0, 8001edc <_puts_r+0x10>
 8001ed4:	6983      	ldr	r3, [r0, #24]
 8001ed6:	b90b      	cbnz	r3, 8001edc <_puts_r+0x10>
 8001ed8:	f000 fa0c 	bl	80022f4 <__sinit>
 8001edc:	69ab      	ldr	r3, [r5, #24]
 8001ede:	68ac      	ldr	r4, [r5, #8]
 8001ee0:	b913      	cbnz	r3, 8001ee8 <_puts_r+0x1c>
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	f000 fa06 	bl	80022f4 <__sinit>
 8001ee8:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <_puts_r+0xac>)
 8001eea:	429c      	cmp	r4, r3
 8001eec:	d117      	bne.n	8001f1e <_puts_r+0x52>
 8001eee:	686c      	ldr	r4, [r5, #4]
 8001ef0:	89a3      	ldrh	r3, [r4, #12]
 8001ef2:	071b      	lsls	r3, r3, #28
 8001ef4:	d51d      	bpl.n	8001f32 <_puts_r+0x66>
 8001ef6:	6923      	ldr	r3, [r4, #16]
 8001ef8:	b1db      	cbz	r3, 8001f32 <_puts_r+0x66>
 8001efa:	3e01      	subs	r6, #1
 8001efc:	68a3      	ldr	r3, [r4, #8]
 8001efe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001f02:	3b01      	subs	r3, #1
 8001f04:	60a3      	str	r3, [r4, #8]
 8001f06:	b9e9      	cbnz	r1, 8001f44 <_puts_r+0x78>
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	da2e      	bge.n	8001f6a <_puts_r+0x9e>
 8001f0c:	4622      	mov	r2, r4
 8001f0e:	210a      	movs	r1, #10
 8001f10:	4628      	mov	r0, r5
 8001f12:	f000 f83f 	bl	8001f94 <__swbuf_r>
 8001f16:	3001      	adds	r0, #1
 8001f18:	d011      	beq.n	8001f3e <_puts_r+0x72>
 8001f1a:	200a      	movs	r0, #10
 8001f1c:	e011      	b.n	8001f42 <_puts_r+0x76>
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <_puts_r+0xb0>)
 8001f20:	429c      	cmp	r4, r3
 8001f22:	d101      	bne.n	8001f28 <_puts_r+0x5c>
 8001f24:	68ac      	ldr	r4, [r5, #8]
 8001f26:	e7e3      	b.n	8001ef0 <_puts_r+0x24>
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <_puts_r+0xb4>)
 8001f2a:	429c      	cmp	r4, r3
 8001f2c:	bf08      	it	eq
 8001f2e:	68ec      	ldreq	r4, [r5, #12]
 8001f30:	e7de      	b.n	8001ef0 <_puts_r+0x24>
 8001f32:	4621      	mov	r1, r4
 8001f34:	4628      	mov	r0, r5
 8001f36:	f000 f87f 	bl	8002038 <__swsetup_r>
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d0dd      	beq.n	8001efa <_puts_r+0x2e>
 8001f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	da04      	bge.n	8001f52 <_puts_r+0x86>
 8001f48:	69a2      	ldr	r2, [r4, #24]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	dc06      	bgt.n	8001f5c <_puts_r+0x90>
 8001f4e:	290a      	cmp	r1, #10
 8001f50:	d004      	beq.n	8001f5c <_puts_r+0x90>
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	6022      	str	r2, [r4, #0]
 8001f58:	7019      	strb	r1, [r3, #0]
 8001f5a:	e7cf      	b.n	8001efc <_puts_r+0x30>
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	4628      	mov	r0, r5
 8001f60:	f000 f818 	bl	8001f94 <__swbuf_r>
 8001f64:	3001      	adds	r0, #1
 8001f66:	d1c9      	bne.n	8001efc <_puts_r+0x30>
 8001f68:	e7e9      	b.n	8001f3e <_puts_r+0x72>
 8001f6a:	200a      	movs	r0, #10
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	6022      	str	r2, [r4, #0]
 8001f72:	7018      	strb	r0, [r3, #0]
 8001f74:	e7e5      	b.n	8001f42 <_puts_r+0x76>
 8001f76:	bf00      	nop
 8001f78:	08002de8 	.word	0x08002de8
 8001f7c:	08002e08 	.word	0x08002e08
 8001f80:	08002dc8 	.word	0x08002dc8

08001f84 <puts>:
 8001f84:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <puts+0xc>)
 8001f86:	4601      	mov	r1, r0
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	f7ff bf9f 	b.w	8001ecc <_puts_r>
 8001f8e:	bf00      	nop
 8001f90:	2000000c 	.word	0x2000000c

08001f94 <__swbuf_r>:
 8001f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f96:	460e      	mov	r6, r1
 8001f98:	4614      	mov	r4, r2
 8001f9a:	4605      	mov	r5, r0
 8001f9c:	b118      	cbz	r0, 8001fa6 <__swbuf_r+0x12>
 8001f9e:	6983      	ldr	r3, [r0, #24]
 8001fa0:	b90b      	cbnz	r3, 8001fa6 <__swbuf_r+0x12>
 8001fa2:	f000 f9a7 	bl	80022f4 <__sinit>
 8001fa6:	4b21      	ldr	r3, [pc, #132]	; (800202c <__swbuf_r+0x98>)
 8001fa8:	429c      	cmp	r4, r3
 8001faa:	d12a      	bne.n	8002002 <__swbuf_r+0x6e>
 8001fac:	686c      	ldr	r4, [r5, #4]
 8001fae:	69a3      	ldr	r3, [r4, #24]
 8001fb0:	60a3      	str	r3, [r4, #8]
 8001fb2:	89a3      	ldrh	r3, [r4, #12]
 8001fb4:	071a      	lsls	r2, r3, #28
 8001fb6:	d52e      	bpl.n	8002016 <__swbuf_r+0x82>
 8001fb8:	6923      	ldr	r3, [r4, #16]
 8001fba:	b363      	cbz	r3, 8002016 <__swbuf_r+0x82>
 8001fbc:	6923      	ldr	r3, [r4, #16]
 8001fbe:	6820      	ldr	r0, [r4, #0]
 8001fc0:	b2f6      	uxtb	r6, r6
 8001fc2:	1ac0      	subs	r0, r0, r3
 8001fc4:	6963      	ldr	r3, [r4, #20]
 8001fc6:	4637      	mov	r7, r6
 8001fc8:	4283      	cmp	r3, r0
 8001fca:	dc04      	bgt.n	8001fd6 <__swbuf_r+0x42>
 8001fcc:	4621      	mov	r1, r4
 8001fce:	4628      	mov	r0, r5
 8001fd0:	f000 f926 	bl	8002220 <_fflush_r>
 8001fd4:	bb28      	cbnz	r0, 8002022 <__swbuf_r+0x8e>
 8001fd6:	68a3      	ldr	r3, [r4, #8]
 8001fd8:	3001      	adds	r0, #1
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	60a3      	str	r3, [r4, #8]
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	6022      	str	r2, [r4, #0]
 8001fe4:	701e      	strb	r6, [r3, #0]
 8001fe6:	6963      	ldr	r3, [r4, #20]
 8001fe8:	4283      	cmp	r3, r0
 8001fea:	d004      	beq.n	8001ff6 <__swbuf_r+0x62>
 8001fec:	89a3      	ldrh	r3, [r4, #12]
 8001fee:	07db      	lsls	r3, r3, #31
 8001ff0:	d519      	bpl.n	8002026 <__swbuf_r+0x92>
 8001ff2:	2e0a      	cmp	r6, #10
 8001ff4:	d117      	bne.n	8002026 <__swbuf_r+0x92>
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	f000 f911 	bl	8002220 <_fflush_r>
 8001ffe:	b190      	cbz	r0, 8002026 <__swbuf_r+0x92>
 8002000:	e00f      	b.n	8002022 <__swbuf_r+0x8e>
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <__swbuf_r+0x9c>)
 8002004:	429c      	cmp	r4, r3
 8002006:	d101      	bne.n	800200c <__swbuf_r+0x78>
 8002008:	68ac      	ldr	r4, [r5, #8]
 800200a:	e7d0      	b.n	8001fae <__swbuf_r+0x1a>
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <__swbuf_r+0xa0>)
 800200e:	429c      	cmp	r4, r3
 8002010:	bf08      	it	eq
 8002012:	68ec      	ldreq	r4, [r5, #12]
 8002014:	e7cb      	b.n	8001fae <__swbuf_r+0x1a>
 8002016:	4621      	mov	r1, r4
 8002018:	4628      	mov	r0, r5
 800201a:	f000 f80d 	bl	8002038 <__swsetup_r>
 800201e:	2800      	cmp	r0, #0
 8002020:	d0cc      	beq.n	8001fbc <__swbuf_r+0x28>
 8002022:	f04f 37ff 	mov.w	r7, #4294967295
 8002026:	4638      	mov	r0, r7
 8002028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800202a:	bf00      	nop
 800202c:	08002de8 	.word	0x08002de8
 8002030:	08002e08 	.word	0x08002e08
 8002034:	08002dc8 	.word	0x08002dc8

08002038 <__swsetup_r>:
 8002038:	4b32      	ldr	r3, [pc, #200]	; (8002104 <__swsetup_r+0xcc>)
 800203a:	b570      	push	{r4, r5, r6, lr}
 800203c:	681d      	ldr	r5, [r3, #0]
 800203e:	4606      	mov	r6, r0
 8002040:	460c      	mov	r4, r1
 8002042:	b125      	cbz	r5, 800204e <__swsetup_r+0x16>
 8002044:	69ab      	ldr	r3, [r5, #24]
 8002046:	b913      	cbnz	r3, 800204e <__swsetup_r+0x16>
 8002048:	4628      	mov	r0, r5
 800204a:	f000 f953 	bl	80022f4 <__sinit>
 800204e:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <__swsetup_r+0xd0>)
 8002050:	429c      	cmp	r4, r3
 8002052:	d10f      	bne.n	8002074 <__swsetup_r+0x3c>
 8002054:	686c      	ldr	r4, [r5, #4]
 8002056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800205a:	b29a      	uxth	r2, r3
 800205c:	0715      	lsls	r5, r2, #28
 800205e:	d42c      	bmi.n	80020ba <__swsetup_r+0x82>
 8002060:	06d0      	lsls	r0, r2, #27
 8002062:	d411      	bmi.n	8002088 <__swsetup_r+0x50>
 8002064:	2209      	movs	r2, #9
 8002066:	6032      	str	r2, [r6, #0]
 8002068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800206c:	81a3      	strh	r3, [r4, #12]
 800206e:	f04f 30ff 	mov.w	r0, #4294967295
 8002072:	e03e      	b.n	80020f2 <__swsetup_r+0xba>
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <__swsetup_r+0xd4>)
 8002076:	429c      	cmp	r4, r3
 8002078:	d101      	bne.n	800207e <__swsetup_r+0x46>
 800207a:	68ac      	ldr	r4, [r5, #8]
 800207c:	e7eb      	b.n	8002056 <__swsetup_r+0x1e>
 800207e:	4b24      	ldr	r3, [pc, #144]	; (8002110 <__swsetup_r+0xd8>)
 8002080:	429c      	cmp	r4, r3
 8002082:	bf08      	it	eq
 8002084:	68ec      	ldreq	r4, [r5, #12]
 8002086:	e7e6      	b.n	8002056 <__swsetup_r+0x1e>
 8002088:	0751      	lsls	r1, r2, #29
 800208a:	d512      	bpl.n	80020b2 <__swsetup_r+0x7a>
 800208c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800208e:	b141      	cbz	r1, 80020a2 <__swsetup_r+0x6a>
 8002090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002094:	4299      	cmp	r1, r3
 8002096:	d002      	beq.n	800209e <__swsetup_r+0x66>
 8002098:	4630      	mov	r0, r6
 800209a:	f000 fa19 	bl	80024d0 <_free_r>
 800209e:	2300      	movs	r3, #0
 80020a0:	6363      	str	r3, [r4, #52]	; 0x34
 80020a2:	89a3      	ldrh	r3, [r4, #12]
 80020a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80020a8:	81a3      	strh	r3, [r4, #12]
 80020aa:	2300      	movs	r3, #0
 80020ac:	6063      	str	r3, [r4, #4]
 80020ae:	6923      	ldr	r3, [r4, #16]
 80020b0:	6023      	str	r3, [r4, #0]
 80020b2:	89a3      	ldrh	r3, [r4, #12]
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	81a3      	strh	r3, [r4, #12]
 80020ba:	6923      	ldr	r3, [r4, #16]
 80020bc:	b94b      	cbnz	r3, 80020d2 <__swsetup_r+0x9a>
 80020be:	89a3      	ldrh	r3, [r4, #12]
 80020c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80020c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c8:	d003      	beq.n	80020d2 <__swsetup_r+0x9a>
 80020ca:	4621      	mov	r1, r4
 80020cc:	4630      	mov	r0, r6
 80020ce:	f000 f9bf 	bl	8002450 <__smakebuf_r>
 80020d2:	89a2      	ldrh	r2, [r4, #12]
 80020d4:	f012 0301 	ands.w	r3, r2, #1
 80020d8:	d00c      	beq.n	80020f4 <__swsetup_r+0xbc>
 80020da:	2300      	movs	r3, #0
 80020dc:	60a3      	str	r3, [r4, #8]
 80020de:	6963      	ldr	r3, [r4, #20]
 80020e0:	425b      	negs	r3, r3
 80020e2:	61a3      	str	r3, [r4, #24]
 80020e4:	6923      	ldr	r3, [r4, #16]
 80020e6:	b953      	cbnz	r3, 80020fe <__swsetup_r+0xc6>
 80020e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80020f0:	d1ba      	bne.n	8002068 <__swsetup_r+0x30>
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	0792      	lsls	r2, r2, #30
 80020f6:	bf58      	it	pl
 80020f8:	6963      	ldrpl	r3, [r4, #20]
 80020fa:	60a3      	str	r3, [r4, #8]
 80020fc:	e7f2      	b.n	80020e4 <__swsetup_r+0xac>
 80020fe:	2000      	movs	r0, #0
 8002100:	e7f7      	b.n	80020f2 <__swsetup_r+0xba>
 8002102:	bf00      	nop
 8002104:	2000000c 	.word	0x2000000c
 8002108:	08002de8 	.word	0x08002de8
 800210c:	08002e08 	.word	0x08002e08
 8002110:	08002dc8 	.word	0x08002dc8

08002114 <__sflush_r>:
 8002114:	898a      	ldrh	r2, [r1, #12]
 8002116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800211a:	4605      	mov	r5, r0
 800211c:	0710      	lsls	r0, r2, #28
 800211e:	460c      	mov	r4, r1
 8002120:	d458      	bmi.n	80021d4 <__sflush_r+0xc0>
 8002122:	684b      	ldr	r3, [r1, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	dc05      	bgt.n	8002134 <__sflush_r+0x20>
 8002128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	dc02      	bgt.n	8002134 <__sflush_r+0x20>
 800212e:	2000      	movs	r0, #0
 8002130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002136:	2e00      	cmp	r6, #0
 8002138:	d0f9      	beq.n	800212e <__sflush_r+0x1a>
 800213a:	2300      	movs	r3, #0
 800213c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002140:	682f      	ldr	r7, [r5, #0]
 8002142:	6a21      	ldr	r1, [r4, #32]
 8002144:	602b      	str	r3, [r5, #0]
 8002146:	d032      	beq.n	80021ae <__sflush_r+0x9a>
 8002148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800214a:	89a3      	ldrh	r3, [r4, #12]
 800214c:	075a      	lsls	r2, r3, #29
 800214e:	d505      	bpl.n	800215c <__sflush_r+0x48>
 8002150:	6863      	ldr	r3, [r4, #4]
 8002152:	1ac0      	subs	r0, r0, r3
 8002154:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002156:	b10b      	cbz	r3, 800215c <__sflush_r+0x48>
 8002158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800215a:	1ac0      	subs	r0, r0, r3
 800215c:	2300      	movs	r3, #0
 800215e:	4602      	mov	r2, r0
 8002160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002162:	6a21      	ldr	r1, [r4, #32]
 8002164:	4628      	mov	r0, r5
 8002166:	47b0      	blx	r6
 8002168:	1c43      	adds	r3, r0, #1
 800216a:	89a3      	ldrh	r3, [r4, #12]
 800216c:	d106      	bne.n	800217c <__sflush_r+0x68>
 800216e:	6829      	ldr	r1, [r5, #0]
 8002170:	291d      	cmp	r1, #29
 8002172:	d848      	bhi.n	8002206 <__sflush_r+0xf2>
 8002174:	4a29      	ldr	r2, [pc, #164]	; (800221c <__sflush_r+0x108>)
 8002176:	40ca      	lsrs	r2, r1
 8002178:	07d6      	lsls	r6, r2, #31
 800217a:	d544      	bpl.n	8002206 <__sflush_r+0xf2>
 800217c:	2200      	movs	r2, #0
 800217e:	6062      	str	r2, [r4, #4]
 8002180:	6922      	ldr	r2, [r4, #16]
 8002182:	04d9      	lsls	r1, r3, #19
 8002184:	6022      	str	r2, [r4, #0]
 8002186:	d504      	bpl.n	8002192 <__sflush_r+0x7e>
 8002188:	1c42      	adds	r2, r0, #1
 800218a:	d101      	bne.n	8002190 <__sflush_r+0x7c>
 800218c:	682b      	ldr	r3, [r5, #0]
 800218e:	b903      	cbnz	r3, 8002192 <__sflush_r+0x7e>
 8002190:	6560      	str	r0, [r4, #84]	; 0x54
 8002192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002194:	602f      	str	r7, [r5, #0]
 8002196:	2900      	cmp	r1, #0
 8002198:	d0c9      	beq.n	800212e <__sflush_r+0x1a>
 800219a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800219e:	4299      	cmp	r1, r3
 80021a0:	d002      	beq.n	80021a8 <__sflush_r+0x94>
 80021a2:	4628      	mov	r0, r5
 80021a4:	f000 f994 	bl	80024d0 <_free_r>
 80021a8:	2000      	movs	r0, #0
 80021aa:	6360      	str	r0, [r4, #52]	; 0x34
 80021ac:	e7c0      	b.n	8002130 <__sflush_r+0x1c>
 80021ae:	2301      	movs	r3, #1
 80021b0:	4628      	mov	r0, r5
 80021b2:	47b0      	blx	r6
 80021b4:	1c41      	adds	r1, r0, #1
 80021b6:	d1c8      	bne.n	800214a <__sflush_r+0x36>
 80021b8:	682b      	ldr	r3, [r5, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0c5      	beq.n	800214a <__sflush_r+0x36>
 80021be:	2b1d      	cmp	r3, #29
 80021c0:	d001      	beq.n	80021c6 <__sflush_r+0xb2>
 80021c2:	2b16      	cmp	r3, #22
 80021c4:	d101      	bne.n	80021ca <__sflush_r+0xb6>
 80021c6:	602f      	str	r7, [r5, #0]
 80021c8:	e7b1      	b.n	800212e <__sflush_r+0x1a>
 80021ca:	89a3      	ldrh	r3, [r4, #12]
 80021cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d0:	81a3      	strh	r3, [r4, #12]
 80021d2:	e7ad      	b.n	8002130 <__sflush_r+0x1c>
 80021d4:	690f      	ldr	r7, [r1, #16]
 80021d6:	2f00      	cmp	r7, #0
 80021d8:	d0a9      	beq.n	800212e <__sflush_r+0x1a>
 80021da:	0793      	lsls	r3, r2, #30
 80021dc:	bf18      	it	ne
 80021de:	2300      	movne	r3, #0
 80021e0:	680e      	ldr	r6, [r1, #0]
 80021e2:	bf08      	it	eq
 80021e4:	694b      	ldreq	r3, [r1, #20]
 80021e6:	eba6 0807 	sub.w	r8, r6, r7
 80021ea:	600f      	str	r7, [r1, #0]
 80021ec:	608b      	str	r3, [r1, #8]
 80021ee:	f1b8 0f00 	cmp.w	r8, #0
 80021f2:	dd9c      	ble.n	800212e <__sflush_r+0x1a>
 80021f4:	4643      	mov	r3, r8
 80021f6:	463a      	mov	r2, r7
 80021f8:	6a21      	ldr	r1, [r4, #32]
 80021fa:	4628      	mov	r0, r5
 80021fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80021fe:	47b0      	blx	r6
 8002200:	2800      	cmp	r0, #0
 8002202:	dc06      	bgt.n	8002212 <__sflush_r+0xfe>
 8002204:	89a3      	ldrh	r3, [r4, #12]
 8002206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800220a:	81a3      	strh	r3, [r4, #12]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	e78e      	b.n	8002130 <__sflush_r+0x1c>
 8002212:	4407      	add	r7, r0
 8002214:	eba8 0800 	sub.w	r8, r8, r0
 8002218:	e7e9      	b.n	80021ee <__sflush_r+0xda>
 800221a:	bf00      	nop
 800221c:	20400001 	.word	0x20400001

08002220 <_fflush_r>:
 8002220:	b538      	push	{r3, r4, r5, lr}
 8002222:	690b      	ldr	r3, [r1, #16]
 8002224:	4605      	mov	r5, r0
 8002226:	460c      	mov	r4, r1
 8002228:	b1db      	cbz	r3, 8002262 <_fflush_r+0x42>
 800222a:	b118      	cbz	r0, 8002234 <_fflush_r+0x14>
 800222c:	6983      	ldr	r3, [r0, #24]
 800222e:	b90b      	cbnz	r3, 8002234 <_fflush_r+0x14>
 8002230:	f000 f860 	bl	80022f4 <__sinit>
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <_fflush_r+0x48>)
 8002236:	429c      	cmp	r4, r3
 8002238:	d109      	bne.n	800224e <_fflush_r+0x2e>
 800223a:	686c      	ldr	r4, [r5, #4]
 800223c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002240:	b17b      	cbz	r3, 8002262 <_fflush_r+0x42>
 8002242:	4621      	mov	r1, r4
 8002244:	4628      	mov	r0, r5
 8002246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800224a:	f7ff bf63 	b.w	8002114 <__sflush_r>
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_fflush_r+0x4c>)
 8002250:	429c      	cmp	r4, r3
 8002252:	d101      	bne.n	8002258 <_fflush_r+0x38>
 8002254:	68ac      	ldr	r4, [r5, #8]
 8002256:	e7f1      	b.n	800223c <_fflush_r+0x1c>
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <_fflush_r+0x50>)
 800225a:	429c      	cmp	r4, r3
 800225c:	bf08      	it	eq
 800225e:	68ec      	ldreq	r4, [r5, #12]
 8002260:	e7ec      	b.n	800223c <_fflush_r+0x1c>
 8002262:	2000      	movs	r0, #0
 8002264:	bd38      	pop	{r3, r4, r5, pc}
 8002266:	bf00      	nop
 8002268:	08002de8 	.word	0x08002de8
 800226c:	08002e08 	.word	0x08002e08
 8002270:	08002dc8 	.word	0x08002dc8

08002274 <std>:
 8002274:	2300      	movs	r3, #0
 8002276:	b510      	push	{r4, lr}
 8002278:	4604      	mov	r4, r0
 800227a:	e9c0 3300 	strd	r3, r3, [r0]
 800227e:	6083      	str	r3, [r0, #8]
 8002280:	8181      	strh	r1, [r0, #12]
 8002282:	6643      	str	r3, [r0, #100]	; 0x64
 8002284:	81c2      	strh	r2, [r0, #14]
 8002286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800228a:	6183      	str	r3, [r0, #24]
 800228c:	4619      	mov	r1, r3
 800228e:	2208      	movs	r2, #8
 8002290:	305c      	adds	r0, #92	; 0x5c
 8002292:	f7ff fdfb 	bl	8001e8c <memset>
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <std+0x38>)
 8002298:	6224      	str	r4, [r4, #32]
 800229a:	6263      	str	r3, [r4, #36]	; 0x24
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <std+0x3c>)
 800229e:	62a3      	str	r3, [r4, #40]	; 0x28
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <std+0x40>)
 80022a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <std+0x44>)
 80022a6:	6323      	str	r3, [r4, #48]	; 0x30
 80022a8:	bd10      	pop	{r4, pc}
 80022aa:	bf00      	nop
 80022ac:	08002bc9 	.word	0x08002bc9
 80022b0:	08002beb 	.word	0x08002beb
 80022b4:	08002c23 	.word	0x08002c23
 80022b8:	08002c47 	.word	0x08002c47

080022bc <_cleanup_r>:
 80022bc:	4901      	ldr	r1, [pc, #4]	; (80022c4 <_cleanup_r+0x8>)
 80022be:	f000 b885 	b.w	80023cc <_fwalk_reent>
 80022c2:	bf00      	nop
 80022c4:	08002221 	.word	0x08002221

080022c8 <__sfmoreglue>:
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	2568      	movs	r5, #104	; 0x68
 80022cc:	1e4a      	subs	r2, r1, #1
 80022ce:	4355      	muls	r5, r2
 80022d0:	460e      	mov	r6, r1
 80022d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80022d6:	f000 f947 	bl	8002568 <_malloc_r>
 80022da:	4604      	mov	r4, r0
 80022dc:	b140      	cbz	r0, 80022f0 <__sfmoreglue+0x28>
 80022de:	2100      	movs	r1, #0
 80022e0:	e9c0 1600 	strd	r1, r6, [r0]
 80022e4:	300c      	adds	r0, #12
 80022e6:	60a0      	str	r0, [r4, #8]
 80022e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80022ec:	f7ff fdce 	bl	8001e8c <memset>
 80022f0:	4620      	mov	r0, r4
 80022f2:	bd70      	pop	{r4, r5, r6, pc}

080022f4 <__sinit>:
 80022f4:	6983      	ldr	r3, [r0, #24]
 80022f6:	b510      	push	{r4, lr}
 80022f8:	4604      	mov	r4, r0
 80022fa:	bb33      	cbnz	r3, 800234a <__sinit+0x56>
 80022fc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002300:	6503      	str	r3, [r0, #80]	; 0x50
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <__sinit+0x58>)
 8002304:	4a12      	ldr	r2, [pc, #72]	; (8002350 <__sinit+0x5c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6282      	str	r2, [r0, #40]	; 0x28
 800230a:	4298      	cmp	r0, r3
 800230c:	bf04      	itt	eq
 800230e:	2301      	moveq	r3, #1
 8002310:	6183      	streq	r3, [r0, #24]
 8002312:	f000 f81f 	bl	8002354 <__sfp>
 8002316:	6060      	str	r0, [r4, #4]
 8002318:	4620      	mov	r0, r4
 800231a:	f000 f81b 	bl	8002354 <__sfp>
 800231e:	60a0      	str	r0, [r4, #8]
 8002320:	4620      	mov	r0, r4
 8002322:	f000 f817 	bl	8002354 <__sfp>
 8002326:	2200      	movs	r2, #0
 8002328:	60e0      	str	r0, [r4, #12]
 800232a:	2104      	movs	r1, #4
 800232c:	6860      	ldr	r0, [r4, #4]
 800232e:	f7ff ffa1 	bl	8002274 <std>
 8002332:	2201      	movs	r2, #1
 8002334:	2109      	movs	r1, #9
 8002336:	68a0      	ldr	r0, [r4, #8]
 8002338:	f7ff ff9c 	bl	8002274 <std>
 800233c:	2202      	movs	r2, #2
 800233e:	2112      	movs	r1, #18
 8002340:	68e0      	ldr	r0, [r4, #12]
 8002342:	f7ff ff97 	bl	8002274 <std>
 8002346:	2301      	movs	r3, #1
 8002348:	61a3      	str	r3, [r4, #24]
 800234a:	bd10      	pop	{r4, pc}
 800234c:	08002dc4 	.word	0x08002dc4
 8002350:	080022bd 	.word	0x080022bd

08002354 <__sfp>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <__sfp+0x70>)
 8002358:	4607      	mov	r7, r0
 800235a:	681e      	ldr	r6, [r3, #0]
 800235c:	69b3      	ldr	r3, [r6, #24]
 800235e:	b913      	cbnz	r3, 8002366 <__sfp+0x12>
 8002360:	4630      	mov	r0, r6
 8002362:	f7ff ffc7 	bl	80022f4 <__sinit>
 8002366:	3648      	adds	r6, #72	; 0x48
 8002368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800236c:	3b01      	subs	r3, #1
 800236e:	d503      	bpl.n	8002378 <__sfp+0x24>
 8002370:	6833      	ldr	r3, [r6, #0]
 8002372:	b133      	cbz	r3, 8002382 <__sfp+0x2e>
 8002374:	6836      	ldr	r6, [r6, #0]
 8002376:	e7f7      	b.n	8002368 <__sfp+0x14>
 8002378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800237c:	b16d      	cbz	r5, 800239a <__sfp+0x46>
 800237e:	3468      	adds	r4, #104	; 0x68
 8002380:	e7f4      	b.n	800236c <__sfp+0x18>
 8002382:	2104      	movs	r1, #4
 8002384:	4638      	mov	r0, r7
 8002386:	f7ff ff9f 	bl	80022c8 <__sfmoreglue>
 800238a:	6030      	str	r0, [r6, #0]
 800238c:	2800      	cmp	r0, #0
 800238e:	d1f1      	bne.n	8002374 <__sfp+0x20>
 8002390:	230c      	movs	r3, #12
 8002392:	4604      	mov	r4, r0
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	4620      	mov	r0, r4
 8002398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <__sfp+0x74>)
 800239c:	6665      	str	r5, [r4, #100]	; 0x64
 800239e:	e9c4 5500 	strd	r5, r5, [r4]
 80023a2:	60a5      	str	r5, [r4, #8]
 80023a4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80023a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80023ac:	2208      	movs	r2, #8
 80023ae:	4629      	mov	r1, r5
 80023b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80023b4:	f7ff fd6a 	bl	8001e8c <memset>
 80023b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80023bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80023c0:	e7e9      	b.n	8002396 <__sfp+0x42>
 80023c2:	bf00      	nop
 80023c4:	08002dc4 	.word	0x08002dc4
 80023c8:	ffff0001 	.word	0xffff0001

080023cc <_fwalk_reent>:
 80023cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023d0:	4680      	mov	r8, r0
 80023d2:	4689      	mov	r9, r1
 80023d4:	2600      	movs	r6, #0
 80023d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80023da:	b914      	cbnz	r4, 80023e2 <_fwalk_reent+0x16>
 80023dc:	4630      	mov	r0, r6
 80023de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80023e6:	3f01      	subs	r7, #1
 80023e8:	d501      	bpl.n	80023ee <_fwalk_reent+0x22>
 80023ea:	6824      	ldr	r4, [r4, #0]
 80023ec:	e7f5      	b.n	80023da <_fwalk_reent+0xe>
 80023ee:	89ab      	ldrh	r3, [r5, #12]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d907      	bls.n	8002404 <_fwalk_reent+0x38>
 80023f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023f8:	3301      	adds	r3, #1
 80023fa:	d003      	beq.n	8002404 <_fwalk_reent+0x38>
 80023fc:	4629      	mov	r1, r5
 80023fe:	4640      	mov	r0, r8
 8002400:	47c8      	blx	r9
 8002402:	4306      	orrs	r6, r0
 8002404:	3568      	adds	r5, #104	; 0x68
 8002406:	e7ee      	b.n	80023e6 <_fwalk_reent+0x1a>

08002408 <__swhatbuf_r>:
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	460e      	mov	r6, r1
 800240c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002410:	b096      	sub	sp, #88	; 0x58
 8002412:	2900      	cmp	r1, #0
 8002414:	4614      	mov	r4, r2
 8002416:	461d      	mov	r5, r3
 8002418:	da07      	bge.n	800242a <__swhatbuf_r+0x22>
 800241a:	2300      	movs	r3, #0
 800241c:	602b      	str	r3, [r5, #0]
 800241e:	89b3      	ldrh	r3, [r6, #12]
 8002420:	061a      	lsls	r2, r3, #24
 8002422:	d410      	bmi.n	8002446 <__swhatbuf_r+0x3e>
 8002424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002428:	e00e      	b.n	8002448 <__swhatbuf_r+0x40>
 800242a:	466a      	mov	r2, sp
 800242c:	f000 fc32 	bl	8002c94 <_fstat_r>
 8002430:	2800      	cmp	r0, #0
 8002432:	dbf2      	blt.n	800241a <__swhatbuf_r+0x12>
 8002434:	9a01      	ldr	r2, [sp, #4]
 8002436:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800243a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800243e:	425a      	negs	r2, r3
 8002440:	415a      	adcs	r2, r3
 8002442:	602a      	str	r2, [r5, #0]
 8002444:	e7ee      	b.n	8002424 <__swhatbuf_r+0x1c>
 8002446:	2340      	movs	r3, #64	; 0x40
 8002448:	2000      	movs	r0, #0
 800244a:	6023      	str	r3, [r4, #0]
 800244c:	b016      	add	sp, #88	; 0x58
 800244e:	bd70      	pop	{r4, r5, r6, pc}

08002450 <__smakebuf_r>:
 8002450:	898b      	ldrh	r3, [r1, #12]
 8002452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002454:	079d      	lsls	r5, r3, #30
 8002456:	4606      	mov	r6, r0
 8002458:	460c      	mov	r4, r1
 800245a:	d507      	bpl.n	800246c <__smakebuf_r+0x1c>
 800245c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002460:	6023      	str	r3, [r4, #0]
 8002462:	6123      	str	r3, [r4, #16]
 8002464:	2301      	movs	r3, #1
 8002466:	6163      	str	r3, [r4, #20]
 8002468:	b002      	add	sp, #8
 800246a:	bd70      	pop	{r4, r5, r6, pc}
 800246c:	ab01      	add	r3, sp, #4
 800246e:	466a      	mov	r2, sp
 8002470:	f7ff ffca 	bl	8002408 <__swhatbuf_r>
 8002474:	9900      	ldr	r1, [sp, #0]
 8002476:	4605      	mov	r5, r0
 8002478:	4630      	mov	r0, r6
 800247a:	f000 f875 	bl	8002568 <_malloc_r>
 800247e:	b948      	cbnz	r0, 8002494 <__smakebuf_r+0x44>
 8002480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002484:	059a      	lsls	r2, r3, #22
 8002486:	d4ef      	bmi.n	8002468 <__smakebuf_r+0x18>
 8002488:	f023 0303 	bic.w	r3, r3, #3
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	81a3      	strh	r3, [r4, #12]
 8002492:	e7e3      	b.n	800245c <__smakebuf_r+0xc>
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <__smakebuf_r+0x7c>)
 8002496:	62b3      	str	r3, [r6, #40]	; 0x28
 8002498:	89a3      	ldrh	r3, [r4, #12]
 800249a:	6020      	str	r0, [r4, #0]
 800249c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a0:	81a3      	strh	r3, [r4, #12]
 80024a2:	9b00      	ldr	r3, [sp, #0]
 80024a4:	6120      	str	r0, [r4, #16]
 80024a6:	6163      	str	r3, [r4, #20]
 80024a8:	9b01      	ldr	r3, [sp, #4]
 80024aa:	b15b      	cbz	r3, 80024c4 <__smakebuf_r+0x74>
 80024ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024b0:	4630      	mov	r0, r6
 80024b2:	f000 fc01 	bl	8002cb8 <_isatty_r>
 80024b6:	b128      	cbz	r0, 80024c4 <__smakebuf_r+0x74>
 80024b8:	89a3      	ldrh	r3, [r4, #12]
 80024ba:	f023 0303 	bic.w	r3, r3, #3
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	81a3      	strh	r3, [r4, #12]
 80024c4:	89a3      	ldrh	r3, [r4, #12]
 80024c6:	431d      	orrs	r5, r3
 80024c8:	81a5      	strh	r5, [r4, #12]
 80024ca:	e7cd      	b.n	8002468 <__smakebuf_r+0x18>
 80024cc:	080022bd 	.word	0x080022bd

080024d0 <_free_r>:
 80024d0:	b538      	push	{r3, r4, r5, lr}
 80024d2:	4605      	mov	r5, r0
 80024d4:	2900      	cmp	r1, #0
 80024d6:	d043      	beq.n	8002560 <_free_r+0x90>
 80024d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024dc:	1f0c      	subs	r4, r1, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bfb8      	it	lt
 80024e2:	18e4      	addlt	r4, r4, r3
 80024e4:	f000 fc18 	bl	8002d18 <__malloc_lock>
 80024e8:	4a1e      	ldr	r2, [pc, #120]	; (8002564 <_free_r+0x94>)
 80024ea:	6813      	ldr	r3, [r2, #0]
 80024ec:	4610      	mov	r0, r2
 80024ee:	b933      	cbnz	r3, 80024fe <_free_r+0x2e>
 80024f0:	6063      	str	r3, [r4, #4]
 80024f2:	6014      	str	r4, [r2, #0]
 80024f4:	4628      	mov	r0, r5
 80024f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024fa:	f000 bc0e 	b.w	8002d1a <__malloc_unlock>
 80024fe:	42a3      	cmp	r3, r4
 8002500:	d90b      	bls.n	800251a <_free_r+0x4a>
 8002502:	6821      	ldr	r1, [r4, #0]
 8002504:	1862      	adds	r2, r4, r1
 8002506:	4293      	cmp	r3, r2
 8002508:	bf01      	itttt	eq
 800250a:	681a      	ldreq	r2, [r3, #0]
 800250c:	685b      	ldreq	r3, [r3, #4]
 800250e:	1852      	addeq	r2, r2, r1
 8002510:	6022      	streq	r2, [r4, #0]
 8002512:	6063      	str	r3, [r4, #4]
 8002514:	6004      	str	r4, [r0, #0]
 8002516:	e7ed      	b.n	80024f4 <_free_r+0x24>
 8002518:	4613      	mov	r3, r2
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	b10a      	cbz	r2, 8002522 <_free_r+0x52>
 800251e:	42a2      	cmp	r2, r4
 8002520:	d9fa      	bls.n	8002518 <_free_r+0x48>
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	1858      	adds	r0, r3, r1
 8002526:	42a0      	cmp	r0, r4
 8002528:	d10b      	bne.n	8002542 <_free_r+0x72>
 800252a:	6820      	ldr	r0, [r4, #0]
 800252c:	4401      	add	r1, r0
 800252e:	1858      	adds	r0, r3, r1
 8002530:	4282      	cmp	r2, r0
 8002532:	6019      	str	r1, [r3, #0]
 8002534:	d1de      	bne.n	80024f4 <_free_r+0x24>
 8002536:	6810      	ldr	r0, [r2, #0]
 8002538:	6852      	ldr	r2, [r2, #4]
 800253a:	4401      	add	r1, r0
 800253c:	6019      	str	r1, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	e7d8      	b.n	80024f4 <_free_r+0x24>
 8002542:	d902      	bls.n	800254a <_free_r+0x7a>
 8002544:	230c      	movs	r3, #12
 8002546:	602b      	str	r3, [r5, #0]
 8002548:	e7d4      	b.n	80024f4 <_free_r+0x24>
 800254a:	6820      	ldr	r0, [r4, #0]
 800254c:	1821      	adds	r1, r4, r0
 800254e:	428a      	cmp	r2, r1
 8002550:	bf01      	itttt	eq
 8002552:	6811      	ldreq	r1, [r2, #0]
 8002554:	6852      	ldreq	r2, [r2, #4]
 8002556:	1809      	addeq	r1, r1, r0
 8002558:	6021      	streq	r1, [r4, #0]
 800255a:	6062      	str	r2, [r4, #4]
 800255c:	605c      	str	r4, [r3, #4]
 800255e:	e7c9      	b.n	80024f4 <_free_r+0x24>
 8002560:	bd38      	pop	{r3, r4, r5, pc}
 8002562:	bf00      	nop
 8002564:	20000090 	.word	0x20000090

08002568 <_malloc_r>:
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	1ccd      	adds	r5, r1, #3
 800256c:	f025 0503 	bic.w	r5, r5, #3
 8002570:	3508      	adds	r5, #8
 8002572:	2d0c      	cmp	r5, #12
 8002574:	bf38      	it	cc
 8002576:	250c      	movcc	r5, #12
 8002578:	2d00      	cmp	r5, #0
 800257a:	4606      	mov	r6, r0
 800257c:	db01      	blt.n	8002582 <_malloc_r+0x1a>
 800257e:	42a9      	cmp	r1, r5
 8002580:	d903      	bls.n	800258a <_malloc_r+0x22>
 8002582:	230c      	movs	r3, #12
 8002584:	6033      	str	r3, [r6, #0]
 8002586:	2000      	movs	r0, #0
 8002588:	bd70      	pop	{r4, r5, r6, pc}
 800258a:	f000 fbc5 	bl	8002d18 <__malloc_lock>
 800258e:	4a21      	ldr	r2, [pc, #132]	; (8002614 <_malloc_r+0xac>)
 8002590:	6814      	ldr	r4, [r2, #0]
 8002592:	4621      	mov	r1, r4
 8002594:	b991      	cbnz	r1, 80025bc <_malloc_r+0x54>
 8002596:	4c20      	ldr	r4, [pc, #128]	; (8002618 <_malloc_r+0xb0>)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	b91b      	cbnz	r3, 80025a4 <_malloc_r+0x3c>
 800259c:	4630      	mov	r0, r6
 800259e:	f000 fb03 	bl	8002ba8 <_sbrk_r>
 80025a2:	6020      	str	r0, [r4, #0]
 80025a4:	4629      	mov	r1, r5
 80025a6:	4630      	mov	r0, r6
 80025a8:	f000 fafe 	bl	8002ba8 <_sbrk_r>
 80025ac:	1c43      	adds	r3, r0, #1
 80025ae:	d124      	bne.n	80025fa <_malloc_r+0x92>
 80025b0:	230c      	movs	r3, #12
 80025b2:	4630      	mov	r0, r6
 80025b4:	6033      	str	r3, [r6, #0]
 80025b6:	f000 fbb0 	bl	8002d1a <__malloc_unlock>
 80025ba:	e7e4      	b.n	8002586 <_malloc_r+0x1e>
 80025bc:	680b      	ldr	r3, [r1, #0]
 80025be:	1b5b      	subs	r3, r3, r5
 80025c0:	d418      	bmi.n	80025f4 <_malloc_r+0x8c>
 80025c2:	2b0b      	cmp	r3, #11
 80025c4:	d90f      	bls.n	80025e6 <_malloc_r+0x7e>
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	18cc      	adds	r4, r1, r3
 80025ca:	50cd      	str	r5, [r1, r3]
 80025cc:	4630      	mov	r0, r6
 80025ce:	f000 fba4 	bl	8002d1a <__malloc_unlock>
 80025d2:	f104 000b 	add.w	r0, r4, #11
 80025d6:	1d23      	adds	r3, r4, #4
 80025d8:	f020 0007 	bic.w	r0, r0, #7
 80025dc:	1ac3      	subs	r3, r0, r3
 80025de:	d0d3      	beq.n	8002588 <_malloc_r+0x20>
 80025e0:	425a      	negs	r2, r3
 80025e2:	50e2      	str	r2, [r4, r3]
 80025e4:	e7d0      	b.n	8002588 <_malloc_r+0x20>
 80025e6:	684b      	ldr	r3, [r1, #4]
 80025e8:	428c      	cmp	r4, r1
 80025ea:	bf16      	itet	ne
 80025ec:	6063      	strne	r3, [r4, #4]
 80025ee:	6013      	streq	r3, [r2, #0]
 80025f0:	460c      	movne	r4, r1
 80025f2:	e7eb      	b.n	80025cc <_malloc_r+0x64>
 80025f4:	460c      	mov	r4, r1
 80025f6:	6849      	ldr	r1, [r1, #4]
 80025f8:	e7cc      	b.n	8002594 <_malloc_r+0x2c>
 80025fa:	1cc4      	adds	r4, r0, #3
 80025fc:	f024 0403 	bic.w	r4, r4, #3
 8002600:	42a0      	cmp	r0, r4
 8002602:	d005      	beq.n	8002610 <_malloc_r+0xa8>
 8002604:	1a21      	subs	r1, r4, r0
 8002606:	4630      	mov	r0, r6
 8002608:	f000 face 	bl	8002ba8 <_sbrk_r>
 800260c:	3001      	adds	r0, #1
 800260e:	d0cf      	beq.n	80025b0 <_malloc_r+0x48>
 8002610:	6025      	str	r5, [r4, #0]
 8002612:	e7db      	b.n	80025cc <_malloc_r+0x64>
 8002614:	20000090 	.word	0x20000090
 8002618:	20000094 	.word	0x20000094

0800261c <__sfputc_r>:
 800261c:	6893      	ldr	r3, [r2, #8]
 800261e:	b410      	push	{r4}
 8002620:	3b01      	subs	r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	6093      	str	r3, [r2, #8]
 8002626:	da07      	bge.n	8002638 <__sfputc_r+0x1c>
 8002628:	6994      	ldr	r4, [r2, #24]
 800262a:	42a3      	cmp	r3, r4
 800262c:	db01      	blt.n	8002632 <__sfputc_r+0x16>
 800262e:	290a      	cmp	r1, #10
 8002630:	d102      	bne.n	8002638 <__sfputc_r+0x1c>
 8002632:	bc10      	pop	{r4}
 8002634:	f7ff bcae 	b.w	8001f94 <__swbuf_r>
 8002638:	6813      	ldr	r3, [r2, #0]
 800263a:	1c58      	adds	r0, r3, #1
 800263c:	6010      	str	r0, [r2, #0]
 800263e:	7019      	strb	r1, [r3, #0]
 8002640:	4608      	mov	r0, r1
 8002642:	bc10      	pop	{r4}
 8002644:	4770      	bx	lr

08002646 <__sfputs_r>:
 8002646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002648:	4606      	mov	r6, r0
 800264a:	460f      	mov	r7, r1
 800264c:	4614      	mov	r4, r2
 800264e:	18d5      	adds	r5, r2, r3
 8002650:	42ac      	cmp	r4, r5
 8002652:	d101      	bne.n	8002658 <__sfputs_r+0x12>
 8002654:	2000      	movs	r0, #0
 8002656:	e007      	b.n	8002668 <__sfputs_r+0x22>
 8002658:	463a      	mov	r2, r7
 800265a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800265e:	4630      	mov	r0, r6
 8002660:	f7ff ffdc 	bl	800261c <__sfputc_r>
 8002664:	1c43      	adds	r3, r0, #1
 8002666:	d1f3      	bne.n	8002650 <__sfputs_r+0xa>
 8002668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800266c <_vfiprintf_r>:
 800266c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002670:	460c      	mov	r4, r1
 8002672:	b09d      	sub	sp, #116	; 0x74
 8002674:	4617      	mov	r7, r2
 8002676:	461d      	mov	r5, r3
 8002678:	4606      	mov	r6, r0
 800267a:	b118      	cbz	r0, 8002684 <_vfiprintf_r+0x18>
 800267c:	6983      	ldr	r3, [r0, #24]
 800267e:	b90b      	cbnz	r3, 8002684 <_vfiprintf_r+0x18>
 8002680:	f7ff fe38 	bl	80022f4 <__sinit>
 8002684:	4b7c      	ldr	r3, [pc, #496]	; (8002878 <_vfiprintf_r+0x20c>)
 8002686:	429c      	cmp	r4, r3
 8002688:	d158      	bne.n	800273c <_vfiprintf_r+0xd0>
 800268a:	6874      	ldr	r4, [r6, #4]
 800268c:	89a3      	ldrh	r3, [r4, #12]
 800268e:	0718      	lsls	r0, r3, #28
 8002690:	d55e      	bpl.n	8002750 <_vfiprintf_r+0xe4>
 8002692:	6923      	ldr	r3, [r4, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d05b      	beq.n	8002750 <_vfiprintf_r+0xe4>
 8002698:	2300      	movs	r3, #0
 800269a:	9309      	str	r3, [sp, #36]	; 0x24
 800269c:	2320      	movs	r3, #32
 800269e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026a2:	2330      	movs	r3, #48	; 0x30
 80026a4:	f04f 0b01 	mov.w	fp, #1
 80026a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026ac:	9503      	str	r5, [sp, #12]
 80026ae:	46b8      	mov	r8, r7
 80026b0:	4645      	mov	r5, r8
 80026b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80026b6:	b10b      	cbz	r3, 80026bc <_vfiprintf_r+0x50>
 80026b8:	2b25      	cmp	r3, #37	; 0x25
 80026ba:	d154      	bne.n	8002766 <_vfiprintf_r+0xfa>
 80026bc:	ebb8 0a07 	subs.w	sl, r8, r7
 80026c0:	d00b      	beq.n	80026da <_vfiprintf_r+0x6e>
 80026c2:	4653      	mov	r3, sl
 80026c4:	463a      	mov	r2, r7
 80026c6:	4621      	mov	r1, r4
 80026c8:	4630      	mov	r0, r6
 80026ca:	f7ff ffbc 	bl	8002646 <__sfputs_r>
 80026ce:	3001      	adds	r0, #1
 80026d0:	f000 80c2 	beq.w	8002858 <_vfiprintf_r+0x1ec>
 80026d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026d6:	4453      	add	r3, sl
 80026d8:	9309      	str	r3, [sp, #36]	; 0x24
 80026da:	f898 3000 	ldrb.w	r3, [r8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80ba 	beq.w	8002858 <_vfiprintf_r+0x1ec>
 80026e4:	2300      	movs	r3, #0
 80026e6:	f04f 32ff 	mov.w	r2, #4294967295
 80026ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026ee:	9304      	str	r3, [sp, #16]
 80026f0:	9307      	str	r3, [sp, #28]
 80026f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026f6:	931a      	str	r3, [sp, #104]	; 0x68
 80026f8:	46a8      	mov	r8, r5
 80026fa:	2205      	movs	r2, #5
 80026fc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002700:	485e      	ldr	r0, [pc, #376]	; (800287c <_vfiprintf_r+0x210>)
 8002702:	f000 fafb 	bl	8002cfc <memchr>
 8002706:	9b04      	ldr	r3, [sp, #16]
 8002708:	bb78      	cbnz	r0, 800276a <_vfiprintf_r+0xfe>
 800270a:	06d9      	lsls	r1, r3, #27
 800270c:	bf44      	itt	mi
 800270e:	2220      	movmi	r2, #32
 8002710:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002714:	071a      	lsls	r2, r3, #28
 8002716:	bf44      	itt	mi
 8002718:	222b      	movmi	r2, #43	; 0x2b
 800271a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800271e:	782a      	ldrb	r2, [r5, #0]
 8002720:	2a2a      	cmp	r2, #42	; 0x2a
 8002722:	d02a      	beq.n	800277a <_vfiprintf_r+0x10e>
 8002724:	46a8      	mov	r8, r5
 8002726:	2000      	movs	r0, #0
 8002728:	250a      	movs	r5, #10
 800272a:	9a07      	ldr	r2, [sp, #28]
 800272c:	4641      	mov	r1, r8
 800272e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002732:	3b30      	subs	r3, #48	; 0x30
 8002734:	2b09      	cmp	r3, #9
 8002736:	d969      	bls.n	800280c <_vfiprintf_r+0x1a0>
 8002738:	b360      	cbz	r0, 8002794 <_vfiprintf_r+0x128>
 800273a:	e024      	b.n	8002786 <_vfiprintf_r+0x11a>
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <_vfiprintf_r+0x214>)
 800273e:	429c      	cmp	r4, r3
 8002740:	d101      	bne.n	8002746 <_vfiprintf_r+0xda>
 8002742:	68b4      	ldr	r4, [r6, #8]
 8002744:	e7a2      	b.n	800268c <_vfiprintf_r+0x20>
 8002746:	4b4f      	ldr	r3, [pc, #316]	; (8002884 <_vfiprintf_r+0x218>)
 8002748:	429c      	cmp	r4, r3
 800274a:	bf08      	it	eq
 800274c:	68f4      	ldreq	r4, [r6, #12]
 800274e:	e79d      	b.n	800268c <_vfiprintf_r+0x20>
 8002750:	4621      	mov	r1, r4
 8002752:	4630      	mov	r0, r6
 8002754:	f7ff fc70 	bl	8002038 <__swsetup_r>
 8002758:	2800      	cmp	r0, #0
 800275a:	d09d      	beq.n	8002698 <_vfiprintf_r+0x2c>
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	b01d      	add	sp, #116	; 0x74
 8002762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002766:	46a8      	mov	r8, r5
 8002768:	e7a2      	b.n	80026b0 <_vfiprintf_r+0x44>
 800276a:	4a44      	ldr	r2, [pc, #272]	; (800287c <_vfiprintf_r+0x210>)
 800276c:	4645      	mov	r5, r8
 800276e:	1a80      	subs	r0, r0, r2
 8002770:	fa0b f000 	lsl.w	r0, fp, r0
 8002774:	4318      	orrs	r0, r3
 8002776:	9004      	str	r0, [sp, #16]
 8002778:	e7be      	b.n	80026f8 <_vfiprintf_r+0x8c>
 800277a:	9a03      	ldr	r2, [sp, #12]
 800277c:	1d11      	adds	r1, r2, #4
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	9103      	str	r1, [sp, #12]
 8002782:	2a00      	cmp	r2, #0
 8002784:	db01      	blt.n	800278a <_vfiprintf_r+0x11e>
 8002786:	9207      	str	r2, [sp, #28]
 8002788:	e004      	b.n	8002794 <_vfiprintf_r+0x128>
 800278a:	4252      	negs	r2, r2
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	9207      	str	r2, [sp, #28]
 8002792:	9304      	str	r3, [sp, #16]
 8002794:	f898 3000 	ldrb.w	r3, [r8]
 8002798:	2b2e      	cmp	r3, #46	; 0x2e
 800279a:	d10e      	bne.n	80027ba <_vfiprintf_r+0x14e>
 800279c:	f898 3001 	ldrb.w	r3, [r8, #1]
 80027a0:	2b2a      	cmp	r3, #42	; 0x2a
 80027a2:	d138      	bne.n	8002816 <_vfiprintf_r+0x1aa>
 80027a4:	9b03      	ldr	r3, [sp, #12]
 80027a6:	f108 0802 	add.w	r8, r8, #2
 80027aa:	1d1a      	adds	r2, r3, #4
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	9203      	str	r2, [sp, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bfb8      	it	lt
 80027b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80027b8:	9305      	str	r3, [sp, #20]
 80027ba:	4d33      	ldr	r5, [pc, #204]	; (8002888 <_vfiprintf_r+0x21c>)
 80027bc:	2203      	movs	r2, #3
 80027be:	f898 1000 	ldrb.w	r1, [r8]
 80027c2:	4628      	mov	r0, r5
 80027c4:	f000 fa9a 	bl	8002cfc <memchr>
 80027c8:	b140      	cbz	r0, 80027dc <_vfiprintf_r+0x170>
 80027ca:	2340      	movs	r3, #64	; 0x40
 80027cc:	1b40      	subs	r0, r0, r5
 80027ce:	fa03 f000 	lsl.w	r0, r3, r0
 80027d2:	9b04      	ldr	r3, [sp, #16]
 80027d4:	f108 0801 	add.w	r8, r8, #1
 80027d8:	4303      	orrs	r3, r0
 80027da:	9304      	str	r3, [sp, #16]
 80027dc:	f898 1000 	ldrb.w	r1, [r8]
 80027e0:	2206      	movs	r2, #6
 80027e2:	482a      	ldr	r0, [pc, #168]	; (800288c <_vfiprintf_r+0x220>)
 80027e4:	f108 0701 	add.w	r7, r8, #1
 80027e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027ec:	f000 fa86 	bl	8002cfc <memchr>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d037      	beq.n	8002864 <_vfiprintf_r+0x1f8>
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <_vfiprintf_r+0x224>)
 80027f6:	bb1b      	cbnz	r3, 8002840 <_vfiprintf_r+0x1d4>
 80027f8:	9b03      	ldr	r3, [sp, #12]
 80027fa:	3307      	adds	r3, #7
 80027fc:	f023 0307 	bic.w	r3, r3, #7
 8002800:	3308      	adds	r3, #8
 8002802:	9303      	str	r3, [sp, #12]
 8002804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002806:	444b      	add	r3, r9
 8002808:	9309      	str	r3, [sp, #36]	; 0x24
 800280a:	e750      	b.n	80026ae <_vfiprintf_r+0x42>
 800280c:	fb05 3202 	mla	r2, r5, r2, r3
 8002810:	2001      	movs	r0, #1
 8002812:	4688      	mov	r8, r1
 8002814:	e78a      	b.n	800272c <_vfiprintf_r+0xc0>
 8002816:	2300      	movs	r3, #0
 8002818:	250a      	movs	r5, #10
 800281a:	4619      	mov	r1, r3
 800281c:	f108 0801 	add.w	r8, r8, #1
 8002820:	9305      	str	r3, [sp, #20]
 8002822:	4640      	mov	r0, r8
 8002824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002828:	3a30      	subs	r2, #48	; 0x30
 800282a:	2a09      	cmp	r2, #9
 800282c:	d903      	bls.n	8002836 <_vfiprintf_r+0x1ca>
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0c3      	beq.n	80027ba <_vfiprintf_r+0x14e>
 8002832:	9105      	str	r1, [sp, #20]
 8002834:	e7c1      	b.n	80027ba <_vfiprintf_r+0x14e>
 8002836:	fb05 2101 	mla	r1, r5, r1, r2
 800283a:	2301      	movs	r3, #1
 800283c:	4680      	mov	r8, r0
 800283e:	e7f0      	b.n	8002822 <_vfiprintf_r+0x1b6>
 8002840:	ab03      	add	r3, sp, #12
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4622      	mov	r2, r4
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <_vfiprintf_r+0x228>)
 8002848:	a904      	add	r1, sp, #16
 800284a:	4630      	mov	r0, r6
 800284c:	f3af 8000 	nop.w
 8002850:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002854:	4681      	mov	r9, r0
 8002856:	d1d5      	bne.n	8002804 <_vfiprintf_r+0x198>
 8002858:	89a3      	ldrh	r3, [r4, #12]
 800285a:	065b      	lsls	r3, r3, #25
 800285c:	f53f af7e 	bmi.w	800275c <_vfiprintf_r+0xf0>
 8002860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002862:	e77d      	b.n	8002760 <_vfiprintf_r+0xf4>
 8002864:	ab03      	add	r3, sp, #12
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	4622      	mov	r2, r4
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <_vfiprintf_r+0x228>)
 800286c:	a904      	add	r1, sp, #16
 800286e:	4630      	mov	r0, r6
 8002870:	f000 f888 	bl	8002984 <_printf_i>
 8002874:	e7ec      	b.n	8002850 <_vfiprintf_r+0x1e4>
 8002876:	bf00      	nop
 8002878:	08002de8 	.word	0x08002de8
 800287c:	08002e28 	.word	0x08002e28
 8002880:	08002e08 	.word	0x08002e08
 8002884:	08002dc8 	.word	0x08002dc8
 8002888:	08002e2e 	.word	0x08002e2e
 800288c:	08002e32 	.word	0x08002e32
 8002890:	00000000 	.word	0x00000000
 8002894:	08002647 	.word	0x08002647

08002898 <_printf_common>:
 8002898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800289c:	4691      	mov	r9, r2
 800289e:	461f      	mov	r7, r3
 80028a0:	688a      	ldr	r2, [r1, #8]
 80028a2:	690b      	ldr	r3, [r1, #16]
 80028a4:	4606      	mov	r6, r0
 80028a6:	4293      	cmp	r3, r2
 80028a8:	bfb8      	it	lt
 80028aa:	4613      	movlt	r3, r2
 80028ac:	f8c9 3000 	str.w	r3, [r9]
 80028b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028b4:	460c      	mov	r4, r1
 80028b6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028ba:	b112      	cbz	r2, 80028c2 <_printf_common+0x2a>
 80028bc:	3301      	adds	r3, #1
 80028be:	f8c9 3000 	str.w	r3, [r9]
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	0699      	lsls	r1, r3, #26
 80028c6:	bf42      	ittt	mi
 80028c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80028cc:	3302      	addmi	r3, #2
 80028ce:	f8c9 3000 	strmi.w	r3, [r9]
 80028d2:	6825      	ldr	r5, [r4, #0]
 80028d4:	f015 0506 	ands.w	r5, r5, #6
 80028d8:	d107      	bne.n	80028ea <_printf_common+0x52>
 80028da:	f104 0a19 	add.w	sl, r4, #25
 80028de:	68e3      	ldr	r3, [r4, #12]
 80028e0:	f8d9 2000 	ldr.w	r2, [r9]
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	42ab      	cmp	r3, r5
 80028e8:	dc29      	bgt.n	800293e <_printf_common+0xa6>
 80028ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80028ee:	6822      	ldr	r2, [r4, #0]
 80028f0:	3300      	adds	r3, #0
 80028f2:	bf18      	it	ne
 80028f4:	2301      	movne	r3, #1
 80028f6:	0692      	lsls	r2, r2, #26
 80028f8:	d42e      	bmi.n	8002958 <_printf_common+0xc0>
 80028fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028fe:	4639      	mov	r1, r7
 8002900:	4630      	mov	r0, r6
 8002902:	47c0      	blx	r8
 8002904:	3001      	adds	r0, #1
 8002906:	d021      	beq.n	800294c <_printf_common+0xb4>
 8002908:	6823      	ldr	r3, [r4, #0]
 800290a:	68e5      	ldr	r5, [r4, #12]
 800290c:	f003 0306 	and.w	r3, r3, #6
 8002910:	2b04      	cmp	r3, #4
 8002912:	bf18      	it	ne
 8002914:	2500      	movne	r5, #0
 8002916:	f8d9 2000 	ldr.w	r2, [r9]
 800291a:	f04f 0900 	mov.w	r9, #0
 800291e:	bf08      	it	eq
 8002920:	1aad      	subeq	r5, r5, r2
 8002922:	68a3      	ldr	r3, [r4, #8]
 8002924:	6922      	ldr	r2, [r4, #16]
 8002926:	bf08      	it	eq
 8002928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800292c:	4293      	cmp	r3, r2
 800292e:	bfc4      	itt	gt
 8002930:	1a9b      	subgt	r3, r3, r2
 8002932:	18ed      	addgt	r5, r5, r3
 8002934:	341a      	adds	r4, #26
 8002936:	454d      	cmp	r5, r9
 8002938:	d11a      	bne.n	8002970 <_printf_common+0xd8>
 800293a:	2000      	movs	r0, #0
 800293c:	e008      	b.n	8002950 <_printf_common+0xb8>
 800293e:	2301      	movs	r3, #1
 8002940:	4652      	mov	r2, sl
 8002942:	4639      	mov	r1, r7
 8002944:	4630      	mov	r0, r6
 8002946:	47c0      	blx	r8
 8002948:	3001      	adds	r0, #1
 800294a:	d103      	bne.n	8002954 <_printf_common+0xbc>
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002954:	3501      	adds	r5, #1
 8002956:	e7c2      	b.n	80028de <_printf_common+0x46>
 8002958:	2030      	movs	r0, #48	; 0x30
 800295a:	18e1      	adds	r1, r4, r3
 800295c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002966:	4422      	add	r2, r4
 8002968:	3302      	adds	r3, #2
 800296a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800296e:	e7c4      	b.n	80028fa <_printf_common+0x62>
 8002970:	2301      	movs	r3, #1
 8002972:	4622      	mov	r2, r4
 8002974:	4639      	mov	r1, r7
 8002976:	4630      	mov	r0, r6
 8002978:	47c0      	blx	r8
 800297a:	3001      	adds	r0, #1
 800297c:	d0e6      	beq.n	800294c <_printf_common+0xb4>
 800297e:	f109 0901 	add.w	r9, r9, #1
 8002982:	e7d8      	b.n	8002936 <_printf_common+0x9e>

08002984 <_printf_i>:
 8002984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002988:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800298c:	460c      	mov	r4, r1
 800298e:	7e09      	ldrb	r1, [r1, #24]
 8002990:	b085      	sub	sp, #20
 8002992:	296e      	cmp	r1, #110	; 0x6e
 8002994:	4617      	mov	r7, r2
 8002996:	4606      	mov	r6, r0
 8002998:	4698      	mov	r8, r3
 800299a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800299c:	f000 80b3 	beq.w	8002b06 <_printf_i+0x182>
 80029a0:	d822      	bhi.n	80029e8 <_printf_i+0x64>
 80029a2:	2963      	cmp	r1, #99	; 0x63
 80029a4:	d036      	beq.n	8002a14 <_printf_i+0x90>
 80029a6:	d80a      	bhi.n	80029be <_printf_i+0x3a>
 80029a8:	2900      	cmp	r1, #0
 80029aa:	f000 80b9 	beq.w	8002b20 <_printf_i+0x19c>
 80029ae:	2958      	cmp	r1, #88	; 0x58
 80029b0:	f000 8083 	beq.w	8002aba <_printf_i+0x136>
 80029b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80029bc:	e032      	b.n	8002a24 <_printf_i+0xa0>
 80029be:	2964      	cmp	r1, #100	; 0x64
 80029c0:	d001      	beq.n	80029c6 <_printf_i+0x42>
 80029c2:	2969      	cmp	r1, #105	; 0x69
 80029c4:	d1f6      	bne.n	80029b4 <_printf_i+0x30>
 80029c6:	6820      	ldr	r0, [r4, #0]
 80029c8:	6813      	ldr	r3, [r2, #0]
 80029ca:	0605      	lsls	r5, r0, #24
 80029cc:	f103 0104 	add.w	r1, r3, #4
 80029d0:	d52a      	bpl.n	8002a28 <_printf_i+0xa4>
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6011      	str	r1, [r2, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	da03      	bge.n	80029e2 <_printf_i+0x5e>
 80029da:	222d      	movs	r2, #45	; 0x2d
 80029dc:	425b      	negs	r3, r3
 80029de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80029e2:	486f      	ldr	r0, [pc, #444]	; (8002ba0 <_printf_i+0x21c>)
 80029e4:	220a      	movs	r2, #10
 80029e6:	e039      	b.n	8002a5c <_printf_i+0xd8>
 80029e8:	2973      	cmp	r1, #115	; 0x73
 80029ea:	f000 809d 	beq.w	8002b28 <_printf_i+0x1a4>
 80029ee:	d808      	bhi.n	8002a02 <_printf_i+0x7e>
 80029f0:	296f      	cmp	r1, #111	; 0x6f
 80029f2:	d020      	beq.n	8002a36 <_printf_i+0xb2>
 80029f4:	2970      	cmp	r1, #112	; 0x70
 80029f6:	d1dd      	bne.n	80029b4 <_printf_i+0x30>
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	f043 0320 	orr.w	r3, r3, #32
 80029fe:	6023      	str	r3, [r4, #0]
 8002a00:	e003      	b.n	8002a0a <_printf_i+0x86>
 8002a02:	2975      	cmp	r1, #117	; 0x75
 8002a04:	d017      	beq.n	8002a36 <_printf_i+0xb2>
 8002a06:	2978      	cmp	r1, #120	; 0x78
 8002a08:	d1d4      	bne.n	80029b4 <_printf_i+0x30>
 8002a0a:	2378      	movs	r3, #120	; 0x78
 8002a0c:	4865      	ldr	r0, [pc, #404]	; (8002ba4 <_printf_i+0x220>)
 8002a0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a12:	e055      	b.n	8002ac0 <_printf_i+0x13c>
 8002a14:	6813      	ldr	r3, [r2, #0]
 8002a16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a1a:	1d19      	adds	r1, r3, #4
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6011      	str	r1, [r2, #0]
 8002a20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a24:	2301      	movs	r3, #1
 8002a26:	e08c      	b.n	8002b42 <_printf_i+0x1be>
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a2e:	6011      	str	r1, [r2, #0]
 8002a30:	bf18      	it	ne
 8002a32:	b21b      	sxthne	r3, r3
 8002a34:	e7cf      	b.n	80029d6 <_printf_i+0x52>
 8002a36:	6813      	ldr	r3, [r2, #0]
 8002a38:	6825      	ldr	r5, [r4, #0]
 8002a3a:	1d18      	adds	r0, r3, #4
 8002a3c:	6010      	str	r0, [r2, #0]
 8002a3e:	0628      	lsls	r0, r5, #24
 8002a40:	d501      	bpl.n	8002a46 <_printf_i+0xc2>
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	e002      	b.n	8002a4c <_printf_i+0xc8>
 8002a46:	0668      	lsls	r0, r5, #25
 8002a48:	d5fb      	bpl.n	8002a42 <_printf_i+0xbe>
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	296f      	cmp	r1, #111	; 0x6f
 8002a4e:	bf14      	ite	ne
 8002a50:	220a      	movne	r2, #10
 8002a52:	2208      	moveq	r2, #8
 8002a54:	4852      	ldr	r0, [pc, #328]	; (8002ba0 <_printf_i+0x21c>)
 8002a56:	2100      	movs	r1, #0
 8002a58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a5c:	6865      	ldr	r5, [r4, #4]
 8002a5e:	2d00      	cmp	r5, #0
 8002a60:	60a5      	str	r5, [r4, #8]
 8002a62:	f2c0 8095 	blt.w	8002b90 <_printf_i+0x20c>
 8002a66:	6821      	ldr	r1, [r4, #0]
 8002a68:	f021 0104 	bic.w	r1, r1, #4
 8002a6c:	6021      	str	r1, [r4, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d13d      	bne.n	8002aee <_printf_i+0x16a>
 8002a72:	2d00      	cmp	r5, #0
 8002a74:	f040 808e 	bne.w	8002b94 <_printf_i+0x210>
 8002a78:	4665      	mov	r5, ip
 8002a7a:	2a08      	cmp	r2, #8
 8002a7c:	d10b      	bne.n	8002a96 <_printf_i+0x112>
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	07db      	lsls	r3, r3, #31
 8002a82:	d508      	bpl.n	8002a96 <_printf_i+0x112>
 8002a84:	6923      	ldr	r3, [r4, #16]
 8002a86:	6862      	ldr	r2, [r4, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	bfde      	ittt	le
 8002a8c:	2330      	movle	r3, #48	; 0x30
 8002a8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a96:	ebac 0305 	sub.w	r3, ip, r5
 8002a9a:	6123      	str	r3, [r4, #16]
 8002a9c:	f8cd 8000 	str.w	r8, [sp]
 8002aa0:	463b      	mov	r3, r7
 8002aa2:	aa03      	add	r2, sp, #12
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	4630      	mov	r0, r6
 8002aa8:	f7ff fef6 	bl	8002898 <_printf_common>
 8002aac:	3001      	adds	r0, #1
 8002aae:	d14d      	bne.n	8002b4c <_printf_i+0x1c8>
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	b005      	add	sp, #20
 8002ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002aba:	4839      	ldr	r0, [pc, #228]	; (8002ba0 <_printf_i+0x21c>)
 8002abc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002ac0:	6813      	ldr	r3, [r2, #0]
 8002ac2:	6821      	ldr	r1, [r4, #0]
 8002ac4:	1d1d      	adds	r5, r3, #4
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6015      	str	r5, [r2, #0]
 8002aca:	060a      	lsls	r2, r1, #24
 8002acc:	d50b      	bpl.n	8002ae6 <_printf_i+0x162>
 8002ace:	07ca      	lsls	r2, r1, #31
 8002ad0:	bf44      	itt	mi
 8002ad2:	f041 0120 	orrmi.w	r1, r1, #32
 8002ad6:	6021      	strmi	r1, [r4, #0]
 8002ad8:	b91b      	cbnz	r3, 8002ae2 <_printf_i+0x15e>
 8002ada:	6822      	ldr	r2, [r4, #0]
 8002adc:	f022 0220 	bic.w	r2, r2, #32
 8002ae0:	6022      	str	r2, [r4, #0]
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	e7b7      	b.n	8002a56 <_printf_i+0xd2>
 8002ae6:	064d      	lsls	r5, r1, #25
 8002ae8:	bf48      	it	mi
 8002aea:	b29b      	uxthmi	r3, r3
 8002aec:	e7ef      	b.n	8002ace <_printf_i+0x14a>
 8002aee:	4665      	mov	r5, ip
 8002af0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002af4:	fb02 3311 	mls	r3, r2, r1, r3
 8002af8:	5cc3      	ldrb	r3, [r0, r3]
 8002afa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002afe:	460b      	mov	r3, r1
 8002b00:	2900      	cmp	r1, #0
 8002b02:	d1f5      	bne.n	8002af0 <_printf_i+0x16c>
 8002b04:	e7b9      	b.n	8002a7a <_printf_i+0xf6>
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	6825      	ldr	r5, [r4, #0]
 8002b0a:	1d18      	adds	r0, r3, #4
 8002b0c:	6961      	ldr	r1, [r4, #20]
 8002b0e:	6010      	str	r0, [r2, #0]
 8002b10:	0628      	lsls	r0, r5, #24
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	d501      	bpl.n	8002b1a <_printf_i+0x196>
 8002b16:	6019      	str	r1, [r3, #0]
 8002b18:	e002      	b.n	8002b20 <_printf_i+0x19c>
 8002b1a:	066a      	lsls	r2, r5, #25
 8002b1c:	d5fb      	bpl.n	8002b16 <_printf_i+0x192>
 8002b1e:	8019      	strh	r1, [r3, #0]
 8002b20:	2300      	movs	r3, #0
 8002b22:	4665      	mov	r5, ip
 8002b24:	6123      	str	r3, [r4, #16]
 8002b26:	e7b9      	b.n	8002a9c <_printf_i+0x118>
 8002b28:	6813      	ldr	r3, [r2, #0]
 8002b2a:	1d19      	adds	r1, r3, #4
 8002b2c:	6011      	str	r1, [r2, #0]
 8002b2e:	681d      	ldr	r5, [r3, #0]
 8002b30:	6862      	ldr	r2, [r4, #4]
 8002b32:	2100      	movs	r1, #0
 8002b34:	4628      	mov	r0, r5
 8002b36:	f000 f8e1 	bl	8002cfc <memchr>
 8002b3a:	b108      	cbz	r0, 8002b40 <_printf_i+0x1bc>
 8002b3c:	1b40      	subs	r0, r0, r5
 8002b3e:	6060      	str	r0, [r4, #4]
 8002b40:	6863      	ldr	r3, [r4, #4]
 8002b42:	6123      	str	r3, [r4, #16]
 8002b44:	2300      	movs	r3, #0
 8002b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b4a:	e7a7      	b.n	8002a9c <_printf_i+0x118>
 8002b4c:	6923      	ldr	r3, [r4, #16]
 8002b4e:	462a      	mov	r2, r5
 8002b50:	4639      	mov	r1, r7
 8002b52:	4630      	mov	r0, r6
 8002b54:	47c0      	blx	r8
 8002b56:	3001      	adds	r0, #1
 8002b58:	d0aa      	beq.n	8002ab0 <_printf_i+0x12c>
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	079b      	lsls	r3, r3, #30
 8002b5e:	d413      	bmi.n	8002b88 <_printf_i+0x204>
 8002b60:	68e0      	ldr	r0, [r4, #12]
 8002b62:	9b03      	ldr	r3, [sp, #12]
 8002b64:	4298      	cmp	r0, r3
 8002b66:	bfb8      	it	lt
 8002b68:	4618      	movlt	r0, r3
 8002b6a:	e7a3      	b.n	8002ab4 <_printf_i+0x130>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	464a      	mov	r2, r9
 8002b70:	4639      	mov	r1, r7
 8002b72:	4630      	mov	r0, r6
 8002b74:	47c0      	blx	r8
 8002b76:	3001      	adds	r0, #1
 8002b78:	d09a      	beq.n	8002ab0 <_printf_i+0x12c>
 8002b7a:	3501      	adds	r5, #1
 8002b7c:	68e3      	ldr	r3, [r4, #12]
 8002b7e:	9a03      	ldr	r2, [sp, #12]
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	42ab      	cmp	r3, r5
 8002b84:	dcf2      	bgt.n	8002b6c <_printf_i+0x1e8>
 8002b86:	e7eb      	b.n	8002b60 <_printf_i+0x1dc>
 8002b88:	2500      	movs	r5, #0
 8002b8a:	f104 0919 	add.w	r9, r4, #25
 8002b8e:	e7f5      	b.n	8002b7c <_printf_i+0x1f8>
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1ac      	bne.n	8002aee <_printf_i+0x16a>
 8002b94:	7803      	ldrb	r3, [r0, #0]
 8002b96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b9e:	e76c      	b.n	8002a7a <_printf_i+0xf6>
 8002ba0:	08002e39 	.word	0x08002e39
 8002ba4:	08002e4a 	.word	0x08002e4a

08002ba8 <_sbrk_r>:
 8002ba8:	b538      	push	{r3, r4, r5, lr}
 8002baa:	2300      	movs	r3, #0
 8002bac:	4c05      	ldr	r4, [pc, #20]	; (8002bc4 <_sbrk_r+0x1c>)
 8002bae:	4605      	mov	r5, r0
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	6023      	str	r3, [r4, #0]
 8002bb4:	f7fd fd50 	bl	8000658 <_sbrk>
 8002bb8:	1c43      	adds	r3, r0, #1
 8002bba:	d102      	bne.n	8002bc2 <_sbrk_r+0x1a>
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	b103      	cbz	r3, 8002bc2 <_sbrk_r+0x1a>
 8002bc0:	602b      	str	r3, [r5, #0]
 8002bc2:	bd38      	pop	{r3, r4, r5, pc}
 8002bc4:	20000134 	.word	0x20000134

08002bc8 <__sread>:
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	460c      	mov	r4, r1
 8002bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bd0:	f000 f8a4 	bl	8002d1c <_read_r>
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	bfab      	itete	ge
 8002bd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bda:	89a3      	ldrhlt	r3, [r4, #12]
 8002bdc:	181b      	addge	r3, r3, r0
 8002bde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002be2:	bfac      	ite	ge
 8002be4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002be6:	81a3      	strhlt	r3, [r4, #12]
 8002be8:	bd10      	pop	{r4, pc}

08002bea <__swrite>:
 8002bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bee:	461f      	mov	r7, r3
 8002bf0:	898b      	ldrh	r3, [r1, #12]
 8002bf2:	4605      	mov	r5, r0
 8002bf4:	05db      	lsls	r3, r3, #23
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	4616      	mov	r6, r2
 8002bfa:	d505      	bpl.n	8002c08 <__swrite+0x1e>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c04:	f000 f868 	bl	8002cd8 <_lseek_r>
 8002c08:	89a3      	ldrh	r3, [r4, #12]
 8002c0a:	4632      	mov	r2, r6
 8002c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c10:	81a3      	strh	r3, [r4, #12]
 8002c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c16:	463b      	mov	r3, r7
 8002c18:	4628      	mov	r0, r5
 8002c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c1e:	f000 b817 	b.w	8002c50 <_write_r>

08002c22 <__sseek>:
 8002c22:	b510      	push	{r4, lr}
 8002c24:	460c      	mov	r4, r1
 8002c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c2a:	f000 f855 	bl	8002cd8 <_lseek_r>
 8002c2e:	1c43      	adds	r3, r0, #1
 8002c30:	89a3      	ldrh	r3, [r4, #12]
 8002c32:	bf15      	itete	ne
 8002c34:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c3e:	81a3      	strheq	r3, [r4, #12]
 8002c40:	bf18      	it	ne
 8002c42:	81a3      	strhne	r3, [r4, #12]
 8002c44:	bd10      	pop	{r4, pc}

08002c46 <__sclose>:
 8002c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c4a:	f000 b813 	b.w	8002c74 <_close_r>
	...

08002c50 <_write_r>:
 8002c50:	b538      	push	{r3, r4, r5, lr}
 8002c52:	4605      	mov	r5, r0
 8002c54:	4608      	mov	r0, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	2200      	movs	r2, #0
 8002c5a:	4c05      	ldr	r4, [pc, #20]	; (8002c70 <_write_r+0x20>)
 8002c5c:	6022      	str	r2, [r4, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f7fd fcad 	bl	80005be <_write>
 8002c64:	1c43      	adds	r3, r0, #1
 8002c66:	d102      	bne.n	8002c6e <_write_r+0x1e>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	b103      	cbz	r3, 8002c6e <_write_r+0x1e>
 8002c6c:	602b      	str	r3, [r5, #0]
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}
 8002c70:	20000134 	.word	0x20000134

08002c74 <_close_r>:
 8002c74:	b538      	push	{r3, r4, r5, lr}
 8002c76:	2300      	movs	r3, #0
 8002c78:	4c05      	ldr	r4, [pc, #20]	; (8002c90 <_close_r+0x1c>)
 8002c7a:	4605      	mov	r5, r0
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	6023      	str	r3, [r4, #0]
 8002c80:	f7fd fcb9 	bl	80005f6 <_close>
 8002c84:	1c43      	adds	r3, r0, #1
 8002c86:	d102      	bne.n	8002c8e <_close_r+0x1a>
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	b103      	cbz	r3, 8002c8e <_close_r+0x1a>
 8002c8c:	602b      	str	r3, [r5, #0]
 8002c8e:	bd38      	pop	{r3, r4, r5, pc}
 8002c90:	20000134 	.word	0x20000134

08002c94 <_fstat_r>:
 8002c94:	b538      	push	{r3, r4, r5, lr}
 8002c96:	2300      	movs	r3, #0
 8002c98:	4c06      	ldr	r4, [pc, #24]	; (8002cb4 <_fstat_r+0x20>)
 8002c9a:	4605      	mov	r5, r0
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	6023      	str	r3, [r4, #0]
 8002ca2:	f7fd fcb3 	bl	800060c <_fstat>
 8002ca6:	1c43      	adds	r3, r0, #1
 8002ca8:	d102      	bne.n	8002cb0 <_fstat_r+0x1c>
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	b103      	cbz	r3, 8002cb0 <_fstat_r+0x1c>
 8002cae:	602b      	str	r3, [r5, #0]
 8002cb0:	bd38      	pop	{r3, r4, r5, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000134 	.word	0x20000134

08002cb8 <_isatty_r>:
 8002cb8:	b538      	push	{r3, r4, r5, lr}
 8002cba:	2300      	movs	r3, #0
 8002cbc:	4c05      	ldr	r4, [pc, #20]	; (8002cd4 <_isatty_r+0x1c>)
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	6023      	str	r3, [r4, #0]
 8002cc4:	f7fd fcb1 	bl	800062a <_isatty>
 8002cc8:	1c43      	adds	r3, r0, #1
 8002cca:	d102      	bne.n	8002cd2 <_isatty_r+0x1a>
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	b103      	cbz	r3, 8002cd2 <_isatty_r+0x1a>
 8002cd0:	602b      	str	r3, [r5, #0]
 8002cd2:	bd38      	pop	{r3, r4, r5, pc}
 8002cd4:	20000134 	.word	0x20000134

08002cd8 <_lseek_r>:
 8002cd8:	b538      	push	{r3, r4, r5, lr}
 8002cda:	4605      	mov	r5, r0
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4c05      	ldr	r4, [pc, #20]	; (8002cf8 <_lseek_r+0x20>)
 8002ce4:	6022      	str	r2, [r4, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f7fd fca9 	bl	800063e <_lseek>
 8002cec:	1c43      	adds	r3, r0, #1
 8002cee:	d102      	bne.n	8002cf6 <_lseek_r+0x1e>
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	b103      	cbz	r3, 8002cf6 <_lseek_r+0x1e>
 8002cf4:	602b      	str	r3, [r5, #0]
 8002cf6:	bd38      	pop	{r3, r4, r5, pc}
 8002cf8:	20000134 	.word	0x20000134

08002cfc <memchr>:
 8002cfc:	b510      	push	{r4, lr}
 8002cfe:	b2c9      	uxtb	r1, r1
 8002d00:	4402      	add	r2, r0
 8002d02:	4290      	cmp	r0, r2
 8002d04:	4603      	mov	r3, r0
 8002d06:	d101      	bne.n	8002d0c <memchr+0x10>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e003      	b.n	8002d14 <memchr+0x18>
 8002d0c:	781c      	ldrb	r4, [r3, #0]
 8002d0e:	3001      	adds	r0, #1
 8002d10:	428c      	cmp	r4, r1
 8002d12:	d1f6      	bne.n	8002d02 <memchr+0x6>
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd10      	pop	{r4, pc}

08002d18 <__malloc_lock>:
 8002d18:	4770      	bx	lr

08002d1a <__malloc_unlock>:
 8002d1a:	4770      	bx	lr

08002d1c <_read_r>:
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	4605      	mov	r5, r0
 8002d20:	4608      	mov	r0, r1
 8002d22:	4611      	mov	r1, r2
 8002d24:	2200      	movs	r2, #0
 8002d26:	4c05      	ldr	r4, [pc, #20]	; (8002d3c <_read_r+0x20>)
 8002d28:	6022      	str	r2, [r4, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f7fd fc2a 	bl	8000584 <_read>
 8002d30:	1c43      	adds	r3, r0, #1
 8002d32:	d102      	bne.n	8002d3a <_read_r+0x1e>
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	b103      	cbz	r3, 8002d3a <_read_r+0x1e>
 8002d38:	602b      	str	r3, [r5, #0]
 8002d3a:	bd38      	pop	{r3, r4, r5, pc}
 8002d3c:	20000134 	.word	0x20000134

08002d40 <_init>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	bf00      	nop
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr

08002d4c <_fini>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	bf00      	nop
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr
