
017_SPI_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec8  08002ec8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002ec8  08002ec8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ec8  08002ec8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ecc  08002ecc  00012ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08002f40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002f40  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094e5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018b0  00000000  00000000  0002957e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  0002ae30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  0002b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014c57  00000000  00000000  0002be48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006dcb  00000000  00000000  00040a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ce84  00000000  00000000  0004786a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b46ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b4  00000000  00000000  000b476c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dac 	.word	0x08002dac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002dac 	.word	0x08002dac

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb1b 	bl	800078c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f83d 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8db 	bl	8000314 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f879 	bl	8000254 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8ad 	bl	80002c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  printf("CONFIGURACION CORRECTA DEL MAESTRO\r\n");
 8000166:	4817      	ldr	r0, [pc, #92]	; (80001c4 <main+0x78>)
 8000168:	f001 ff42 	bl	8001ff0 <puts>
  uint8_t RxData;

  HAL_GPIO_WritePin(NSS_Master_GPIO_Port, NSS_Master_Pin, GPIO_PIN_SET);
 800016c:	2201      	movs	r2, #1
 800016e:	2110      	movs	r1, #16
 8000170:	4815      	ldr	r0, [pc, #84]	; (80001c8 <main+0x7c>)
 8000172:	f000 fdcd 	bl	8000d10 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(uint8_t i = 0;i<100;i++){
 8000176:	2300      	movs	r3, #0
 8000178:	71bb      	strb	r3, [r7, #6]
 800017a:	e01e      	b.n	80001ba <main+0x6e>
		  HAL_GPIO_WritePin(NSS_Master_GPIO_Port, NSS_Master_Pin, GPIO_PIN_RESET);
 800017c:	2200      	movs	r2, #0
 800017e:	2110      	movs	r1, #16
 8000180:	4811      	ldr	r0, [pc, #68]	; (80001c8 <main+0x7c>)
 8000182:	f000 fdc5 	bl	8000d10 <HAL_GPIO_WritePin>
		  HAL_SPI_TransmitReceive(&hspi1, &i, &RxData, 1, HAL_MAX_DELAY);
 8000186:	1dfa      	adds	r2, r7, #7
 8000188:	1db9      	adds	r1, r7, #6
 800018a:	f04f 33ff 	mov.w	r3, #4294967295
 800018e:	9300      	str	r3, [sp, #0]
 8000190:	2301      	movs	r3, #1
 8000192:	480e      	ldr	r0, [pc, #56]	; (80001cc <main+0x80>)
 8000194:	f001 fa51 	bl	800163a <HAL_SPI_TransmitReceive>
		  printf("recibido del esclavo->%d\r\n",RxData);
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4619      	mov	r1, r3
 800019c:	480c      	ldr	r0, [pc, #48]	; (80001d0 <main+0x84>)
 800019e:	f001 feb3 	bl	8001f08 <iprintf>
		  HAL_GPIO_WritePin(NSS_Master_GPIO_Port, NSS_Master_Pin, GPIO_PIN_SET);
 80001a2:	2201      	movs	r2, #1
 80001a4:	2110      	movs	r1, #16
 80001a6:	4808      	ldr	r0, [pc, #32]	; (80001c8 <main+0x7c>)
 80001a8:	f000 fdb2 	bl	8000d10 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80001ac:	2064      	movs	r0, #100	; 0x64
 80001ae:	f000 fb4f 	bl	8000850 <HAL_Delay>
	  for(uint8_t i = 0;i<100;i++){
 80001b2:	79bb      	ldrb	r3, [r7, #6]
 80001b4:	3301      	adds	r3, #1
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	71bb      	strb	r3, [r7, #6]
 80001ba:	79bb      	ldrb	r3, [r7, #6]
 80001bc:	2b63      	cmp	r3, #99	; 0x63
 80001be:	d9dd      	bls.n	800017c <main+0x30>
 80001c0:	e7d9      	b.n	8000176 <main+0x2a>
 80001c2:	bf00      	nop
 80001c4:	08002dc4 	.word	0x08002dc4
 80001c8:	40010800 	.word	0x40010800
 80001cc:	200000d8 	.word	0x200000d8
 80001d0:	08002de8 	.word	0x08002de8

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	; 0x40
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 fe88 	bl	8001ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fe:	2310      	movs	r3, #16
 8000200:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000202:	2302      	movs	r3, #2
 8000204:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000206:	2300      	movs	r3, #0
 8000208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800020a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800020e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000210:	f107 0318 	add.w	r3, r7, #24
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fd93 	bl	8000d40 <HAL_RCC_OscConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000220:	f000 f8cc 	bl	80003bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000224:	230f      	movs	r3, #15
 8000226:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000228:	2302      	movs	r3, #2
 800022a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2101      	movs	r1, #1
 800023c:	4618      	mov	r0, r3
 800023e:	f000 ffff 	bl	8001240 <HAL_RCC_ClockConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000248:	f000 f8b8 	bl	80003bc <Error_Handler>
  }
}
 800024c:	bf00      	nop
 800024e:	3740      	adds	r7, #64	; 0x40
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000258:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <MX_SPI1_Init+0x64>)
 800025a:	4a18      	ldr	r2, [pc, #96]	; (80002bc <MX_SPI1_Init+0x68>)
 800025c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <MX_SPI1_Init+0x64>)
 8000260:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000264:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <MX_SPI1_Init+0x64>)
 8000268:	2200      	movs	r2, #0
 800026a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <MX_SPI1_Init+0x64>)
 800026e:	2200      	movs	r2, #0
 8000270:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <MX_SPI1_Init+0x64>)
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <MX_SPI1_Init+0x64>)
 800027a:	2200      	movs	r2, #0
 800027c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <MX_SPI1_Init+0x64>)
 8000280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000284:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <MX_SPI1_Init+0x64>)
 8000288:	2200      	movs	r2, #0
 800028a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800028c:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <MX_SPI1_Init+0x64>)
 800028e:	2200      	movs	r2, #0
 8000290:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <MX_SPI1_Init+0x64>)
 8000294:	2200      	movs	r2, #0
 8000296:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <MX_SPI1_Init+0x64>)
 800029a:	2200      	movs	r2, #0
 800029c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <MX_SPI1_Init+0x64>)
 80002a0:	220a      	movs	r2, #10
 80002a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <MX_SPI1_Init+0x64>)
 80002a6:	f001 f967 	bl	8001578 <HAL_SPI_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002b0:	f000 f884 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	200000d8 	.word	0x200000d8
 80002bc:	40013000 	.word	0x40013000

080002c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002c6:	4a12      	ldr	r2, [pc, #72]	; (8000310 <MX_USART1_UART_Init+0x50>)
 80002c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002e6:	220c      	movs	r2, #12
 80002e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002f6:	4805      	ldr	r0, [pc, #20]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002f8:	f001 fbc9 	bl	8001a8e <HAL_UART_Init>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000302:	f000 f85b 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000098 	.word	0x20000098
 8000310:	40013800 	.word	0x40013800

08000314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031a:	f107 0308 	add.w	r3, r7, #8
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_GPIO_Init+0x74>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a16      	ldr	r2, [pc, #88]	; (8000388 <MX_GPIO_Init+0x74>)
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_GPIO_Init+0x74>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0320 	and.w	r3, r3, #32
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_GPIO_Init+0x74>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a10      	ldr	r2, [pc, #64]	; (8000388 <MX_GPIO_Init+0x74>)
 8000346:	f043 0304 	orr.w	r3, r3, #4
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_GPIO_Init+0x74>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0304 	and.w	r3, r3, #4
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_Master_GPIO_Port, NSS_Master_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	480b      	ldr	r0, [pc, #44]	; (800038c <MX_GPIO_Init+0x78>)
 800035e:	f000 fcd7 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NSS_Master_Pin */
  GPIO_InitStruct.Pin = NSS_Master_Pin;
 8000362:	2310      	movs	r3, #16
 8000364:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000366:	2301      	movs	r3, #1
 8000368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036e:	2302      	movs	r3, #2
 8000370:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NSS_Master_GPIO_Port, &GPIO_InitStruct);
 8000372:	f107 0308 	add.w	r3, r7, #8
 8000376:	4619      	mov	r1, r3
 8000378:	4804      	ldr	r0, [pc, #16]	; (800038c <MX_GPIO_Init+0x78>)
 800037a:	f000 fb6f 	bl	8000a5c <HAL_GPIO_Init>

}
 800037e:	bf00      	nop
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000
 800038c:	40010800 	.word	0x40010800

08000390 <__io_putchar>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */
/*ESTA FUNCION PERMITE EL MANEJO DE LA FUNCION printf() CON EL PUERTO USART*/
int __io_putchar(int ch)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	uint8_t c;
	c = ch & 0x00FF;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	b2db      	uxtb	r3, r3
 800039c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 10);
 800039e:	f107 010f 	add.w	r1, r7, #15
 80003a2:	230a      	movs	r3, #10
 80003a4:	2201      	movs	r2, #1
 80003a6:	4804      	ldr	r0, [pc, #16]	; (80003b8 <__io_putchar+0x28>)
 80003a8:	f001 fbbe 	bl	8001b28 <HAL_UART_Transmit>
	return ch;
 80003ac:	687b      	ldr	r3, [r7, #4]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000098 	.word	0x20000098

080003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a14      	ldr	r2, [pc, #80]	; (8000424 <HAL_MspInit+0x5c>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6193      	str	r3, [r2, #24]
 80003da:	4b12      	ldr	r3, [pc, #72]	; (8000424 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <HAL_MspInit+0x5c>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f0:	61d3      	str	r3, [r2, #28]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003fe:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <HAL_MspInit+0x60>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <HAL_MspInit+0x60>)
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000
 8000428:	40010000 	.word	0x40010000

0800042c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a1b      	ldr	r2, [pc, #108]	; (80004b4 <HAL_SPI_MspInit+0x88>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d12f      	bne.n	80004ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <HAL_SPI_MspInit+0x8c>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a19      	ldr	r2, [pc, #100]	; (80004b8 <HAL_SPI_MspInit+0x8c>)
 8000452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <HAL_SPI_MspInit+0x8c>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <HAL_SPI_MspInit+0x8c>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a13      	ldr	r2, [pc, #76]	; (80004b8 <HAL_SPI_MspInit+0x8c>)
 800046a:	f043 0304 	orr.w	r3, r3, #4
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <HAL_SPI_MspInit+0x8c>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0304 	and.w	r3, r3, #4
 8000478:	60bb      	str	r3, [r7, #8]
 800047a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800047c:	23a0      	movs	r3, #160	; 0xa0
 800047e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000480:	2302      	movs	r3, #2
 8000482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000484:	2303      	movs	r3, #3
 8000486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	480b      	ldr	r0, [pc, #44]	; (80004bc <HAL_SPI_MspInit+0x90>)
 8000490:	f000 fae4 	bl	8000a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000494:	2340      	movs	r3, #64	; 0x40
 8000496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <HAL_SPI_MspInit+0x90>)
 80004a8:	f000 fad8 	bl	8000a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004ac:	bf00      	nop
 80004ae:	3720      	adds	r7, #32
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40013000 	.word	0x40013000
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010800 	.word	0x40010800

080004c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a1c      	ldr	r2, [pc, #112]	; (800054c <HAL_UART_MspInit+0x8c>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d131      	bne.n	8000544 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <HAL_UART_MspInit+0x90>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a1a      	ldr	r2, [pc, #104]	; (8000550 <HAL_UART_MspInit+0x90>)
 80004e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <HAL_UART_MspInit+0x90>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_UART_MspInit+0x90>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <HAL_UART_MspInit+0x90>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_UART_MspInit+0x90>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0304 	and.w	r3, r3, #4
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000516:	2302      	movs	r3, #2
 8000518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051a:	2303      	movs	r3, #3
 800051c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <HAL_UART_MspInit+0x94>)
 8000526:	f000 fa99 	bl	8000a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800052a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800052e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <HAL_UART_MspInit+0x94>)
 8000540:	f000 fa8c 	bl	8000a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40013800 	.word	0x40013800
 8000550:	40021000 	.word	0x40021000
 8000554:	40010800 	.word	0x40010800

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <HardFault_Handler+0x4>

0800056a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <MemManage_Handler+0x4>

08000570 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <BusFault_Handler+0x4>

08000576 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <UsageFault_Handler+0x4>

0800057c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a4:	f000 f938 	bl	8000818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	e00a      	b.n	80005d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005be:	f3af 8000 	nop.w
 80005c2:	4601      	mov	r1, r0
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	b2ca      	uxtb	r2, r1
 80005cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	3301      	adds	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	429a      	cmp	r2, r3
 80005da:	dbf0      	blt.n	80005be <_read+0x12>
	}

return len;
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b086      	sub	sp, #24
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	60f8      	str	r0, [r7, #12]
 80005ee:	60b9      	str	r1, [r7, #8]
 80005f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	e009      	b.n	800060c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	60ba      	str	r2, [r7, #8]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fec5 	bl	8000390 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	3301      	adds	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	dbf1      	blt.n	80005f8 <_write+0x12>
	}
	return len;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <_close>:

int _close(int file)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
	return -1;
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000644:	605a      	str	r2, [r3, #4]
	return 0;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <_isatty>:

int _isatty(int file)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	return 1;
 800065a:	2301      	movs	r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000666:	b480      	push	{r7}
 8000668:	b085      	sub	sp, #20
 800066a:	af00      	add	r7, sp, #0
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
	return 0;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
	...

08000680 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <_sbrk+0x50>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <_sbrk+0x16>
		heap_end = &end;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <_sbrk+0x50>)
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <_sbrk+0x54>)
 8000694:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <_sbrk+0x50>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <_sbrk+0x50>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4413      	add	r3, r2
 80006a4:	466a      	mov	r2, sp
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d907      	bls.n	80006ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80006aa:	f001 fbfb 	bl	8001ea4 <__errno>
 80006ae:	4602      	mov	r2, r0
 80006b0:	230c      	movs	r3, #12
 80006b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	e006      	b.n	80006c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <_sbrk+0x50>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	4a03      	ldr	r2, [pc, #12]	; (80006d0 <_sbrk+0x50>)
 80006c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000008c 	.word	0x2000008c
 80006d4:	20000138 	.word	0x20000138

080006d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <SystemInit+0x5c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <SystemInit+0x5c>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <SystemInit+0x5c>)
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	4911      	ldr	r1, [pc, #68]	; (8000734 <SystemInit+0x5c>)
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <SystemInit+0x60>)
 80006f0:	4013      	ands	r3, r2
 80006f2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <SystemInit+0x5c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <SystemInit+0x5c>)
 80006fa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <SystemInit+0x5c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <SystemInit+0x5c>)
 800070a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800070e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <SystemInit+0x5c>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	4a07      	ldr	r2, [pc, #28]	; (8000734 <SystemInit+0x5c>)
 8000716:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800071a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <SystemInit+0x5c>)
 800071e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000722:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <SystemInit+0x64>)
 8000726:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800072a:	609a      	str	r2, [r3, #8]
#endif 
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40021000 	.word	0x40021000
 8000738:	f8ff0000 	.word	0xf8ff0000
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000740:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000742:	e003      	b.n	800074c <LoopCopyDataInit>

08000744 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000746:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000748:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800074a:	3104      	adds	r1, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800074c:	480a      	ldr	r0, [pc, #40]	; (8000778 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000750:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000752:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000754:	d3f6      	bcc.n	8000744 <CopyDataInit>
  ldr r2, =_sbss
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000758:	e002      	b.n	8000760 <LoopFillZerobss>

0800075a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800075c:	f842 3b04 	str.w	r3, [r2], #4

08000760 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000762:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000764:	d3f9      	bcc.n	800075a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000766:	f7ff ffb7 	bl	80006d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800076a:	f001 fba1 	bl	8001eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076e:	f7ff fced 	bl	800014c <main>
  bx lr
 8000772:	4770      	bx	lr
  ldr r3, =_sidata
 8000774:	08002ed0 	.word	0x08002ed0
  ldr r0, =_sdata
 8000778:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800077c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000780:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000784:	20000138 	.word	0x20000138

08000788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_2_IRQHandler>
	...

0800078c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_Init+0x28>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <HAL_Init+0x28>)
 8000796:	f043 0310 	orr.w	r3, r3, #16
 800079a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079c:	2003      	movs	r0, #3
 800079e:	f000 f929 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 f808 	bl	80007b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a8:	f7ff fe0e 	bl	80003c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40022000 	.word	0x40022000

080007b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_InitTick+0x54>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_InitTick+0x58>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f933 	bl	8000a42 <HAL_SYSTICK_Config>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00e      	b.n	8000804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	d80a      	bhi.n	8000802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ec:	2200      	movs	r2, #0
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f000 f909 	bl	8000a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f8:	4a06      	ldr	r2, [pc, #24]	; (8000814 <HAL_InitTick+0x5c>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007fe:	2300      	movs	r3, #0
 8000800:	e000      	b.n	8000804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000000 	.word	0x20000000
 8000810:	20000008 	.word	0x20000008
 8000814:	20000004 	.word	0x20000004

08000818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_IncTick+0x1c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <HAL_IncTick+0x20>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4413      	add	r3, r2
 8000828:	4a03      	ldr	r2, [pc, #12]	; (8000838 <HAL_IncTick+0x20>)
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	20000008 	.word	0x20000008
 8000838:	20000130 	.word	0x20000130

0800083c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return uwTick;
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <HAL_GetTick+0x10>)
 8000842:	681b      	ldr	r3, [r3, #0]
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	20000130 	.word	0x20000130

08000850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000858:	f7ff fff0 	bl	800083c <HAL_GetTick>
 800085c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000868:	d005      	beq.n	8000876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_Delay+0x40>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4413      	add	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000876:	bf00      	nop
 8000878:	f7ff ffe0 	bl	800083c <HAL_GetTick>
 800087c:	4602      	mov	r2, r0
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	429a      	cmp	r2, r3
 8000886:	d8f7      	bhi.n	8000878 <HAL_Delay+0x28>
  {
  }
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000008 	.word	0x20000008

08000894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c6:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	60d3      	str	r3, [r2, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <__NVIC_GetPriorityGrouping+0x18>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	f003 0307 	and.w	r3, r3, #7
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db0a      	blt.n	8000922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	490c      	ldr	r1, [pc, #48]	; (8000944 <__NVIC_SetPriority+0x4c>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	0112      	lsls	r2, r2, #4
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	440b      	add	r3, r1
 800091c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000920:	e00a      	b.n	8000938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4908      	ldr	r1, [pc, #32]	; (8000948 <__NVIC_SetPriority+0x50>)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	3b04      	subs	r3, #4
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	761a      	strb	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	; 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f1c3 0307 	rsb	r3, r3, #7
 8000966:	2b04      	cmp	r3, #4
 8000968:	bf28      	it	cs
 800096a:	2304      	movcs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3304      	adds	r3, #4
 8000972:	2b06      	cmp	r3, #6
 8000974:	d902      	bls.n	800097c <NVIC_EncodePriority+0x30>
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3b03      	subs	r3, #3
 800097a:	e000      	b.n	800097e <NVIC_EncodePriority+0x32>
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43d9      	mvns	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	4313      	orrs	r3, r2
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	; 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f7ff ff90 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff49 	bl	8000894 <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff5e 	bl	80008dc <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff90 	bl	800094c <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5f 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ffb0 	bl	80009b0 <SysTick_Config>
 8000a50:	4603      	mov	r3, r0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b08b      	sub	sp, #44	; 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6e:	e127      	b.n	8000cc0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a70:	2201      	movs	r2, #1
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	f040 8116 	bne.w	8000cba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b12      	cmp	r3, #18
 8000a94:	d034      	beq.n	8000b00 <HAL_GPIO_Init+0xa4>
 8000a96:	2b12      	cmp	r3, #18
 8000a98:	d80d      	bhi.n	8000ab6 <HAL_GPIO_Init+0x5a>
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d02b      	beq.n	8000af6 <HAL_GPIO_Init+0x9a>
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d804      	bhi.n	8000aac <HAL_GPIO_Init+0x50>
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d031      	beq.n	8000b0a <HAL_GPIO_Init+0xae>
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d01c      	beq.n	8000ae4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aaa:	e048      	b.n	8000b3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d043      	beq.n	8000b38 <HAL_GPIO_Init+0xdc>
 8000ab0:	2b11      	cmp	r3, #17
 8000ab2:	d01b      	beq.n	8000aec <HAL_GPIO_Init+0x90>
          break;
 8000ab4:	e043      	b.n	8000b3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ab6:	4a89      	ldr	r2, [pc, #548]	; (8000cdc <HAL_GPIO_Init+0x280>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d026      	beq.n	8000b0a <HAL_GPIO_Init+0xae>
 8000abc:	4a87      	ldr	r2, [pc, #540]	; (8000cdc <HAL_GPIO_Init+0x280>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d806      	bhi.n	8000ad0 <HAL_GPIO_Init+0x74>
 8000ac2:	4a87      	ldr	r2, [pc, #540]	; (8000ce0 <HAL_GPIO_Init+0x284>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d020      	beq.n	8000b0a <HAL_GPIO_Init+0xae>
 8000ac8:	4a86      	ldr	r2, [pc, #536]	; (8000ce4 <HAL_GPIO_Init+0x288>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d01d      	beq.n	8000b0a <HAL_GPIO_Init+0xae>
          break;
 8000ace:	e036      	b.n	8000b3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ad0:	4a85      	ldr	r2, [pc, #532]	; (8000ce8 <HAL_GPIO_Init+0x28c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d019      	beq.n	8000b0a <HAL_GPIO_Init+0xae>
 8000ad6:	4a85      	ldr	r2, [pc, #532]	; (8000cec <HAL_GPIO_Init+0x290>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d016      	beq.n	8000b0a <HAL_GPIO_Init+0xae>
 8000adc:	4a84      	ldr	r2, [pc, #528]	; (8000cf0 <HAL_GPIO_Init+0x294>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d013      	beq.n	8000b0a <HAL_GPIO_Init+0xae>
          break;
 8000ae2:	e02c      	b.n	8000b3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	623b      	str	r3, [r7, #32]
          break;
 8000aea:	e028      	b.n	8000b3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	3304      	adds	r3, #4
 8000af2:	623b      	str	r3, [r7, #32]
          break;
 8000af4:	e023      	b.n	8000b3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	3308      	adds	r3, #8
 8000afc:	623b      	str	r3, [r7, #32]
          break;
 8000afe:	e01e      	b.n	8000b3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	330c      	adds	r3, #12
 8000b06:	623b      	str	r3, [r7, #32]
          break;
 8000b08:	e019      	b.n	8000b3e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b12:	2304      	movs	r3, #4
 8000b14:	623b      	str	r3, [r7, #32]
          break;
 8000b16:	e012      	b.n	8000b3e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d105      	bne.n	8000b2c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b20:	2308      	movs	r3, #8
 8000b22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	69fa      	ldr	r2, [r7, #28]
 8000b28:	611a      	str	r2, [r3, #16]
          break;
 8000b2a:	e008      	b.n	8000b3e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	69fa      	ldr	r2, [r7, #28]
 8000b34:	615a      	str	r2, [r3, #20]
          break;
 8000b36:	e002      	b.n	8000b3e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
          break;
 8000b3c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	2bff      	cmp	r3, #255	; 0xff
 8000b42:	d801      	bhi.n	8000b48 <HAL_GPIO_Init+0xec>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	e001      	b.n	8000b4c <HAL_GPIO_Init+0xf0>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3304      	adds	r3, #4
 8000b4c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	2bff      	cmp	r3, #255	; 0xff
 8000b52:	d802      	bhi.n	8000b5a <HAL_GPIO_Init+0xfe>
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	e002      	b.n	8000b60 <HAL_GPIO_Init+0x104>
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	3b08      	subs	r3, #8
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	210f      	movs	r1, #15
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	401a      	ands	r2, r3
 8000b72:	6a39      	ldr	r1, [r7, #32]
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f000 8096 	beq.w	8000cba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8e:	4b59      	ldr	r3, [pc, #356]	; (8000cf4 <HAL_GPIO_Init+0x298>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	4a58      	ldr	r2, [pc, #352]	; (8000cf4 <HAL_GPIO_Init+0x298>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6193      	str	r3, [r2, #24]
 8000b9a:	4b56      	ldr	r3, [pc, #344]	; (8000cf4 <HAL_GPIO_Init+0x298>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ba6:	4a54      	ldr	r2, [pc, #336]	; (8000cf8 <HAL_GPIO_Init+0x29c>)
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	3302      	adds	r3, #2
 8000bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	f003 0303 	and.w	r3, r3, #3
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	220f      	movs	r2, #15
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a4b      	ldr	r2, [pc, #300]	; (8000cfc <HAL_GPIO_Init+0x2a0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d013      	beq.n	8000bfa <HAL_GPIO_Init+0x19e>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a4a      	ldr	r2, [pc, #296]	; (8000d00 <HAL_GPIO_Init+0x2a4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d00d      	beq.n	8000bf6 <HAL_GPIO_Init+0x19a>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a49      	ldr	r2, [pc, #292]	; (8000d04 <HAL_GPIO_Init+0x2a8>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d007      	beq.n	8000bf2 <HAL_GPIO_Init+0x196>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a48      	ldr	r2, [pc, #288]	; (8000d08 <HAL_GPIO_Init+0x2ac>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_GPIO_Init+0x192>
 8000bea:	2303      	movs	r3, #3
 8000bec:	e006      	b.n	8000bfc <HAL_GPIO_Init+0x1a0>
 8000bee:	2304      	movs	r3, #4
 8000bf0:	e004      	b.n	8000bfc <HAL_GPIO_Init+0x1a0>
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	e002      	b.n	8000bfc <HAL_GPIO_Init+0x1a0>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <HAL_GPIO_Init+0x1a0>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bfe:	f002 0203 	and.w	r2, r2, #3
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	4093      	lsls	r3, r2
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c0c:	493a      	ldr	r1, [pc, #232]	; (8000cf8 <HAL_GPIO_Init+0x29c>)
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	3302      	adds	r3, #2
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d006      	beq.n	8000c34 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c26:	4b39      	ldr	r3, [pc, #228]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4938      	ldr	r1, [pc, #224]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	600b      	str	r3, [r1, #0]
 8000c32:	e006      	b.n	8000c42 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c34:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	4933      	ldr	r1, [pc, #204]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d006      	beq.n	8000c5c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	492e      	ldr	r1, [pc, #184]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	604b      	str	r3, [r1, #4]
 8000c5a:	e006      	b.n	8000c6a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	4929      	ldr	r1, [pc, #164]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000c66:	4013      	ands	r3, r2
 8000c68:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d006      	beq.n	8000c84 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	4924      	ldr	r1, [pc, #144]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	608b      	str	r3, [r1, #8]
 8000c82:	e006      	b.n	8000c92 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	491f      	ldr	r1, [pc, #124]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000c8e:	4013      	ands	r3, r2
 8000c90:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d006      	beq.n	8000cac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	491a      	ldr	r1, [pc, #104]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	60cb      	str	r3, [r1, #12]
 8000caa:	e006      	b.n	8000cba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	4915      	ldr	r1, [pc, #84]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f47f aed0 	bne.w	8000a70 <HAL_GPIO_Init+0x14>
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	372c      	adds	r7, #44	; 0x2c
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	10210000 	.word	0x10210000
 8000ce0:	10110000 	.word	0x10110000
 8000ce4:	10120000 	.word	0x10120000
 8000ce8:	10310000 	.word	0x10310000
 8000cec:	10320000 	.word	0x10320000
 8000cf0:	10220000 	.word	0x10220000
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010000 	.word	0x40010000
 8000cfc:	40010800 	.word	0x40010800
 8000d00:	40010c00 	.word	0x40010c00
 8000d04:	40011000 	.word	0x40011000
 8000d08:	40011400 	.word	0x40011400
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d20:	787b      	ldrb	r3, [r7, #1]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d2c:	e003      	b.n	8000d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	041a      	lsls	r2, r3, #16
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	611a      	str	r2, [r3, #16]
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e26c      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 8087 	beq.w	8000e6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d60:	4b92      	ldr	r3, [pc, #584]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 030c 	and.w	r3, r3, #12
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d00c      	beq.n	8000d86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d6c:	4b8f      	ldr	r3, [pc, #572]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 030c 	and.w	r3, r3, #12
 8000d74:	2b08      	cmp	r3, #8
 8000d76:	d112      	bne.n	8000d9e <HAL_RCC_OscConfig+0x5e>
 8000d78:	4b8c      	ldr	r3, [pc, #560]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d84:	d10b      	bne.n	8000d9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d86:	4b89      	ldr	r3, [pc, #548]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d06c      	beq.n	8000e6c <HAL_RCC_OscConfig+0x12c>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d168      	bne.n	8000e6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e246      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da6:	d106      	bne.n	8000db6 <HAL_RCC_OscConfig+0x76>
 8000da8:	4b80      	ldr	r3, [pc, #512]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a7f      	ldr	r2, [pc, #508]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	e02e      	b.n	8000e14 <HAL_RCC_OscConfig+0xd4>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10c      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x98>
 8000dbe:	4b7b      	ldr	r3, [pc, #492]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a7a      	ldr	r2, [pc, #488]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	4b78      	ldr	r3, [pc, #480]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a77      	ldr	r2, [pc, #476]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e01d      	b.n	8000e14 <HAL_RCC_OscConfig+0xd4>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000de0:	d10c      	bne.n	8000dfc <HAL_RCC_OscConfig+0xbc>
 8000de2:	4b72      	ldr	r3, [pc, #456]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a71      	ldr	r2, [pc, #452]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	4b6f      	ldr	r3, [pc, #444]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a6e      	ldr	r2, [pc, #440]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e00b      	b.n	8000e14 <HAL_RCC_OscConfig+0xd4>
 8000dfc:	4b6b      	ldr	r3, [pc, #428]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a6a      	ldr	r2, [pc, #424]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b68      	ldr	r3, [pc, #416]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a67      	ldr	r2, [pc, #412]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d013      	beq.n	8000e44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fd0e 	bl	800083c <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e24:	f7ff fd0a 	bl	800083c <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b64      	cmp	r3, #100	; 0x64
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e1fa      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e36:	4b5d      	ldr	r3, [pc, #372]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0f0      	beq.n	8000e24 <HAL_RCC_OscConfig+0xe4>
 8000e42:	e014      	b.n	8000e6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e44:	f7ff fcfa 	bl	800083c <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fcf6 	bl	800083c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b64      	cmp	r3, #100	; 0x64
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e1e6      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5e:	4b53      	ldr	r3, [pc, #332]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f0      	bne.n	8000e4c <HAL_RCC_OscConfig+0x10c>
 8000e6a:	e000      	b.n	8000e6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d063      	beq.n	8000f42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e7a:	4b4c      	ldr	r3, [pc, #304]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 030c 	and.w	r3, r3, #12
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00b      	beq.n	8000e9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e86:	4b49      	ldr	r3, [pc, #292]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	2b08      	cmp	r3, #8
 8000e90:	d11c      	bne.n	8000ecc <HAL_RCC_OscConfig+0x18c>
 8000e92:	4b46      	ldr	r3, [pc, #280]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d116      	bne.n	8000ecc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e9e:	4b43      	ldr	r3, [pc, #268]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d005      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x176>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d001      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e1ba      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb6:	4b3d      	ldr	r3, [pc, #244]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	4939      	ldr	r1, [pc, #228]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eca:	e03a      	b.n	8000f42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d020      	beq.n	8000f16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ed4:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eda:	f7ff fcaf 	bl	800083c <HAL_GetTick>
 8000ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee0:	e008      	b.n	8000ef4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee2:	f7ff fcab 	bl	800083c <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e19b      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0f0      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f00:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	4927      	ldr	r1, [pc, #156]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000f10:	4313      	orrs	r3, r2
 8000f12:	600b      	str	r3, [r1, #0]
 8000f14:	e015      	b.n	8000f42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <HAL_RCC_OscConfig+0x270>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fc8e 	bl	800083c <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f24:	f7ff fc8a 	bl	800083c <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e17a      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d03a      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d019      	beq.n	8000f8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_RCC_OscConfig+0x274>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5c:	f7ff fc6e 	bl	800083c <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f64:	f7ff fc6a 	bl	800083c <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e15a      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_RCC_OscConfig+0x26c>)
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f0      	beq.n	8000f64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f000 fada 	bl	800153c <RCC_Delay>
 8000f88:	e01c      	b.n	8000fc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_RCC_OscConfig+0x274>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f90:	f7ff fc54 	bl	800083c <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f96:	e00f      	b.n	8000fb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f98:	f7ff fc50 	bl	800083c <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d908      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e140      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	42420000 	.word	0x42420000
 8000fb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb8:	4b9e      	ldr	r3, [pc, #632]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1e9      	bne.n	8000f98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 80a6 	beq.w	800111e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fd6:	4b97      	ldr	r3, [pc, #604]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10d      	bne.n	8000ffe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	4b94      	ldr	r3, [pc, #592]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a93      	ldr	r2, [pc, #588]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b91      	ldr	r3, [pc, #580]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ffe:	4b8e      	ldr	r3, [pc, #568]	; (8001238 <HAL_RCC_OscConfig+0x4f8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001006:	2b00      	cmp	r3, #0
 8001008:	d118      	bne.n	800103c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800100a:	4b8b      	ldr	r3, [pc, #556]	; (8001238 <HAL_RCC_OscConfig+0x4f8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a8a      	ldr	r2, [pc, #552]	; (8001238 <HAL_RCC_OscConfig+0x4f8>)
 8001010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001016:	f7ff fc11 	bl	800083c <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101e:	f7ff fc0d 	bl	800083c <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b64      	cmp	r3, #100	; 0x64
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e0fd      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001030:	4b81      	ldr	r3, [pc, #516]	; (8001238 <HAL_RCC_OscConfig+0x4f8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d106      	bne.n	8001052 <HAL_RCC_OscConfig+0x312>
 8001044:	4b7b      	ldr	r3, [pc, #492]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	4a7a      	ldr	r2, [pc, #488]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6213      	str	r3, [r2, #32]
 8001050:	e02d      	b.n	80010ae <HAL_RCC_OscConfig+0x36e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10c      	bne.n	8001074 <HAL_RCC_OscConfig+0x334>
 800105a:	4b76      	ldr	r3, [pc, #472]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4a75      	ldr	r2, [pc, #468]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8001060:	f023 0301 	bic.w	r3, r3, #1
 8001064:	6213      	str	r3, [r2, #32]
 8001066:	4b73      	ldr	r3, [pc, #460]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4a72      	ldr	r2, [pc, #456]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	f023 0304 	bic.w	r3, r3, #4
 8001070:	6213      	str	r3, [r2, #32]
 8001072:	e01c      	b.n	80010ae <HAL_RCC_OscConfig+0x36e>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	2b05      	cmp	r3, #5
 800107a:	d10c      	bne.n	8001096 <HAL_RCC_OscConfig+0x356>
 800107c:	4b6d      	ldr	r3, [pc, #436]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	4a6c      	ldr	r2, [pc, #432]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6213      	str	r3, [r2, #32]
 8001088:	4b6a      	ldr	r3, [pc, #424]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	4a69      	ldr	r2, [pc, #420]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6213      	str	r3, [r2, #32]
 8001094:	e00b      	b.n	80010ae <HAL_RCC_OscConfig+0x36e>
 8001096:	4b67      	ldr	r3, [pc, #412]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4a66      	ldr	r2, [pc, #408]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	f023 0301 	bic.w	r3, r3, #1
 80010a0:	6213      	str	r3, [r2, #32]
 80010a2:	4b64      	ldr	r3, [pc, #400]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	4a63      	ldr	r2, [pc, #396]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	f023 0304 	bic.w	r3, r3, #4
 80010ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d015      	beq.n	80010e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fbc1 	bl	800083c <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010bc:	e00a      	b.n	80010d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010be:	f7ff fbbd 	bl	800083c <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e0ab      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d4:	4b57      	ldr	r3, [pc, #348]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0ee      	beq.n	80010be <HAL_RCC_OscConfig+0x37e>
 80010e0:	e014      	b.n	800110c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e2:	f7ff fbab 	bl	800083c <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e8:	e00a      	b.n	8001100 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ea:	f7ff fba7 	bl	800083c <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e095      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001100:	4b4c      	ldr	r3, [pc, #304]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1ee      	bne.n	80010ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d105      	bne.n	800111e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001112:	4b48      	ldr	r3, [pc, #288]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a47      	ldr	r2, [pc, #284]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8001118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800111c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 8081 	beq.w	800122a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001128:	4b42      	ldr	r3, [pc, #264]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 030c 	and.w	r3, r3, #12
 8001130:	2b08      	cmp	r3, #8
 8001132:	d061      	beq.n	80011f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d146      	bne.n	80011ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113c:	4b3f      	ldr	r3, [pc, #252]	; (800123c <HAL_RCC_OscConfig+0x4fc>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001142:	f7ff fb7b 	bl	800083c <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114a:	f7ff fb77 	bl	800083c <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e067      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115c:	4b35      	ldr	r3, [pc, #212]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f0      	bne.n	800114a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001170:	d108      	bne.n	8001184 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001172:	4b30      	ldr	r3, [pc, #192]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	492d      	ldr	r1, [pc, #180]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a19      	ldr	r1, [r3, #32]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	430b      	orrs	r3, r1
 8001196:	4927      	ldr	r1, [pc, #156]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <HAL_RCC_OscConfig+0x4fc>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fb4b 	bl	800083c <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011aa:	f7ff fb47 	bl	800083c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e037      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x46a>
 80011c8:	e02f      	b.n	800122a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_RCC_OscConfig+0x4fc>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fb34 	bl	800083c <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d8:	f7ff fb30 	bl	800083c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e020      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x498>
 80011f6:	e018      	b.n	800122a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e013      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_RCC_OscConfig+0x4f4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	429a      	cmp	r2, r3
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001222:	429a      	cmp	r2, r3
 8001224:	d001      	beq.n	800122a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000
 8001238:	40007000 	.word	0x40007000
 800123c:	42420060 	.word	0x42420060

08001240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e0d0      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001254:	4b6a      	ldr	r3, [pc, #424]	; (8001400 <HAL_RCC_ClockConfig+0x1c0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d910      	bls.n	8001284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001262:	4b67      	ldr	r3, [pc, #412]	; (8001400 <HAL_RCC_ClockConfig+0x1c0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 0207 	bic.w	r2, r3, #7
 800126a:	4965      	ldr	r1, [pc, #404]	; (8001400 <HAL_RCC_ClockConfig+0x1c0>)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001272:	4b63      	ldr	r3, [pc, #396]	; (8001400 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d001      	beq.n	8001284 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0b8      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d020      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800129c:	4b59      	ldr	r3, [pc, #356]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	4a58      	ldr	r2, [pc, #352]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012b4:	4b53      	ldr	r3, [pc, #332]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4a52      	ldr	r2, [pc, #328]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c0:	4b50      	ldr	r3, [pc, #320]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	494d      	ldr	r1, [pc, #308]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d040      	beq.n	8001360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d115      	bne.n	800131e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e07f      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d107      	bne.n	800130e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fe:	4b41      	ldr	r3, [pc, #260]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e073      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130e:	4b3d      	ldr	r3, [pc, #244]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e06b      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800131e:	4b39      	ldr	r3, [pc, #228]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f023 0203 	bic.w	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4936      	ldr	r1, [pc, #216]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001330:	f7ff fa84 	bl	800083c <HAL_GetTick>
 8001334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001336:	e00a      	b.n	800134e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001338:	f7ff fa80 	bl	800083c <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f241 3288 	movw	r2, #5000	; 0x1388
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e053      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 020c 	and.w	r2, r3, #12
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	429a      	cmp	r2, r3
 800135e:	d1eb      	bne.n	8001338 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001360:	4b27      	ldr	r3, [pc, #156]	; (8001400 <HAL_RCC_ClockConfig+0x1c0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d210      	bcs.n	8001390 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_RCC_ClockConfig+0x1c0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 0207 	bic.w	r2, r3, #7
 8001376:	4922      	ldr	r1, [pc, #136]	; (8001400 <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d001      	beq.n	8001390 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e032      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d008      	beq.n	80013ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	4916      	ldr	r1, [pc, #88]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	490e      	ldr	r1, [pc, #56]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ce:	f000 f821 	bl	8001414 <HAL_RCC_GetSysClockFreq>
 80013d2:	4601      	mov	r1, r0
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_RCC_ClockConfig+0x1c8>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	fa21 f303 	lsr.w	r3, r1, r3
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_RCC_ClockConfig+0x1cc>)
 80013e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_RCC_ClockConfig+0x1d0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f9e2 	bl	80007b8 <HAL_InitTick>

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40022000 	.word	0x40022000
 8001404:	40021000 	.word	0x40021000
 8001408:	08002e18 	.word	0x08002e18
 800140c:	20000000 	.word	0x20000000
 8001410:	20000004 	.word	0x20000004

08001414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001414:	b490      	push	{r4, r7}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800141a:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800141c:	1d3c      	adds	r4, r7, #4
 800141e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b04      	cmp	r3, #4
 800144c:	d002      	beq.n	8001454 <HAL_RCC_GetSysClockFreq+0x40>
 800144e:	2b08      	cmp	r3, #8
 8001450:	d003      	beq.n	800145a <HAL_RCC_GetSysClockFreq+0x46>
 8001452:	e02d      	b.n	80014b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001456:	623b      	str	r3, [r7, #32]
      break;
 8001458:	e02d      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	0c9b      	lsrs	r3, r3, #18
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001466:	4413      	add	r3, r2
 8001468:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800146c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d013      	beq.n	80014a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	0c5b      	lsrs	r3, r3, #17
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001486:	4413      	add	r3, r2
 8001488:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800148c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001492:	fb02 f203 	mul.w	r2, r2, r3
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	fbb2 f3f3 	udiv	r3, r2, r3
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	e004      	b.n	80014aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014a4:	fb02 f303 	mul.w	r3, r2, r3
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	623b      	str	r3, [r7, #32]
      break;
 80014ae:	e002      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014b2:	623b      	str	r3, [r7, #32]
      break;
 80014b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014b6:	6a3b      	ldr	r3, [r7, #32]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc90      	pop	{r4, r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	08002e04 	.word	0x08002e04
 80014c8:	08002e14 	.word	0x08002e14
 80014cc:	40021000 	.word	0x40021000
 80014d0:	007a1200 	.word	0x007a1200
 80014d4:	003d0900 	.word	0x003d0900

080014d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014dc:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000000 	.word	0x20000000

080014ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014f0:	f7ff fff2 	bl	80014d8 <HAL_RCC_GetHCLKFreq>
 80014f4:	4601      	mov	r1, r0
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_RCC_GetPCLK1Freq+0x20>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	4a03      	ldr	r2, [pc, #12]	; (8001510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001502:	5cd3      	ldrb	r3, [r2, r3]
 8001504:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001508:	4618      	mov	r0, r3
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000
 8001510:	08002e28 	.word	0x08002e28

08001514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001518:	f7ff ffde 	bl	80014d8 <HAL_RCC_GetHCLKFreq>
 800151c:	4601      	mov	r1, r0
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	0adb      	lsrs	r3, r3, #11
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	4a03      	ldr	r2, [pc, #12]	; (8001538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	08002e28 	.word	0x08002e28

0800153c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <RCC_Delay+0x34>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <RCC_Delay+0x38>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0a5b      	lsrs	r3, r3, #9
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001558:	bf00      	nop
  }
  while (Delay --);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1e5a      	subs	r2, r3, #1
 800155e:	60fa      	str	r2, [r7, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f9      	bne.n	8001558 <RCC_Delay+0x1c>
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000000 	.word	0x20000000
 8001574:	10624dd3 	.word	0x10624dd3

08001578 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e053      	b.n	8001632 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d106      	bne.n	80015aa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7fe ff41 	bl	800042c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2202      	movs	r2, #2
 80015ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	ea42 0103 	orr.w	r1, r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	0c1a      	lsrs	r2, r3, #16
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f002 0204 	and.w	r2, r2, #4
 8001610:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	69da      	ldr	r2, [r3, #28]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001620:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b08c      	sub	sp, #48	; 0x30
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001648:	2301      	movs	r3, #1
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <HAL_SPI_TransmitReceive+0x26>
 800165c:	2302      	movs	r3, #2
 800165e:	e18a      	b.n	8001976 <HAL_SPI_TransmitReceive+0x33c>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001668:	f7ff f8e8 	bl	800083c <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001686:	2b01      	cmp	r3, #1
 8001688:	d00f      	beq.n	80016aa <HAL_SPI_TransmitReceive+0x70>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001690:	d107      	bne.n	80016a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d103      	bne.n	80016a2 <HAL_SPI_TransmitReceive+0x68>
 800169a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d003      	beq.n	80016aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80016a2:	2302      	movs	r3, #2
 80016a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80016a8:	e15b      	b.n	8001962 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_SPI_TransmitReceive+0x82>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <HAL_SPI_TransmitReceive+0x82>
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d103      	bne.n	80016c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80016c2:	e14e      	b.n	8001962 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d003      	beq.n	80016d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2205      	movs	r2, #5
 80016d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	887a      	ldrh	r2, [r7, #2]
 80016ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	887a      	ldrh	r2, [r7, #2]
 80016fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001718:	2b40      	cmp	r3, #64	; 0x40
 800171a:	d007      	beq.n	800172c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800172a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001734:	d178      	bne.n	8001828 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <HAL_SPI_TransmitReceive+0x10a>
 800173e:	8b7b      	ldrh	r3, [r7, #26]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d166      	bne.n	8001812 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	881a      	ldrh	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	1c9a      	adds	r2, r3, #2
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800175e:	b29b      	uxth	r3, r3
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001768:	e053      	b.n	8001812 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b02      	cmp	r3, #2
 8001776:	d11b      	bne.n	80017b0 <HAL_SPI_TransmitReceive+0x176>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800177c:	b29b      	uxth	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d016      	beq.n	80017b0 <HAL_SPI_TransmitReceive+0x176>
 8001782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001784:	2b01      	cmp	r3, #1
 8001786:	d113      	bne.n	80017b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	881a      	ldrh	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	1c9a      	adds	r2, r3, #2
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d119      	bne.n	80017f2 <HAL_SPI_TransmitReceive+0x1b8>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d014      	beq.n	80017f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d2:	b292      	uxth	r2, r2
 80017d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017da:	1c9a      	adds	r2, r3, #2
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80017ee:	2301      	movs	r3, #1
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80017f2:	f7ff f823 	bl	800083c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017fe:	429a      	cmp	r2, r3
 8001800:	d807      	bhi.n	8001812 <HAL_SPI_TransmitReceive+0x1d8>
 8001802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d003      	beq.n	8001812 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001810:	e0a7      	b.n	8001962 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001816:	b29b      	uxth	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1a6      	bne.n	800176a <HAL_SPI_TransmitReceive+0x130>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001820:	b29b      	uxth	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1a1      	bne.n	800176a <HAL_SPI_TransmitReceive+0x130>
 8001826:	e07c      	b.n	8001922 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <HAL_SPI_TransmitReceive+0x1fc>
 8001830:	8b7b      	ldrh	r3, [r7, #26]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d16b      	bne.n	800190e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	330c      	adds	r3, #12
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001852:	b29b      	uxth	r3, r3
 8001854:	3b01      	subs	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800185c:	e057      	b.n	800190e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b02      	cmp	r3, #2
 800186a:	d11c      	bne.n	80018a6 <HAL_SPI_TransmitReceive+0x26c>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001870:	b29b      	uxth	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d017      	beq.n	80018a6 <HAL_SPI_TransmitReceive+0x26c>
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	2b01      	cmp	r3, #1
 800187a:	d114      	bne.n	80018a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	330c      	adds	r3, #12
 8001886:	7812      	ldrb	r2, [r2, #0]
 8001888:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001898:	b29b      	uxth	r3, r3
 800189a:	3b01      	subs	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d119      	bne.n	80018e8 <HAL_SPI_TransmitReceive+0x2ae>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d014      	beq.n	80018e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80018e4:	2301      	movs	r3, #1
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80018e8:	f7fe ffa8 	bl	800083c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d803      	bhi.n	8001900 <HAL_SPI_TransmitReceive+0x2c6>
 80018f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fe:	d102      	bne.n	8001906 <HAL_SPI_TransmitReceive+0x2cc>
 8001900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001902:	2b00      	cmp	r3, #0
 8001904:	d103      	bne.n	800190e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800190c:	e029      	b.n	8001962 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001912:	b29b      	uxth	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1a2      	bne.n	800185e <HAL_SPI_TransmitReceive+0x224>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800191c:	b29b      	uxth	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d19d      	bne.n	800185e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001924:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f893 	bl	8001a52 <SPI_EndRxTxTransaction>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2220      	movs	r2, #32
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800193e:	e010      	b.n	8001962 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10b      	bne.n	8001960 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	e000      	b.n	8001962 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001960:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001972:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001976:	4618      	mov	r0, r3
 8001978:	3730      	adds	r7, #48	; 0x30
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	4613      	mov	r3, r2
 800198c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800198e:	e04c      	b.n	8001a2a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001996:	d048      	beq.n	8001a2a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001998:	f7fe ff50 	bl	800083c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d902      	bls.n	80019ae <SPI_WaitFlagStateUntilTimeout+0x30>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d13d      	bne.n	8001a2a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80019bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019c6:	d111      	bne.n	80019ec <SPI_WaitFlagStateUntilTimeout+0x6e>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019d0:	d004      	beq.n	80019dc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019da:	d107      	bne.n	80019ec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019f4:	d10f      	bne.n	8001a16 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e00f      	b.n	8001a4a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4013      	ands	r3, r2
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	bf0c      	ite	eq
 8001a3a:	2301      	moveq	r3, #1
 8001a3c:	2300      	movne	r3, #0
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1a3      	bne.n	8001990 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af02      	add	r7, sp, #8
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2200      	movs	r2, #0
 8001a66:	2180      	movs	r1, #128	; 0x80
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff ff88 	bl	800197e <SPI_WaitFlagStateUntilTimeout>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a78:	f043 0220 	orr.w	r2, r3, #32
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e000      	b.n	8001a86 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e03f      	b.n	8001b20 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d106      	bne.n	8001aba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7fe fd03 	bl	80004c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2224      	movs	r2, #36	; 0x24
 8001abe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ad0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f90c 	bl	8001cf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ae6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001af6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	4613      	mov	r3, r2
 8001b36:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	f040 8083 	bne.w	8001c50 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <HAL_UART_Transmit+0x2e>
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e07b      	b.n	8001c52 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_UART_Transmit+0x40>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e074      	b.n	8001c52 <HAL_UART_Transmit+0x12a>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2221      	movs	r2, #33	; 0x21
 8001b7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b7e:	f7fe fe5d 	bl	800083c <HAL_GetTick>
 8001b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	88fa      	ldrh	r2, [r7, #6]
 8001b8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b90:	e042      	b.n	8001c18 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba8:	d122      	bne.n	8001bf0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f850 	bl	8001c5a <UART_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e046      	b.n	8001c52 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bd6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d103      	bne.n	8001be8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	3302      	adds	r3, #2
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	e017      	b.n	8001c18 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	e013      	b.n	8001c18 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f82d 	bl	8001c5a <UART_WaitOnFlagUntilTimeout>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e023      	b.n	8001c52 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1b7      	bne.n	8001b92 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2140      	movs	r1, #64	; 0x40
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 f814 	bl	8001c5a <UART_WaitOnFlagUntilTimeout>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e00a      	b.n	8001c52 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e000      	b.n	8001c52 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
  }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4613      	mov	r3, r2
 8001c68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c6a:	e02c      	b.n	8001cc6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c72:	d028      	beq.n	8001cc6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x30>
 8001c7a:	f7fe fddf 	bl	800083c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d21d      	bcs.n	8001cc6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0201 	bic.w	r2, r2, #1
 8001ca8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e00f      	b.n	8001ce6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	bf0c      	ite	eq
 8001cd6:	2301      	moveq	r3, #1
 8001cd8:	2300      	movne	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d0c3      	beq.n	8001c6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d2a:	f023 030c 	bic.w	r3, r3, #12
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	68f9      	ldr	r1, [r7, #12]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <UART_SetConfig+0x1ac>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d14e      	bne.n	8001df6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d58:	f7ff fbdc 	bl	8001514 <HAL_RCC_GetPCLK2Freq>
 8001d5c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	009a      	lsls	r2, r3, #2
 8001d68:	441a      	add	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	4a4a      	ldr	r2, [pc, #296]	; (8001ea0 <UART_SetConfig+0x1b0>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	0119      	lsls	r1, r3, #4
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	009a      	lsls	r2, r3, #2
 8001d88:	441a      	add	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d94:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <UART_SetConfig+0x1b0>)
 8001d96:	fba3 0302 	umull	r0, r3, r3, r2
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2064      	movs	r0, #100	; 0x64
 8001d9e:	fb00 f303 	mul.w	r3, r0, r3
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	3332      	adds	r3, #50	; 0x32
 8001da8:	4a3d      	ldr	r2, [pc, #244]	; (8001ea0 <UART_SetConfig+0x1b0>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db4:	4419      	add	r1, r3
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009a      	lsls	r2, r3, #2
 8001dc0:	441a      	add	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dcc:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <UART_SetConfig+0x1b0>)
 8001dce:	fba3 0302 	umull	r0, r3, r3, r2
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2064      	movs	r0, #100	; 0x64
 8001dd6:	fb00 f303 	mul.w	r3, r0, r3
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	3332      	adds	r3, #50	; 0x32
 8001de0:	4a2f      	ldr	r2, [pc, #188]	; (8001ea0 <UART_SetConfig+0x1b0>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	f003 020f 	and.w	r2, r3, #15
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	440a      	add	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001df4:	e04d      	b.n	8001e92 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001df6:	f7ff fb79 	bl	80014ec <HAL_RCC_GetPCLK1Freq>
 8001dfa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	009a      	lsls	r2, r3, #2
 8001e06:	441a      	add	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e12:	4a23      	ldr	r2, [pc, #140]	; (8001ea0 <UART_SetConfig+0x1b0>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	095b      	lsrs	r3, r3, #5
 8001e1a:	0119      	lsls	r1, r3, #4
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	009a      	lsls	r2, r3, #2
 8001e26:	441a      	add	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <UART_SetConfig+0x1b0>)
 8001e34:	fba3 0302 	umull	r0, r3, r3, r2
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	2064      	movs	r0, #100	; 0x64
 8001e3c:	fb00 f303 	mul.w	r3, r0, r3
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	3332      	adds	r3, #50	; 0x32
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <UART_SetConfig+0x1b0>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e52:	4419      	add	r1, r3
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009a      	lsls	r2, r3, #2
 8001e5e:	441a      	add	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <UART_SetConfig+0x1b0>)
 8001e6c:	fba3 0302 	umull	r0, r3, r3, r2
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	2064      	movs	r0, #100	; 0x64
 8001e74:	fb00 f303 	mul.w	r3, r0, r3
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	3332      	adds	r3, #50	; 0x32
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <UART_SetConfig+0x1b0>)
 8001e80:	fba2 2303 	umull	r2, r3, r2, r3
 8001e84:	095b      	lsrs	r3, r3, #5
 8001e86:	f003 020f 	and.w	r2, r3, #15
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	440a      	add	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40013800 	.word	0x40013800
 8001ea0:	51eb851f 	.word	0x51eb851f

08001ea4 <__errno>:
 8001ea4:	4b01      	ldr	r3, [pc, #4]	; (8001eac <__errno+0x8>)
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000000c 	.word	0x2000000c

08001eb0 <__libc_init_array>:
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	2500      	movs	r5, #0
 8001eb4:	4e0c      	ldr	r6, [pc, #48]	; (8001ee8 <__libc_init_array+0x38>)
 8001eb6:	4c0d      	ldr	r4, [pc, #52]	; (8001eec <__libc_init_array+0x3c>)
 8001eb8:	1ba4      	subs	r4, r4, r6
 8001eba:	10a4      	asrs	r4, r4, #2
 8001ebc:	42a5      	cmp	r5, r4
 8001ebe:	d109      	bne.n	8001ed4 <__libc_init_array+0x24>
 8001ec0:	f000 ff74 	bl	8002dac <_init>
 8001ec4:	2500      	movs	r5, #0
 8001ec6:	4e0a      	ldr	r6, [pc, #40]	; (8001ef0 <__libc_init_array+0x40>)
 8001ec8:	4c0a      	ldr	r4, [pc, #40]	; (8001ef4 <__libc_init_array+0x44>)
 8001eca:	1ba4      	subs	r4, r4, r6
 8001ecc:	10a4      	asrs	r4, r4, #2
 8001ece:	42a5      	cmp	r5, r4
 8001ed0:	d105      	bne.n	8001ede <__libc_init_array+0x2e>
 8001ed2:	bd70      	pop	{r4, r5, r6, pc}
 8001ed4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ed8:	4798      	blx	r3
 8001eda:	3501      	adds	r5, #1
 8001edc:	e7ee      	b.n	8001ebc <__libc_init_array+0xc>
 8001ede:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ee2:	4798      	blx	r3
 8001ee4:	3501      	adds	r5, #1
 8001ee6:	e7f2      	b.n	8001ece <__libc_init_array+0x1e>
 8001ee8:	08002ec8 	.word	0x08002ec8
 8001eec:	08002ec8 	.word	0x08002ec8
 8001ef0:	08002ec8 	.word	0x08002ec8
 8001ef4:	08002ecc 	.word	0x08002ecc

08001ef8 <memset>:
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4402      	add	r2, r0
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d100      	bne.n	8001f02 <memset+0xa>
 8001f00:	4770      	bx	lr
 8001f02:	f803 1b01 	strb.w	r1, [r3], #1
 8001f06:	e7f9      	b.n	8001efc <memset+0x4>

08001f08 <iprintf>:
 8001f08:	b40f      	push	{r0, r1, r2, r3}
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <iprintf+0x2c>)
 8001f0c:	b513      	push	{r0, r1, r4, lr}
 8001f0e:	681c      	ldr	r4, [r3, #0]
 8001f10:	b124      	cbz	r4, 8001f1c <iprintf+0x14>
 8001f12:	69a3      	ldr	r3, [r4, #24]
 8001f14:	b913      	cbnz	r3, 8001f1c <iprintf+0x14>
 8001f16:	4620      	mov	r0, r4
 8001f18:	f000 fa22 	bl	8002360 <__sinit>
 8001f1c:	ab05      	add	r3, sp, #20
 8001f1e:	9a04      	ldr	r2, [sp, #16]
 8001f20:	68a1      	ldr	r1, [r4, #8]
 8001f22:	4620      	mov	r0, r4
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	f000 fbd7 	bl	80026d8 <_vfiprintf_r>
 8001f2a:	b002      	add	sp, #8
 8001f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f30:	b004      	add	sp, #16
 8001f32:	4770      	bx	lr
 8001f34:	2000000c 	.word	0x2000000c

08001f38 <_puts_r>:
 8001f38:	b570      	push	{r4, r5, r6, lr}
 8001f3a:	460e      	mov	r6, r1
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	b118      	cbz	r0, 8001f48 <_puts_r+0x10>
 8001f40:	6983      	ldr	r3, [r0, #24]
 8001f42:	b90b      	cbnz	r3, 8001f48 <_puts_r+0x10>
 8001f44:	f000 fa0c 	bl	8002360 <__sinit>
 8001f48:	69ab      	ldr	r3, [r5, #24]
 8001f4a:	68ac      	ldr	r4, [r5, #8]
 8001f4c:	b913      	cbnz	r3, 8001f54 <_puts_r+0x1c>
 8001f4e:	4628      	mov	r0, r5
 8001f50:	f000 fa06 	bl	8002360 <__sinit>
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <_puts_r+0xac>)
 8001f56:	429c      	cmp	r4, r3
 8001f58:	d117      	bne.n	8001f8a <_puts_r+0x52>
 8001f5a:	686c      	ldr	r4, [r5, #4]
 8001f5c:	89a3      	ldrh	r3, [r4, #12]
 8001f5e:	071b      	lsls	r3, r3, #28
 8001f60:	d51d      	bpl.n	8001f9e <_puts_r+0x66>
 8001f62:	6923      	ldr	r3, [r4, #16]
 8001f64:	b1db      	cbz	r3, 8001f9e <_puts_r+0x66>
 8001f66:	3e01      	subs	r6, #1
 8001f68:	68a3      	ldr	r3, [r4, #8]
 8001f6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	60a3      	str	r3, [r4, #8]
 8001f72:	b9e9      	cbnz	r1, 8001fb0 <_puts_r+0x78>
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	da2e      	bge.n	8001fd6 <_puts_r+0x9e>
 8001f78:	4622      	mov	r2, r4
 8001f7a:	210a      	movs	r1, #10
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f000 f83f 	bl	8002000 <__swbuf_r>
 8001f82:	3001      	adds	r0, #1
 8001f84:	d011      	beq.n	8001faa <_puts_r+0x72>
 8001f86:	200a      	movs	r0, #10
 8001f88:	e011      	b.n	8001fae <_puts_r+0x76>
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <_puts_r+0xb0>)
 8001f8c:	429c      	cmp	r4, r3
 8001f8e:	d101      	bne.n	8001f94 <_puts_r+0x5c>
 8001f90:	68ac      	ldr	r4, [r5, #8]
 8001f92:	e7e3      	b.n	8001f5c <_puts_r+0x24>
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <_puts_r+0xb4>)
 8001f96:	429c      	cmp	r4, r3
 8001f98:	bf08      	it	eq
 8001f9a:	68ec      	ldreq	r4, [r5, #12]
 8001f9c:	e7de      	b.n	8001f5c <_puts_r+0x24>
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	f000 f87f 	bl	80020a4 <__swsetup_r>
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	d0dd      	beq.n	8001f66 <_puts_r+0x2e>
 8001faa:	f04f 30ff 	mov.w	r0, #4294967295
 8001fae:	bd70      	pop	{r4, r5, r6, pc}
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	da04      	bge.n	8001fbe <_puts_r+0x86>
 8001fb4:	69a2      	ldr	r2, [r4, #24]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dc06      	bgt.n	8001fc8 <_puts_r+0x90>
 8001fba:	290a      	cmp	r1, #10
 8001fbc:	d004      	beq.n	8001fc8 <_puts_r+0x90>
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	6022      	str	r2, [r4, #0]
 8001fc4:	7019      	strb	r1, [r3, #0]
 8001fc6:	e7cf      	b.n	8001f68 <_puts_r+0x30>
 8001fc8:	4622      	mov	r2, r4
 8001fca:	4628      	mov	r0, r5
 8001fcc:	f000 f818 	bl	8002000 <__swbuf_r>
 8001fd0:	3001      	adds	r0, #1
 8001fd2:	d1c9      	bne.n	8001f68 <_puts_r+0x30>
 8001fd4:	e7e9      	b.n	8001faa <_puts_r+0x72>
 8001fd6:	200a      	movs	r0, #10
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	6022      	str	r2, [r4, #0]
 8001fde:	7018      	strb	r0, [r3, #0]
 8001fe0:	e7e5      	b.n	8001fae <_puts_r+0x76>
 8001fe2:	bf00      	nop
 8001fe4:	08002e54 	.word	0x08002e54
 8001fe8:	08002e74 	.word	0x08002e74
 8001fec:	08002e34 	.word	0x08002e34

08001ff0 <puts>:
 8001ff0:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <puts+0xc>)
 8001ff2:	4601      	mov	r1, r0
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	f7ff bf9f 	b.w	8001f38 <_puts_r>
 8001ffa:	bf00      	nop
 8001ffc:	2000000c 	.word	0x2000000c

08002000 <__swbuf_r>:
 8002000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002002:	460e      	mov	r6, r1
 8002004:	4614      	mov	r4, r2
 8002006:	4605      	mov	r5, r0
 8002008:	b118      	cbz	r0, 8002012 <__swbuf_r+0x12>
 800200a:	6983      	ldr	r3, [r0, #24]
 800200c:	b90b      	cbnz	r3, 8002012 <__swbuf_r+0x12>
 800200e:	f000 f9a7 	bl	8002360 <__sinit>
 8002012:	4b21      	ldr	r3, [pc, #132]	; (8002098 <__swbuf_r+0x98>)
 8002014:	429c      	cmp	r4, r3
 8002016:	d12a      	bne.n	800206e <__swbuf_r+0x6e>
 8002018:	686c      	ldr	r4, [r5, #4]
 800201a:	69a3      	ldr	r3, [r4, #24]
 800201c:	60a3      	str	r3, [r4, #8]
 800201e:	89a3      	ldrh	r3, [r4, #12]
 8002020:	071a      	lsls	r2, r3, #28
 8002022:	d52e      	bpl.n	8002082 <__swbuf_r+0x82>
 8002024:	6923      	ldr	r3, [r4, #16]
 8002026:	b363      	cbz	r3, 8002082 <__swbuf_r+0x82>
 8002028:	6923      	ldr	r3, [r4, #16]
 800202a:	6820      	ldr	r0, [r4, #0]
 800202c:	b2f6      	uxtb	r6, r6
 800202e:	1ac0      	subs	r0, r0, r3
 8002030:	6963      	ldr	r3, [r4, #20]
 8002032:	4637      	mov	r7, r6
 8002034:	4283      	cmp	r3, r0
 8002036:	dc04      	bgt.n	8002042 <__swbuf_r+0x42>
 8002038:	4621      	mov	r1, r4
 800203a:	4628      	mov	r0, r5
 800203c:	f000 f926 	bl	800228c <_fflush_r>
 8002040:	bb28      	cbnz	r0, 800208e <__swbuf_r+0x8e>
 8002042:	68a3      	ldr	r3, [r4, #8]
 8002044:	3001      	adds	r0, #1
 8002046:	3b01      	subs	r3, #1
 8002048:	60a3      	str	r3, [r4, #8]
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	6022      	str	r2, [r4, #0]
 8002050:	701e      	strb	r6, [r3, #0]
 8002052:	6963      	ldr	r3, [r4, #20]
 8002054:	4283      	cmp	r3, r0
 8002056:	d004      	beq.n	8002062 <__swbuf_r+0x62>
 8002058:	89a3      	ldrh	r3, [r4, #12]
 800205a:	07db      	lsls	r3, r3, #31
 800205c:	d519      	bpl.n	8002092 <__swbuf_r+0x92>
 800205e:	2e0a      	cmp	r6, #10
 8002060:	d117      	bne.n	8002092 <__swbuf_r+0x92>
 8002062:	4621      	mov	r1, r4
 8002064:	4628      	mov	r0, r5
 8002066:	f000 f911 	bl	800228c <_fflush_r>
 800206a:	b190      	cbz	r0, 8002092 <__swbuf_r+0x92>
 800206c:	e00f      	b.n	800208e <__swbuf_r+0x8e>
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <__swbuf_r+0x9c>)
 8002070:	429c      	cmp	r4, r3
 8002072:	d101      	bne.n	8002078 <__swbuf_r+0x78>
 8002074:	68ac      	ldr	r4, [r5, #8]
 8002076:	e7d0      	b.n	800201a <__swbuf_r+0x1a>
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <__swbuf_r+0xa0>)
 800207a:	429c      	cmp	r4, r3
 800207c:	bf08      	it	eq
 800207e:	68ec      	ldreq	r4, [r5, #12]
 8002080:	e7cb      	b.n	800201a <__swbuf_r+0x1a>
 8002082:	4621      	mov	r1, r4
 8002084:	4628      	mov	r0, r5
 8002086:	f000 f80d 	bl	80020a4 <__swsetup_r>
 800208a:	2800      	cmp	r0, #0
 800208c:	d0cc      	beq.n	8002028 <__swbuf_r+0x28>
 800208e:	f04f 37ff 	mov.w	r7, #4294967295
 8002092:	4638      	mov	r0, r7
 8002094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002096:	bf00      	nop
 8002098:	08002e54 	.word	0x08002e54
 800209c:	08002e74 	.word	0x08002e74
 80020a0:	08002e34 	.word	0x08002e34

080020a4 <__swsetup_r>:
 80020a4:	4b32      	ldr	r3, [pc, #200]	; (8002170 <__swsetup_r+0xcc>)
 80020a6:	b570      	push	{r4, r5, r6, lr}
 80020a8:	681d      	ldr	r5, [r3, #0]
 80020aa:	4606      	mov	r6, r0
 80020ac:	460c      	mov	r4, r1
 80020ae:	b125      	cbz	r5, 80020ba <__swsetup_r+0x16>
 80020b0:	69ab      	ldr	r3, [r5, #24]
 80020b2:	b913      	cbnz	r3, 80020ba <__swsetup_r+0x16>
 80020b4:	4628      	mov	r0, r5
 80020b6:	f000 f953 	bl	8002360 <__sinit>
 80020ba:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <__swsetup_r+0xd0>)
 80020bc:	429c      	cmp	r4, r3
 80020be:	d10f      	bne.n	80020e0 <__swsetup_r+0x3c>
 80020c0:	686c      	ldr	r4, [r5, #4]
 80020c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	0715      	lsls	r5, r2, #28
 80020ca:	d42c      	bmi.n	8002126 <__swsetup_r+0x82>
 80020cc:	06d0      	lsls	r0, r2, #27
 80020ce:	d411      	bmi.n	80020f4 <__swsetup_r+0x50>
 80020d0:	2209      	movs	r2, #9
 80020d2:	6032      	str	r2, [r6, #0]
 80020d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d8:	81a3      	strh	r3, [r4, #12]
 80020da:	f04f 30ff 	mov.w	r0, #4294967295
 80020de:	e03e      	b.n	800215e <__swsetup_r+0xba>
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <__swsetup_r+0xd4>)
 80020e2:	429c      	cmp	r4, r3
 80020e4:	d101      	bne.n	80020ea <__swsetup_r+0x46>
 80020e6:	68ac      	ldr	r4, [r5, #8]
 80020e8:	e7eb      	b.n	80020c2 <__swsetup_r+0x1e>
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <__swsetup_r+0xd8>)
 80020ec:	429c      	cmp	r4, r3
 80020ee:	bf08      	it	eq
 80020f0:	68ec      	ldreq	r4, [r5, #12]
 80020f2:	e7e6      	b.n	80020c2 <__swsetup_r+0x1e>
 80020f4:	0751      	lsls	r1, r2, #29
 80020f6:	d512      	bpl.n	800211e <__swsetup_r+0x7a>
 80020f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020fa:	b141      	cbz	r1, 800210e <__swsetup_r+0x6a>
 80020fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002100:	4299      	cmp	r1, r3
 8002102:	d002      	beq.n	800210a <__swsetup_r+0x66>
 8002104:	4630      	mov	r0, r6
 8002106:	f000 fa19 	bl	800253c <_free_r>
 800210a:	2300      	movs	r3, #0
 800210c:	6363      	str	r3, [r4, #52]	; 0x34
 800210e:	89a3      	ldrh	r3, [r4, #12]
 8002110:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002114:	81a3      	strh	r3, [r4, #12]
 8002116:	2300      	movs	r3, #0
 8002118:	6063      	str	r3, [r4, #4]
 800211a:	6923      	ldr	r3, [r4, #16]
 800211c:	6023      	str	r3, [r4, #0]
 800211e:	89a3      	ldrh	r3, [r4, #12]
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	81a3      	strh	r3, [r4, #12]
 8002126:	6923      	ldr	r3, [r4, #16]
 8002128:	b94b      	cbnz	r3, 800213e <__swsetup_r+0x9a>
 800212a:	89a3      	ldrh	r3, [r4, #12]
 800212c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002134:	d003      	beq.n	800213e <__swsetup_r+0x9a>
 8002136:	4621      	mov	r1, r4
 8002138:	4630      	mov	r0, r6
 800213a:	f000 f9bf 	bl	80024bc <__smakebuf_r>
 800213e:	89a2      	ldrh	r2, [r4, #12]
 8002140:	f012 0301 	ands.w	r3, r2, #1
 8002144:	d00c      	beq.n	8002160 <__swsetup_r+0xbc>
 8002146:	2300      	movs	r3, #0
 8002148:	60a3      	str	r3, [r4, #8]
 800214a:	6963      	ldr	r3, [r4, #20]
 800214c:	425b      	negs	r3, r3
 800214e:	61a3      	str	r3, [r4, #24]
 8002150:	6923      	ldr	r3, [r4, #16]
 8002152:	b953      	cbnz	r3, 800216a <__swsetup_r+0xc6>
 8002154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002158:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800215c:	d1ba      	bne.n	80020d4 <__swsetup_r+0x30>
 800215e:	bd70      	pop	{r4, r5, r6, pc}
 8002160:	0792      	lsls	r2, r2, #30
 8002162:	bf58      	it	pl
 8002164:	6963      	ldrpl	r3, [r4, #20]
 8002166:	60a3      	str	r3, [r4, #8]
 8002168:	e7f2      	b.n	8002150 <__swsetup_r+0xac>
 800216a:	2000      	movs	r0, #0
 800216c:	e7f7      	b.n	800215e <__swsetup_r+0xba>
 800216e:	bf00      	nop
 8002170:	2000000c 	.word	0x2000000c
 8002174:	08002e54 	.word	0x08002e54
 8002178:	08002e74 	.word	0x08002e74
 800217c:	08002e34 	.word	0x08002e34

08002180 <__sflush_r>:
 8002180:	898a      	ldrh	r2, [r1, #12]
 8002182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002186:	4605      	mov	r5, r0
 8002188:	0710      	lsls	r0, r2, #28
 800218a:	460c      	mov	r4, r1
 800218c:	d458      	bmi.n	8002240 <__sflush_r+0xc0>
 800218e:	684b      	ldr	r3, [r1, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	dc05      	bgt.n	80021a0 <__sflush_r+0x20>
 8002194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	dc02      	bgt.n	80021a0 <__sflush_r+0x20>
 800219a:	2000      	movs	r0, #0
 800219c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021a2:	2e00      	cmp	r6, #0
 80021a4:	d0f9      	beq.n	800219a <__sflush_r+0x1a>
 80021a6:	2300      	movs	r3, #0
 80021a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80021ac:	682f      	ldr	r7, [r5, #0]
 80021ae:	6a21      	ldr	r1, [r4, #32]
 80021b0:	602b      	str	r3, [r5, #0]
 80021b2:	d032      	beq.n	800221a <__sflush_r+0x9a>
 80021b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021b6:	89a3      	ldrh	r3, [r4, #12]
 80021b8:	075a      	lsls	r2, r3, #29
 80021ba:	d505      	bpl.n	80021c8 <__sflush_r+0x48>
 80021bc:	6863      	ldr	r3, [r4, #4]
 80021be:	1ac0      	subs	r0, r0, r3
 80021c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021c2:	b10b      	cbz	r3, 80021c8 <__sflush_r+0x48>
 80021c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021c6:	1ac0      	subs	r0, r0, r3
 80021c8:	2300      	movs	r3, #0
 80021ca:	4602      	mov	r2, r0
 80021cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021ce:	6a21      	ldr	r1, [r4, #32]
 80021d0:	4628      	mov	r0, r5
 80021d2:	47b0      	blx	r6
 80021d4:	1c43      	adds	r3, r0, #1
 80021d6:	89a3      	ldrh	r3, [r4, #12]
 80021d8:	d106      	bne.n	80021e8 <__sflush_r+0x68>
 80021da:	6829      	ldr	r1, [r5, #0]
 80021dc:	291d      	cmp	r1, #29
 80021de:	d848      	bhi.n	8002272 <__sflush_r+0xf2>
 80021e0:	4a29      	ldr	r2, [pc, #164]	; (8002288 <__sflush_r+0x108>)
 80021e2:	40ca      	lsrs	r2, r1
 80021e4:	07d6      	lsls	r6, r2, #31
 80021e6:	d544      	bpl.n	8002272 <__sflush_r+0xf2>
 80021e8:	2200      	movs	r2, #0
 80021ea:	6062      	str	r2, [r4, #4]
 80021ec:	6922      	ldr	r2, [r4, #16]
 80021ee:	04d9      	lsls	r1, r3, #19
 80021f0:	6022      	str	r2, [r4, #0]
 80021f2:	d504      	bpl.n	80021fe <__sflush_r+0x7e>
 80021f4:	1c42      	adds	r2, r0, #1
 80021f6:	d101      	bne.n	80021fc <__sflush_r+0x7c>
 80021f8:	682b      	ldr	r3, [r5, #0]
 80021fa:	b903      	cbnz	r3, 80021fe <__sflush_r+0x7e>
 80021fc:	6560      	str	r0, [r4, #84]	; 0x54
 80021fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002200:	602f      	str	r7, [r5, #0]
 8002202:	2900      	cmp	r1, #0
 8002204:	d0c9      	beq.n	800219a <__sflush_r+0x1a>
 8002206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800220a:	4299      	cmp	r1, r3
 800220c:	d002      	beq.n	8002214 <__sflush_r+0x94>
 800220e:	4628      	mov	r0, r5
 8002210:	f000 f994 	bl	800253c <_free_r>
 8002214:	2000      	movs	r0, #0
 8002216:	6360      	str	r0, [r4, #52]	; 0x34
 8002218:	e7c0      	b.n	800219c <__sflush_r+0x1c>
 800221a:	2301      	movs	r3, #1
 800221c:	4628      	mov	r0, r5
 800221e:	47b0      	blx	r6
 8002220:	1c41      	adds	r1, r0, #1
 8002222:	d1c8      	bne.n	80021b6 <__sflush_r+0x36>
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0c5      	beq.n	80021b6 <__sflush_r+0x36>
 800222a:	2b1d      	cmp	r3, #29
 800222c:	d001      	beq.n	8002232 <__sflush_r+0xb2>
 800222e:	2b16      	cmp	r3, #22
 8002230:	d101      	bne.n	8002236 <__sflush_r+0xb6>
 8002232:	602f      	str	r7, [r5, #0]
 8002234:	e7b1      	b.n	800219a <__sflush_r+0x1a>
 8002236:	89a3      	ldrh	r3, [r4, #12]
 8002238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800223c:	81a3      	strh	r3, [r4, #12]
 800223e:	e7ad      	b.n	800219c <__sflush_r+0x1c>
 8002240:	690f      	ldr	r7, [r1, #16]
 8002242:	2f00      	cmp	r7, #0
 8002244:	d0a9      	beq.n	800219a <__sflush_r+0x1a>
 8002246:	0793      	lsls	r3, r2, #30
 8002248:	bf18      	it	ne
 800224a:	2300      	movne	r3, #0
 800224c:	680e      	ldr	r6, [r1, #0]
 800224e:	bf08      	it	eq
 8002250:	694b      	ldreq	r3, [r1, #20]
 8002252:	eba6 0807 	sub.w	r8, r6, r7
 8002256:	600f      	str	r7, [r1, #0]
 8002258:	608b      	str	r3, [r1, #8]
 800225a:	f1b8 0f00 	cmp.w	r8, #0
 800225e:	dd9c      	ble.n	800219a <__sflush_r+0x1a>
 8002260:	4643      	mov	r3, r8
 8002262:	463a      	mov	r2, r7
 8002264:	6a21      	ldr	r1, [r4, #32]
 8002266:	4628      	mov	r0, r5
 8002268:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800226a:	47b0      	blx	r6
 800226c:	2800      	cmp	r0, #0
 800226e:	dc06      	bgt.n	800227e <__sflush_r+0xfe>
 8002270:	89a3      	ldrh	r3, [r4, #12]
 8002272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002276:	81a3      	strh	r3, [r4, #12]
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	e78e      	b.n	800219c <__sflush_r+0x1c>
 800227e:	4407      	add	r7, r0
 8002280:	eba8 0800 	sub.w	r8, r8, r0
 8002284:	e7e9      	b.n	800225a <__sflush_r+0xda>
 8002286:	bf00      	nop
 8002288:	20400001 	.word	0x20400001

0800228c <_fflush_r>:
 800228c:	b538      	push	{r3, r4, r5, lr}
 800228e:	690b      	ldr	r3, [r1, #16]
 8002290:	4605      	mov	r5, r0
 8002292:	460c      	mov	r4, r1
 8002294:	b1db      	cbz	r3, 80022ce <_fflush_r+0x42>
 8002296:	b118      	cbz	r0, 80022a0 <_fflush_r+0x14>
 8002298:	6983      	ldr	r3, [r0, #24]
 800229a:	b90b      	cbnz	r3, 80022a0 <_fflush_r+0x14>
 800229c:	f000 f860 	bl	8002360 <__sinit>
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <_fflush_r+0x48>)
 80022a2:	429c      	cmp	r4, r3
 80022a4:	d109      	bne.n	80022ba <_fflush_r+0x2e>
 80022a6:	686c      	ldr	r4, [r5, #4]
 80022a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ac:	b17b      	cbz	r3, 80022ce <_fflush_r+0x42>
 80022ae:	4621      	mov	r1, r4
 80022b0:	4628      	mov	r0, r5
 80022b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022b6:	f7ff bf63 	b.w	8002180 <__sflush_r>
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <_fflush_r+0x4c>)
 80022bc:	429c      	cmp	r4, r3
 80022be:	d101      	bne.n	80022c4 <_fflush_r+0x38>
 80022c0:	68ac      	ldr	r4, [r5, #8]
 80022c2:	e7f1      	b.n	80022a8 <_fflush_r+0x1c>
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <_fflush_r+0x50>)
 80022c6:	429c      	cmp	r4, r3
 80022c8:	bf08      	it	eq
 80022ca:	68ec      	ldreq	r4, [r5, #12]
 80022cc:	e7ec      	b.n	80022a8 <_fflush_r+0x1c>
 80022ce:	2000      	movs	r0, #0
 80022d0:	bd38      	pop	{r3, r4, r5, pc}
 80022d2:	bf00      	nop
 80022d4:	08002e54 	.word	0x08002e54
 80022d8:	08002e74 	.word	0x08002e74
 80022dc:	08002e34 	.word	0x08002e34

080022e0 <std>:
 80022e0:	2300      	movs	r3, #0
 80022e2:	b510      	push	{r4, lr}
 80022e4:	4604      	mov	r4, r0
 80022e6:	e9c0 3300 	strd	r3, r3, [r0]
 80022ea:	6083      	str	r3, [r0, #8]
 80022ec:	8181      	strh	r1, [r0, #12]
 80022ee:	6643      	str	r3, [r0, #100]	; 0x64
 80022f0:	81c2      	strh	r2, [r0, #14]
 80022f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022f6:	6183      	str	r3, [r0, #24]
 80022f8:	4619      	mov	r1, r3
 80022fa:	2208      	movs	r2, #8
 80022fc:	305c      	adds	r0, #92	; 0x5c
 80022fe:	f7ff fdfb 	bl	8001ef8 <memset>
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <std+0x38>)
 8002304:	6224      	str	r4, [r4, #32]
 8002306:	6263      	str	r3, [r4, #36]	; 0x24
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <std+0x3c>)
 800230a:	62a3      	str	r3, [r4, #40]	; 0x28
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <std+0x40>)
 800230e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <std+0x44>)
 8002312:	6323      	str	r3, [r4, #48]	; 0x30
 8002314:	bd10      	pop	{r4, pc}
 8002316:	bf00      	nop
 8002318:	08002c35 	.word	0x08002c35
 800231c:	08002c57 	.word	0x08002c57
 8002320:	08002c8f 	.word	0x08002c8f
 8002324:	08002cb3 	.word	0x08002cb3

08002328 <_cleanup_r>:
 8002328:	4901      	ldr	r1, [pc, #4]	; (8002330 <_cleanup_r+0x8>)
 800232a:	f000 b885 	b.w	8002438 <_fwalk_reent>
 800232e:	bf00      	nop
 8002330:	0800228d 	.word	0x0800228d

08002334 <__sfmoreglue>:
 8002334:	b570      	push	{r4, r5, r6, lr}
 8002336:	2568      	movs	r5, #104	; 0x68
 8002338:	1e4a      	subs	r2, r1, #1
 800233a:	4355      	muls	r5, r2
 800233c:	460e      	mov	r6, r1
 800233e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002342:	f000 f947 	bl	80025d4 <_malloc_r>
 8002346:	4604      	mov	r4, r0
 8002348:	b140      	cbz	r0, 800235c <__sfmoreglue+0x28>
 800234a:	2100      	movs	r1, #0
 800234c:	e9c0 1600 	strd	r1, r6, [r0]
 8002350:	300c      	adds	r0, #12
 8002352:	60a0      	str	r0, [r4, #8]
 8002354:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002358:	f7ff fdce 	bl	8001ef8 <memset>
 800235c:	4620      	mov	r0, r4
 800235e:	bd70      	pop	{r4, r5, r6, pc}

08002360 <__sinit>:
 8002360:	6983      	ldr	r3, [r0, #24]
 8002362:	b510      	push	{r4, lr}
 8002364:	4604      	mov	r4, r0
 8002366:	bb33      	cbnz	r3, 80023b6 <__sinit+0x56>
 8002368:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800236c:	6503      	str	r3, [r0, #80]	; 0x50
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <__sinit+0x58>)
 8002370:	4a12      	ldr	r2, [pc, #72]	; (80023bc <__sinit+0x5c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6282      	str	r2, [r0, #40]	; 0x28
 8002376:	4298      	cmp	r0, r3
 8002378:	bf04      	itt	eq
 800237a:	2301      	moveq	r3, #1
 800237c:	6183      	streq	r3, [r0, #24]
 800237e:	f000 f81f 	bl	80023c0 <__sfp>
 8002382:	6060      	str	r0, [r4, #4]
 8002384:	4620      	mov	r0, r4
 8002386:	f000 f81b 	bl	80023c0 <__sfp>
 800238a:	60a0      	str	r0, [r4, #8]
 800238c:	4620      	mov	r0, r4
 800238e:	f000 f817 	bl	80023c0 <__sfp>
 8002392:	2200      	movs	r2, #0
 8002394:	60e0      	str	r0, [r4, #12]
 8002396:	2104      	movs	r1, #4
 8002398:	6860      	ldr	r0, [r4, #4]
 800239a:	f7ff ffa1 	bl	80022e0 <std>
 800239e:	2201      	movs	r2, #1
 80023a0:	2109      	movs	r1, #9
 80023a2:	68a0      	ldr	r0, [r4, #8]
 80023a4:	f7ff ff9c 	bl	80022e0 <std>
 80023a8:	2202      	movs	r2, #2
 80023aa:	2112      	movs	r1, #18
 80023ac:	68e0      	ldr	r0, [r4, #12]
 80023ae:	f7ff ff97 	bl	80022e0 <std>
 80023b2:	2301      	movs	r3, #1
 80023b4:	61a3      	str	r3, [r4, #24]
 80023b6:	bd10      	pop	{r4, pc}
 80023b8:	08002e30 	.word	0x08002e30
 80023bc:	08002329 	.word	0x08002329

080023c0 <__sfp>:
 80023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <__sfp+0x70>)
 80023c4:	4607      	mov	r7, r0
 80023c6:	681e      	ldr	r6, [r3, #0]
 80023c8:	69b3      	ldr	r3, [r6, #24]
 80023ca:	b913      	cbnz	r3, 80023d2 <__sfp+0x12>
 80023cc:	4630      	mov	r0, r6
 80023ce:	f7ff ffc7 	bl	8002360 <__sinit>
 80023d2:	3648      	adds	r6, #72	; 0x48
 80023d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80023d8:	3b01      	subs	r3, #1
 80023da:	d503      	bpl.n	80023e4 <__sfp+0x24>
 80023dc:	6833      	ldr	r3, [r6, #0]
 80023de:	b133      	cbz	r3, 80023ee <__sfp+0x2e>
 80023e0:	6836      	ldr	r6, [r6, #0]
 80023e2:	e7f7      	b.n	80023d4 <__sfp+0x14>
 80023e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80023e8:	b16d      	cbz	r5, 8002406 <__sfp+0x46>
 80023ea:	3468      	adds	r4, #104	; 0x68
 80023ec:	e7f4      	b.n	80023d8 <__sfp+0x18>
 80023ee:	2104      	movs	r1, #4
 80023f0:	4638      	mov	r0, r7
 80023f2:	f7ff ff9f 	bl	8002334 <__sfmoreglue>
 80023f6:	6030      	str	r0, [r6, #0]
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d1f1      	bne.n	80023e0 <__sfp+0x20>
 80023fc:	230c      	movs	r3, #12
 80023fe:	4604      	mov	r4, r0
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	4620      	mov	r0, r4
 8002404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <__sfp+0x74>)
 8002408:	6665      	str	r5, [r4, #100]	; 0x64
 800240a:	e9c4 5500 	strd	r5, r5, [r4]
 800240e:	60a5      	str	r5, [r4, #8]
 8002410:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002414:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002418:	2208      	movs	r2, #8
 800241a:	4629      	mov	r1, r5
 800241c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002420:	f7ff fd6a 	bl	8001ef8 <memset>
 8002424:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002428:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800242c:	e7e9      	b.n	8002402 <__sfp+0x42>
 800242e:	bf00      	nop
 8002430:	08002e30 	.word	0x08002e30
 8002434:	ffff0001 	.word	0xffff0001

08002438 <_fwalk_reent>:
 8002438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800243c:	4680      	mov	r8, r0
 800243e:	4689      	mov	r9, r1
 8002440:	2600      	movs	r6, #0
 8002442:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002446:	b914      	cbnz	r4, 800244e <_fwalk_reent+0x16>
 8002448:	4630      	mov	r0, r6
 800244a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800244e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002452:	3f01      	subs	r7, #1
 8002454:	d501      	bpl.n	800245a <_fwalk_reent+0x22>
 8002456:	6824      	ldr	r4, [r4, #0]
 8002458:	e7f5      	b.n	8002446 <_fwalk_reent+0xe>
 800245a:	89ab      	ldrh	r3, [r5, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d907      	bls.n	8002470 <_fwalk_reent+0x38>
 8002460:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002464:	3301      	adds	r3, #1
 8002466:	d003      	beq.n	8002470 <_fwalk_reent+0x38>
 8002468:	4629      	mov	r1, r5
 800246a:	4640      	mov	r0, r8
 800246c:	47c8      	blx	r9
 800246e:	4306      	orrs	r6, r0
 8002470:	3568      	adds	r5, #104	; 0x68
 8002472:	e7ee      	b.n	8002452 <_fwalk_reent+0x1a>

08002474 <__swhatbuf_r>:
 8002474:	b570      	push	{r4, r5, r6, lr}
 8002476:	460e      	mov	r6, r1
 8002478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800247c:	b096      	sub	sp, #88	; 0x58
 800247e:	2900      	cmp	r1, #0
 8002480:	4614      	mov	r4, r2
 8002482:	461d      	mov	r5, r3
 8002484:	da07      	bge.n	8002496 <__swhatbuf_r+0x22>
 8002486:	2300      	movs	r3, #0
 8002488:	602b      	str	r3, [r5, #0]
 800248a:	89b3      	ldrh	r3, [r6, #12]
 800248c:	061a      	lsls	r2, r3, #24
 800248e:	d410      	bmi.n	80024b2 <__swhatbuf_r+0x3e>
 8002490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002494:	e00e      	b.n	80024b4 <__swhatbuf_r+0x40>
 8002496:	466a      	mov	r2, sp
 8002498:	f000 fc32 	bl	8002d00 <_fstat_r>
 800249c:	2800      	cmp	r0, #0
 800249e:	dbf2      	blt.n	8002486 <__swhatbuf_r+0x12>
 80024a0:	9a01      	ldr	r2, [sp, #4]
 80024a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80024a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80024aa:	425a      	negs	r2, r3
 80024ac:	415a      	adcs	r2, r3
 80024ae:	602a      	str	r2, [r5, #0]
 80024b0:	e7ee      	b.n	8002490 <__swhatbuf_r+0x1c>
 80024b2:	2340      	movs	r3, #64	; 0x40
 80024b4:	2000      	movs	r0, #0
 80024b6:	6023      	str	r3, [r4, #0]
 80024b8:	b016      	add	sp, #88	; 0x58
 80024ba:	bd70      	pop	{r4, r5, r6, pc}

080024bc <__smakebuf_r>:
 80024bc:	898b      	ldrh	r3, [r1, #12]
 80024be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024c0:	079d      	lsls	r5, r3, #30
 80024c2:	4606      	mov	r6, r0
 80024c4:	460c      	mov	r4, r1
 80024c6:	d507      	bpl.n	80024d8 <__smakebuf_r+0x1c>
 80024c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	6123      	str	r3, [r4, #16]
 80024d0:	2301      	movs	r3, #1
 80024d2:	6163      	str	r3, [r4, #20]
 80024d4:	b002      	add	sp, #8
 80024d6:	bd70      	pop	{r4, r5, r6, pc}
 80024d8:	ab01      	add	r3, sp, #4
 80024da:	466a      	mov	r2, sp
 80024dc:	f7ff ffca 	bl	8002474 <__swhatbuf_r>
 80024e0:	9900      	ldr	r1, [sp, #0]
 80024e2:	4605      	mov	r5, r0
 80024e4:	4630      	mov	r0, r6
 80024e6:	f000 f875 	bl	80025d4 <_malloc_r>
 80024ea:	b948      	cbnz	r0, 8002500 <__smakebuf_r+0x44>
 80024ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024f0:	059a      	lsls	r2, r3, #22
 80024f2:	d4ef      	bmi.n	80024d4 <__smakebuf_r+0x18>
 80024f4:	f023 0303 	bic.w	r3, r3, #3
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	81a3      	strh	r3, [r4, #12]
 80024fe:	e7e3      	b.n	80024c8 <__smakebuf_r+0xc>
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <__smakebuf_r+0x7c>)
 8002502:	62b3      	str	r3, [r6, #40]	; 0x28
 8002504:	89a3      	ldrh	r3, [r4, #12]
 8002506:	6020      	str	r0, [r4, #0]
 8002508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250c:	81a3      	strh	r3, [r4, #12]
 800250e:	9b00      	ldr	r3, [sp, #0]
 8002510:	6120      	str	r0, [r4, #16]
 8002512:	6163      	str	r3, [r4, #20]
 8002514:	9b01      	ldr	r3, [sp, #4]
 8002516:	b15b      	cbz	r3, 8002530 <__smakebuf_r+0x74>
 8002518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800251c:	4630      	mov	r0, r6
 800251e:	f000 fc01 	bl	8002d24 <_isatty_r>
 8002522:	b128      	cbz	r0, 8002530 <__smakebuf_r+0x74>
 8002524:	89a3      	ldrh	r3, [r4, #12]
 8002526:	f023 0303 	bic.w	r3, r3, #3
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	81a3      	strh	r3, [r4, #12]
 8002530:	89a3      	ldrh	r3, [r4, #12]
 8002532:	431d      	orrs	r5, r3
 8002534:	81a5      	strh	r5, [r4, #12]
 8002536:	e7cd      	b.n	80024d4 <__smakebuf_r+0x18>
 8002538:	08002329 	.word	0x08002329

0800253c <_free_r>:
 800253c:	b538      	push	{r3, r4, r5, lr}
 800253e:	4605      	mov	r5, r0
 8002540:	2900      	cmp	r1, #0
 8002542:	d043      	beq.n	80025cc <_free_r+0x90>
 8002544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002548:	1f0c      	subs	r4, r1, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	bfb8      	it	lt
 800254e:	18e4      	addlt	r4, r4, r3
 8002550:	f000 fc18 	bl	8002d84 <__malloc_lock>
 8002554:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <_free_r+0x94>)
 8002556:	6813      	ldr	r3, [r2, #0]
 8002558:	4610      	mov	r0, r2
 800255a:	b933      	cbnz	r3, 800256a <_free_r+0x2e>
 800255c:	6063      	str	r3, [r4, #4]
 800255e:	6014      	str	r4, [r2, #0]
 8002560:	4628      	mov	r0, r5
 8002562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002566:	f000 bc0e 	b.w	8002d86 <__malloc_unlock>
 800256a:	42a3      	cmp	r3, r4
 800256c:	d90b      	bls.n	8002586 <_free_r+0x4a>
 800256e:	6821      	ldr	r1, [r4, #0]
 8002570:	1862      	adds	r2, r4, r1
 8002572:	4293      	cmp	r3, r2
 8002574:	bf01      	itttt	eq
 8002576:	681a      	ldreq	r2, [r3, #0]
 8002578:	685b      	ldreq	r3, [r3, #4]
 800257a:	1852      	addeq	r2, r2, r1
 800257c:	6022      	streq	r2, [r4, #0]
 800257e:	6063      	str	r3, [r4, #4]
 8002580:	6004      	str	r4, [r0, #0]
 8002582:	e7ed      	b.n	8002560 <_free_r+0x24>
 8002584:	4613      	mov	r3, r2
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	b10a      	cbz	r2, 800258e <_free_r+0x52>
 800258a:	42a2      	cmp	r2, r4
 800258c:	d9fa      	bls.n	8002584 <_free_r+0x48>
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	1858      	adds	r0, r3, r1
 8002592:	42a0      	cmp	r0, r4
 8002594:	d10b      	bne.n	80025ae <_free_r+0x72>
 8002596:	6820      	ldr	r0, [r4, #0]
 8002598:	4401      	add	r1, r0
 800259a:	1858      	adds	r0, r3, r1
 800259c:	4282      	cmp	r2, r0
 800259e:	6019      	str	r1, [r3, #0]
 80025a0:	d1de      	bne.n	8002560 <_free_r+0x24>
 80025a2:	6810      	ldr	r0, [r2, #0]
 80025a4:	6852      	ldr	r2, [r2, #4]
 80025a6:	4401      	add	r1, r0
 80025a8:	6019      	str	r1, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	e7d8      	b.n	8002560 <_free_r+0x24>
 80025ae:	d902      	bls.n	80025b6 <_free_r+0x7a>
 80025b0:	230c      	movs	r3, #12
 80025b2:	602b      	str	r3, [r5, #0]
 80025b4:	e7d4      	b.n	8002560 <_free_r+0x24>
 80025b6:	6820      	ldr	r0, [r4, #0]
 80025b8:	1821      	adds	r1, r4, r0
 80025ba:	428a      	cmp	r2, r1
 80025bc:	bf01      	itttt	eq
 80025be:	6811      	ldreq	r1, [r2, #0]
 80025c0:	6852      	ldreq	r2, [r2, #4]
 80025c2:	1809      	addeq	r1, r1, r0
 80025c4:	6021      	streq	r1, [r4, #0]
 80025c6:	6062      	str	r2, [r4, #4]
 80025c8:	605c      	str	r4, [r3, #4]
 80025ca:	e7c9      	b.n	8002560 <_free_r+0x24>
 80025cc:	bd38      	pop	{r3, r4, r5, pc}
 80025ce:	bf00      	nop
 80025d0:	20000090 	.word	0x20000090

080025d4 <_malloc_r>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	1ccd      	adds	r5, r1, #3
 80025d8:	f025 0503 	bic.w	r5, r5, #3
 80025dc:	3508      	adds	r5, #8
 80025de:	2d0c      	cmp	r5, #12
 80025e0:	bf38      	it	cc
 80025e2:	250c      	movcc	r5, #12
 80025e4:	2d00      	cmp	r5, #0
 80025e6:	4606      	mov	r6, r0
 80025e8:	db01      	blt.n	80025ee <_malloc_r+0x1a>
 80025ea:	42a9      	cmp	r1, r5
 80025ec:	d903      	bls.n	80025f6 <_malloc_r+0x22>
 80025ee:	230c      	movs	r3, #12
 80025f0:	6033      	str	r3, [r6, #0]
 80025f2:	2000      	movs	r0, #0
 80025f4:	bd70      	pop	{r4, r5, r6, pc}
 80025f6:	f000 fbc5 	bl	8002d84 <__malloc_lock>
 80025fa:	4a21      	ldr	r2, [pc, #132]	; (8002680 <_malloc_r+0xac>)
 80025fc:	6814      	ldr	r4, [r2, #0]
 80025fe:	4621      	mov	r1, r4
 8002600:	b991      	cbnz	r1, 8002628 <_malloc_r+0x54>
 8002602:	4c20      	ldr	r4, [pc, #128]	; (8002684 <_malloc_r+0xb0>)
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	b91b      	cbnz	r3, 8002610 <_malloc_r+0x3c>
 8002608:	4630      	mov	r0, r6
 800260a:	f000 fb03 	bl	8002c14 <_sbrk_r>
 800260e:	6020      	str	r0, [r4, #0]
 8002610:	4629      	mov	r1, r5
 8002612:	4630      	mov	r0, r6
 8002614:	f000 fafe 	bl	8002c14 <_sbrk_r>
 8002618:	1c43      	adds	r3, r0, #1
 800261a:	d124      	bne.n	8002666 <_malloc_r+0x92>
 800261c:	230c      	movs	r3, #12
 800261e:	4630      	mov	r0, r6
 8002620:	6033      	str	r3, [r6, #0]
 8002622:	f000 fbb0 	bl	8002d86 <__malloc_unlock>
 8002626:	e7e4      	b.n	80025f2 <_malloc_r+0x1e>
 8002628:	680b      	ldr	r3, [r1, #0]
 800262a:	1b5b      	subs	r3, r3, r5
 800262c:	d418      	bmi.n	8002660 <_malloc_r+0x8c>
 800262e:	2b0b      	cmp	r3, #11
 8002630:	d90f      	bls.n	8002652 <_malloc_r+0x7e>
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	18cc      	adds	r4, r1, r3
 8002636:	50cd      	str	r5, [r1, r3]
 8002638:	4630      	mov	r0, r6
 800263a:	f000 fba4 	bl	8002d86 <__malloc_unlock>
 800263e:	f104 000b 	add.w	r0, r4, #11
 8002642:	1d23      	adds	r3, r4, #4
 8002644:	f020 0007 	bic.w	r0, r0, #7
 8002648:	1ac3      	subs	r3, r0, r3
 800264a:	d0d3      	beq.n	80025f4 <_malloc_r+0x20>
 800264c:	425a      	negs	r2, r3
 800264e:	50e2      	str	r2, [r4, r3]
 8002650:	e7d0      	b.n	80025f4 <_malloc_r+0x20>
 8002652:	684b      	ldr	r3, [r1, #4]
 8002654:	428c      	cmp	r4, r1
 8002656:	bf16      	itet	ne
 8002658:	6063      	strne	r3, [r4, #4]
 800265a:	6013      	streq	r3, [r2, #0]
 800265c:	460c      	movne	r4, r1
 800265e:	e7eb      	b.n	8002638 <_malloc_r+0x64>
 8002660:	460c      	mov	r4, r1
 8002662:	6849      	ldr	r1, [r1, #4]
 8002664:	e7cc      	b.n	8002600 <_malloc_r+0x2c>
 8002666:	1cc4      	adds	r4, r0, #3
 8002668:	f024 0403 	bic.w	r4, r4, #3
 800266c:	42a0      	cmp	r0, r4
 800266e:	d005      	beq.n	800267c <_malloc_r+0xa8>
 8002670:	1a21      	subs	r1, r4, r0
 8002672:	4630      	mov	r0, r6
 8002674:	f000 face 	bl	8002c14 <_sbrk_r>
 8002678:	3001      	adds	r0, #1
 800267a:	d0cf      	beq.n	800261c <_malloc_r+0x48>
 800267c:	6025      	str	r5, [r4, #0]
 800267e:	e7db      	b.n	8002638 <_malloc_r+0x64>
 8002680:	20000090 	.word	0x20000090
 8002684:	20000094 	.word	0x20000094

08002688 <__sfputc_r>:
 8002688:	6893      	ldr	r3, [r2, #8]
 800268a:	b410      	push	{r4}
 800268c:	3b01      	subs	r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	6093      	str	r3, [r2, #8]
 8002692:	da07      	bge.n	80026a4 <__sfputc_r+0x1c>
 8002694:	6994      	ldr	r4, [r2, #24]
 8002696:	42a3      	cmp	r3, r4
 8002698:	db01      	blt.n	800269e <__sfputc_r+0x16>
 800269a:	290a      	cmp	r1, #10
 800269c:	d102      	bne.n	80026a4 <__sfputc_r+0x1c>
 800269e:	bc10      	pop	{r4}
 80026a0:	f7ff bcae 	b.w	8002000 <__swbuf_r>
 80026a4:	6813      	ldr	r3, [r2, #0]
 80026a6:	1c58      	adds	r0, r3, #1
 80026a8:	6010      	str	r0, [r2, #0]
 80026aa:	7019      	strb	r1, [r3, #0]
 80026ac:	4608      	mov	r0, r1
 80026ae:	bc10      	pop	{r4}
 80026b0:	4770      	bx	lr

080026b2 <__sfputs_r>:
 80026b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b4:	4606      	mov	r6, r0
 80026b6:	460f      	mov	r7, r1
 80026b8:	4614      	mov	r4, r2
 80026ba:	18d5      	adds	r5, r2, r3
 80026bc:	42ac      	cmp	r4, r5
 80026be:	d101      	bne.n	80026c4 <__sfputs_r+0x12>
 80026c0:	2000      	movs	r0, #0
 80026c2:	e007      	b.n	80026d4 <__sfputs_r+0x22>
 80026c4:	463a      	mov	r2, r7
 80026c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026ca:	4630      	mov	r0, r6
 80026cc:	f7ff ffdc 	bl	8002688 <__sfputc_r>
 80026d0:	1c43      	adds	r3, r0, #1
 80026d2:	d1f3      	bne.n	80026bc <__sfputs_r+0xa>
 80026d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080026d8 <_vfiprintf_r>:
 80026d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026dc:	460c      	mov	r4, r1
 80026de:	b09d      	sub	sp, #116	; 0x74
 80026e0:	4617      	mov	r7, r2
 80026e2:	461d      	mov	r5, r3
 80026e4:	4606      	mov	r6, r0
 80026e6:	b118      	cbz	r0, 80026f0 <_vfiprintf_r+0x18>
 80026e8:	6983      	ldr	r3, [r0, #24]
 80026ea:	b90b      	cbnz	r3, 80026f0 <_vfiprintf_r+0x18>
 80026ec:	f7ff fe38 	bl	8002360 <__sinit>
 80026f0:	4b7c      	ldr	r3, [pc, #496]	; (80028e4 <_vfiprintf_r+0x20c>)
 80026f2:	429c      	cmp	r4, r3
 80026f4:	d158      	bne.n	80027a8 <_vfiprintf_r+0xd0>
 80026f6:	6874      	ldr	r4, [r6, #4]
 80026f8:	89a3      	ldrh	r3, [r4, #12]
 80026fa:	0718      	lsls	r0, r3, #28
 80026fc:	d55e      	bpl.n	80027bc <_vfiprintf_r+0xe4>
 80026fe:	6923      	ldr	r3, [r4, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05b      	beq.n	80027bc <_vfiprintf_r+0xe4>
 8002704:	2300      	movs	r3, #0
 8002706:	9309      	str	r3, [sp, #36]	; 0x24
 8002708:	2320      	movs	r3, #32
 800270a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800270e:	2330      	movs	r3, #48	; 0x30
 8002710:	f04f 0b01 	mov.w	fp, #1
 8002714:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002718:	9503      	str	r5, [sp, #12]
 800271a:	46b8      	mov	r8, r7
 800271c:	4645      	mov	r5, r8
 800271e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002722:	b10b      	cbz	r3, 8002728 <_vfiprintf_r+0x50>
 8002724:	2b25      	cmp	r3, #37	; 0x25
 8002726:	d154      	bne.n	80027d2 <_vfiprintf_r+0xfa>
 8002728:	ebb8 0a07 	subs.w	sl, r8, r7
 800272c:	d00b      	beq.n	8002746 <_vfiprintf_r+0x6e>
 800272e:	4653      	mov	r3, sl
 8002730:	463a      	mov	r2, r7
 8002732:	4621      	mov	r1, r4
 8002734:	4630      	mov	r0, r6
 8002736:	f7ff ffbc 	bl	80026b2 <__sfputs_r>
 800273a:	3001      	adds	r0, #1
 800273c:	f000 80c2 	beq.w	80028c4 <_vfiprintf_r+0x1ec>
 8002740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002742:	4453      	add	r3, sl
 8002744:	9309      	str	r3, [sp, #36]	; 0x24
 8002746:	f898 3000 	ldrb.w	r3, [r8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80ba 	beq.w	80028c4 <_vfiprintf_r+0x1ec>
 8002750:	2300      	movs	r3, #0
 8002752:	f04f 32ff 	mov.w	r2, #4294967295
 8002756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800275a:	9304      	str	r3, [sp, #16]
 800275c:	9307      	str	r3, [sp, #28]
 800275e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002762:	931a      	str	r3, [sp, #104]	; 0x68
 8002764:	46a8      	mov	r8, r5
 8002766:	2205      	movs	r2, #5
 8002768:	f818 1b01 	ldrb.w	r1, [r8], #1
 800276c:	485e      	ldr	r0, [pc, #376]	; (80028e8 <_vfiprintf_r+0x210>)
 800276e:	f000 fafb 	bl	8002d68 <memchr>
 8002772:	9b04      	ldr	r3, [sp, #16]
 8002774:	bb78      	cbnz	r0, 80027d6 <_vfiprintf_r+0xfe>
 8002776:	06d9      	lsls	r1, r3, #27
 8002778:	bf44      	itt	mi
 800277a:	2220      	movmi	r2, #32
 800277c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002780:	071a      	lsls	r2, r3, #28
 8002782:	bf44      	itt	mi
 8002784:	222b      	movmi	r2, #43	; 0x2b
 8002786:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800278a:	782a      	ldrb	r2, [r5, #0]
 800278c:	2a2a      	cmp	r2, #42	; 0x2a
 800278e:	d02a      	beq.n	80027e6 <_vfiprintf_r+0x10e>
 8002790:	46a8      	mov	r8, r5
 8002792:	2000      	movs	r0, #0
 8002794:	250a      	movs	r5, #10
 8002796:	9a07      	ldr	r2, [sp, #28]
 8002798:	4641      	mov	r1, r8
 800279a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800279e:	3b30      	subs	r3, #48	; 0x30
 80027a0:	2b09      	cmp	r3, #9
 80027a2:	d969      	bls.n	8002878 <_vfiprintf_r+0x1a0>
 80027a4:	b360      	cbz	r0, 8002800 <_vfiprintf_r+0x128>
 80027a6:	e024      	b.n	80027f2 <_vfiprintf_r+0x11a>
 80027a8:	4b50      	ldr	r3, [pc, #320]	; (80028ec <_vfiprintf_r+0x214>)
 80027aa:	429c      	cmp	r4, r3
 80027ac:	d101      	bne.n	80027b2 <_vfiprintf_r+0xda>
 80027ae:	68b4      	ldr	r4, [r6, #8]
 80027b0:	e7a2      	b.n	80026f8 <_vfiprintf_r+0x20>
 80027b2:	4b4f      	ldr	r3, [pc, #316]	; (80028f0 <_vfiprintf_r+0x218>)
 80027b4:	429c      	cmp	r4, r3
 80027b6:	bf08      	it	eq
 80027b8:	68f4      	ldreq	r4, [r6, #12]
 80027ba:	e79d      	b.n	80026f8 <_vfiprintf_r+0x20>
 80027bc:	4621      	mov	r1, r4
 80027be:	4630      	mov	r0, r6
 80027c0:	f7ff fc70 	bl	80020a4 <__swsetup_r>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d09d      	beq.n	8002704 <_vfiprintf_r+0x2c>
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	b01d      	add	sp, #116	; 0x74
 80027ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027d2:	46a8      	mov	r8, r5
 80027d4:	e7a2      	b.n	800271c <_vfiprintf_r+0x44>
 80027d6:	4a44      	ldr	r2, [pc, #272]	; (80028e8 <_vfiprintf_r+0x210>)
 80027d8:	4645      	mov	r5, r8
 80027da:	1a80      	subs	r0, r0, r2
 80027dc:	fa0b f000 	lsl.w	r0, fp, r0
 80027e0:	4318      	orrs	r0, r3
 80027e2:	9004      	str	r0, [sp, #16]
 80027e4:	e7be      	b.n	8002764 <_vfiprintf_r+0x8c>
 80027e6:	9a03      	ldr	r2, [sp, #12]
 80027e8:	1d11      	adds	r1, r2, #4
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	9103      	str	r1, [sp, #12]
 80027ee:	2a00      	cmp	r2, #0
 80027f0:	db01      	blt.n	80027f6 <_vfiprintf_r+0x11e>
 80027f2:	9207      	str	r2, [sp, #28]
 80027f4:	e004      	b.n	8002800 <_vfiprintf_r+0x128>
 80027f6:	4252      	negs	r2, r2
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	9207      	str	r2, [sp, #28]
 80027fe:	9304      	str	r3, [sp, #16]
 8002800:	f898 3000 	ldrb.w	r3, [r8]
 8002804:	2b2e      	cmp	r3, #46	; 0x2e
 8002806:	d10e      	bne.n	8002826 <_vfiprintf_r+0x14e>
 8002808:	f898 3001 	ldrb.w	r3, [r8, #1]
 800280c:	2b2a      	cmp	r3, #42	; 0x2a
 800280e:	d138      	bne.n	8002882 <_vfiprintf_r+0x1aa>
 8002810:	9b03      	ldr	r3, [sp, #12]
 8002812:	f108 0802 	add.w	r8, r8, #2
 8002816:	1d1a      	adds	r2, r3, #4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	9203      	str	r2, [sp, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	bfb8      	it	lt
 8002820:	f04f 33ff 	movlt.w	r3, #4294967295
 8002824:	9305      	str	r3, [sp, #20]
 8002826:	4d33      	ldr	r5, [pc, #204]	; (80028f4 <_vfiprintf_r+0x21c>)
 8002828:	2203      	movs	r2, #3
 800282a:	f898 1000 	ldrb.w	r1, [r8]
 800282e:	4628      	mov	r0, r5
 8002830:	f000 fa9a 	bl	8002d68 <memchr>
 8002834:	b140      	cbz	r0, 8002848 <_vfiprintf_r+0x170>
 8002836:	2340      	movs	r3, #64	; 0x40
 8002838:	1b40      	subs	r0, r0, r5
 800283a:	fa03 f000 	lsl.w	r0, r3, r0
 800283e:	9b04      	ldr	r3, [sp, #16]
 8002840:	f108 0801 	add.w	r8, r8, #1
 8002844:	4303      	orrs	r3, r0
 8002846:	9304      	str	r3, [sp, #16]
 8002848:	f898 1000 	ldrb.w	r1, [r8]
 800284c:	2206      	movs	r2, #6
 800284e:	482a      	ldr	r0, [pc, #168]	; (80028f8 <_vfiprintf_r+0x220>)
 8002850:	f108 0701 	add.w	r7, r8, #1
 8002854:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002858:	f000 fa86 	bl	8002d68 <memchr>
 800285c:	2800      	cmp	r0, #0
 800285e:	d037      	beq.n	80028d0 <_vfiprintf_r+0x1f8>
 8002860:	4b26      	ldr	r3, [pc, #152]	; (80028fc <_vfiprintf_r+0x224>)
 8002862:	bb1b      	cbnz	r3, 80028ac <_vfiprintf_r+0x1d4>
 8002864:	9b03      	ldr	r3, [sp, #12]
 8002866:	3307      	adds	r3, #7
 8002868:	f023 0307 	bic.w	r3, r3, #7
 800286c:	3308      	adds	r3, #8
 800286e:	9303      	str	r3, [sp, #12]
 8002870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002872:	444b      	add	r3, r9
 8002874:	9309      	str	r3, [sp, #36]	; 0x24
 8002876:	e750      	b.n	800271a <_vfiprintf_r+0x42>
 8002878:	fb05 3202 	mla	r2, r5, r2, r3
 800287c:	2001      	movs	r0, #1
 800287e:	4688      	mov	r8, r1
 8002880:	e78a      	b.n	8002798 <_vfiprintf_r+0xc0>
 8002882:	2300      	movs	r3, #0
 8002884:	250a      	movs	r5, #10
 8002886:	4619      	mov	r1, r3
 8002888:	f108 0801 	add.w	r8, r8, #1
 800288c:	9305      	str	r3, [sp, #20]
 800288e:	4640      	mov	r0, r8
 8002890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002894:	3a30      	subs	r2, #48	; 0x30
 8002896:	2a09      	cmp	r2, #9
 8002898:	d903      	bls.n	80028a2 <_vfiprintf_r+0x1ca>
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0c3      	beq.n	8002826 <_vfiprintf_r+0x14e>
 800289e:	9105      	str	r1, [sp, #20]
 80028a0:	e7c1      	b.n	8002826 <_vfiprintf_r+0x14e>
 80028a2:	fb05 2101 	mla	r1, r5, r1, r2
 80028a6:	2301      	movs	r3, #1
 80028a8:	4680      	mov	r8, r0
 80028aa:	e7f0      	b.n	800288e <_vfiprintf_r+0x1b6>
 80028ac:	ab03      	add	r3, sp, #12
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	4622      	mov	r2, r4
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <_vfiprintf_r+0x228>)
 80028b4:	a904      	add	r1, sp, #16
 80028b6:	4630      	mov	r0, r6
 80028b8:	f3af 8000 	nop.w
 80028bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80028c0:	4681      	mov	r9, r0
 80028c2:	d1d5      	bne.n	8002870 <_vfiprintf_r+0x198>
 80028c4:	89a3      	ldrh	r3, [r4, #12]
 80028c6:	065b      	lsls	r3, r3, #25
 80028c8:	f53f af7e 	bmi.w	80027c8 <_vfiprintf_r+0xf0>
 80028cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80028ce:	e77d      	b.n	80027cc <_vfiprintf_r+0xf4>
 80028d0:	ab03      	add	r3, sp, #12
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	4622      	mov	r2, r4
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <_vfiprintf_r+0x228>)
 80028d8:	a904      	add	r1, sp, #16
 80028da:	4630      	mov	r0, r6
 80028dc:	f000 f888 	bl	80029f0 <_printf_i>
 80028e0:	e7ec      	b.n	80028bc <_vfiprintf_r+0x1e4>
 80028e2:	bf00      	nop
 80028e4:	08002e54 	.word	0x08002e54
 80028e8:	08002e94 	.word	0x08002e94
 80028ec:	08002e74 	.word	0x08002e74
 80028f0:	08002e34 	.word	0x08002e34
 80028f4:	08002e9a 	.word	0x08002e9a
 80028f8:	08002e9e 	.word	0x08002e9e
 80028fc:	00000000 	.word	0x00000000
 8002900:	080026b3 	.word	0x080026b3

08002904 <_printf_common>:
 8002904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002908:	4691      	mov	r9, r2
 800290a:	461f      	mov	r7, r3
 800290c:	688a      	ldr	r2, [r1, #8]
 800290e:	690b      	ldr	r3, [r1, #16]
 8002910:	4606      	mov	r6, r0
 8002912:	4293      	cmp	r3, r2
 8002914:	bfb8      	it	lt
 8002916:	4613      	movlt	r3, r2
 8002918:	f8c9 3000 	str.w	r3, [r9]
 800291c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002920:	460c      	mov	r4, r1
 8002922:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002926:	b112      	cbz	r2, 800292e <_printf_common+0x2a>
 8002928:	3301      	adds	r3, #1
 800292a:	f8c9 3000 	str.w	r3, [r9]
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	0699      	lsls	r1, r3, #26
 8002932:	bf42      	ittt	mi
 8002934:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002938:	3302      	addmi	r3, #2
 800293a:	f8c9 3000 	strmi.w	r3, [r9]
 800293e:	6825      	ldr	r5, [r4, #0]
 8002940:	f015 0506 	ands.w	r5, r5, #6
 8002944:	d107      	bne.n	8002956 <_printf_common+0x52>
 8002946:	f104 0a19 	add.w	sl, r4, #25
 800294a:	68e3      	ldr	r3, [r4, #12]
 800294c:	f8d9 2000 	ldr.w	r2, [r9]
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	42ab      	cmp	r3, r5
 8002954:	dc29      	bgt.n	80029aa <_printf_common+0xa6>
 8002956:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800295a:	6822      	ldr	r2, [r4, #0]
 800295c:	3300      	adds	r3, #0
 800295e:	bf18      	it	ne
 8002960:	2301      	movne	r3, #1
 8002962:	0692      	lsls	r2, r2, #26
 8002964:	d42e      	bmi.n	80029c4 <_printf_common+0xc0>
 8002966:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800296a:	4639      	mov	r1, r7
 800296c:	4630      	mov	r0, r6
 800296e:	47c0      	blx	r8
 8002970:	3001      	adds	r0, #1
 8002972:	d021      	beq.n	80029b8 <_printf_common+0xb4>
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	68e5      	ldr	r5, [r4, #12]
 8002978:	f003 0306 	and.w	r3, r3, #6
 800297c:	2b04      	cmp	r3, #4
 800297e:	bf18      	it	ne
 8002980:	2500      	movne	r5, #0
 8002982:	f8d9 2000 	ldr.w	r2, [r9]
 8002986:	f04f 0900 	mov.w	r9, #0
 800298a:	bf08      	it	eq
 800298c:	1aad      	subeq	r5, r5, r2
 800298e:	68a3      	ldr	r3, [r4, #8]
 8002990:	6922      	ldr	r2, [r4, #16]
 8002992:	bf08      	it	eq
 8002994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002998:	4293      	cmp	r3, r2
 800299a:	bfc4      	itt	gt
 800299c:	1a9b      	subgt	r3, r3, r2
 800299e:	18ed      	addgt	r5, r5, r3
 80029a0:	341a      	adds	r4, #26
 80029a2:	454d      	cmp	r5, r9
 80029a4:	d11a      	bne.n	80029dc <_printf_common+0xd8>
 80029a6:	2000      	movs	r0, #0
 80029a8:	e008      	b.n	80029bc <_printf_common+0xb8>
 80029aa:	2301      	movs	r3, #1
 80029ac:	4652      	mov	r2, sl
 80029ae:	4639      	mov	r1, r7
 80029b0:	4630      	mov	r0, r6
 80029b2:	47c0      	blx	r8
 80029b4:	3001      	adds	r0, #1
 80029b6:	d103      	bne.n	80029c0 <_printf_common+0xbc>
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295
 80029bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029c0:	3501      	adds	r5, #1
 80029c2:	e7c2      	b.n	800294a <_printf_common+0x46>
 80029c4:	2030      	movs	r0, #48	; 0x30
 80029c6:	18e1      	adds	r1, r4, r3
 80029c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029d2:	4422      	add	r2, r4
 80029d4:	3302      	adds	r3, #2
 80029d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029da:	e7c4      	b.n	8002966 <_printf_common+0x62>
 80029dc:	2301      	movs	r3, #1
 80029de:	4622      	mov	r2, r4
 80029e0:	4639      	mov	r1, r7
 80029e2:	4630      	mov	r0, r6
 80029e4:	47c0      	blx	r8
 80029e6:	3001      	adds	r0, #1
 80029e8:	d0e6      	beq.n	80029b8 <_printf_common+0xb4>
 80029ea:	f109 0901 	add.w	r9, r9, #1
 80029ee:	e7d8      	b.n	80029a2 <_printf_common+0x9e>

080029f0 <_printf_i>:
 80029f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80029f8:	460c      	mov	r4, r1
 80029fa:	7e09      	ldrb	r1, [r1, #24]
 80029fc:	b085      	sub	sp, #20
 80029fe:	296e      	cmp	r1, #110	; 0x6e
 8002a00:	4617      	mov	r7, r2
 8002a02:	4606      	mov	r6, r0
 8002a04:	4698      	mov	r8, r3
 8002a06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a08:	f000 80b3 	beq.w	8002b72 <_printf_i+0x182>
 8002a0c:	d822      	bhi.n	8002a54 <_printf_i+0x64>
 8002a0e:	2963      	cmp	r1, #99	; 0x63
 8002a10:	d036      	beq.n	8002a80 <_printf_i+0x90>
 8002a12:	d80a      	bhi.n	8002a2a <_printf_i+0x3a>
 8002a14:	2900      	cmp	r1, #0
 8002a16:	f000 80b9 	beq.w	8002b8c <_printf_i+0x19c>
 8002a1a:	2958      	cmp	r1, #88	; 0x58
 8002a1c:	f000 8083 	beq.w	8002b26 <_printf_i+0x136>
 8002a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002a28:	e032      	b.n	8002a90 <_printf_i+0xa0>
 8002a2a:	2964      	cmp	r1, #100	; 0x64
 8002a2c:	d001      	beq.n	8002a32 <_printf_i+0x42>
 8002a2e:	2969      	cmp	r1, #105	; 0x69
 8002a30:	d1f6      	bne.n	8002a20 <_printf_i+0x30>
 8002a32:	6820      	ldr	r0, [r4, #0]
 8002a34:	6813      	ldr	r3, [r2, #0]
 8002a36:	0605      	lsls	r5, r0, #24
 8002a38:	f103 0104 	add.w	r1, r3, #4
 8002a3c:	d52a      	bpl.n	8002a94 <_printf_i+0xa4>
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6011      	str	r1, [r2, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	da03      	bge.n	8002a4e <_printf_i+0x5e>
 8002a46:	222d      	movs	r2, #45	; 0x2d
 8002a48:	425b      	negs	r3, r3
 8002a4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002a4e:	486f      	ldr	r0, [pc, #444]	; (8002c0c <_printf_i+0x21c>)
 8002a50:	220a      	movs	r2, #10
 8002a52:	e039      	b.n	8002ac8 <_printf_i+0xd8>
 8002a54:	2973      	cmp	r1, #115	; 0x73
 8002a56:	f000 809d 	beq.w	8002b94 <_printf_i+0x1a4>
 8002a5a:	d808      	bhi.n	8002a6e <_printf_i+0x7e>
 8002a5c:	296f      	cmp	r1, #111	; 0x6f
 8002a5e:	d020      	beq.n	8002aa2 <_printf_i+0xb2>
 8002a60:	2970      	cmp	r1, #112	; 0x70
 8002a62:	d1dd      	bne.n	8002a20 <_printf_i+0x30>
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	f043 0320 	orr.w	r3, r3, #32
 8002a6a:	6023      	str	r3, [r4, #0]
 8002a6c:	e003      	b.n	8002a76 <_printf_i+0x86>
 8002a6e:	2975      	cmp	r1, #117	; 0x75
 8002a70:	d017      	beq.n	8002aa2 <_printf_i+0xb2>
 8002a72:	2978      	cmp	r1, #120	; 0x78
 8002a74:	d1d4      	bne.n	8002a20 <_printf_i+0x30>
 8002a76:	2378      	movs	r3, #120	; 0x78
 8002a78:	4865      	ldr	r0, [pc, #404]	; (8002c10 <_printf_i+0x220>)
 8002a7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a7e:	e055      	b.n	8002b2c <_printf_i+0x13c>
 8002a80:	6813      	ldr	r3, [r2, #0]
 8002a82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a86:	1d19      	adds	r1, r3, #4
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6011      	str	r1, [r2, #0]
 8002a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a90:	2301      	movs	r3, #1
 8002a92:	e08c      	b.n	8002bae <_printf_i+0x1be>
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a9a:	6011      	str	r1, [r2, #0]
 8002a9c:	bf18      	it	ne
 8002a9e:	b21b      	sxthne	r3, r3
 8002aa0:	e7cf      	b.n	8002a42 <_printf_i+0x52>
 8002aa2:	6813      	ldr	r3, [r2, #0]
 8002aa4:	6825      	ldr	r5, [r4, #0]
 8002aa6:	1d18      	adds	r0, r3, #4
 8002aa8:	6010      	str	r0, [r2, #0]
 8002aaa:	0628      	lsls	r0, r5, #24
 8002aac:	d501      	bpl.n	8002ab2 <_printf_i+0xc2>
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	e002      	b.n	8002ab8 <_printf_i+0xc8>
 8002ab2:	0668      	lsls	r0, r5, #25
 8002ab4:	d5fb      	bpl.n	8002aae <_printf_i+0xbe>
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	296f      	cmp	r1, #111	; 0x6f
 8002aba:	bf14      	ite	ne
 8002abc:	220a      	movne	r2, #10
 8002abe:	2208      	moveq	r2, #8
 8002ac0:	4852      	ldr	r0, [pc, #328]	; (8002c0c <_printf_i+0x21c>)
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ac8:	6865      	ldr	r5, [r4, #4]
 8002aca:	2d00      	cmp	r5, #0
 8002acc:	60a5      	str	r5, [r4, #8]
 8002ace:	f2c0 8095 	blt.w	8002bfc <_printf_i+0x20c>
 8002ad2:	6821      	ldr	r1, [r4, #0]
 8002ad4:	f021 0104 	bic.w	r1, r1, #4
 8002ad8:	6021      	str	r1, [r4, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d13d      	bne.n	8002b5a <_printf_i+0x16a>
 8002ade:	2d00      	cmp	r5, #0
 8002ae0:	f040 808e 	bne.w	8002c00 <_printf_i+0x210>
 8002ae4:	4665      	mov	r5, ip
 8002ae6:	2a08      	cmp	r2, #8
 8002ae8:	d10b      	bne.n	8002b02 <_printf_i+0x112>
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	07db      	lsls	r3, r3, #31
 8002aee:	d508      	bpl.n	8002b02 <_printf_i+0x112>
 8002af0:	6923      	ldr	r3, [r4, #16]
 8002af2:	6862      	ldr	r2, [r4, #4]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	bfde      	ittt	le
 8002af8:	2330      	movle	r3, #48	; 0x30
 8002afa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002afe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b02:	ebac 0305 	sub.w	r3, ip, r5
 8002b06:	6123      	str	r3, [r4, #16]
 8002b08:	f8cd 8000 	str.w	r8, [sp]
 8002b0c:	463b      	mov	r3, r7
 8002b0e:	aa03      	add	r2, sp, #12
 8002b10:	4621      	mov	r1, r4
 8002b12:	4630      	mov	r0, r6
 8002b14:	f7ff fef6 	bl	8002904 <_printf_common>
 8002b18:	3001      	adds	r0, #1
 8002b1a:	d14d      	bne.n	8002bb8 <_printf_i+0x1c8>
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	b005      	add	sp, #20
 8002b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b26:	4839      	ldr	r0, [pc, #228]	; (8002c0c <_printf_i+0x21c>)
 8002b28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002b2c:	6813      	ldr	r3, [r2, #0]
 8002b2e:	6821      	ldr	r1, [r4, #0]
 8002b30:	1d1d      	adds	r5, r3, #4
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6015      	str	r5, [r2, #0]
 8002b36:	060a      	lsls	r2, r1, #24
 8002b38:	d50b      	bpl.n	8002b52 <_printf_i+0x162>
 8002b3a:	07ca      	lsls	r2, r1, #31
 8002b3c:	bf44      	itt	mi
 8002b3e:	f041 0120 	orrmi.w	r1, r1, #32
 8002b42:	6021      	strmi	r1, [r4, #0]
 8002b44:	b91b      	cbnz	r3, 8002b4e <_printf_i+0x15e>
 8002b46:	6822      	ldr	r2, [r4, #0]
 8002b48:	f022 0220 	bic.w	r2, r2, #32
 8002b4c:	6022      	str	r2, [r4, #0]
 8002b4e:	2210      	movs	r2, #16
 8002b50:	e7b7      	b.n	8002ac2 <_printf_i+0xd2>
 8002b52:	064d      	lsls	r5, r1, #25
 8002b54:	bf48      	it	mi
 8002b56:	b29b      	uxthmi	r3, r3
 8002b58:	e7ef      	b.n	8002b3a <_printf_i+0x14a>
 8002b5a:	4665      	mov	r5, ip
 8002b5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b60:	fb02 3311 	mls	r3, r2, r1, r3
 8002b64:	5cc3      	ldrb	r3, [r0, r3]
 8002b66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	2900      	cmp	r1, #0
 8002b6e:	d1f5      	bne.n	8002b5c <_printf_i+0x16c>
 8002b70:	e7b9      	b.n	8002ae6 <_printf_i+0xf6>
 8002b72:	6813      	ldr	r3, [r2, #0]
 8002b74:	6825      	ldr	r5, [r4, #0]
 8002b76:	1d18      	adds	r0, r3, #4
 8002b78:	6961      	ldr	r1, [r4, #20]
 8002b7a:	6010      	str	r0, [r2, #0]
 8002b7c:	0628      	lsls	r0, r5, #24
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	d501      	bpl.n	8002b86 <_printf_i+0x196>
 8002b82:	6019      	str	r1, [r3, #0]
 8002b84:	e002      	b.n	8002b8c <_printf_i+0x19c>
 8002b86:	066a      	lsls	r2, r5, #25
 8002b88:	d5fb      	bpl.n	8002b82 <_printf_i+0x192>
 8002b8a:	8019      	strh	r1, [r3, #0]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	4665      	mov	r5, ip
 8002b90:	6123      	str	r3, [r4, #16]
 8002b92:	e7b9      	b.n	8002b08 <_printf_i+0x118>
 8002b94:	6813      	ldr	r3, [r2, #0]
 8002b96:	1d19      	adds	r1, r3, #4
 8002b98:	6011      	str	r1, [r2, #0]
 8002b9a:	681d      	ldr	r5, [r3, #0]
 8002b9c:	6862      	ldr	r2, [r4, #4]
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	f000 f8e1 	bl	8002d68 <memchr>
 8002ba6:	b108      	cbz	r0, 8002bac <_printf_i+0x1bc>
 8002ba8:	1b40      	subs	r0, r0, r5
 8002baa:	6060      	str	r0, [r4, #4]
 8002bac:	6863      	ldr	r3, [r4, #4]
 8002bae:	6123      	str	r3, [r4, #16]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bb6:	e7a7      	b.n	8002b08 <_printf_i+0x118>
 8002bb8:	6923      	ldr	r3, [r4, #16]
 8002bba:	462a      	mov	r2, r5
 8002bbc:	4639      	mov	r1, r7
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	47c0      	blx	r8
 8002bc2:	3001      	adds	r0, #1
 8002bc4:	d0aa      	beq.n	8002b1c <_printf_i+0x12c>
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	079b      	lsls	r3, r3, #30
 8002bca:	d413      	bmi.n	8002bf4 <_printf_i+0x204>
 8002bcc:	68e0      	ldr	r0, [r4, #12]
 8002bce:	9b03      	ldr	r3, [sp, #12]
 8002bd0:	4298      	cmp	r0, r3
 8002bd2:	bfb8      	it	lt
 8002bd4:	4618      	movlt	r0, r3
 8002bd6:	e7a3      	b.n	8002b20 <_printf_i+0x130>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	464a      	mov	r2, r9
 8002bdc:	4639      	mov	r1, r7
 8002bde:	4630      	mov	r0, r6
 8002be0:	47c0      	blx	r8
 8002be2:	3001      	adds	r0, #1
 8002be4:	d09a      	beq.n	8002b1c <_printf_i+0x12c>
 8002be6:	3501      	adds	r5, #1
 8002be8:	68e3      	ldr	r3, [r4, #12]
 8002bea:	9a03      	ldr	r2, [sp, #12]
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	42ab      	cmp	r3, r5
 8002bf0:	dcf2      	bgt.n	8002bd8 <_printf_i+0x1e8>
 8002bf2:	e7eb      	b.n	8002bcc <_printf_i+0x1dc>
 8002bf4:	2500      	movs	r5, #0
 8002bf6:	f104 0919 	add.w	r9, r4, #25
 8002bfa:	e7f5      	b.n	8002be8 <_printf_i+0x1f8>
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ac      	bne.n	8002b5a <_printf_i+0x16a>
 8002c00:	7803      	ldrb	r3, [r0, #0]
 8002c02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c0a:	e76c      	b.n	8002ae6 <_printf_i+0xf6>
 8002c0c:	08002ea5 	.word	0x08002ea5
 8002c10:	08002eb6 	.word	0x08002eb6

08002c14 <_sbrk_r>:
 8002c14:	b538      	push	{r3, r4, r5, lr}
 8002c16:	2300      	movs	r3, #0
 8002c18:	4c05      	ldr	r4, [pc, #20]	; (8002c30 <_sbrk_r+0x1c>)
 8002c1a:	4605      	mov	r5, r0
 8002c1c:	4608      	mov	r0, r1
 8002c1e:	6023      	str	r3, [r4, #0]
 8002c20:	f7fd fd2e 	bl	8000680 <_sbrk>
 8002c24:	1c43      	adds	r3, r0, #1
 8002c26:	d102      	bne.n	8002c2e <_sbrk_r+0x1a>
 8002c28:	6823      	ldr	r3, [r4, #0]
 8002c2a:	b103      	cbz	r3, 8002c2e <_sbrk_r+0x1a>
 8002c2c:	602b      	str	r3, [r5, #0]
 8002c2e:	bd38      	pop	{r3, r4, r5, pc}
 8002c30:	20000134 	.word	0x20000134

08002c34 <__sread>:
 8002c34:	b510      	push	{r4, lr}
 8002c36:	460c      	mov	r4, r1
 8002c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c3c:	f000 f8a4 	bl	8002d88 <_read_r>
 8002c40:	2800      	cmp	r0, #0
 8002c42:	bfab      	itete	ge
 8002c44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c46:	89a3      	ldrhlt	r3, [r4, #12]
 8002c48:	181b      	addge	r3, r3, r0
 8002c4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c4e:	bfac      	ite	ge
 8002c50:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c52:	81a3      	strhlt	r3, [r4, #12]
 8002c54:	bd10      	pop	{r4, pc}

08002c56 <__swrite>:
 8002c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c5a:	461f      	mov	r7, r3
 8002c5c:	898b      	ldrh	r3, [r1, #12]
 8002c5e:	4605      	mov	r5, r0
 8002c60:	05db      	lsls	r3, r3, #23
 8002c62:	460c      	mov	r4, r1
 8002c64:	4616      	mov	r6, r2
 8002c66:	d505      	bpl.n	8002c74 <__swrite+0x1e>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c70:	f000 f868 	bl	8002d44 <_lseek_r>
 8002c74:	89a3      	ldrh	r3, [r4, #12]
 8002c76:	4632      	mov	r2, r6
 8002c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c7c:	81a3      	strh	r3, [r4, #12]
 8002c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c82:	463b      	mov	r3, r7
 8002c84:	4628      	mov	r0, r5
 8002c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c8a:	f000 b817 	b.w	8002cbc <_write_r>

08002c8e <__sseek>:
 8002c8e:	b510      	push	{r4, lr}
 8002c90:	460c      	mov	r4, r1
 8002c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c96:	f000 f855 	bl	8002d44 <_lseek_r>
 8002c9a:	1c43      	adds	r3, r0, #1
 8002c9c:	89a3      	ldrh	r3, [r4, #12]
 8002c9e:	bf15      	itete	ne
 8002ca0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002caa:	81a3      	strheq	r3, [r4, #12]
 8002cac:	bf18      	it	ne
 8002cae:	81a3      	strhne	r3, [r4, #12]
 8002cb0:	bd10      	pop	{r4, pc}

08002cb2 <__sclose>:
 8002cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cb6:	f000 b813 	b.w	8002ce0 <_close_r>
	...

08002cbc <_write_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4c05      	ldr	r4, [pc, #20]	; (8002cdc <_write_r+0x20>)
 8002cc8:	6022      	str	r2, [r4, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f7fd fc8b 	bl	80005e6 <_write>
 8002cd0:	1c43      	adds	r3, r0, #1
 8002cd2:	d102      	bne.n	8002cda <_write_r+0x1e>
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	b103      	cbz	r3, 8002cda <_write_r+0x1e>
 8002cd8:	602b      	str	r3, [r5, #0]
 8002cda:	bd38      	pop	{r3, r4, r5, pc}
 8002cdc:	20000134 	.word	0x20000134

08002ce0 <_close_r>:
 8002ce0:	b538      	push	{r3, r4, r5, lr}
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	4c05      	ldr	r4, [pc, #20]	; (8002cfc <_close_r+0x1c>)
 8002ce6:	4605      	mov	r5, r0
 8002ce8:	4608      	mov	r0, r1
 8002cea:	6023      	str	r3, [r4, #0]
 8002cec:	f7fd fc97 	bl	800061e <_close>
 8002cf0:	1c43      	adds	r3, r0, #1
 8002cf2:	d102      	bne.n	8002cfa <_close_r+0x1a>
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	b103      	cbz	r3, 8002cfa <_close_r+0x1a>
 8002cf8:	602b      	str	r3, [r5, #0]
 8002cfa:	bd38      	pop	{r3, r4, r5, pc}
 8002cfc:	20000134 	.word	0x20000134

08002d00 <_fstat_r>:
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	2300      	movs	r3, #0
 8002d04:	4c06      	ldr	r4, [pc, #24]	; (8002d20 <_fstat_r+0x20>)
 8002d06:	4605      	mov	r5, r0
 8002d08:	4608      	mov	r0, r1
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	6023      	str	r3, [r4, #0]
 8002d0e:	f7fd fc91 	bl	8000634 <_fstat>
 8002d12:	1c43      	adds	r3, r0, #1
 8002d14:	d102      	bne.n	8002d1c <_fstat_r+0x1c>
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	b103      	cbz	r3, 8002d1c <_fstat_r+0x1c>
 8002d1a:	602b      	str	r3, [r5, #0]
 8002d1c:	bd38      	pop	{r3, r4, r5, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000134 	.word	0x20000134

08002d24 <_isatty_r>:
 8002d24:	b538      	push	{r3, r4, r5, lr}
 8002d26:	2300      	movs	r3, #0
 8002d28:	4c05      	ldr	r4, [pc, #20]	; (8002d40 <_isatty_r+0x1c>)
 8002d2a:	4605      	mov	r5, r0
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	6023      	str	r3, [r4, #0]
 8002d30:	f7fd fc8f 	bl	8000652 <_isatty>
 8002d34:	1c43      	adds	r3, r0, #1
 8002d36:	d102      	bne.n	8002d3e <_isatty_r+0x1a>
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	b103      	cbz	r3, 8002d3e <_isatty_r+0x1a>
 8002d3c:	602b      	str	r3, [r5, #0]
 8002d3e:	bd38      	pop	{r3, r4, r5, pc}
 8002d40:	20000134 	.word	0x20000134

08002d44 <_lseek_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	4605      	mov	r5, r0
 8002d48:	4608      	mov	r0, r1
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	4c05      	ldr	r4, [pc, #20]	; (8002d64 <_lseek_r+0x20>)
 8002d50:	6022      	str	r2, [r4, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f7fd fc87 	bl	8000666 <_lseek>
 8002d58:	1c43      	adds	r3, r0, #1
 8002d5a:	d102      	bne.n	8002d62 <_lseek_r+0x1e>
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	b103      	cbz	r3, 8002d62 <_lseek_r+0x1e>
 8002d60:	602b      	str	r3, [r5, #0]
 8002d62:	bd38      	pop	{r3, r4, r5, pc}
 8002d64:	20000134 	.word	0x20000134

08002d68 <memchr>:
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	b2c9      	uxtb	r1, r1
 8002d6c:	4402      	add	r2, r0
 8002d6e:	4290      	cmp	r0, r2
 8002d70:	4603      	mov	r3, r0
 8002d72:	d101      	bne.n	8002d78 <memchr+0x10>
 8002d74:	2300      	movs	r3, #0
 8002d76:	e003      	b.n	8002d80 <memchr+0x18>
 8002d78:	781c      	ldrb	r4, [r3, #0]
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	428c      	cmp	r4, r1
 8002d7e:	d1f6      	bne.n	8002d6e <memchr+0x6>
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd10      	pop	{r4, pc}

08002d84 <__malloc_lock>:
 8002d84:	4770      	bx	lr

08002d86 <__malloc_unlock>:
 8002d86:	4770      	bx	lr

08002d88 <_read_r>:
 8002d88:	b538      	push	{r3, r4, r5, lr}
 8002d8a:	4605      	mov	r5, r0
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	2200      	movs	r2, #0
 8002d92:	4c05      	ldr	r4, [pc, #20]	; (8002da8 <_read_r+0x20>)
 8002d94:	6022      	str	r2, [r4, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f7fd fc08 	bl	80005ac <_read>
 8002d9c:	1c43      	adds	r3, r0, #1
 8002d9e:	d102      	bne.n	8002da6 <_read_r+0x1e>
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	b103      	cbz	r3, 8002da6 <_read_r+0x1e>
 8002da4:	602b      	str	r3, [r5, #0]
 8002da6:	bd38      	pop	{r3, r4, r5, pc}
 8002da8:	20000134 	.word	0x20000134

08002dac <_init>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr

08002db8 <_fini>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	bf00      	nop
 8002dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dbe:	bc08      	pop	{r3}
 8002dc0:	469e      	mov	lr, r3
 8002dc2:	4770      	bx	lr
