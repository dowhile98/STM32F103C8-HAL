
019_I2C_TEST_mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  080078e0  080078e0  000178e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce0  08007ce0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007ce0  08007ce0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ce0  08007ce0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001e0  08007ec8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08007ec8  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6a2  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001979  00000000  00000000  0002a8ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  0002c228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  0002cb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014e63  00000000  00000000  0002d450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000078f9  00000000  00000000  000422b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e3be  00000000  00000000  00049bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7f6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003794  00000000  00000000  000b7fe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080078c8 	.word	0x080078c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080078c8 	.word	0x080078c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b598      	push	{r3, r4, r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 fe10 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f868 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 f912 	bl	8001218 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ff4:	f000 f8b8 	bl	8001168 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ff8:	f000 f8e4 	bl	80011c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000ffc:	f000 f93a 	bl	8001274 <MPU6050_Init>
  /* USER CODE END 2 */
  printf("CONFIGURACION MPU6050 EXITOSA\r\n");
 8001000:	4824      	ldr	r0, [pc, #144]	; (8001094 <main+0xb0>)
 8001002:	f003 fb91 	bl	8004728 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MPU6050_Read_Accel();
 8001006:	f000 f98b 	bl	8001320 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 800100a:	f000 fa05 	bl	8001418 <MPU6050_Read_Gyro>
	  MPU6050_Accel_Angle();
 800100e:	f000 fa83 	bl	8001518 <MPU6050_Accel_Angle>
	  MPU6050_Gyro_Angle();
 8001012:	f000 fb21 	bl	8001658 <MPU6050_Gyro_Angle>
	  printf("angulo Ax->%.2f\r\n",Ax_angle);
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <main+0xb4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa04 	bl	8000428 <__aeabi_f2d>
 8001020:	4603      	mov	r3, r0
 8001022:	460c      	mov	r4, r1
 8001024:	461a      	mov	r2, r3
 8001026:	4623      	mov	r3, r4
 8001028:	481c      	ldr	r0, [pc, #112]	; (800109c <main+0xb8>)
 800102a:	f003 fb09 	bl	8004640 <iprintf>
	  printf("angulo Ay->%.2f\r\n",Ay_angle);
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <main+0xbc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f9f8 	bl	8000428 <__aeabi_f2d>
 8001038:	4603      	mov	r3, r0
 800103a:	460c      	mov	r4, r1
 800103c:	461a      	mov	r2, r3
 800103e:	4623      	mov	r3, r4
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <main+0xc0>)
 8001042:	f003 fafd 	bl	8004640 <iprintf>
	  printf("angulo Gx->%.2f\r\n",Gx_angle);
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <main+0xc4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f9ec 	bl	8000428 <__aeabi_f2d>
 8001050:	4603      	mov	r3, r0
 8001052:	460c      	mov	r4, r1
 8001054:	461a      	mov	r2, r3
 8001056:	4623      	mov	r3, r4
 8001058:	4814      	ldr	r0, [pc, #80]	; (80010ac <main+0xc8>)
 800105a:	f003 faf1 	bl	8004640 <iprintf>
	  printf("angulo Gy->%.2f\r\n",Gy_angle);
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <main+0xcc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f9e0 	bl	8000428 <__aeabi_f2d>
 8001068:	4603      	mov	r3, r0
 800106a:	460c      	mov	r4, r1
 800106c:	461a      	mov	r2, r3
 800106e:	4623      	mov	r3, r4
 8001070:	4810      	ldr	r0, [pc, #64]	; (80010b4 <main+0xd0>)
 8001072:	f003 fae5 	bl	8004640 <iprintf>
	  printf("\r\n");
 8001076:	4810      	ldr	r0, [pc, #64]	; (80010b8 <main+0xd4>)
 8001078:	f003 fb56 	bl	8004728 <puts>
	  printf("tiempo->%ld\r\n",millis());
 800107c:	f000 fbde 	bl	800183c <millis>
 8001080:	4603      	mov	r3, r0
 8001082:	4619      	mov	r1, r3
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <main+0xd8>)
 8001086:	f003 fadb 	bl	8004640 <iprintf>
	  HAL_Delay(200);
 800108a:	20c8      	movs	r0, #200	; 0xc8
 800108c:	f000 fe20 	bl	8001cd0 <HAL_Delay>
	  MPU6050_Read_Accel();
 8001090:	e7b9      	b.n	8001006 <main+0x22>
 8001092:	bf00      	nop
 8001094:	080078e0 	.word	0x080078e0
 8001098:	20000224 	.word	0x20000224
 800109c:	08007900 	.word	0x08007900
 80010a0:	200002d8 	.word	0x200002d8
 80010a4:	08007914 	.word	0x08007914
 80010a8:	20000228 	.word	0x20000228
 80010ac:	08007928 	.word	0x08007928
 80010b0:	20000280 	.word	0x20000280
 80010b4:	0800793c 	.word	0x0800793c
 80010b8:	08007950 	.word	0x08007950
 80010bc:	08007954 	.word	0x08007954

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b090      	sub	sp, #64	; 0x40
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0318 	add.w	r3, r7, #24
 80010ca:	2228      	movs	r2, #40	; 0x28
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 fe5e 	bl	8003d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e2:	2301      	movs	r3, #1
 80010e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f0:	2301      	movs	r3, #1
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f4:	2302      	movs	r3, #2
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	4618      	mov	r0, r3
 800110a:	f001 fff1 	bl	80030f0 <HAL_RCC_OscConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001114:	f000 fb9c 	bl	8001850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001118:	230f      	movs	r3, #15
 800111a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111c:	2302      	movs	r3, #2
 800111e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001128:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f002 fa5c 	bl	80035f0 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800113e:	f000 fb87 	bl	8001850 <Error_Handler>
  }
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001142:	f002 fba1 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 8001146:	4602      	mov	r2, r0
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <SystemClock_Config+0xa4>)
 800114a:	fba3 2302 	umull	r2, r3, r3, r2
 800114e:	099b      	lsrs	r3, r3, #6
 8001150:	4618      	mov	r0, r3
 8001152:	f000 feb6 	bl	8001ec2 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001156:	2004      	movs	r0, #4
 8001158:	f000 fec0 	bl	8001edc <HAL_SYSTICK_CLKSourceConfig>

}
 800115c:	bf00      	nop
 800115e:	3740      	adds	r7, #64	; 0x40
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	10624dd3 	.word	0x10624dd3

08001168 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x50>)
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <MX_I2C1_Init+0x54>)
 8001170:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_I2C1_Init+0x50>)
 8001174:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_I2C1_Init+0x58>)
 8001176:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_I2C1_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_I2C1_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_I2C1_Init+0x50>)
 8001186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_I2C1_Init+0x50>)
 80011a6:	f001 f815 	bl	80021d4 <HAL_I2C_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011b0:	f000 fb4e 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000022c 	.word	0x2000022c
 80011bc:	40005400 	.word	0x40005400
 80011c0:	000186a0 	.word	0x000186a0

080011c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <MX_USART1_UART_Init+0x50>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011fc:	f002 fb94 	bl	8003928 <HAL_UART_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001206:	f000 fb23 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000028c 	.word	0x2000028c
 8001214:	40013800 	.word	0x40013800

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_GPIO_Init+0x58>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a13      	ldr	r2, [pc, #76]	; (8001270 <MX_GPIO_Init+0x58>)
 8001224:	f043 0320 	orr.w	r3, r3, #32
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_GPIO_Init+0x58>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0320 	and.w	r3, r3, #32
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_GPIO_Init+0x58>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <MX_GPIO_Init+0x58>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6193      	str	r3, [r2, #24]
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_GPIO_Init+0x58>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_GPIO_Init+0x58>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <MX_GPIO_Init+0x58>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <MX_GPIO_Init+0x58>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	40021000 	.word	0x40021000

08001274 <MPU6050_Init>:

/* USER CODE BEGIN 4 */
void MPU6050_Init(void){
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;
	//se chequea que el dispositivo este presente
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, HAL_MAX_DELAY);
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2301      	movs	r3, #1
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	2275      	movs	r2, #117	; 0x75
 800128c:	21d0      	movs	r1, #208	; 0xd0
 800128e:	4823      	ldr	r0, [pc, #140]	; (800131c <MPU6050_Init+0xa8>)
 8001290:	f001 f9c2 	bl	8002618 <HAL_I2C_Mem_Read>
	if(check==0x68){
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b68      	cmp	r3, #104	; 0x68
 8001298:	d13b      	bne.n	8001312 <MPU6050_Init+0x9e>
		Data = 0x0;
 800129a:	2300      	movs	r3, #0
 800129c:	71bb      	strb	r3, [r7, #6]
		//se enciende el MPU6050
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, HAL_MAX_DELAY);
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2301      	movs	r3, #1
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	1dbb      	adds	r3, r7, #6
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	226b      	movs	r2, #107	; 0x6b
 80012b0:	21d0      	movs	r1, #208	; 0xd0
 80012b2:	481a      	ldr	r0, [pc, #104]	; (800131c <MPU6050_Init+0xa8>)
 80012b4:	f001 f8b6 	bl	8002424 <HAL_I2C_Mem_Write>
		//se establece la velocidad de transferencia de datos
		Data = 0x7;												//1kHz
 80012b8:	2307      	movs	r3, #7
 80012ba:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, HAL_MAX_DELAY);
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	9302      	str	r3, [sp, #8]
 80012c2:	2301      	movs	r3, #1
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	1dbb      	adds	r3, r7, #6
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	2219      	movs	r2, #25
 80012ce:	21d0      	movs	r1, #208	; 0xd0
 80012d0:	4812      	ldr	r0, [pc, #72]	; (800131c <MPU6050_Init+0xa8>)
 80012d2:	f001 f8a7 	bl	8002424 <HAL_I2C_Mem_Write>
		//configuracion de ascelerometro
		Data = 0x0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	71bb      	strb	r3, [r7, #6]
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR,ACCEL_CONFIG_REG , 1, &Data, 1, HAL_MAX_DELAY);
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	2301      	movs	r3, #1
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	1dbb      	adds	r3, r7, #6
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	221c      	movs	r2, #28
 80012ec:	21d0      	movs	r1, #208	; 0xd0
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <MPU6050_Init+0xa8>)
 80012f0:	f001 f898 	bl	8002424 <HAL_I2C_Mem_Write>

		//configuracion del giroscopio
		Data = 0x0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	71bb      	strb	r3, [r7, #6]
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, HAL_MAX_DELAY);
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2301      	movs	r3, #1
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	1dbb      	adds	r3, r7, #6
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	221b      	movs	r2, #27
 800130a:	21d0      	movs	r1, #208	; 0xd0
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <MPU6050_Init+0xa8>)
 800130e:	f001 f889 	bl	8002424 <HAL_I2C_Mem_Write>
	}
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000022c 	.word	0x2000022c

08001320 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void){
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b087      	sub	sp, #28
 8001324:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];			//buffer de lectura de bytes
	//lectura de 6 bytes del registro del mupu
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	2306      	movs	r3, #6
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	463b      	mov	r3, r7
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	223b      	movs	r2, #59	; 0x3b
 8001338:	21d0      	movs	r1, #208	; 0xd0
 800133a:	482f      	ldr	r0, [pc, #188]	; (80013f8 <MPU6050_Read_Accel+0xd8>)
 800133c:	f001 f96c 	bl	8002618 <HAL_I2C_Mem_Read>
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001340:	783b      	ldrb	r3, [r7, #0]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b21a      	sxth	r2, r3
 8001346:	787b      	ldrb	r3, [r7, #1]
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21a      	sxth	r2, r3
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <MPU6050_Read_Accel+0xdc>)
 8001350:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001352:	78bb      	ldrb	r3, [r7, #2]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b21a      	sxth	r2, r3
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21a      	sxth	r2, r3
 8001360:	4b27      	ldr	r3, [pc, #156]	; (8001400 <MPU6050_Read_Accel+0xe0>)
 8001362:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001364:	793b      	ldrb	r3, [r7, #4]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b21a      	sxth	r2, r3
 800136a:	797b      	ldrb	r3, [r7, #5]
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <MPU6050_Read_Accel+0xe4>)
 8001374:	801a      	strh	r2, [r3, #0]
	//la sensibilidad del acelerometro varia segun lo configurado en el registro ACCEL_CONFIG_REG
	Ax = Accel_X_RAW/16384.0;
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MPU6050_Read_Accel+0xdc>)
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f841 	bl	8000404 <__aeabi_i2d>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <MPU6050_Read_Accel+0xe8>)
 8001388:	f7ff f9d0 	bl	800072c <__aeabi_ddiv>
 800138c:	4603      	mov	r3, r0
 800138e:	460c      	mov	r4, r1
 8001390:	4618      	mov	r0, r3
 8001392:	4621      	mov	r1, r4
 8001394:	f7ff fb78 	bl	8000a88 <__aeabi_d2f>
 8001398:	4602      	mov	r2, r0
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MPU6050_Read_Accel+0xec>)
 800139c:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MPU6050_Read_Accel+0xe0>)
 80013a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f82d 	bl	8000404 <__aeabi_i2d>
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MPU6050_Read_Accel+0xe8>)
 80013b0:	f7ff f9bc 	bl	800072c <__aeabi_ddiv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	460c      	mov	r4, r1
 80013b8:	4618      	mov	r0, r3
 80013ba:	4621      	mov	r1, r4
 80013bc:	f7ff fb64 	bl	8000a88 <__aeabi_d2f>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MPU6050_Read_Accel+0xf0>)
 80013c4:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MPU6050_Read_Accel+0xe4>)
 80013c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f819 	bl	8000404 <__aeabi_i2d>
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MPU6050_Read_Accel+0xe8>)
 80013d8:	f7ff f9a8 	bl	800072c <__aeabi_ddiv>
 80013dc:	4603      	mov	r3, r0
 80013de:	460c      	mov	r4, r1
 80013e0:	4618      	mov	r0, r3
 80013e2:	4621      	mov	r1, r4
 80013e4:	f7ff fb50 	bl	8000a88 <__aeabi_d2f>
 80013e8:	4602      	mov	r2, r0
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <MPU6050_Read_Accel+0xf4>)
 80013ec:	601a      	str	r2, [r3, #0]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000022c 	.word	0x2000022c
 80013fc:	200001fc 	.word	0x200001fc
 8001400:	200001fe 	.word	0x200001fe
 8001404:	20000200 	.word	0x20000200
 8001408:	40d00000 	.word	0x40d00000
 800140c:	200002d0 	.word	0x200002d0
 8001410:	20000284 	.word	0x20000284
 8001414:	200002d4 	.word	0x200002d4

08001418 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void){
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b087      	sub	sp, #28
 800141c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	//se leen 6 bytes del registro 	GYRO_XOUT_H_REG
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	2306      	movs	r3, #6
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	463b      	mov	r3, r7
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	2243      	movs	r2, #67	; 0x43
 8001430:	21d0      	movs	r1, #208	; 0xd0
 8001432:	4831      	ldr	r0, [pc, #196]	; (80014f8 <MPU6050_Read_Gyro+0xe0>)
 8001434:	f001 f8f0 	bl	8002618 <HAL_I2C_Mem_Read>
	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001438:	783b      	ldrb	r3, [r7, #0]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21a      	sxth	r2, r3
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <MPU6050_Read_Gyro+0xe4>)
 8001448:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800144a:	78bb      	ldrb	r3, [r7, #2]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	b21a      	sxth	r2, r3
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <MPU6050_Read_Gyro+0xe8>)
 800145a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800145c:	793b      	ldrb	r3, [r7, #4]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	797b      	ldrb	r3, [r7, #5]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21a      	sxth	r2, r3
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <MPU6050_Read_Gyro+0xec>)
 800146c:	801a      	strh	r2, [r3, #0]

	//se convierte los valores RAW a dps(°/s)
	//la sensibilidad varia segun lo configurado en el registro GYRO_CONFIG_REG,
	Gx = Gyro_X_RAW/131.0;
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <MPU6050_Read_Gyro+0xe4>)
 8001470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe ffc5 	bl	8000404 <__aeabi_i2d>
 800147a:	a31d      	add	r3, pc, #116	; (adr r3, 80014f0 <MPU6050_Read_Gyro+0xd8>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7ff f954 	bl	800072c <__aeabi_ddiv>
 8001484:	4603      	mov	r3, r0
 8001486:	460c      	mov	r4, r1
 8001488:	4618      	mov	r0, r3
 800148a:	4621      	mov	r1, r4
 800148c:	f7ff fafc 	bl	8000a88 <__aeabi_d2f>
 8001490:	4602      	mov	r2, r0
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <MPU6050_Read_Gyro+0xf0>)
 8001494:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MPU6050_Read_Gyro+0xe8>)
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe ffb1 	bl	8000404 <__aeabi_i2d>
 80014a2:	a313      	add	r3, pc, #76	; (adr r3, 80014f0 <MPU6050_Read_Gyro+0xd8>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff f940 	bl	800072c <__aeabi_ddiv>
 80014ac:	4603      	mov	r3, r0
 80014ae:	460c      	mov	r4, r1
 80014b0:	4618      	mov	r0, r3
 80014b2:	4621      	mov	r1, r4
 80014b4:	f7ff fae8 	bl	8000a88 <__aeabi_d2f>
 80014b8:	4602      	mov	r2, r0
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <MPU6050_Read_Gyro+0xf4>)
 80014bc:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MPU6050_Read_Gyro+0xec>)
 80014c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe ff9d 	bl	8000404 <__aeabi_i2d>
 80014ca:	a309      	add	r3, pc, #36	; (adr r3, 80014f0 <MPU6050_Read_Gyro+0xd8>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	f7ff f92c 	bl	800072c <__aeabi_ddiv>
 80014d4:	4603      	mov	r3, r0
 80014d6:	460c      	mov	r4, r1
 80014d8:	4618      	mov	r0, r3
 80014da:	4621      	mov	r1, r4
 80014dc:	f7ff fad4 	bl	8000a88 <__aeabi_d2f>
 80014e0:	4602      	mov	r2, r0
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MPU6050_Read_Gyro+0xf8>)
 80014e4:	601a      	str	r2, [r3, #0]

}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	00000000 	.word	0x00000000
 80014f4:	40606000 	.word	0x40606000
 80014f8:	2000022c 	.word	0x2000022c
 80014fc:	20000202 	.word	0x20000202
 8001500:	20000204 	.word	0x20000204
 8001504:	20000206 	.word	0x20000206
 8001508:	20000220 	.word	0x20000220
 800150c:	20000288 	.word	0x20000288
 8001510:	200002e0 	.word	0x200002e0
 8001514:	00000000 	.word	0x00000000

08001518 <MPU6050_Accel_Angle>:
void MPU6050_Accel_Angle(void){
 8001518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800151c:	af00      	add	r7, sp, #0
	Ax_angle = atan(Ax/sqrt((pow(Ay,2)+pow(Az,2))))*(180.0/3.14);
 800151e:	4b48      	ldr	r3, [pc, #288]	; (8001640 <MPU6050_Accel_Angle+0x128>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe ff80 	bl	8000428 <__aeabi_f2d>
 8001528:	4604      	mov	r4, r0
 800152a:	460d      	mov	r5, r1
 800152c:	4b45      	ldr	r3, [pc, #276]	; (8001644 <MPU6050_Accel_Angle+0x12c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ff79 	bl	8000428 <__aeabi_f2d>
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800153e:	f005 f949 	bl	80067d4 <pow>
 8001542:	4680      	mov	r8, r0
 8001544:	4689      	mov	r9, r1
 8001546:	4b40      	ldr	r3, [pc, #256]	; (8001648 <MPU6050_Accel_Angle+0x130>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ff6c 	bl	8000428 <__aeabi_f2d>
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001558:	f005 f93c 	bl	80067d4 <pow>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4640      	mov	r0, r8
 8001562:	4649      	mov	r1, r9
 8001564:	f7fe fe02 	bl	800016c <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f005 fa8c 	bl	8006a8c <sqrt>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4620      	mov	r0, r4
 800157a:	4629      	mov	r1, r5
 800157c:	f7ff f8d6 	bl	800072c <__aeabi_ddiv>
 8001580:	4603      	mov	r3, r0
 8001582:	460c      	mov	r4, r1
 8001584:	4618      	mov	r0, r3
 8001586:	4621      	mov	r1, r4
 8001588:	f004 ff96 	bl	80064b8 <atan>
 800158c:	a32a      	add	r3, pc, #168	; (adr r3, 8001638 <MPU6050_Accel_Angle+0x120>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7fe ffa1 	bl	80004d8 <__aeabi_dmul>
 8001596:	4603      	mov	r3, r0
 8001598:	460c      	mov	r4, r1
 800159a:	4618      	mov	r0, r3
 800159c:	4621      	mov	r1, r4
 800159e:	f7ff fa73 	bl	8000a88 <__aeabi_d2f>
 80015a2:	4602      	mov	r2, r0
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <MPU6050_Accel_Angle+0x134>)
 80015a6:	601a      	str	r2, [r3, #0]
	Ay_angle = atan(Ay/sqrt((pow(Ax,2)+pow(Az,2))))*(180.0/3.14);
 80015a8:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MPU6050_Accel_Angle+0x12c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ff3b 	bl	8000428 <__aeabi_f2d>
 80015b2:	4604      	mov	r4, r0
 80015b4:	460d      	mov	r5, r1
 80015b6:	4b22      	ldr	r3, [pc, #136]	; (8001640 <MPU6050_Accel_Angle+0x128>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ff34 	bl	8000428 <__aeabi_f2d>
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c8:	f005 f904 	bl	80067d4 <pow>
 80015cc:	4680      	mov	r8, r0
 80015ce:	4689      	mov	r9, r1
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <MPU6050_Accel_Angle+0x130>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff27 	bl	8000428 <__aeabi_f2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e2:	f005 f8f7 	bl	80067d4 <pow>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4640      	mov	r0, r8
 80015ec:	4649      	mov	r1, r9
 80015ee:	f7fe fdbd 	bl	800016c <__adddf3>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f005 fa47 	bl	8006a8c <sqrt>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4620      	mov	r0, r4
 8001604:	4629      	mov	r1, r5
 8001606:	f7ff f891 	bl	800072c <__aeabi_ddiv>
 800160a:	4603      	mov	r3, r0
 800160c:	460c      	mov	r4, r1
 800160e:	4618      	mov	r0, r3
 8001610:	4621      	mov	r1, r4
 8001612:	f004 ff51 	bl	80064b8 <atan>
 8001616:	a308      	add	r3, pc, #32	; (adr r3, 8001638 <MPU6050_Accel_Angle+0x120>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe ff5c 	bl	80004d8 <__aeabi_dmul>
 8001620:	4603      	mov	r3, r0
 8001622:	460c      	mov	r4, r1
 8001624:	4618      	mov	r0, r3
 8001626:	4621      	mov	r1, r4
 8001628:	f7ff fa2e 	bl	8000a88 <__aeabi_d2f>
 800162c:	4602      	mov	r2, r0
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MPU6050_Accel_Angle+0x138>)
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001638:	61d59ae7 	.word	0x61d59ae7
 800163c:	404ca994 	.word	0x404ca994
 8001640:	200002d0 	.word	0x200002d0
 8001644:	20000284 	.word	0x20000284
 8001648:	200002d4 	.word	0x200002d4
 800164c:	20000224 	.word	0x20000224
 8001650:	200002d8 	.word	0x200002d8
 8001654:	00000000 	.word	0x00000000

08001658 <MPU6050_Gyro_Angle>:
	//se guardan los valores para el siguiente calculo
	Gx_angle_prev = Gx_angle;
	Gy_angle_prev = Gy_angle;
}*/

void MPU6050_Gyro_Angle(void){
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	af00      	add	r7, sp, #0
	dt = millis()-dt_prev;
 800165c:	f000 f8ee 	bl	800183c <millis>
 8001660:	4602      	mov	r2, r0
 8001662:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <MPU6050_Gyro_Angle+0x170>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	4a58      	ldr	r2, [pc, #352]	; (80017cc <MPU6050_Gyro_Angle+0x174>)
 800166a:	6013      	str	r3, [r2, #0]
	dt_prev = millis();
 800166c:	f000 f8e6 	bl	800183c <millis>
 8001670:	4602      	mov	r2, r0
 8001672:	4b55      	ldr	r3, [pc, #340]	; (80017c8 <MPU6050_Gyro_Angle+0x170>)
 8001674:	601a      	str	r2, [r3, #0]
	Gx_angle = 0.98*((Gx*dt)/1000.0+Gx_angle_prev)+0.02*Ax_angle;
 8001676:	4b55      	ldr	r3, [pc, #340]	; (80017cc <MPU6050_Gyro_Angle+0x174>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fb0a 	bl	8000c94 <__aeabi_ui2f>
 8001680:	4602      	mov	r2, r0
 8001682:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <MPU6050_Gyro_Angle+0x178>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	4610      	mov	r0, r2
 800168a:	f7ff fb5b 	bl	8000d44 <__aeabi_fmul>
 800168e:	4603      	mov	r3, r0
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fec9 	bl	8000428 <__aeabi_f2d>
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	4b4e      	ldr	r3, [pc, #312]	; (80017d4 <MPU6050_Gyro_Angle+0x17c>)
 800169c:	f7ff f846 	bl	800072c <__aeabi_ddiv>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	4625      	mov	r5, r4
 80016a6:	461c      	mov	r4, r3
 80016a8:	4b4b      	ldr	r3, [pc, #300]	; (80017d8 <MPU6050_Gyro_Angle+0x180>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe febb 	bl	8000428 <__aeabi_f2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7fe fd57 	bl	800016c <__adddf3>
 80016be:	4603      	mov	r3, r0
 80016c0:	460c      	mov	r4, r1
 80016c2:	4618      	mov	r0, r3
 80016c4:	4621      	mov	r1, r4
 80016c6:	a33c      	add	r3, pc, #240	; (adr r3, 80017b8 <MPU6050_Gyro_Angle+0x160>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7fe ff04 	bl	80004d8 <__aeabi_dmul>
 80016d0:	4603      	mov	r3, r0
 80016d2:	460c      	mov	r4, r1
 80016d4:	4625      	mov	r5, r4
 80016d6:	461c      	mov	r4, r3
 80016d8:	4b40      	ldr	r3, [pc, #256]	; (80017dc <MPU6050_Gyro_Angle+0x184>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fea3 	bl	8000428 <__aeabi_f2d>
 80016e2:	a337      	add	r3, pc, #220	; (adr r3, 80017c0 <MPU6050_Gyro_Angle+0x168>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7fe fef6 	bl	80004d8 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe fd3a 	bl	800016c <__adddf3>
 80016f8:	4603      	mov	r3, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	4618      	mov	r0, r3
 80016fe:	4621      	mov	r1, r4
 8001700:	f7ff f9c2 	bl	8000a88 <__aeabi_d2f>
 8001704:	4602      	mov	r2, r0
 8001706:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <MPU6050_Gyro_Angle+0x188>)
 8001708:	601a      	str	r2, [r3, #0]
	Gy_angle = 0.98*((Gy*dt)/1000.0+Gy_angle_prev)+0.02*Ay_angle;
 800170a:	4b30      	ldr	r3, [pc, #192]	; (80017cc <MPU6050_Gyro_Angle+0x174>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fac0 	bl	8000c94 <__aeabi_ui2f>
 8001714:	4602      	mov	r2, r0
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <MPU6050_Gyro_Angle+0x18c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4619      	mov	r1, r3
 800171c:	4610      	mov	r0, r2
 800171e:	f7ff fb11 	bl	8000d44 <__aeabi_fmul>
 8001722:	4603      	mov	r3, r0
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fe7f 	bl	8000428 <__aeabi_f2d>
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <MPU6050_Gyro_Angle+0x17c>)
 8001730:	f7fe fffc 	bl	800072c <__aeabi_ddiv>
 8001734:	4603      	mov	r3, r0
 8001736:	460c      	mov	r4, r1
 8001738:	4625      	mov	r5, r4
 800173a:	461c      	mov	r4, r3
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <MPU6050_Gyro_Angle+0x190>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fe71 	bl	8000428 <__aeabi_f2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4620      	mov	r0, r4
 800174c:	4629      	mov	r1, r5
 800174e:	f7fe fd0d 	bl	800016c <__adddf3>
 8001752:	4603      	mov	r3, r0
 8001754:	460c      	mov	r4, r1
 8001756:	4618      	mov	r0, r3
 8001758:	4621      	mov	r1, r4
 800175a:	a317      	add	r3, pc, #92	; (adr r3, 80017b8 <MPU6050_Gyro_Angle+0x160>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe feba 	bl	80004d8 <__aeabi_dmul>
 8001764:	4603      	mov	r3, r0
 8001766:	460c      	mov	r4, r1
 8001768:	4625      	mov	r5, r4
 800176a:	461c      	mov	r4, r3
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <MPU6050_Gyro_Angle+0x194>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fe59 	bl	8000428 <__aeabi_f2d>
 8001776:	a312      	add	r3, pc, #72	; (adr r3, 80017c0 <MPU6050_Gyro_Angle+0x168>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe feac 	bl	80004d8 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4620      	mov	r0, r4
 8001786:	4629      	mov	r1, r5
 8001788:	f7fe fcf0 	bl	800016c <__adddf3>
 800178c:	4603      	mov	r3, r0
 800178e:	460c      	mov	r4, r1
 8001790:	4618      	mov	r0, r3
 8001792:	4621      	mov	r1, r4
 8001794:	f7ff f978 	bl	8000a88 <__aeabi_d2f>
 8001798:	4602      	mov	r2, r0
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <MPU6050_Gyro_Angle+0x198>)
 800179c:	601a      	str	r2, [r3, #0]

	//se guardan los valores para el siguiente calculo
	Gx_angle_prev = Gx_angle;
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <MPU6050_Gyro_Angle+0x188>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <MPU6050_Gyro_Angle+0x180>)
 80017a4:	6013      	str	r3, [r2, #0]
	Gy_angle_prev = Gy_angle;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MPU6050_Gyro_Angle+0x198>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a0f      	ldr	r2, [pc, #60]	; (80017e8 <MPU6050_Gyro_Angle+0x190>)
 80017ac:	6013      	str	r3, [r2, #0]
}
 80017ae:	bf00      	nop
 80017b0:	bdb0      	pop	{r4, r5, r7, pc}
 80017b2:	bf00      	nop
 80017b4:	f3af 8000 	nop.w
 80017b8:	f5c28f5c 	.word	0xf5c28f5c
 80017bc:	3fef5c28 	.word	0x3fef5c28
 80017c0:	47ae147b 	.word	0x47ae147b
 80017c4:	3f947ae1 	.word	0x3f947ae1
 80017c8:	20000210 	.word	0x20000210
 80017cc:	200002dc 	.word	0x200002dc
 80017d0:	20000220 	.word	0x20000220
 80017d4:	408f4000 	.word	0x408f4000
 80017d8:	20000208 	.word	0x20000208
 80017dc:	20000224 	.word	0x20000224
 80017e0:	20000228 	.word	0x20000228
 80017e4:	20000288 	.word	0x20000288
 80017e8:	2000020c 	.word	0x2000020c
 80017ec:	200002d8 	.word	0x200002d8
 80017f0:	20000280 	.word	0x20000280

080017f4 <__io_putchar>:
/* USER CODE END 4 */
/*esta funcion permites el uso de la funcion prirntf
 */
int __io_putchar(int ch)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	uint8_t c;
	c = ch & 0x00FF;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 10);
 8001802:	f107 010f 	add.w	r1, r7, #15
 8001806:	230a      	movs	r3, #10
 8001808:	2201      	movs	r2, #1
 800180a:	4804      	ldr	r0, [pc, #16]	; (800181c <__io_putchar+0x28>)
 800180c:	f002 f8d9 	bl	80039c2 <HAL_UART_Transmit>
	return ch;
 8001810:	687b      	ldr	r3, [r7, #4]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000028c 	.word	0x2000028c

08001820 <HAL_SYSTICK_Callback>:

//funcion para medir el tiempo
void HAL_SYSTICK_Callback(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
	tick++;
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <HAL_SYSTICK_Callback+0x18>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a03      	ldr	r2, [pc, #12]	; (8001838 <HAL_SYSTICK_Callback+0x18>)
 800182c:	6013      	str	r3, [r2, #0]
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	200002cc 	.word	0x200002cc

0800183c <millis>:
uint32_t millis(void){
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
	return tick;
 8001840:	4b02      	ldr	r3, [pc, #8]	; (800184c <millis+0x10>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	200002cc 	.word	0x200002cc

08001850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <HAL_MspInit>:
#include "main.h"
/* USER CODE BEGIN Includes */


void HAL_MspInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_MspInit+0x5c>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <HAL_MspInit+0x5c>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6193      	str	r3, [r2, #24]
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_MspInit+0x5c>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_MspInit+0x5c>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_MspInit+0x5c>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_MspInit+0x5c>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_MspInit+0x60>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_MspInit+0x60>)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000

080018c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a15      	ldr	r2, [pc, #84]	; (8001930 <HAL_I2C_MspInit+0x70>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d123      	bne.n	8001928 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_I2C_MspInit+0x74>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a13      	ldr	r2, [pc, #76]	; (8001934 <HAL_I2C_MspInit+0x74>)
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_I2C_MspInit+0x74>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018f8:	23c0      	movs	r3, #192	; 0xc0
 80018fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fc:	2312      	movs	r3, #18
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4619      	mov	r1, r3
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <HAL_I2C_MspInit+0x78>)
 800190c:	f000 fb08 	bl	8001f20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_I2C_MspInit+0x74>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_I2C_MspInit+0x74>)
 8001916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800191a:	61d3      	str	r3, [r2, #28]
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_I2C_MspInit+0x74>)
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40005400 	.word	0x40005400
 8001934:	40021000 	.word	0x40021000
 8001938:	40010c00 	.word	0x40010c00

0800193c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <HAL_UART_MspInit+0x8c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d131      	bne.n	80019c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <HAL_UART_MspInit+0x90>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a1a      	ldr	r2, [pc, #104]	; (80019cc <HAL_UART_MspInit+0x90>)
 8001962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_UART_MspInit+0x90>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_UART_MspInit+0x90>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <HAL_UART_MspInit+0x90>)
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_UART_MspInit+0x90>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800198c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001990:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	4619      	mov	r1, r3
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <HAL_UART_MspInit+0x94>)
 80019a2:	f000 fabd 	bl	8001f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	4619      	mov	r1, r3
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <HAL_UART_MspInit+0x94>)
 80019bc:	f000 fab0 	bl	8001f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019c0:	bf00      	nop
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40013800 	.word	0x40013800
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010800 	.word	0x40010800

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <HardFault_Handler+0x4>

080019e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <MemManage_Handler+0x4>

080019ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <BusFault_Handler+0x4>

080019f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <UsageFault_Handler+0x4>

080019f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a20:	f000 f93a 	bl	8001c98 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001a24:	f000 fa76 	bl	8001f14 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e00a      	b.n	8001a54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a3e:	f3af 8000 	nop.w
 8001a42:	4601      	mov	r1, r0
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60ba      	str	r2, [r7, #8]
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf0      	blt.n	8001a3e <_read+0x12>
	}

return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e009      	b.n	8001a8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff feb7 	bl	80017f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf1      	blt.n	8001a78 <_write+0x12>
	}
	return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_close>:

int _close(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
	return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac4:	605a      	str	r2, [r3, #4]
	return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <_isatty>:

int _isatty(int file)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
	return 1;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
	return 0;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
	...

08001b00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <_sbrk+0x50>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <_sbrk+0x16>
		heap_end = &end;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <_sbrk+0x50>)
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <_sbrk+0x54>)
 8001b14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <_sbrk+0x50>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <_sbrk+0x50>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	466a      	mov	r2, sp
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d907      	bls.n	8001b3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b2a:	f002 f907 	bl	8003d3c <__errno>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	230c      	movs	r3, #12
 8001b32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
 8001b38:	e006      	b.n	8001b48 <_sbrk+0x48>
	}

	heap_end += incr;
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <_sbrk+0x50>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <_sbrk+0x50>)
 8001b44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000214 	.word	0x20000214
 8001b54:	200002f0 	.word	0x200002f0

08001b58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <SystemInit+0x5c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <SystemInit+0x5c>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <SystemInit+0x5c>)
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4911      	ldr	r1, [pc, #68]	; (8001bb4 <SystemInit+0x5c>)
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <SystemInit+0x60>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <SystemInit+0x5c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <SystemInit+0x5c>)
 8001b7a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <SystemInit+0x5c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <SystemInit+0x5c>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <SystemInit+0x5c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <SystemInit+0x5c>)
 8001b96:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b9a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <SystemInit+0x5c>)
 8001b9e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001ba2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SystemInit+0x64>)
 8001ba6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001baa:	609a      	str	r2, [r3, #8]
#endif 
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	f8ff0000 	.word	0xf8ff0000
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001bc0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bc2:	e003      	b.n	8001bcc <LoopCopyDataInit>

08001bc4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bc6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bc8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bca:	3104      	adds	r1, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bcc:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bd0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bd2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bd4:	d3f6      	bcc.n	8001bc4 <CopyDataInit>
  ldr r2, =_sbss
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bd8:	e002      	b.n	8001be0 <LoopFillZerobss>

08001bda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bdc:	f842 3b04 	str.w	r3, [r2], #4

08001be0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001be2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001be4:	d3f9      	bcc.n	8001bda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001be6:	f7ff ffb7 	bl	8001b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bea:	f002 f8ad 	bl	8003d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bee:	f7ff f9f9 	bl	8000fe4 <main>
  bx lr
 8001bf2:	4770      	bx	lr
  ldr r3, =_sidata
 8001bf4:	08007ce8 	.word	0x08007ce8
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bfc:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001c00:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001c04:	200002ec 	.word	0x200002ec

08001c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC1_2_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_Init+0x28>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_Init+0x28>)
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 f929 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fe18 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f933 	bl	8001ec2 <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 f909 	bl	8001e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_IncTick+0x1c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_IncTick+0x20>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <HAL_IncTick+0x20>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	200002e4 	.word	0x200002e4

08001cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <HAL_GetTick+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	200002e4 	.word	0x200002e4

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_Delay+0x40>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf6:	bf00      	nop
 8001cf8:	f7ff ffe0 	bl	8001cbc <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000008 	.word	0x20000008

08001d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d30:	4013      	ands	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d46:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	60d3      	str	r3, [r2, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <__NVIC_GetPriorityGrouping+0x18>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	f003 0307 	and.w	r3, r3, #7
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e40:	d301      	bcc.n	8001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <SysTick_Config+0x40>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4e:	210f      	movs	r1, #15
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f7ff ff90 	bl	8001d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SysTick_Config+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SysTick_Config+0x40>)
 8001e60:	2207      	movs	r2, #7
 8001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff49 	bl	8001d14 <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff5e 	bl	8001d5c <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff90 	bl	8001dcc <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5f 	bl	8001d78 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffb0 	bl	8001e30 <SysTick_Config>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d106      	bne.n	8001ef8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001ef6:	e005      	b.n	8001f04 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001efe:	f023 0304 	bic.w	r3, r3, #4
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e010 	.word	0xe000e010

08001f14 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f18:	f7ff fc82 	bl	8001820 <HAL_SYSTICK_Callback>
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b08b      	sub	sp, #44	; 0x2c
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f32:	e127      	b.n	8002184 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f34:	2201      	movs	r2, #1
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	f040 8116 	bne.w	800217e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b12      	cmp	r3, #18
 8001f58:	d034      	beq.n	8001fc4 <HAL_GPIO_Init+0xa4>
 8001f5a:	2b12      	cmp	r3, #18
 8001f5c:	d80d      	bhi.n	8001f7a <HAL_GPIO_Init+0x5a>
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d02b      	beq.n	8001fba <HAL_GPIO_Init+0x9a>
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d804      	bhi.n	8001f70 <HAL_GPIO_Init+0x50>
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d031      	beq.n	8001fce <HAL_GPIO_Init+0xae>
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d01c      	beq.n	8001fa8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f6e:	e048      	b.n	8002002 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d043      	beq.n	8001ffc <HAL_GPIO_Init+0xdc>
 8001f74:	2b11      	cmp	r3, #17
 8001f76:	d01b      	beq.n	8001fb0 <HAL_GPIO_Init+0x90>
          break;
 8001f78:	e043      	b.n	8002002 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f7a:	4a89      	ldr	r2, [pc, #548]	; (80021a0 <HAL_GPIO_Init+0x280>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d026      	beq.n	8001fce <HAL_GPIO_Init+0xae>
 8001f80:	4a87      	ldr	r2, [pc, #540]	; (80021a0 <HAL_GPIO_Init+0x280>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d806      	bhi.n	8001f94 <HAL_GPIO_Init+0x74>
 8001f86:	4a87      	ldr	r2, [pc, #540]	; (80021a4 <HAL_GPIO_Init+0x284>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d020      	beq.n	8001fce <HAL_GPIO_Init+0xae>
 8001f8c:	4a86      	ldr	r2, [pc, #536]	; (80021a8 <HAL_GPIO_Init+0x288>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d01d      	beq.n	8001fce <HAL_GPIO_Init+0xae>
          break;
 8001f92:	e036      	b.n	8002002 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f94:	4a85      	ldr	r2, [pc, #532]	; (80021ac <HAL_GPIO_Init+0x28c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d019      	beq.n	8001fce <HAL_GPIO_Init+0xae>
 8001f9a:	4a85      	ldr	r2, [pc, #532]	; (80021b0 <HAL_GPIO_Init+0x290>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d016      	beq.n	8001fce <HAL_GPIO_Init+0xae>
 8001fa0:	4a84      	ldr	r2, [pc, #528]	; (80021b4 <HAL_GPIO_Init+0x294>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <HAL_GPIO_Init+0xae>
          break;
 8001fa6:	e02c      	b.n	8002002 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	623b      	str	r3, [r7, #32]
          break;
 8001fae:	e028      	b.n	8002002 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	623b      	str	r3, [r7, #32]
          break;
 8001fb8:	e023      	b.n	8002002 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	623b      	str	r3, [r7, #32]
          break;
 8001fc2:	e01e      	b.n	8002002 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	330c      	adds	r3, #12
 8001fca:	623b      	str	r3, [r7, #32]
          break;
 8001fcc:	e019      	b.n	8002002 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d102      	bne.n	8001fdc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	623b      	str	r3, [r7, #32]
          break;
 8001fda:	e012      	b.n	8002002 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d105      	bne.n	8001ff0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	611a      	str	r2, [r3, #16]
          break;
 8001fee:	e008      	b.n	8002002 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	615a      	str	r2, [r3, #20]
          break;
 8001ffa:	e002      	b.n	8002002 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
          break;
 8002000:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2bff      	cmp	r3, #255	; 0xff
 8002006:	d801      	bhi.n	800200c <HAL_GPIO_Init+0xec>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	e001      	b.n	8002010 <HAL_GPIO_Init+0xf0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3304      	adds	r3, #4
 8002010:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	2bff      	cmp	r3, #255	; 0xff
 8002016:	d802      	bhi.n	800201e <HAL_GPIO_Init+0xfe>
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	e002      	b.n	8002024 <HAL_GPIO_Init+0x104>
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	3b08      	subs	r3, #8
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	210f      	movs	r1, #15
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	401a      	ands	r2, r3
 8002036:	6a39      	ldr	r1, [r7, #32]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	431a      	orrs	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 8096 	beq.w	800217e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002052:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_GPIO_Init+0x298>)
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	4a58      	ldr	r2, [pc, #352]	; (80021b8 <HAL_GPIO_Init+0x298>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6193      	str	r3, [r2, #24]
 800205e:	4b56      	ldr	r3, [pc, #344]	; (80021b8 <HAL_GPIO_Init+0x298>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800206a:	4a54      	ldr	r2, [pc, #336]	; (80021bc <HAL_GPIO_Init+0x29c>)
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4013      	ands	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4b      	ldr	r2, [pc, #300]	; (80021c0 <HAL_GPIO_Init+0x2a0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0x19e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4a      	ldr	r2, [pc, #296]	; (80021c4 <HAL_GPIO_Init+0x2a4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00d      	beq.n	80020ba <HAL_GPIO_Init+0x19a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a49      	ldr	r2, [pc, #292]	; (80021c8 <HAL_GPIO_Init+0x2a8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <HAL_GPIO_Init+0x196>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a48      	ldr	r2, [pc, #288]	; (80021cc <HAL_GPIO_Init+0x2ac>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_GPIO_Init+0x192>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x1a0>
 80020b2:	2304      	movs	r3, #4
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_Init+0x1a0>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_Init+0x1a0>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x1a0>
 80020be:	2300      	movs	r3, #0
 80020c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c2:	f002 0203 	and.w	r2, r2, #3
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4093      	lsls	r3, r2
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020d0:	493a      	ldr	r1, [pc, #232]	; (80021bc <HAL_GPIO_Init+0x29c>)
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020ea:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4938      	ldr	r1, [pc, #224]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
 80020f6:	e006      	b.n	8002106 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020f8:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	43db      	mvns	r3, r3
 8002100:	4933      	ldr	r1, [pc, #204]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 8002102:	4013      	ands	r3, r2
 8002104:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d006      	beq.n	8002120 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002112:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	492e      	ldr	r1, [pc, #184]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
 800211e:	e006      	b.n	800212e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002120:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	43db      	mvns	r3, r3
 8002128:	4929      	ldr	r1, [pc, #164]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 800212a:	4013      	ands	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800213a:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	4924      	ldr	r1, [pc, #144]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
 8002146:	e006      	b.n	8002156 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	43db      	mvns	r3, r3
 8002150:	491f      	ldr	r1, [pc, #124]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 8002152:	4013      	ands	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	491a      	ldr	r1, [pc, #104]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	60cb      	str	r3, [r1, #12]
 800216e:	e006      	b.n	800217e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002170:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	43db      	mvns	r3, r3
 8002178:	4915      	ldr	r1, [pc, #84]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 800217a:	4013      	ands	r3, r2
 800217c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	3301      	adds	r3, #1
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	f47f aed0 	bne.w	8001f34 <HAL_GPIO_Init+0x14>
  }
}
 8002194:	bf00      	nop
 8002196:	372c      	adds	r7, #44	; 0x2c
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	10210000 	.word	0x10210000
 80021a4:	10110000 	.word	0x10110000
 80021a8:	10120000 	.word	0x10120000
 80021ac:	10310000 	.word	0x10310000
 80021b0:	10320000 	.word	0x10320000
 80021b4:	10220000 	.word	0x10220000
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40010800 	.word	0x40010800
 80021c4:	40010c00 	.word	0x40010c00
 80021c8:	40011000 	.word	0x40011000
 80021cc:	40011400 	.word	0x40011400
 80021d0:	40010400 	.word	0x40010400

080021d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e10f      	b.n	8002406 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fb60 	bl	80018c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2224      	movs	r2, #36	; 0x24
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002218:	f001 fb40 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 800221c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4a7b      	ldr	r2, [pc, #492]	; (8002410 <HAL_I2C_Init+0x23c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d807      	bhi.n	8002238 <HAL_I2C_Init+0x64>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a7a      	ldr	r2, [pc, #488]	; (8002414 <HAL_I2C_Init+0x240>)
 800222c:	4293      	cmp	r3, r2
 800222e:	bf94      	ite	ls
 8002230:	2301      	movls	r3, #1
 8002232:	2300      	movhi	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	e006      	b.n	8002246 <HAL_I2C_Init+0x72>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a77      	ldr	r2, [pc, #476]	; (8002418 <HAL_I2C_Init+0x244>)
 800223c:	4293      	cmp	r3, r2
 800223e:	bf94      	ite	ls
 8002240:	2301      	movls	r3, #1
 8002242:	2300      	movhi	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0db      	b.n	8002406 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4a72      	ldr	r2, [pc, #456]	; (800241c <HAL_I2C_Init+0x248>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	0c9b      	lsrs	r3, r3, #18
 8002258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a64      	ldr	r2, [pc, #400]	; (8002410 <HAL_I2C_Init+0x23c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d802      	bhi.n	8002288 <HAL_I2C_Init+0xb4>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3301      	adds	r3, #1
 8002286:	e009      	b.n	800229c <HAL_I2C_Init+0xc8>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	4a63      	ldr	r2, [pc, #396]	; (8002420 <HAL_I2C_Init+0x24c>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	3301      	adds	r3, #1
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	430b      	orrs	r3, r1
 80022a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4956      	ldr	r1, [pc, #344]	; (8002410 <HAL_I2C_Init+0x23c>)
 80022b8:	428b      	cmp	r3, r1
 80022ba:	d80d      	bhi.n	80022d8 <HAL_I2C_Init+0x104>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1e59      	subs	r1, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	bf38      	it	cc
 80022d4:	2304      	movcc	r3, #4
 80022d6:	e04f      	b.n	8002378 <HAL_I2C_Init+0x1a4>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d111      	bne.n	8002304 <HAL_I2C_Init+0x130>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1e58      	subs	r0, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	440b      	add	r3, r1
 80022ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f2:	3301      	adds	r3, #1
 80022f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	e012      	b.n	800232a <HAL_I2C_Init+0x156>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1e58      	subs	r0, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6859      	ldr	r1, [r3, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	0099      	lsls	r1, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	fbb0 f3f3 	udiv	r3, r0, r3
 800231a:	3301      	adds	r3, #1
 800231c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Init+0x15e>
 800232e:	2301      	movs	r3, #1
 8002330:	e022      	b.n	8002378 <HAL_I2C_Init+0x1a4>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10e      	bne.n	8002358 <HAL_I2C_Init+0x184>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1e58      	subs	r0, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6859      	ldr	r1, [r3, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	440b      	add	r3, r1
 8002348:	fbb0 f3f3 	udiv	r3, r0, r3
 800234c:	3301      	adds	r3, #1
 800234e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002356:	e00f      	b.n	8002378 <HAL_I2C_Init+0x1a4>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1e58      	subs	r0, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	0099      	lsls	r1, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	fbb0 f3f3 	udiv	r3, r0, r3
 800236e:	3301      	adds	r3, #1
 8002370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	6809      	ldr	r1, [r1, #0]
 800237c:	4313      	orrs	r3, r2
 800237e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6911      	ldr	r1, [r2, #16]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68d2      	ldr	r2, [r2, #12]
 80023b2:	4311      	orrs	r1, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	430b      	orrs	r3, r1
 80023ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	000186a0 	.word	0x000186a0
 8002414:	001e847f 	.word	0x001e847f
 8002418:	003d08ff 	.word	0x003d08ff
 800241c:	431bde83 	.word	0x431bde83
 8002420:	10624dd3 	.word	0x10624dd3

08002424 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	4608      	mov	r0, r1
 800242e:	4611      	mov	r1, r2
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	817b      	strh	r3, [r7, #10]
 8002436:	460b      	mov	r3, r1
 8002438:	813b      	strh	r3, [r7, #8]
 800243a:	4613      	mov	r3, r2
 800243c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800243e:	f7ff fc3d 	bl	8001cbc <HAL_GetTick>
 8002442:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b20      	cmp	r3, #32
 800244e:	f040 80d9 	bne.w	8002604 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2319      	movs	r3, #25
 8002458:	2201      	movs	r2, #1
 800245a:	496d      	ldr	r1, [pc, #436]	; (8002610 <HAL_I2C_Mem_Write+0x1ec>)
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fc6b 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002468:	2302      	movs	r3, #2
 800246a:	e0cc      	b.n	8002606 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_I2C_Mem_Write+0x56>
 8002476:	2302      	movs	r3, #2
 8002478:	e0c5      	b.n	8002606 <HAL_I2C_Mem_Write+0x1e2>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d007      	beq.n	80024a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2221      	movs	r2, #33	; 0x21
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2240      	movs	r2, #64	; 0x40
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a3a      	ldr	r2, [r7, #32]
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a4d      	ldr	r2, [pc, #308]	; (8002614 <HAL_I2C_Mem_Write+0x1f0>)
 80024e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024e2:	88f8      	ldrh	r0, [r7, #6]
 80024e4:	893a      	ldrh	r2, [r7, #8]
 80024e6:	8979      	ldrh	r1, [r7, #10]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	4603      	mov	r3, r0
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fac6 	bl	8002a84 <I2C_RequestMemoryWrite>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d052      	beq.n	80025a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e081      	b.n	8002606 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fcec 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00d      	beq.n	800252e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	2b04      	cmp	r3, #4
 8002518:	d107      	bne.n	800252a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e06b      	b.n	8002606 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b04      	cmp	r3, #4
 800256a:	d11b      	bne.n	80025a4 <HAL_I2C_Mem_Write+0x180>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	2b00      	cmp	r3, #0
 8002572:	d017      	beq.n	80025a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1aa      	bne.n	8002502 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fcd8 	bl	8002f66 <I2C_WaitOnBTFFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d107      	bne.n	80025d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e016      	b.n	8002606 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e000      	b.n	8002606 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
  }
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	00100002 	.word	0x00100002
 8002614:	ffff0000 	.word	0xffff0000

08002618 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08c      	sub	sp, #48	; 0x30
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	4608      	mov	r0, r1
 8002622:	4611      	mov	r1, r2
 8002624:	461a      	mov	r2, r3
 8002626:	4603      	mov	r3, r0
 8002628:	817b      	strh	r3, [r7, #10]
 800262a:	460b      	mov	r3, r1
 800262c:	813b      	strh	r3, [r7, #8]
 800262e:	4613      	mov	r3, r2
 8002630:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002632:	f7ff fb43 	bl	8001cbc <HAL_GetTick>
 8002636:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b20      	cmp	r3, #32
 8002642:	f040 8218 	bne.w	8002a76 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2319      	movs	r3, #25
 800264c:	2201      	movs	r2, #1
 800264e:	4981      	ldr	r1, [pc, #516]	; (8002854 <HAL_I2C_Mem_Read+0x23c>)
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 fb71 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800265c:	2302      	movs	r3, #2
 800265e:	e20b      	b.n	8002a78 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_I2C_Mem_Read+0x56>
 800266a:	2302      	movs	r3, #2
 800266c:	e204      	b.n	8002a78 <HAL_I2C_Mem_Read+0x460>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d007      	beq.n	8002694 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2222      	movs	r2, #34	; 0x22
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2240      	movs	r2, #64	; 0x40
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a61      	ldr	r2, [pc, #388]	; (8002858 <HAL_I2C_Mem_Read+0x240>)
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026d6:	88f8      	ldrh	r0, [r7, #6]
 80026d8:	893a      	ldrh	r2, [r7, #8]
 80026da:	8979      	ldrh	r1, [r7, #10]
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	4603      	mov	r3, r0
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fa56 	bl	8002b98 <I2C_RequestMemoryRead>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e1c0      	b.n	8002a78 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d113      	bne.n	8002726 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fe:	2300      	movs	r3, #0
 8002700:	623b      	str	r3, [r7, #32]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	623b      	str	r3, [r7, #32]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	e194      	b.n	8002a50 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	2b01      	cmp	r3, #1
 800272c:	d11d      	bne.n	800276a <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800273e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002764:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002766:	b662      	cpsie	i
 8002768:	e172      	b.n	8002a50 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276e:	2b02      	cmp	r3, #2
 8002770:	d11d      	bne.n	80027ae <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002780:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002782:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002784:	2300      	movs	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027aa:	b662      	cpsie	i
 80027ac:	e150      	b.n	8002a50 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027bc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027d4:	e13c      	b.n	8002a50 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	2b03      	cmp	r3, #3
 80027dc:	f200 80f5 	bhi.w	80029ca <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d123      	bne.n	8002830 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fbfb 	bl	8002fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e13d      	b.n	8002a78 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800282e:	e10f      	b.n	8002a50 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	2b02      	cmp	r3, #2
 8002836:	d150      	bne.n	80028da <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283e:	2200      	movs	r2, #0
 8002840:	4906      	ldr	r1, [pc, #24]	; (800285c <HAL_I2C_Mem_Read+0x244>)
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fa78 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e112      	b.n	8002a78 <HAL_I2C_Mem_Read+0x460>
 8002852:	bf00      	nop
 8002854:	00100002 	.word	0x00100002
 8002858:	ffff0000 	.word	0xffff0000
 800285c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002860:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002870:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028a4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028d8:	e0ba      	b.n	8002a50 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e0:	2200      	movs	r2, #0
 80028e2:	4967      	ldr	r1, [pc, #412]	; (8002a80 <HAL_I2C_Mem_Read+0x468>)
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 fa27 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0c1      	b.n	8002a78 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002902:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002904:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	2200      	movs	r2, #0
 8002940:	494f      	ldr	r1, [pc, #316]	; (8002a80 <HAL_I2C_Mem_Read+0x468>)
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f9f8 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e092      	b.n	8002a78 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002960:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002994:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c8:	e042      	b.n	8002a50 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fb0a 	bl	8002fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e04c      	b.n	8002a78 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d118      	bne.n	8002a50 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f47f aebe 	bne.w	80027d6 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e000      	b.n	8002a78 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
  }
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3728      	adds	r7, #40	; 0x28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	00010004 	.word	0x00010004

08002a84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4603      	mov	r3, r0
 8002a94:	817b      	strh	r3, [r7, #10]
 8002a96:	460b      	mov	r3, r1
 8002a98:	813b      	strh	r3, [r7, #8]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f93c 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e05f      	b.n	8002b8a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aca:	897b      	ldrh	r3, [r7, #10]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ad8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	6a3a      	ldr	r2, [r7, #32]
 8002ade:	492d      	ldr	r1, [pc, #180]	; (8002b94 <I2C_RequestMemoryWrite+0x110>)
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f980 	bl	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e04c      	b.n	8002b8a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b08:	6a39      	ldr	r1, [r7, #32]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f9ea 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00d      	beq.n	8002b32 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d107      	bne.n	8002b2e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e02b      	b.n	8002b8a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b38:	893b      	ldrh	r3, [r7, #8]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	611a      	str	r2, [r3, #16]
 8002b42:	e021      	b.n	8002b88 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b44:	893b      	ldrh	r3, [r7, #8]
 8002b46:	0a1b      	lsrs	r3, r3, #8
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b54:	6a39      	ldr	r1, [r7, #32]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f9c4 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d107      	bne.n	8002b7a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e005      	b.n	8002b8a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b7e:	893b      	ldrh	r3, [r7, #8]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	00010002 	.word	0x00010002

08002b98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	4608      	mov	r0, r1
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	817b      	strh	r3, [r7, #10]
 8002baa:	460b      	mov	r3, r1
 8002bac:	813b      	strh	r3, [r7, #8]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f8aa 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e09e      	b.n	8002d2c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bee:	897b      	ldrh	r3, [r7, #10]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	494c      	ldr	r1, [pc, #304]	; (8002d34 <I2C_RequestMemoryRead+0x19c>)
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f8ee 	bl	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e08b      	b.n	8002d2c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2c:	6a39      	ldr	r1, [r7, #32]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f958 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00d      	beq.n	8002c56 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d107      	bne.n	8002c52 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e06a      	b.n	8002d2c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d105      	bne.n	8002c68 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c5c:	893b      	ldrh	r3, [r7, #8]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]
 8002c66:	e021      	b.n	8002cac <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c68:	893b      	ldrh	r3, [r7, #8]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c78:	6a39      	ldr	r1, [r7, #32]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f932 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d107      	bne.n	8002c9e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e044      	b.n	8002d2c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ca2:	893b      	ldrh	r3, [r7, #8]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cae:	6a39      	ldr	r1, [r7, #32]
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 f917 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00d      	beq.n	8002cd8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d107      	bne.n	8002cd4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e029      	b.n	8002d2c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f81f 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e013      	b.n	8002d2c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d04:	897b      	ldrh	r3, [r7, #10]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	6a3a      	ldr	r2, [r7, #32]
 8002d18:	4906      	ldr	r1, [pc, #24]	; (8002d34 <I2C_RequestMemoryRead+0x19c>)
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f863 	bl	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	00010002 	.word	0x00010002

08002d38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d48:	e025      	b.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d021      	beq.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d52:	f7fe ffb3 	bl	8001cbc <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d116      	bne.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f043 0220 	orr.w	r2, r3, #32
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e023      	b.n	8002dde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d10d      	bne.n	8002dbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	43da      	mvns	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4013      	ands	r3, r2
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bf0c      	ite	eq
 8002db2:	2301      	moveq	r3, #1
 8002db4:	2300      	movne	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	e00c      	b.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf0c      	ite	eq
 8002dce:	2301      	moveq	r3, #1
 8002dd0:	2300      	movne	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d0b6      	beq.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002df4:	e051      	b.n	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e04:	d123      	bne.n	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f043 0204 	orr.w	r2, r3, #4
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e046      	b.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d021      	beq.n	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e56:	f7fe ff31 	bl	8001cbc <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d302      	bcc.n	8002e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d116      	bne.n	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f043 0220 	orr.w	r2, r3, #32
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e020      	b.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d10c      	bne.n	8002ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bf14      	ite	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	2300      	moveq	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	e00b      	b.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	43da      	mvns	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d18d      	bne.n	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef0:	e02d      	b.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f8ce 	bl	8003094 <I2C_IsAcknowledgeFailed>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e02d      	b.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d021      	beq.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0a:	f7fe fed7 	bl	8001cbc <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d302      	bcc.n	8002f20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d116      	bne.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e007      	b.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f58:	2b80      	cmp	r3, #128	; 0x80
 8002f5a:	d1ca      	bne.n	8002ef2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f72:	e02d      	b.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f88d 	bl	8003094 <I2C_IsAcknowledgeFailed>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e02d      	b.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d021      	beq.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8c:	f7fe fe96 	bl	8001cbc <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d302      	bcc.n	8002fa2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d116      	bne.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e007      	b.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d1ca      	bne.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ff4:	e042      	b.n	800307c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b10      	cmp	r3, #16
 8003002:	d119      	bne.n	8003038 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0210 	mvn.w	r2, #16
 800300c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e029      	b.n	800308c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003038:	f7fe fe40 	bl	8001cbc <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	d302      	bcc.n	800304e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e007      	b.n	800308c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003086:	2b40      	cmp	r3, #64	; 0x40
 8003088:	d1b5      	bne.n	8002ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030aa:	d11b      	bne.n	80030e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	f043 0204 	orr.w	r2, r3, #4
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e26c      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8087 	beq.w	800321e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003110:	4b92      	ldr	r3, [pc, #584]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b04      	cmp	r3, #4
 800311a:	d00c      	beq.n	8003136 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800311c:	4b8f      	ldr	r3, [pc, #572]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b08      	cmp	r3, #8
 8003126:	d112      	bne.n	800314e <HAL_RCC_OscConfig+0x5e>
 8003128:	4b8c      	ldr	r3, [pc, #560]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d10b      	bne.n	800314e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003136:	4b89      	ldr	r3, [pc, #548]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d06c      	beq.n	800321c <HAL_RCC_OscConfig+0x12c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d168      	bne.n	800321c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e246      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003156:	d106      	bne.n	8003166 <HAL_RCC_OscConfig+0x76>
 8003158:	4b80      	ldr	r3, [pc, #512]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a7f      	ldr	r2, [pc, #508]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 800315e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	e02e      	b.n	80031c4 <HAL_RCC_OscConfig+0xd4>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x98>
 800316e:	4b7b      	ldr	r3, [pc, #492]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a7a      	ldr	r2, [pc, #488]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	4b78      	ldr	r3, [pc, #480]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a77      	ldr	r2, [pc, #476]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e01d      	b.n	80031c4 <HAL_RCC_OscConfig+0xd4>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0xbc>
 8003192:	4b72      	ldr	r3, [pc, #456]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a71      	ldr	r2, [pc, #452]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	4b6f      	ldr	r3, [pc, #444]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a6e      	ldr	r2, [pc, #440]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e00b      	b.n	80031c4 <HAL_RCC_OscConfig+0xd4>
 80031ac:	4b6b      	ldr	r3, [pc, #428]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a6a      	ldr	r2, [pc, #424]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b68      	ldr	r3, [pc, #416]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a67      	ldr	r2, [pc, #412]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d013      	beq.n	80031f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fe fd76 	bl	8001cbc <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d4:	f7fe fd72 	bl	8001cbc <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	; 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e1fa      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	4b5d      	ldr	r3, [pc, #372]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0xe4>
 80031f2:	e014      	b.n	800321e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe fd62 	bl	8001cbc <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fe fd5e 	bl	8001cbc <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e1e6      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	4b53      	ldr	r3, [pc, #332]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x10c>
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d063      	beq.n	80032f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800322a:	4b4c      	ldr	r3, [pc, #304]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003236:	4b49      	ldr	r3, [pc, #292]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b08      	cmp	r3, #8
 8003240:	d11c      	bne.n	800327c <HAL_RCC_OscConfig+0x18c>
 8003242:	4b46      	ldr	r3, [pc, #280]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d116      	bne.n	800327c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324e:	4b43      	ldr	r3, [pc, #268]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_RCC_OscConfig+0x176>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e1ba      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003266:	4b3d      	ldr	r3, [pc, #244]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4939      	ldr	r1, [pc, #228]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	e03a      	b.n	80032f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d020      	beq.n	80032c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003284:	4b36      	ldr	r3, [pc, #216]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe fd17 	bl	8001cbc <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003292:	f7fe fd13 	bl	8001cbc <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e19b      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a4:	4b2d      	ldr	r3, [pc, #180]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b0:	4b2a      	ldr	r3, [pc, #168]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4927      	ldr	r1, [pc, #156]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]
 80032c4:	e015      	b.n	80032f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c6:	4b26      	ldr	r3, [pc, #152]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fe fcf6 	bl	8001cbc <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d4:	f7fe fcf2 	bl	8001cbc <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e17a      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	4b1d      	ldr	r3, [pc, #116]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d03a      	beq.n	8003374 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d019      	beq.n	800333a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003306:	4b17      	ldr	r3, [pc, #92]	; (8003364 <HAL_RCC_OscConfig+0x274>)
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330c:	f7fe fcd6 	bl	8001cbc <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003314:	f7fe fcd2 	bl	8001cbc <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e15a      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003326:	4b0d      	ldr	r3, [pc, #52]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003332:	2001      	movs	r0, #1
 8003334:	f000 fada 	bl	80038ec <RCC_Delay>
 8003338:	e01c      	b.n	8003374 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <HAL_RCC_OscConfig+0x274>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003340:	f7fe fcbc 	bl	8001cbc <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003346:	e00f      	b.n	8003368 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003348:	f7fe fcb8 	bl	8001cbc <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d908      	bls.n	8003368 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e140      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000
 8003360:	42420000 	.word	0x42420000
 8003364:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	4b9e      	ldr	r3, [pc, #632]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e9      	bne.n	8003348 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80a6 	beq.w	80034ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4b97      	ldr	r3, [pc, #604]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10d      	bne.n	80033ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	4b94      	ldr	r3, [pc, #592]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	4a93      	ldr	r2, [pc, #588]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339c:	61d3      	str	r3, [r2, #28]
 800339e:	4b91      	ldr	r3, [pc, #580]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033aa:	2301      	movs	r3, #1
 80033ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ae:	4b8e      	ldr	r3, [pc, #568]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d118      	bne.n	80033ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ba:	4b8b      	ldr	r3, [pc, #556]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a8a      	ldr	r2, [pc, #552]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80033c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c6:	f7fe fc79 	bl	8001cbc <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ce:	f7fe fc75 	bl	8001cbc <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b64      	cmp	r3, #100	; 0x64
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e0fd      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e0:	4b81      	ldr	r3, [pc, #516]	; (80035e8 <HAL_RCC_OscConfig+0x4f8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d106      	bne.n	8003402 <HAL_RCC_OscConfig+0x312>
 80033f4:	4b7b      	ldr	r3, [pc, #492]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	4a7a      	ldr	r2, [pc, #488]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6213      	str	r3, [r2, #32]
 8003400:	e02d      	b.n	800345e <HAL_RCC_OscConfig+0x36e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x334>
 800340a:	4b76      	ldr	r3, [pc, #472]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4a75      	ldr	r2, [pc, #468]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6213      	str	r3, [r2, #32]
 8003416:	4b73      	ldr	r3, [pc, #460]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a72      	ldr	r2, [pc, #456]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 800341c:	f023 0304 	bic.w	r3, r3, #4
 8003420:	6213      	str	r3, [r2, #32]
 8003422:	e01c      	b.n	800345e <HAL_RCC_OscConfig+0x36e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b05      	cmp	r3, #5
 800342a:	d10c      	bne.n	8003446 <HAL_RCC_OscConfig+0x356>
 800342c:	4b6d      	ldr	r3, [pc, #436]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4a6c      	ldr	r2, [pc, #432]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	6213      	str	r3, [r2, #32]
 8003438:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4a69      	ldr	r2, [pc, #420]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6213      	str	r3, [r2, #32]
 8003444:	e00b      	b.n	800345e <HAL_RCC_OscConfig+0x36e>
 8003446:	4b67      	ldr	r3, [pc, #412]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4a66      	ldr	r2, [pc, #408]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	6213      	str	r3, [r2, #32]
 8003452:	4b64      	ldr	r3, [pc, #400]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	4a63      	ldr	r2, [pc, #396]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003458:	f023 0304 	bic.w	r3, r3, #4
 800345c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d015      	beq.n	8003492 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003466:	f7fe fc29 	bl	8001cbc <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	e00a      	b.n	8003484 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7fe fc25 	bl	8001cbc <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	; 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0ab      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003484:	4b57      	ldr	r3, [pc, #348]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ee      	beq.n	800346e <HAL_RCC_OscConfig+0x37e>
 8003490:	e014      	b.n	80034bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003492:	f7fe fc13 	bl	8001cbc <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fe fc0f 	bl	8001cbc <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e095      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ee      	bne.n	800349a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4b48      	ldr	r3, [pc, #288]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	4a47      	ldr	r2, [pc, #284]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8081 	beq.w	80035da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034d8:	4b42      	ldr	r3, [pc, #264]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d061      	beq.n	80035a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d146      	bne.n	800357a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ec:	4b3f      	ldr	r3, [pc, #252]	; (80035ec <HAL_RCC_OscConfig+0x4fc>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7fe fbe3 	bl	8001cbc <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fe fbdf 	bl	8001cbc <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e067      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350c:	4b35      	ldr	r3, [pc, #212]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f0      	bne.n	80034fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d108      	bne.n	8003534 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003522:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	492d      	ldr	r1, [pc, #180]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003534:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a19      	ldr	r1, [r3, #32]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	430b      	orrs	r3, r1
 8003546:	4927      	ldr	r1, [pc, #156]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800354c:	4b27      	ldr	r3, [pc, #156]	; (80035ec <HAL_RCC_OscConfig+0x4fc>)
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fe fbb3 	bl	8001cbc <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355a:	f7fe fbaf 	bl	8001cbc <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e037      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800356c:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x46a>
 8003578:	e02f      	b.n	80035da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <HAL_RCC_OscConfig+0x4fc>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fb9c 	bl	8001cbc <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fe fb98 	bl	8001cbc <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e020      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x498>
 80035a6:	e018      	b.n	80035da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e013      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_OscConfig+0x4f4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d106      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40007000 	.word	0x40007000
 80035ec:	42420060 	.word	0x42420060

080035f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0d0      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003604:	4b6a      	ldr	r3, [pc, #424]	; (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d910      	bls.n	8003634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b67      	ldr	r3, [pc, #412]	; (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 0207 	bic.w	r2, r3, #7
 800361a:	4965      	ldr	r1, [pc, #404]	; (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0b8      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d020      	beq.n	8003682 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800364c:	4b59      	ldr	r3, [pc, #356]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4a58      	ldr	r2, [pc, #352]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003656:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003664:	4b53      	ldr	r3, [pc, #332]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a52      	ldr	r2, [pc, #328]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800366e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003670:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	494d      	ldr	r1, [pc, #308]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d040      	beq.n	8003710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d115      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e07f      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ae:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e073      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036be:	4b3d      	ldr	r3, [pc, #244]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e06b      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ce:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f023 0203 	bic.w	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4936      	ldr	r1, [pc, #216]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e0:	f7fe faec 	bl	8001cbc <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e8:	f7fe fae8 	bl	8001cbc <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e053      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	4b2d      	ldr	r3, [pc, #180]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 020c 	and.w	r2, r3, #12
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	429a      	cmp	r2, r3
 800370e:	d1eb      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003710:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d210      	bcs.n	8003740 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 0207 	bic.w	r2, r3, #7
 8003726:	4922      	ldr	r1, [pc, #136]	; (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e032      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4916      	ldr	r1, [pc, #88]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	490e      	ldr	r1, [pc, #56]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800377e:	f000 f821 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8003782:	4601      	mov	r1, r0
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	4a0a      	ldr	r2, [pc, #40]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003790:	5cd3      	ldrb	r3, [r2, r3]
 8003792:	fa21 f303 	lsr.w	r3, r1, r3
 8003796:	4a09      	ldr	r2, [pc, #36]	; (80037bc <HAL_RCC_ClockConfig+0x1cc>)
 8003798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_RCC_ClockConfig+0x1d0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe fa4a 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40022000 	.word	0x40022000
 80037b4:	40021000 	.word	0x40021000
 80037b8:	08007978 	.word	0x08007978
 80037bc:	20000000 	.word	0x20000000
 80037c0:	20000004 	.word	0x20000004

080037c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c4:	b490      	push	{r4, r7}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037ca:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037cc:	1d3c      	adds	r4, r7, #4
 80037ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037d4:	4b28      	ldr	r3, [pc, #160]	; (8003878 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	2300      	movs	r3, #0
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037ee:	4b23      	ldr	r3, [pc, #140]	; (800387c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d002      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x40>
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d003      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x46>
 8003802:	e02d      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003804:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003806:	623b      	str	r3, [r7, #32]
      break;
 8003808:	e02d      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	0c9b      	lsrs	r3, r3, #18
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003816:	4413      	add	r3, r2
 8003818:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800381c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d013      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003828:	4b14      	ldr	r3, [pc, #80]	; (800387c <HAL_RCC_GetSysClockFreq+0xb8>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	0c5b      	lsrs	r3, r3, #17
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003836:	4413      	add	r3, r2
 8003838:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800383c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	4a0f      	ldr	r2, [pc, #60]	; (8003880 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003842:	fb02 f203 	mul.w	r2, r2, r3
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	e004      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4a0c      	ldr	r2, [pc, #48]	; (8003884 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003854:	fb02 f303 	mul.w	r3, r2, r3
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	623b      	str	r3, [r7, #32]
      break;
 800385e:	e002      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003862:	623b      	str	r3, [r7, #32]
      break;
 8003864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003866:	6a3b      	ldr	r3, [r7, #32]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3728      	adds	r7, #40	; 0x28
 800386c:	46bd      	mov	sp, r7
 800386e:	bc90      	pop	{r4, r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	08007964 	.word	0x08007964
 8003878:	08007974 	.word	0x08007974
 800387c:	40021000 	.word	0x40021000
 8003880:	007a1200 	.word	0x007a1200
 8003884:	003d0900 	.word	0x003d0900

08003888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800388c:	4b02      	ldr	r3, [pc, #8]	; (8003898 <HAL_RCC_GetHCLKFreq+0x10>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	20000000 	.word	0x20000000

0800389c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a0:	f7ff fff2 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038a4:	4601      	mov	r1, r0
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4a03      	ldr	r2, [pc, #12]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b2:	5cd3      	ldrb	r3, [r2, r3]
 80038b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	08007988 	.word	0x08007988

080038c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038c8:	f7ff ffde 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038cc:	4601      	mov	r1, r0
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	0adb      	lsrs	r3, r3, #11
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	4a03      	ldr	r2, [pc, #12]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038da:	5cd3      	ldrb	r3, [r2, r3]
 80038dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000
 80038e8:	08007988 	.word	0x08007988

080038ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <RCC_Delay+0x34>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <RCC_Delay+0x38>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0a5b      	lsrs	r3, r3, #9
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003908:	bf00      	nop
  }
  while (Delay --);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	60fa      	str	r2, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f9      	bne.n	8003908 <RCC_Delay+0x1c>
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000000 	.word	0x20000000
 8003924:	10624dd3 	.word	0x10624dd3

08003928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e03f      	b.n	80039ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fd fff4 	bl	800193c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2224      	movs	r2, #36	; 0x24
 8003958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800396a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f90b 	bl	8003b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b088      	sub	sp, #32
 80039c6:	af02      	add	r7, sp, #8
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b20      	cmp	r3, #32
 80039e0:	f040 8083 	bne.w	8003aea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_UART_Transmit+0x2e>
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e07b      	b.n	8003aec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Transmit+0x40>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e074      	b.n	8003aec <HAL_UART_Transmit+0x12a>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2221      	movs	r2, #33	; 0x21
 8003a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a18:	f7fe f950 	bl	8001cbc <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a2a:	e042      	b.n	8003ab2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a42:	d122      	bne.n	8003a8a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2180      	movs	r1, #128	; 0x80
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f850 	bl	8003af4 <UART_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e046      	b.n	8003aec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a70:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	e017      	b.n	8003ab2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	3301      	adds	r3, #1
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	e013      	b.n	8003ab2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f82d 	bl	8003af4 <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e023      	b.n	8003aec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	60ba      	str	r2, [r7, #8]
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1b7      	bne.n	8003a2c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2140      	movs	r1, #64	; 0x40
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f814 	bl	8003af4 <UART_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e00a      	b.n	8003aec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e000      	b.n	8003aec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003aea:	2302      	movs	r3, #2
  }
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b04:	e02c      	b.n	8003b60 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d028      	beq.n	8003b60 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b14:	f7fe f8d2 	bl	8001cbc <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d21d      	bcs.n	8003b60 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b32:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e00f      	b.n	8003b80 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d0c3      	beq.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bc2:	f023 030c 	bic.w	r3, r3, #12
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	68f9      	ldr	r1, [r7, #12]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a52      	ldr	r2, [pc, #328]	; (8003d34 <UART_SetConfig+0x1ac>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d14e      	bne.n	8003c8e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bf0:	f7ff fe68 	bl	80038c4 <HAL_RCC_GetPCLK2Freq>
 8003bf4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009a      	lsls	r2, r3, #2
 8003c00:	441a      	add	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	4a4a      	ldr	r2, [pc, #296]	; (8003d38 <UART_SetConfig+0x1b0>)
 8003c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	0119      	lsls	r1, r3, #4
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009a      	lsls	r2, r3, #2
 8003c20:	441a      	add	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c2c:	4b42      	ldr	r3, [pc, #264]	; (8003d38 <UART_SetConfig+0x1b0>)
 8003c2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	2064      	movs	r0, #100	; 0x64
 8003c36:	fb00 f303 	mul.w	r3, r0, r3
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	3332      	adds	r3, #50	; 0x32
 8003c40:	4a3d      	ldr	r2, [pc, #244]	; (8003d38 <UART_SetConfig+0x1b0>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c4c:	4419      	add	r1, r3
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009a      	lsls	r2, r3, #2
 8003c58:	441a      	add	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c64:	4b34      	ldr	r3, [pc, #208]	; (8003d38 <UART_SetConfig+0x1b0>)
 8003c66:	fba3 0302 	umull	r0, r3, r3, r2
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2064      	movs	r0, #100	; 0x64
 8003c6e:	fb00 f303 	mul.w	r3, r0, r3
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	3332      	adds	r3, #50	; 0x32
 8003c78:	4a2f      	ldr	r2, [pc, #188]	; (8003d38 <UART_SetConfig+0x1b0>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	f003 020f 	and.w	r2, r3, #15
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	440a      	add	r2, r1
 8003c8a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003c8c:	e04d      	b.n	8003d2a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c8e:	f7ff fe05 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 8003c92:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009a      	lsls	r2, r3, #2
 8003c9e:	441a      	add	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003caa:	4a23      	ldr	r2, [pc, #140]	; (8003d38 <UART_SetConfig+0x1b0>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	0119      	lsls	r1, r3, #4
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	009a      	lsls	r2, r3, #2
 8003cbe:	441a      	add	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cca:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <UART_SetConfig+0x1b0>)
 8003ccc:	fba3 0302 	umull	r0, r3, r3, r2
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	2064      	movs	r0, #100	; 0x64
 8003cd4:	fb00 f303 	mul.w	r3, r0, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	3332      	adds	r3, #50	; 0x32
 8003cde:	4a16      	ldr	r2, [pc, #88]	; (8003d38 <UART_SetConfig+0x1b0>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cea:	4419      	add	r1, r3
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009a      	lsls	r2, r3, #2
 8003cf6:	441a      	add	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d02:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <UART_SetConfig+0x1b0>)
 8003d04:	fba3 0302 	umull	r0, r3, r3, r2
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	2064      	movs	r0, #100	; 0x64
 8003d0c:	fb00 f303 	mul.w	r3, r0, r3
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	3332      	adds	r3, #50	; 0x32
 8003d16:	4a08      	ldr	r2, [pc, #32]	; (8003d38 <UART_SetConfig+0x1b0>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	f003 020f 	and.w	r2, r3, #15
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	440a      	add	r2, r1
 8003d28:	609a      	str	r2, [r3, #8]
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40013800 	.word	0x40013800
 8003d38:	51eb851f 	.word	0x51eb851f

08003d3c <__errno>:
 8003d3c:	4b01      	ldr	r3, [pc, #4]	; (8003d44 <__errno+0x8>)
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	2000000c 	.word	0x2000000c

08003d48 <__libc_init_array>:
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	2500      	movs	r5, #0
 8003d4c:	4e0c      	ldr	r6, [pc, #48]	; (8003d80 <__libc_init_array+0x38>)
 8003d4e:	4c0d      	ldr	r4, [pc, #52]	; (8003d84 <__libc_init_array+0x3c>)
 8003d50:	1ba4      	subs	r4, r4, r6
 8003d52:	10a4      	asrs	r4, r4, #2
 8003d54:	42a5      	cmp	r5, r4
 8003d56:	d109      	bne.n	8003d6c <__libc_init_array+0x24>
 8003d58:	f003 fdb6 	bl	80078c8 <_init>
 8003d5c:	2500      	movs	r5, #0
 8003d5e:	4e0a      	ldr	r6, [pc, #40]	; (8003d88 <__libc_init_array+0x40>)
 8003d60:	4c0a      	ldr	r4, [pc, #40]	; (8003d8c <__libc_init_array+0x44>)
 8003d62:	1ba4      	subs	r4, r4, r6
 8003d64:	10a4      	asrs	r4, r4, #2
 8003d66:	42a5      	cmp	r5, r4
 8003d68:	d105      	bne.n	8003d76 <__libc_init_array+0x2e>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d70:	4798      	blx	r3
 8003d72:	3501      	adds	r5, #1
 8003d74:	e7ee      	b.n	8003d54 <__libc_init_array+0xc>
 8003d76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d7a:	4798      	blx	r3
 8003d7c:	3501      	adds	r5, #1
 8003d7e:	e7f2      	b.n	8003d66 <__libc_init_array+0x1e>
 8003d80:	08007ce0 	.word	0x08007ce0
 8003d84:	08007ce0 	.word	0x08007ce0
 8003d88:	08007ce0 	.word	0x08007ce0
 8003d8c:	08007ce4 	.word	0x08007ce4

08003d90 <memset>:
 8003d90:	4603      	mov	r3, r0
 8003d92:	4402      	add	r2, r0
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d100      	bne.n	8003d9a <memset+0xa>
 8003d98:	4770      	bx	lr
 8003d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d9e:	e7f9      	b.n	8003d94 <memset+0x4>

08003da0 <__cvt>:
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da6:	461e      	mov	r6, r3
 8003da8:	bfbb      	ittet	lt
 8003daa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003dae:	461e      	movlt	r6, r3
 8003db0:	2300      	movge	r3, #0
 8003db2:	232d      	movlt	r3, #45	; 0x2d
 8003db4:	b088      	sub	sp, #32
 8003db6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003db8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003dbc:	f027 0720 	bic.w	r7, r7, #32
 8003dc0:	2f46      	cmp	r7, #70	; 0x46
 8003dc2:	4614      	mov	r4, r2
 8003dc4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003dc6:	700b      	strb	r3, [r1, #0]
 8003dc8:	d004      	beq.n	8003dd4 <__cvt+0x34>
 8003dca:	2f45      	cmp	r7, #69	; 0x45
 8003dcc:	d100      	bne.n	8003dd0 <__cvt+0x30>
 8003dce:	3501      	adds	r5, #1
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e000      	b.n	8003dd6 <__cvt+0x36>
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	aa07      	add	r2, sp, #28
 8003dd8:	9204      	str	r2, [sp, #16]
 8003dda:	aa06      	add	r2, sp, #24
 8003ddc:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003de0:	e9cd 3500 	strd	r3, r5, [sp]
 8003de4:	4622      	mov	r2, r4
 8003de6:	4633      	mov	r3, r6
 8003de8:	f000 fdf6 	bl	80049d8 <_dtoa_r>
 8003dec:	2f47      	cmp	r7, #71	; 0x47
 8003dee:	4680      	mov	r8, r0
 8003df0:	d102      	bne.n	8003df8 <__cvt+0x58>
 8003df2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003df4:	07db      	lsls	r3, r3, #31
 8003df6:	d526      	bpl.n	8003e46 <__cvt+0xa6>
 8003df8:	2f46      	cmp	r7, #70	; 0x46
 8003dfa:	eb08 0905 	add.w	r9, r8, r5
 8003dfe:	d111      	bne.n	8003e24 <__cvt+0x84>
 8003e00:	f898 3000 	ldrb.w	r3, [r8]
 8003e04:	2b30      	cmp	r3, #48	; 0x30
 8003e06:	d10a      	bne.n	8003e1e <__cvt+0x7e>
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	4631      	mov	r1, r6
 8003e10:	f7fc fdca 	bl	80009a8 <__aeabi_dcmpeq>
 8003e14:	b918      	cbnz	r0, 8003e1e <__cvt+0x7e>
 8003e16:	f1c5 0501 	rsb	r5, r5, #1
 8003e1a:	f8ca 5000 	str.w	r5, [sl]
 8003e1e:	f8da 3000 	ldr.w	r3, [sl]
 8003e22:	4499      	add	r9, r3
 8003e24:	2200      	movs	r2, #0
 8003e26:	2300      	movs	r3, #0
 8003e28:	4620      	mov	r0, r4
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	f7fc fdbc 	bl	80009a8 <__aeabi_dcmpeq>
 8003e30:	b938      	cbnz	r0, 8003e42 <__cvt+0xa2>
 8003e32:	2230      	movs	r2, #48	; 0x30
 8003e34:	9b07      	ldr	r3, [sp, #28]
 8003e36:	454b      	cmp	r3, r9
 8003e38:	d205      	bcs.n	8003e46 <__cvt+0xa6>
 8003e3a:	1c59      	adds	r1, r3, #1
 8003e3c:	9107      	str	r1, [sp, #28]
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e7f8      	b.n	8003e34 <__cvt+0x94>
 8003e42:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e46:	4640      	mov	r0, r8
 8003e48:	9b07      	ldr	r3, [sp, #28]
 8003e4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003e4c:	eba3 0308 	sub.w	r3, r3, r8
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	b008      	add	sp, #32
 8003e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003e58 <__exponent>:
 8003e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e5a:	2900      	cmp	r1, #0
 8003e5c:	bfb4      	ite	lt
 8003e5e:	232d      	movlt	r3, #45	; 0x2d
 8003e60:	232b      	movge	r3, #43	; 0x2b
 8003e62:	4604      	mov	r4, r0
 8003e64:	bfb8      	it	lt
 8003e66:	4249      	neglt	r1, r1
 8003e68:	2909      	cmp	r1, #9
 8003e6a:	f804 2b02 	strb.w	r2, [r4], #2
 8003e6e:	7043      	strb	r3, [r0, #1]
 8003e70:	dd21      	ble.n	8003eb6 <__exponent+0x5e>
 8003e72:	f10d 0307 	add.w	r3, sp, #7
 8003e76:	461f      	mov	r7, r3
 8003e78:	260a      	movs	r6, #10
 8003e7a:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e7e:	fb06 1115 	mls	r1, r6, r5, r1
 8003e82:	2d09      	cmp	r5, #9
 8003e84:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003e88:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e8c:	f103 32ff 	add.w	r2, r3, #4294967295
 8003e90:	4629      	mov	r1, r5
 8003e92:	dc09      	bgt.n	8003ea8 <__exponent+0x50>
 8003e94:	3130      	adds	r1, #48	; 0x30
 8003e96:	3b02      	subs	r3, #2
 8003e98:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e9c:	42bb      	cmp	r3, r7
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	d304      	bcc.n	8003eac <__exponent+0x54>
 8003ea2:	1a10      	subs	r0, r2, r0
 8003ea4:	b003      	add	sp, #12
 8003ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	e7e6      	b.n	8003e7a <__exponent+0x22>
 8003eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eb0:	f804 2b01 	strb.w	r2, [r4], #1
 8003eb4:	e7f2      	b.n	8003e9c <__exponent+0x44>
 8003eb6:	2330      	movs	r3, #48	; 0x30
 8003eb8:	4419      	add	r1, r3
 8003eba:	7083      	strb	r3, [r0, #2]
 8003ebc:	1d02      	adds	r2, r0, #4
 8003ebe:	70c1      	strb	r1, [r0, #3]
 8003ec0:	e7ef      	b.n	8003ea2 <__exponent+0x4a>
	...

08003ec4 <_printf_float>:
 8003ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec8:	b091      	sub	sp, #68	; 0x44
 8003eca:	460c      	mov	r4, r1
 8003ecc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003ece:	4693      	mov	fp, r2
 8003ed0:	461e      	mov	r6, r3
 8003ed2:	4605      	mov	r5, r0
 8003ed4:	f001 fcae 	bl	8005834 <_localeconv_r>
 8003ed8:	6803      	ldr	r3, [r0, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ede:	f7fc f937 	bl	8000150 <strlen>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	900a      	str	r0, [sp, #40]	; 0x28
 8003eea:	3307      	adds	r3, #7
 8003eec:	f023 0307 	bic.w	r3, r3, #7
 8003ef0:	f103 0208 	add.w	r2, r3, #8
 8003ef4:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003ef8:	f8d4 a000 	ldr.w	sl, [r4]
 8003efc:	603a      	str	r2, [r7, #0]
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f06:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003f0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f10:	f04f 32ff 	mov.w	r2, #4294967295
 8003f14:	4ba6      	ldr	r3, [pc, #664]	; (80041b0 <_printf_float+0x2ec>)
 8003f16:	4638      	mov	r0, r7
 8003f18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f1a:	f7fc fd77 	bl	8000a0c <__aeabi_dcmpun>
 8003f1e:	bb68      	cbnz	r0, 8003f7c <_printf_float+0xb8>
 8003f20:	f04f 32ff 	mov.w	r2, #4294967295
 8003f24:	4ba2      	ldr	r3, [pc, #648]	; (80041b0 <_printf_float+0x2ec>)
 8003f26:	4638      	mov	r0, r7
 8003f28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f2a:	f7fc fd51 	bl	80009d0 <__aeabi_dcmple>
 8003f2e:	bb28      	cbnz	r0, 8003f7c <_printf_float+0xb8>
 8003f30:	2200      	movs	r2, #0
 8003f32:	2300      	movs	r3, #0
 8003f34:	4638      	mov	r0, r7
 8003f36:	4649      	mov	r1, r9
 8003f38:	f7fc fd40 	bl	80009bc <__aeabi_dcmplt>
 8003f3c:	b110      	cbz	r0, 8003f44 <_printf_float+0x80>
 8003f3e:	232d      	movs	r3, #45	; 0x2d
 8003f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f44:	4f9b      	ldr	r7, [pc, #620]	; (80041b4 <_printf_float+0x2f0>)
 8003f46:	4b9c      	ldr	r3, [pc, #624]	; (80041b8 <_printf_float+0x2f4>)
 8003f48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f4c:	bf98      	it	ls
 8003f4e:	461f      	movls	r7, r3
 8003f50:	2303      	movs	r3, #3
 8003f52:	f04f 0900 	mov.w	r9, #0
 8003f56:	6123      	str	r3, [r4, #16]
 8003f58:	f02a 0304 	bic.w	r3, sl, #4
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	9600      	str	r6, [sp, #0]
 8003f60:	465b      	mov	r3, fp
 8003f62:	aa0f      	add	r2, sp, #60	; 0x3c
 8003f64:	4621      	mov	r1, r4
 8003f66:	4628      	mov	r0, r5
 8003f68:	f000 f9e2 	bl	8004330 <_printf_common>
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	f040 8090 	bne.w	8004092 <_printf_float+0x1ce>
 8003f72:	f04f 30ff 	mov.w	r0, #4294967295
 8003f76:	b011      	add	sp, #68	; 0x44
 8003f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7c:	463a      	mov	r2, r7
 8003f7e:	464b      	mov	r3, r9
 8003f80:	4638      	mov	r0, r7
 8003f82:	4649      	mov	r1, r9
 8003f84:	f7fc fd42 	bl	8000a0c <__aeabi_dcmpun>
 8003f88:	b110      	cbz	r0, 8003f90 <_printf_float+0xcc>
 8003f8a:	4f8c      	ldr	r7, [pc, #560]	; (80041bc <_printf_float+0x2f8>)
 8003f8c:	4b8c      	ldr	r3, [pc, #560]	; (80041c0 <_printf_float+0x2fc>)
 8003f8e:	e7db      	b.n	8003f48 <_printf_float+0x84>
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003f96:	1c59      	adds	r1, r3, #1
 8003f98:	a80d      	add	r0, sp, #52	; 0x34
 8003f9a:	a90e      	add	r1, sp, #56	; 0x38
 8003f9c:	d140      	bne.n	8004020 <_printf_float+0x15c>
 8003f9e:	2306      	movs	r3, #6
 8003fa0:	6063      	str	r3, [r4, #4]
 8003fa2:	f04f 0c00 	mov.w	ip, #0
 8003fa6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003faa:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003fae:	6863      	ldr	r3, [r4, #4]
 8003fb0:	6022      	str	r2, [r4, #0]
 8003fb2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	463a      	mov	r2, r7
 8003fba:	464b      	mov	r3, r9
 8003fbc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	f7ff feed 	bl	8003da0 <__cvt>
 8003fc6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003fca:	2b47      	cmp	r3, #71	; 0x47
 8003fcc:	4607      	mov	r7, r0
 8003fce:	d109      	bne.n	8003fe4 <_printf_float+0x120>
 8003fd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fd2:	1cd8      	adds	r0, r3, #3
 8003fd4:	db02      	blt.n	8003fdc <_printf_float+0x118>
 8003fd6:	6862      	ldr	r2, [r4, #4]
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	dd47      	ble.n	800406c <_printf_float+0x1a8>
 8003fdc:	f1a8 0802 	sub.w	r8, r8, #2
 8003fe0:	fa5f f888 	uxtb.w	r8, r8
 8003fe4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003fe8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003fea:	d824      	bhi.n	8004036 <_printf_float+0x172>
 8003fec:	3901      	subs	r1, #1
 8003fee:	4642      	mov	r2, r8
 8003ff0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003ff4:	910d      	str	r1, [sp, #52]	; 0x34
 8003ff6:	f7ff ff2f 	bl	8003e58 <__exponent>
 8003ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ffc:	4681      	mov	r9, r0
 8003ffe:	1813      	adds	r3, r2, r0
 8004000:	2a01      	cmp	r2, #1
 8004002:	6123      	str	r3, [r4, #16]
 8004004:	dc02      	bgt.n	800400c <_printf_float+0x148>
 8004006:	6822      	ldr	r2, [r4, #0]
 8004008:	07d1      	lsls	r1, r2, #31
 800400a:	d501      	bpl.n	8004010 <_printf_float+0x14c>
 800400c:	3301      	adds	r3, #1
 800400e:	6123      	str	r3, [r4, #16]
 8004010:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0a2      	beq.n	8003f5e <_printf_float+0x9a>
 8004018:	232d      	movs	r3, #45	; 0x2d
 800401a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800401e:	e79e      	b.n	8003f5e <_printf_float+0x9a>
 8004020:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004024:	f000 816e 	beq.w	8004304 <_printf_float+0x440>
 8004028:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800402c:	d1b9      	bne.n	8003fa2 <_printf_float+0xde>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1b7      	bne.n	8003fa2 <_printf_float+0xde>
 8004032:	2301      	movs	r3, #1
 8004034:	e7b4      	b.n	8003fa0 <_printf_float+0xdc>
 8004036:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800403a:	d119      	bne.n	8004070 <_printf_float+0x1ac>
 800403c:	2900      	cmp	r1, #0
 800403e:	6863      	ldr	r3, [r4, #4]
 8004040:	dd0c      	ble.n	800405c <_printf_float+0x198>
 8004042:	6121      	str	r1, [r4, #16]
 8004044:	b913      	cbnz	r3, 800404c <_printf_float+0x188>
 8004046:	6822      	ldr	r2, [r4, #0]
 8004048:	07d2      	lsls	r2, r2, #31
 800404a:	d502      	bpl.n	8004052 <_printf_float+0x18e>
 800404c:	3301      	adds	r3, #1
 800404e:	440b      	add	r3, r1
 8004050:	6123      	str	r3, [r4, #16]
 8004052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004054:	f04f 0900 	mov.w	r9, #0
 8004058:	65a3      	str	r3, [r4, #88]	; 0x58
 800405a:	e7d9      	b.n	8004010 <_printf_float+0x14c>
 800405c:	b913      	cbnz	r3, 8004064 <_printf_float+0x1a0>
 800405e:	6822      	ldr	r2, [r4, #0]
 8004060:	07d0      	lsls	r0, r2, #31
 8004062:	d501      	bpl.n	8004068 <_printf_float+0x1a4>
 8004064:	3302      	adds	r3, #2
 8004066:	e7f3      	b.n	8004050 <_printf_float+0x18c>
 8004068:	2301      	movs	r3, #1
 800406a:	e7f1      	b.n	8004050 <_printf_float+0x18c>
 800406c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004070:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004074:	4293      	cmp	r3, r2
 8004076:	db05      	blt.n	8004084 <_printf_float+0x1c0>
 8004078:	6822      	ldr	r2, [r4, #0]
 800407a:	6123      	str	r3, [r4, #16]
 800407c:	07d1      	lsls	r1, r2, #31
 800407e:	d5e8      	bpl.n	8004052 <_printf_float+0x18e>
 8004080:	3301      	adds	r3, #1
 8004082:	e7e5      	b.n	8004050 <_printf_float+0x18c>
 8004084:	2b00      	cmp	r3, #0
 8004086:	bfcc      	ite	gt
 8004088:	2301      	movgt	r3, #1
 800408a:	f1c3 0302 	rsble	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	e7de      	b.n	8004050 <_printf_float+0x18c>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	055a      	lsls	r2, r3, #21
 8004096:	d407      	bmi.n	80040a8 <_printf_float+0x1e4>
 8004098:	6923      	ldr	r3, [r4, #16]
 800409a:	463a      	mov	r2, r7
 800409c:	4659      	mov	r1, fp
 800409e:	4628      	mov	r0, r5
 80040a0:	47b0      	blx	r6
 80040a2:	3001      	adds	r0, #1
 80040a4:	d129      	bne.n	80040fa <_printf_float+0x236>
 80040a6:	e764      	b.n	8003f72 <_printf_float+0xae>
 80040a8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80040ac:	f240 80d7 	bls.w	800425e <_printf_float+0x39a>
 80040b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040b4:	2200      	movs	r2, #0
 80040b6:	2300      	movs	r3, #0
 80040b8:	f7fc fc76 	bl	80009a8 <__aeabi_dcmpeq>
 80040bc:	b388      	cbz	r0, 8004122 <_printf_float+0x25e>
 80040be:	2301      	movs	r3, #1
 80040c0:	4a40      	ldr	r2, [pc, #256]	; (80041c4 <_printf_float+0x300>)
 80040c2:	4659      	mov	r1, fp
 80040c4:	4628      	mov	r0, r5
 80040c6:	47b0      	blx	r6
 80040c8:	3001      	adds	r0, #1
 80040ca:	f43f af52 	beq.w	8003f72 <_printf_float+0xae>
 80040ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80040d2:	429a      	cmp	r2, r3
 80040d4:	db02      	blt.n	80040dc <_printf_float+0x218>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	07d8      	lsls	r0, r3, #31
 80040da:	d50e      	bpl.n	80040fa <_printf_float+0x236>
 80040dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040e0:	4659      	mov	r1, fp
 80040e2:	4628      	mov	r0, r5
 80040e4:	47b0      	blx	r6
 80040e6:	3001      	adds	r0, #1
 80040e8:	f43f af43 	beq.w	8003f72 <_printf_float+0xae>
 80040ec:	2700      	movs	r7, #0
 80040ee:	f104 081a 	add.w	r8, r4, #26
 80040f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040f4:	3b01      	subs	r3, #1
 80040f6:	42bb      	cmp	r3, r7
 80040f8:	dc09      	bgt.n	800410e <_printf_float+0x24a>
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	079f      	lsls	r7, r3, #30
 80040fe:	f100 80fd 	bmi.w	80042fc <_printf_float+0x438>
 8004102:	68e0      	ldr	r0, [r4, #12]
 8004104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004106:	4298      	cmp	r0, r3
 8004108:	bfb8      	it	lt
 800410a:	4618      	movlt	r0, r3
 800410c:	e733      	b.n	8003f76 <_printf_float+0xb2>
 800410e:	2301      	movs	r3, #1
 8004110:	4642      	mov	r2, r8
 8004112:	4659      	mov	r1, fp
 8004114:	4628      	mov	r0, r5
 8004116:	47b0      	blx	r6
 8004118:	3001      	adds	r0, #1
 800411a:	f43f af2a 	beq.w	8003f72 <_printf_float+0xae>
 800411e:	3701      	adds	r7, #1
 8004120:	e7e7      	b.n	80040f2 <_printf_float+0x22e>
 8004122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004124:	2b00      	cmp	r3, #0
 8004126:	dc2b      	bgt.n	8004180 <_printf_float+0x2bc>
 8004128:	2301      	movs	r3, #1
 800412a:	4a26      	ldr	r2, [pc, #152]	; (80041c4 <_printf_float+0x300>)
 800412c:	4659      	mov	r1, fp
 800412e:	4628      	mov	r0, r5
 8004130:	47b0      	blx	r6
 8004132:	3001      	adds	r0, #1
 8004134:	f43f af1d 	beq.w	8003f72 <_printf_float+0xae>
 8004138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800413a:	b923      	cbnz	r3, 8004146 <_printf_float+0x282>
 800413c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800413e:	b913      	cbnz	r3, 8004146 <_printf_float+0x282>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	07d9      	lsls	r1, r3, #31
 8004144:	d5d9      	bpl.n	80040fa <_printf_float+0x236>
 8004146:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800414a:	4659      	mov	r1, fp
 800414c:	4628      	mov	r0, r5
 800414e:	47b0      	blx	r6
 8004150:	3001      	adds	r0, #1
 8004152:	f43f af0e 	beq.w	8003f72 <_printf_float+0xae>
 8004156:	f04f 0800 	mov.w	r8, #0
 800415a:	f104 091a 	add.w	r9, r4, #26
 800415e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004160:	425b      	negs	r3, r3
 8004162:	4543      	cmp	r3, r8
 8004164:	dc01      	bgt.n	800416a <_printf_float+0x2a6>
 8004166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004168:	e797      	b.n	800409a <_printf_float+0x1d6>
 800416a:	2301      	movs	r3, #1
 800416c:	464a      	mov	r2, r9
 800416e:	4659      	mov	r1, fp
 8004170:	4628      	mov	r0, r5
 8004172:	47b0      	blx	r6
 8004174:	3001      	adds	r0, #1
 8004176:	f43f aefc 	beq.w	8003f72 <_printf_float+0xae>
 800417a:	f108 0801 	add.w	r8, r8, #1
 800417e:	e7ee      	b.n	800415e <_printf_float+0x29a>
 8004180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004182:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004184:	429a      	cmp	r2, r3
 8004186:	bfa8      	it	ge
 8004188:	461a      	movge	r2, r3
 800418a:	2a00      	cmp	r2, #0
 800418c:	4690      	mov	r8, r2
 800418e:	dd07      	ble.n	80041a0 <_printf_float+0x2dc>
 8004190:	4613      	mov	r3, r2
 8004192:	4659      	mov	r1, fp
 8004194:	463a      	mov	r2, r7
 8004196:	4628      	mov	r0, r5
 8004198:	47b0      	blx	r6
 800419a:	3001      	adds	r0, #1
 800419c:	f43f aee9 	beq.w	8003f72 <_printf_float+0xae>
 80041a0:	f104 031a 	add.w	r3, r4, #26
 80041a4:	f04f 0a00 	mov.w	sl, #0
 80041a8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80041ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80041ae:	e015      	b.n	80041dc <_printf_float+0x318>
 80041b0:	7fefffff 	.word	0x7fefffff
 80041b4:	08007998 	.word	0x08007998
 80041b8:	08007994 	.word	0x08007994
 80041bc:	080079a0 	.word	0x080079a0
 80041c0:	0800799c 	.word	0x0800799c
 80041c4:	080079a4 	.word	0x080079a4
 80041c8:	2301      	movs	r3, #1
 80041ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041cc:	4659      	mov	r1, fp
 80041ce:	4628      	mov	r0, r5
 80041d0:	47b0      	blx	r6
 80041d2:	3001      	adds	r0, #1
 80041d4:	f43f aecd 	beq.w	8003f72 <_printf_float+0xae>
 80041d8:	f10a 0a01 	add.w	sl, sl, #1
 80041dc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80041e0:	eba9 0308 	sub.w	r3, r9, r8
 80041e4:	4553      	cmp	r3, sl
 80041e6:	dcef      	bgt.n	80041c8 <_printf_float+0x304>
 80041e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041ec:	429a      	cmp	r2, r3
 80041ee:	444f      	add	r7, r9
 80041f0:	db14      	blt.n	800421c <_printf_float+0x358>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	07da      	lsls	r2, r3, #31
 80041f6:	d411      	bmi.n	800421c <_printf_float+0x358>
 80041f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041fc:	eba3 0209 	sub.w	r2, r3, r9
 8004200:	eba3 0901 	sub.w	r9, r3, r1
 8004204:	4591      	cmp	r9, r2
 8004206:	bfa8      	it	ge
 8004208:	4691      	movge	r9, r2
 800420a:	f1b9 0f00 	cmp.w	r9, #0
 800420e:	dc0d      	bgt.n	800422c <_printf_float+0x368>
 8004210:	2700      	movs	r7, #0
 8004212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004216:	f104 081a 	add.w	r8, r4, #26
 800421a:	e018      	b.n	800424e <_printf_float+0x38a>
 800421c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004220:	4659      	mov	r1, fp
 8004222:	4628      	mov	r0, r5
 8004224:	47b0      	blx	r6
 8004226:	3001      	adds	r0, #1
 8004228:	d1e6      	bne.n	80041f8 <_printf_float+0x334>
 800422a:	e6a2      	b.n	8003f72 <_printf_float+0xae>
 800422c:	464b      	mov	r3, r9
 800422e:	463a      	mov	r2, r7
 8004230:	4659      	mov	r1, fp
 8004232:	4628      	mov	r0, r5
 8004234:	47b0      	blx	r6
 8004236:	3001      	adds	r0, #1
 8004238:	d1ea      	bne.n	8004210 <_printf_float+0x34c>
 800423a:	e69a      	b.n	8003f72 <_printf_float+0xae>
 800423c:	2301      	movs	r3, #1
 800423e:	4642      	mov	r2, r8
 8004240:	4659      	mov	r1, fp
 8004242:	4628      	mov	r0, r5
 8004244:	47b0      	blx	r6
 8004246:	3001      	adds	r0, #1
 8004248:	f43f ae93 	beq.w	8003f72 <_printf_float+0xae>
 800424c:	3701      	adds	r7, #1
 800424e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	eba3 0309 	sub.w	r3, r3, r9
 8004258:	42bb      	cmp	r3, r7
 800425a:	dcef      	bgt.n	800423c <_printf_float+0x378>
 800425c:	e74d      	b.n	80040fa <_printf_float+0x236>
 800425e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004260:	2a01      	cmp	r2, #1
 8004262:	dc01      	bgt.n	8004268 <_printf_float+0x3a4>
 8004264:	07db      	lsls	r3, r3, #31
 8004266:	d538      	bpl.n	80042da <_printf_float+0x416>
 8004268:	2301      	movs	r3, #1
 800426a:	463a      	mov	r2, r7
 800426c:	4659      	mov	r1, fp
 800426e:	4628      	mov	r0, r5
 8004270:	47b0      	blx	r6
 8004272:	3001      	adds	r0, #1
 8004274:	f43f ae7d 	beq.w	8003f72 <_printf_float+0xae>
 8004278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800427c:	4659      	mov	r1, fp
 800427e:	4628      	mov	r0, r5
 8004280:	47b0      	blx	r6
 8004282:	3001      	adds	r0, #1
 8004284:	f107 0701 	add.w	r7, r7, #1
 8004288:	f43f ae73 	beq.w	8003f72 <_printf_float+0xae>
 800428c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004292:	2200      	movs	r2, #0
 8004294:	f103 38ff 	add.w	r8, r3, #4294967295
 8004298:	2300      	movs	r3, #0
 800429a:	f7fc fb85 	bl	80009a8 <__aeabi_dcmpeq>
 800429e:	b9c0      	cbnz	r0, 80042d2 <_printf_float+0x40e>
 80042a0:	4643      	mov	r3, r8
 80042a2:	463a      	mov	r2, r7
 80042a4:	4659      	mov	r1, fp
 80042a6:	4628      	mov	r0, r5
 80042a8:	47b0      	blx	r6
 80042aa:	3001      	adds	r0, #1
 80042ac:	d10d      	bne.n	80042ca <_printf_float+0x406>
 80042ae:	e660      	b.n	8003f72 <_printf_float+0xae>
 80042b0:	2301      	movs	r3, #1
 80042b2:	4642      	mov	r2, r8
 80042b4:	4659      	mov	r1, fp
 80042b6:	4628      	mov	r0, r5
 80042b8:	47b0      	blx	r6
 80042ba:	3001      	adds	r0, #1
 80042bc:	f43f ae59 	beq.w	8003f72 <_printf_float+0xae>
 80042c0:	3701      	adds	r7, #1
 80042c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042c4:	3b01      	subs	r3, #1
 80042c6:	42bb      	cmp	r3, r7
 80042c8:	dcf2      	bgt.n	80042b0 <_printf_float+0x3ec>
 80042ca:	464b      	mov	r3, r9
 80042cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042d0:	e6e4      	b.n	800409c <_printf_float+0x1d8>
 80042d2:	2700      	movs	r7, #0
 80042d4:	f104 081a 	add.w	r8, r4, #26
 80042d8:	e7f3      	b.n	80042c2 <_printf_float+0x3fe>
 80042da:	2301      	movs	r3, #1
 80042dc:	e7e1      	b.n	80042a2 <_printf_float+0x3de>
 80042de:	2301      	movs	r3, #1
 80042e0:	4642      	mov	r2, r8
 80042e2:	4659      	mov	r1, fp
 80042e4:	4628      	mov	r0, r5
 80042e6:	47b0      	blx	r6
 80042e8:	3001      	adds	r0, #1
 80042ea:	f43f ae42 	beq.w	8003f72 <_printf_float+0xae>
 80042ee:	3701      	adds	r7, #1
 80042f0:	68e3      	ldr	r3, [r4, #12]
 80042f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	42bb      	cmp	r3, r7
 80042f8:	dcf1      	bgt.n	80042de <_printf_float+0x41a>
 80042fa:	e702      	b.n	8004102 <_printf_float+0x23e>
 80042fc:	2700      	movs	r7, #0
 80042fe:	f104 0819 	add.w	r8, r4, #25
 8004302:	e7f5      	b.n	80042f0 <_printf_float+0x42c>
 8004304:	2b00      	cmp	r3, #0
 8004306:	f43f ae94 	beq.w	8004032 <_printf_float+0x16e>
 800430a:	f04f 0c00 	mov.w	ip, #0
 800430e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004312:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004316:	6022      	str	r2, [r4, #0]
 8004318:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800431c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	463a      	mov	r2, r7
 8004324:	464b      	mov	r3, r9
 8004326:	4628      	mov	r0, r5
 8004328:	f7ff fd3a 	bl	8003da0 <__cvt>
 800432c:	4607      	mov	r7, r0
 800432e:	e64f      	b.n	8003fd0 <_printf_float+0x10c>

08004330 <_printf_common>:
 8004330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004334:	4691      	mov	r9, r2
 8004336:	461f      	mov	r7, r3
 8004338:	688a      	ldr	r2, [r1, #8]
 800433a:	690b      	ldr	r3, [r1, #16]
 800433c:	4606      	mov	r6, r0
 800433e:	4293      	cmp	r3, r2
 8004340:	bfb8      	it	lt
 8004342:	4613      	movlt	r3, r2
 8004344:	f8c9 3000 	str.w	r3, [r9]
 8004348:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800434c:	460c      	mov	r4, r1
 800434e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004352:	b112      	cbz	r2, 800435a <_printf_common+0x2a>
 8004354:	3301      	adds	r3, #1
 8004356:	f8c9 3000 	str.w	r3, [r9]
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	0699      	lsls	r1, r3, #26
 800435e:	bf42      	ittt	mi
 8004360:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004364:	3302      	addmi	r3, #2
 8004366:	f8c9 3000 	strmi.w	r3, [r9]
 800436a:	6825      	ldr	r5, [r4, #0]
 800436c:	f015 0506 	ands.w	r5, r5, #6
 8004370:	d107      	bne.n	8004382 <_printf_common+0x52>
 8004372:	f104 0a19 	add.w	sl, r4, #25
 8004376:	68e3      	ldr	r3, [r4, #12]
 8004378:	f8d9 2000 	ldr.w	r2, [r9]
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	42ab      	cmp	r3, r5
 8004380:	dc29      	bgt.n	80043d6 <_printf_common+0xa6>
 8004382:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004386:	6822      	ldr	r2, [r4, #0]
 8004388:	3300      	adds	r3, #0
 800438a:	bf18      	it	ne
 800438c:	2301      	movne	r3, #1
 800438e:	0692      	lsls	r2, r2, #26
 8004390:	d42e      	bmi.n	80043f0 <_printf_common+0xc0>
 8004392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004396:	4639      	mov	r1, r7
 8004398:	4630      	mov	r0, r6
 800439a:	47c0      	blx	r8
 800439c:	3001      	adds	r0, #1
 800439e:	d021      	beq.n	80043e4 <_printf_common+0xb4>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	68e5      	ldr	r5, [r4, #12]
 80043a4:	f003 0306 	and.w	r3, r3, #6
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	bf18      	it	ne
 80043ac:	2500      	movne	r5, #0
 80043ae:	f8d9 2000 	ldr.w	r2, [r9]
 80043b2:	f04f 0900 	mov.w	r9, #0
 80043b6:	bf08      	it	eq
 80043b8:	1aad      	subeq	r5, r5, r2
 80043ba:	68a3      	ldr	r3, [r4, #8]
 80043bc:	6922      	ldr	r2, [r4, #16]
 80043be:	bf08      	it	eq
 80043c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043c4:	4293      	cmp	r3, r2
 80043c6:	bfc4      	itt	gt
 80043c8:	1a9b      	subgt	r3, r3, r2
 80043ca:	18ed      	addgt	r5, r5, r3
 80043cc:	341a      	adds	r4, #26
 80043ce:	454d      	cmp	r5, r9
 80043d0:	d11a      	bne.n	8004408 <_printf_common+0xd8>
 80043d2:	2000      	movs	r0, #0
 80043d4:	e008      	b.n	80043e8 <_printf_common+0xb8>
 80043d6:	2301      	movs	r3, #1
 80043d8:	4652      	mov	r2, sl
 80043da:	4639      	mov	r1, r7
 80043dc:	4630      	mov	r0, r6
 80043de:	47c0      	blx	r8
 80043e0:	3001      	adds	r0, #1
 80043e2:	d103      	bne.n	80043ec <_printf_common+0xbc>
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ec:	3501      	adds	r5, #1
 80043ee:	e7c2      	b.n	8004376 <_printf_common+0x46>
 80043f0:	2030      	movs	r0, #48	; 0x30
 80043f2:	18e1      	adds	r1, r4, r3
 80043f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043fe:	4422      	add	r2, r4
 8004400:	3302      	adds	r3, #2
 8004402:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004406:	e7c4      	b.n	8004392 <_printf_common+0x62>
 8004408:	2301      	movs	r3, #1
 800440a:	4622      	mov	r2, r4
 800440c:	4639      	mov	r1, r7
 800440e:	4630      	mov	r0, r6
 8004410:	47c0      	blx	r8
 8004412:	3001      	adds	r0, #1
 8004414:	d0e6      	beq.n	80043e4 <_printf_common+0xb4>
 8004416:	f109 0901 	add.w	r9, r9, #1
 800441a:	e7d8      	b.n	80043ce <_printf_common+0x9e>

0800441c <_printf_i>:
 800441c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004420:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004424:	460c      	mov	r4, r1
 8004426:	7e09      	ldrb	r1, [r1, #24]
 8004428:	b085      	sub	sp, #20
 800442a:	296e      	cmp	r1, #110	; 0x6e
 800442c:	4617      	mov	r7, r2
 800442e:	4606      	mov	r6, r0
 8004430:	4698      	mov	r8, r3
 8004432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004434:	f000 80b3 	beq.w	800459e <_printf_i+0x182>
 8004438:	d822      	bhi.n	8004480 <_printf_i+0x64>
 800443a:	2963      	cmp	r1, #99	; 0x63
 800443c:	d036      	beq.n	80044ac <_printf_i+0x90>
 800443e:	d80a      	bhi.n	8004456 <_printf_i+0x3a>
 8004440:	2900      	cmp	r1, #0
 8004442:	f000 80b9 	beq.w	80045b8 <_printf_i+0x19c>
 8004446:	2958      	cmp	r1, #88	; 0x58
 8004448:	f000 8083 	beq.w	8004552 <_printf_i+0x136>
 800444c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004450:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004454:	e032      	b.n	80044bc <_printf_i+0xa0>
 8004456:	2964      	cmp	r1, #100	; 0x64
 8004458:	d001      	beq.n	800445e <_printf_i+0x42>
 800445a:	2969      	cmp	r1, #105	; 0x69
 800445c:	d1f6      	bne.n	800444c <_printf_i+0x30>
 800445e:	6820      	ldr	r0, [r4, #0]
 8004460:	6813      	ldr	r3, [r2, #0]
 8004462:	0605      	lsls	r5, r0, #24
 8004464:	f103 0104 	add.w	r1, r3, #4
 8004468:	d52a      	bpl.n	80044c0 <_printf_i+0xa4>
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6011      	str	r1, [r2, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	da03      	bge.n	800447a <_printf_i+0x5e>
 8004472:	222d      	movs	r2, #45	; 0x2d
 8004474:	425b      	negs	r3, r3
 8004476:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800447a:	486f      	ldr	r0, [pc, #444]	; (8004638 <_printf_i+0x21c>)
 800447c:	220a      	movs	r2, #10
 800447e:	e039      	b.n	80044f4 <_printf_i+0xd8>
 8004480:	2973      	cmp	r1, #115	; 0x73
 8004482:	f000 809d 	beq.w	80045c0 <_printf_i+0x1a4>
 8004486:	d808      	bhi.n	800449a <_printf_i+0x7e>
 8004488:	296f      	cmp	r1, #111	; 0x6f
 800448a:	d020      	beq.n	80044ce <_printf_i+0xb2>
 800448c:	2970      	cmp	r1, #112	; 0x70
 800448e:	d1dd      	bne.n	800444c <_printf_i+0x30>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	f043 0320 	orr.w	r3, r3, #32
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	e003      	b.n	80044a2 <_printf_i+0x86>
 800449a:	2975      	cmp	r1, #117	; 0x75
 800449c:	d017      	beq.n	80044ce <_printf_i+0xb2>
 800449e:	2978      	cmp	r1, #120	; 0x78
 80044a0:	d1d4      	bne.n	800444c <_printf_i+0x30>
 80044a2:	2378      	movs	r3, #120	; 0x78
 80044a4:	4865      	ldr	r0, [pc, #404]	; (800463c <_printf_i+0x220>)
 80044a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044aa:	e055      	b.n	8004558 <_printf_i+0x13c>
 80044ac:	6813      	ldr	r3, [r2, #0]
 80044ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044b2:	1d19      	adds	r1, r3, #4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6011      	str	r1, [r2, #0]
 80044b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044bc:	2301      	movs	r3, #1
 80044be:	e08c      	b.n	80045da <_printf_i+0x1be>
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044c6:	6011      	str	r1, [r2, #0]
 80044c8:	bf18      	it	ne
 80044ca:	b21b      	sxthne	r3, r3
 80044cc:	e7cf      	b.n	800446e <_printf_i+0x52>
 80044ce:	6813      	ldr	r3, [r2, #0]
 80044d0:	6825      	ldr	r5, [r4, #0]
 80044d2:	1d18      	adds	r0, r3, #4
 80044d4:	6010      	str	r0, [r2, #0]
 80044d6:	0628      	lsls	r0, r5, #24
 80044d8:	d501      	bpl.n	80044de <_printf_i+0xc2>
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	e002      	b.n	80044e4 <_printf_i+0xc8>
 80044de:	0668      	lsls	r0, r5, #25
 80044e0:	d5fb      	bpl.n	80044da <_printf_i+0xbe>
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	296f      	cmp	r1, #111	; 0x6f
 80044e6:	bf14      	ite	ne
 80044e8:	220a      	movne	r2, #10
 80044ea:	2208      	moveq	r2, #8
 80044ec:	4852      	ldr	r0, [pc, #328]	; (8004638 <_printf_i+0x21c>)
 80044ee:	2100      	movs	r1, #0
 80044f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044f4:	6865      	ldr	r5, [r4, #4]
 80044f6:	2d00      	cmp	r5, #0
 80044f8:	60a5      	str	r5, [r4, #8]
 80044fa:	f2c0 8095 	blt.w	8004628 <_printf_i+0x20c>
 80044fe:	6821      	ldr	r1, [r4, #0]
 8004500:	f021 0104 	bic.w	r1, r1, #4
 8004504:	6021      	str	r1, [r4, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d13d      	bne.n	8004586 <_printf_i+0x16a>
 800450a:	2d00      	cmp	r5, #0
 800450c:	f040 808e 	bne.w	800462c <_printf_i+0x210>
 8004510:	4665      	mov	r5, ip
 8004512:	2a08      	cmp	r2, #8
 8004514:	d10b      	bne.n	800452e <_printf_i+0x112>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	07db      	lsls	r3, r3, #31
 800451a:	d508      	bpl.n	800452e <_printf_i+0x112>
 800451c:	6923      	ldr	r3, [r4, #16]
 800451e:	6862      	ldr	r2, [r4, #4]
 8004520:	429a      	cmp	r2, r3
 8004522:	bfde      	ittt	le
 8004524:	2330      	movle	r3, #48	; 0x30
 8004526:	f805 3c01 	strble.w	r3, [r5, #-1]
 800452a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800452e:	ebac 0305 	sub.w	r3, ip, r5
 8004532:	6123      	str	r3, [r4, #16]
 8004534:	f8cd 8000 	str.w	r8, [sp]
 8004538:	463b      	mov	r3, r7
 800453a:	aa03      	add	r2, sp, #12
 800453c:	4621      	mov	r1, r4
 800453e:	4630      	mov	r0, r6
 8004540:	f7ff fef6 	bl	8004330 <_printf_common>
 8004544:	3001      	adds	r0, #1
 8004546:	d14d      	bne.n	80045e4 <_printf_i+0x1c8>
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	b005      	add	sp, #20
 800454e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004552:	4839      	ldr	r0, [pc, #228]	; (8004638 <_printf_i+0x21c>)
 8004554:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004558:	6813      	ldr	r3, [r2, #0]
 800455a:	6821      	ldr	r1, [r4, #0]
 800455c:	1d1d      	adds	r5, r3, #4
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6015      	str	r5, [r2, #0]
 8004562:	060a      	lsls	r2, r1, #24
 8004564:	d50b      	bpl.n	800457e <_printf_i+0x162>
 8004566:	07ca      	lsls	r2, r1, #31
 8004568:	bf44      	itt	mi
 800456a:	f041 0120 	orrmi.w	r1, r1, #32
 800456e:	6021      	strmi	r1, [r4, #0]
 8004570:	b91b      	cbnz	r3, 800457a <_printf_i+0x15e>
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	f022 0220 	bic.w	r2, r2, #32
 8004578:	6022      	str	r2, [r4, #0]
 800457a:	2210      	movs	r2, #16
 800457c:	e7b7      	b.n	80044ee <_printf_i+0xd2>
 800457e:	064d      	lsls	r5, r1, #25
 8004580:	bf48      	it	mi
 8004582:	b29b      	uxthmi	r3, r3
 8004584:	e7ef      	b.n	8004566 <_printf_i+0x14a>
 8004586:	4665      	mov	r5, ip
 8004588:	fbb3 f1f2 	udiv	r1, r3, r2
 800458c:	fb02 3311 	mls	r3, r2, r1, r3
 8004590:	5cc3      	ldrb	r3, [r0, r3]
 8004592:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004596:	460b      	mov	r3, r1
 8004598:	2900      	cmp	r1, #0
 800459a:	d1f5      	bne.n	8004588 <_printf_i+0x16c>
 800459c:	e7b9      	b.n	8004512 <_printf_i+0xf6>
 800459e:	6813      	ldr	r3, [r2, #0]
 80045a0:	6825      	ldr	r5, [r4, #0]
 80045a2:	1d18      	adds	r0, r3, #4
 80045a4:	6961      	ldr	r1, [r4, #20]
 80045a6:	6010      	str	r0, [r2, #0]
 80045a8:	0628      	lsls	r0, r5, #24
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	d501      	bpl.n	80045b2 <_printf_i+0x196>
 80045ae:	6019      	str	r1, [r3, #0]
 80045b0:	e002      	b.n	80045b8 <_printf_i+0x19c>
 80045b2:	066a      	lsls	r2, r5, #25
 80045b4:	d5fb      	bpl.n	80045ae <_printf_i+0x192>
 80045b6:	8019      	strh	r1, [r3, #0]
 80045b8:	2300      	movs	r3, #0
 80045ba:	4665      	mov	r5, ip
 80045bc:	6123      	str	r3, [r4, #16]
 80045be:	e7b9      	b.n	8004534 <_printf_i+0x118>
 80045c0:	6813      	ldr	r3, [r2, #0]
 80045c2:	1d19      	adds	r1, r3, #4
 80045c4:	6011      	str	r1, [r2, #0]
 80045c6:	681d      	ldr	r5, [r3, #0]
 80045c8:	6862      	ldr	r2, [r4, #4]
 80045ca:	2100      	movs	r1, #0
 80045cc:	4628      	mov	r0, r5
 80045ce:	f001 f9ab 	bl	8005928 <memchr>
 80045d2:	b108      	cbz	r0, 80045d8 <_printf_i+0x1bc>
 80045d4:	1b40      	subs	r0, r0, r5
 80045d6:	6060      	str	r0, [r4, #4]
 80045d8:	6863      	ldr	r3, [r4, #4]
 80045da:	6123      	str	r3, [r4, #16]
 80045dc:	2300      	movs	r3, #0
 80045de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e2:	e7a7      	b.n	8004534 <_printf_i+0x118>
 80045e4:	6923      	ldr	r3, [r4, #16]
 80045e6:	462a      	mov	r2, r5
 80045e8:	4639      	mov	r1, r7
 80045ea:	4630      	mov	r0, r6
 80045ec:	47c0      	blx	r8
 80045ee:	3001      	adds	r0, #1
 80045f0:	d0aa      	beq.n	8004548 <_printf_i+0x12c>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	079b      	lsls	r3, r3, #30
 80045f6:	d413      	bmi.n	8004620 <_printf_i+0x204>
 80045f8:	68e0      	ldr	r0, [r4, #12]
 80045fa:	9b03      	ldr	r3, [sp, #12]
 80045fc:	4298      	cmp	r0, r3
 80045fe:	bfb8      	it	lt
 8004600:	4618      	movlt	r0, r3
 8004602:	e7a3      	b.n	800454c <_printf_i+0x130>
 8004604:	2301      	movs	r3, #1
 8004606:	464a      	mov	r2, r9
 8004608:	4639      	mov	r1, r7
 800460a:	4630      	mov	r0, r6
 800460c:	47c0      	blx	r8
 800460e:	3001      	adds	r0, #1
 8004610:	d09a      	beq.n	8004548 <_printf_i+0x12c>
 8004612:	3501      	adds	r5, #1
 8004614:	68e3      	ldr	r3, [r4, #12]
 8004616:	9a03      	ldr	r2, [sp, #12]
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	42ab      	cmp	r3, r5
 800461c:	dcf2      	bgt.n	8004604 <_printf_i+0x1e8>
 800461e:	e7eb      	b.n	80045f8 <_printf_i+0x1dc>
 8004620:	2500      	movs	r5, #0
 8004622:	f104 0919 	add.w	r9, r4, #25
 8004626:	e7f5      	b.n	8004614 <_printf_i+0x1f8>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1ac      	bne.n	8004586 <_printf_i+0x16a>
 800462c:	7803      	ldrb	r3, [r0, #0]
 800462e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004632:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004636:	e76c      	b.n	8004512 <_printf_i+0xf6>
 8004638:	080079a6 	.word	0x080079a6
 800463c:	080079b7 	.word	0x080079b7

08004640 <iprintf>:
 8004640:	b40f      	push	{r0, r1, r2, r3}
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <iprintf+0x2c>)
 8004644:	b513      	push	{r0, r1, r4, lr}
 8004646:	681c      	ldr	r4, [r3, #0]
 8004648:	b124      	cbz	r4, 8004654 <iprintf+0x14>
 800464a:	69a3      	ldr	r3, [r4, #24]
 800464c:	b913      	cbnz	r3, 8004654 <iprintf+0x14>
 800464e:	4620      	mov	r0, r4
 8004650:	f001 f866 	bl	8005720 <__sinit>
 8004654:	ab05      	add	r3, sp, #20
 8004656:	9a04      	ldr	r2, [sp, #16]
 8004658:	68a1      	ldr	r1, [r4, #8]
 800465a:	4620      	mov	r0, r4
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	f001 fd35 	bl	80060cc <_vfiprintf_r>
 8004662:	b002      	add	sp, #8
 8004664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004668:	b004      	add	sp, #16
 800466a:	4770      	bx	lr
 800466c:	2000000c 	.word	0x2000000c

08004670 <_puts_r>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	460e      	mov	r6, r1
 8004674:	4605      	mov	r5, r0
 8004676:	b118      	cbz	r0, 8004680 <_puts_r+0x10>
 8004678:	6983      	ldr	r3, [r0, #24]
 800467a:	b90b      	cbnz	r3, 8004680 <_puts_r+0x10>
 800467c:	f001 f850 	bl	8005720 <__sinit>
 8004680:	69ab      	ldr	r3, [r5, #24]
 8004682:	68ac      	ldr	r4, [r5, #8]
 8004684:	b913      	cbnz	r3, 800468c <_puts_r+0x1c>
 8004686:	4628      	mov	r0, r5
 8004688:	f001 f84a 	bl	8005720 <__sinit>
 800468c:	4b23      	ldr	r3, [pc, #140]	; (800471c <_puts_r+0xac>)
 800468e:	429c      	cmp	r4, r3
 8004690:	d117      	bne.n	80046c2 <_puts_r+0x52>
 8004692:	686c      	ldr	r4, [r5, #4]
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	071b      	lsls	r3, r3, #28
 8004698:	d51d      	bpl.n	80046d6 <_puts_r+0x66>
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	b1db      	cbz	r3, 80046d6 <_puts_r+0x66>
 800469e:	3e01      	subs	r6, #1
 80046a0:	68a3      	ldr	r3, [r4, #8]
 80046a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046a6:	3b01      	subs	r3, #1
 80046a8:	60a3      	str	r3, [r4, #8]
 80046aa:	b9e9      	cbnz	r1, 80046e8 <_puts_r+0x78>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	da2e      	bge.n	800470e <_puts_r+0x9e>
 80046b0:	4622      	mov	r2, r4
 80046b2:	210a      	movs	r1, #10
 80046b4:	4628      	mov	r0, r5
 80046b6:	f000 f83f 	bl	8004738 <__swbuf_r>
 80046ba:	3001      	adds	r0, #1
 80046bc:	d011      	beq.n	80046e2 <_puts_r+0x72>
 80046be:	200a      	movs	r0, #10
 80046c0:	e011      	b.n	80046e6 <_puts_r+0x76>
 80046c2:	4b17      	ldr	r3, [pc, #92]	; (8004720 <_puts_r+0xb0>)
 80046c4:	429c      	cmp	r4, r3
 80046c6:	d101      	bne.n	80046cc <_puts_r+0x5c>
 80046c8:	68ac      	ldr	r4, [r5, #8]
 80046ca:	e7e3      	b.n	8004694 <_puts_r+0x24>
 80046cc:	4b15      	ldr	r3, [pc, #84]	; (8004724 <_puts_r+0xb4>)
 80046ce:	429c      	cmp	r4, r3
 80046d0:	bf08      	it	eq
 80046d2:	68ec      	ldreq	r4, [r5, #12]
 80046d4:	e7de      	b.n	8004694 <_puts_r+0x24>
 80046d6:	4621      	mov	r1, r4
 80046d8:	4628      	mov	r0, r5
 80046da:	f000 f87f 	bl	80047dc <__swsetup_r>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d0dd      	beq.n	800469e <_puts_r+0x2e>
 80046e2:	f04f 30ff 	mov.w	r0, #4294967295
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da04      	bge.n	80046f6 <_puts_r+0x86>
 80046ec:	69a2      	ldr	r2, [r4, #24]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	dc06      	bgt.n	8004700 <_puts_r+0x90>
 80046f2:	290a      	cmp	r1, #10
 80046f4:	d004      	beq.n	8004700 <_puts_r+0x90>
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	6022      	str	r2, [r4, #0]
 80046fc:	7019      	strb	r1, [r3, #0]
 80046fe:	e7cf      	b.n	80046a0 <_puts_r+0x30>
 8004700:	4622      	mov	r2, r4
 8004702:	4628      	mov	r0, r5
 8004704:	f000 f818 	bl	8004738 <__swbuf_r>
 8004708:	3001      	adds	r0, #1
 800470a:	d1c9      	bne.n	80046a0 <_puts_r+0x30>
 800470c:	e7e9      	b.n	80046e2 <_puts_r+0x72>
 800470e:	200a      	movs	r0, #10
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	6022      	str	r2, [r4, #0]
 8004716:	7018      	strb	r0, [r3, #0]
 8004718:	e7e5      	b.n	80046e6 <_puts_r+0x76>
 800471a:	bf00      	nop
 800471c:	080079f8 	.word	0x080079f8
 8004720:	08007a18 	.word	0x08007a18
 8004724:	080079d8 	.word	0x080079d8

08004728 <puts>:
 8004728:	4b02      	ldr	r3, [pc, #8]	; (8004734 <puts+0xc>)
 800472a:	4601      	mov	r1, r0
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	f7ff bf9f 	b.w	8004670 <_puts_r>
 8004732:	bf00      	nop
 8004734:	2000000c 	.word	0x2000000c

08004738 <__swbuf_r>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	460e      	mov	r6, r1
 800473c:	4614      	mov	r4, r2
 800473e:	4605      	mov	r5, r0
 8004740:	b118      	cbz	r0, 800474a <__swbuf_r+0x12>
 8004742:	6983      	ldr	r3, [r0, #24]
 8004744:	b90b      	cbnz	r3, 800474a <__swbuf_r+0x12>
 8004746:	f000 ffeb 	bl	8005720 <__sinit>
 800474a:	4b21      	ldr	r3, [pc, #132]	; (80047d0 <__swbuf_r+0x98>)
 800474c:	429c      	cmp	r4, r3
 800474e:	d12a      	bne.n	80047a6 <__swbuf_r+0x6e>
 8004750:	686c      	ldr	r4, [r5, #4]
 8004752:	69a3      	ldr	r3, [r4, #24]
 8004754:	60a3      	str	r3, [r4, #8]
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	071a      	lsls	r2, r3, #28
 800475a:	d52e      	bpl.n	80047ba <__swbuf_r+0x82>
 800475c:	6923      	ldr	r3, [r4, #16]
 800475e:	b363      	cbz	r3, 80047ba <__swbuf_r+0x82>
 8004760:	6923      	ldr	r3, [r4, #16]
 8004762:	6820      	ldr	r0, [r4, #0]
 8004764:	b2f6      	uxtb	r6, r6
 8004766:	1ac0      	subs	r0, r0, r3
 8004768:	6963      	ldr	r3, [r4, #20]
 800476a:	4637      	mov	r7, r6
 800476c:	4283      	cmp	r3, r0
 800476e:	dc04      	bgt.n	800477a <__swbuf_r+0x42>
 8004770:	4621      	mov	r1, r4
 8004772:	4628      	mov	r0, r5
 8004774:	f000 ff6a 	bl	800564c <_fflush_r>
 8004778:	bb28      	cbnz	r0, 80047c6 <__swbuf_r+0x8e>
 800477a:	68a3      	ldr	r3, [r4, #8]
 800477c:	3001      	adds	r0, #1
 800477e:	3b01      	subs	r3, #1
 8004780:	60a3      	str	r3, [r4, #8]
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	6022      	str	r2, [r4, #0]
 8004788:	701e      	strb	r6, [r3, #0]
 800478a:	6963      	ldr	r3, [r4, #20]
 800478c:	4283      	cmp	r3, r0
 800478e:	d004      	beq.n	800479a <__swbuf_r+0x62>
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	07db      	lsls	r3, r3, #31
 8004794:	d519      	bpl.n	80047ca <__swbuf_r+0x92>
 8004796:	2e0a      	cmp	r6, #10
 8004798:	d117      	bne.n	80047ca <__swbuf_r+0x92>
 800479a:	4621      	mov	r1, r4
 800479c:	4628      	mov	r0, r5
 800479e:	f000 ff55 	bl	800564c <_fflush_r>
 80047a2:	b190      	cbz	r0, 80047ca <__swbuf_r+0x92>
 80047a4:	e00f      	b.n	80047c6 <__swbuf_r+0x8e>
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <__swbuf_r+0x9c>)
 80047a8:	429c      	cmp	r4, r3
 80047aa:	d101      	bne.n	80047b0 <__swbuf_r+0x78>
 80047ac:	68ac      	ldr	r4, [r5, #8]
 80047ae:	e7d0      	b.n	8004752 <__swbuf_r+0x1a>
 80047b0:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <__swbuf_r+0xa0>)
 80047b2:	429c      	cmp	r4, r3
 80047b4:	bf08      	it	eq
 80047b6:	68ec      	ldreq	r4, [r5, #12]
 80047b8:	e7cb      	b.n	8004752 <__swbuf_r+0x1a>
 80047ba:	4621      	mov	r1, r4
 80047bc:	4628      	mov	r0, r5
 80047be:	f000 f80d 	bl	80047dc <__swsetup_r>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d0cc      	beq.n	8004760 <__swbuf_r+0x28>
 80047c6:	f04f 37ff 	mov.w	r7, #4294967295
 80047ca:	4638      	mov	r0, r7
 80047cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ce:	bf00      	nop
 80047d0:	080079f8 	.word	0x080079f8
 80047d4:	08007a18 	.word	0x08007a18
 80047d8:	080079d8 	.word	0x080079d8

080047dc <__swsetup_r>:
 80047dc:	4b32      	ldr	r3, [pc, #200]	; (80048a8 <__swsetup_r+0xcc>)
 80047de:	b570      	push	{r4, r5, r6, lr}
 80047e0:	681d      	ldr	r5, [r3, #0]
 80047e2:	4606      	mov	r6, r0
 80047e4:	460c      	mov	r4, r1
 80047e6:	b125      	cbz	r5, 80047f2 <__swsetup_r+0x16>
 80047e8:	69ab      	ldr	r3, [r5, #24]
 80047ea:	b913      	cbnz	r3, 80047f2 <__swsetup_r+0x16>
 80047ec:	4628      	mov	r0, r5
 80047ee:	f000 ff97 	bl	8005720 <__sinit>
 80047f2:	4b2e      	ldr	r3, [pc, #184]	; (80048ac <__swsetup_r+0xd0>)
 80047f4:	429c      	cmp	r4, r3
 80047f6:	d10f      	bne.n	8004818 <__swsetup_r+0x3c>
 80047f8:	686c      	ldr	r4, [r5, #4]
 80047fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047fe:	b29a      	uxth	r2, r3
 8004800:	0715      	lsls	r5, r2, #28
 8004802:	d42c      	bmi.n	800485e <__swsetup_r+0x82>
 8004804:	06d0      	lsls	r0, r2, #27
 8004806:	d411      	bmi.n	800482c <__swsetup_r+0x50>
 8004808:	2209      	movs	r2, #9
 800480a:	6032      	str	r2, [r6, #0]
 800480c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004810:	81a3      	strh	r3, [r4, #12]
 8004812:	f04f 30ff 	mov.w	r0, #4294967295
 8004816:	e03e      	b.n	8004896 <__swsetup_r+0xba>
 8004818:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <__swsetup_r+0xd4>)
 800481a:	429c      	cmp	r4, r3
 800481c:	d101      	bne.n	8004822 <__swsetup_r+0x46>
 800481e:	68ac      	ldr	r4, [r5, #8]
 8004820:	e7eb      	b.n	80047fa <__swsetup_r+0x1e>
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <__swsetup_r+0xd8>)
 8004824:	429c      	cmp	r4, r3
 8004826:	bf08      	it	eq
 8004828:	68ec      	ldreq	r4, [r5, #12]
 800482a:	e7e6      	b.n	80047fa <__swsetup_r+0x1e>
 800482c:	0751      	lsls	r1, r2, #29
 800482e:	d512      	bpl.n	8004856 <__swsetup_r+0x7a>
 8004830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004832:	b141      	cbz	r1, 8004846 <__swsetup_r+0x6a>
 8004834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004838:	4299      	cmp	r1, r3
 800483a:	d002      	beq.n	8004842 <__swsetup_r+0x66>
 800483c:	4630      	mov	r0, r6
 800483e:	f001 fb77 	bl	8005f30 <_free_r>
 8004842:	2300      	movs	r3, #0
 8004844:	6363      	str	r3, [r4, #52]	; 0x34
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800484c:	81a3      	strh	r3, [r4, #12]
 800484e:	2300      	movs	r3, #0
 8004850:	6063      	str	r3, [r4, #4]
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	f043 0308 	orr.w	r3, r3, #8
 800485c:	81a3      	strh	r3, [r4, #12]
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	b94b      	cbnz	r3, 8004876 <__swsetup_r+0x9a>
 8004862:	89a3      	ldrh	r3, [r4, #12]
 8004864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800486c:	d003      	beq.n	8004876 <__swsetup_r+0x9a>
 800486e:	4621      	mov	r1, r4
 8004870:	4630      	mov	r0, r6
 8004872:	f001 f811 	bl	8005898 <__smakebuf_r>
 8004876:	89a2      	ldrh	r2, [r4, #12]
 8004878:	f012 0301 	ands.w	r3, r2, #1
 800487c:	d00c      	beq.n	8004898 <__swsetup_r+0xbc>
 800487e:	2300      	movs	r3, #0
 8004880:	60a3      	str	r3, [r4, #8]
 8004882:	6963      	ldr	r3, [r4, #20]
 8004884:	425b      	negs	r3, r3
 8004886:	61a3      	str	r3, [r4, #24]
 8004888:	6923      	ldr	r3, [r4, #16]
 800488a:	b953      	cbnz	r3, 80048a2 <__swsetup_r+0xc6>
 800488c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004890:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004894:	d1ba      	bne.n	800480c <__swsetup_r+0x30>
 8004896:	bd70      	pop	{r4, r5, r6, pc}
 8004898:	0792      	lsls	r2, r2, #30
 800489a:	bf58      	it	pl
 800489c:	6963      	ldrpl	r3, [r4, #20]
 800489e:	60a3      	str	r3, [r4, #8]
 80048a0:	e7f2      	b.n	8004888 <__swsetup_r+0xac>
 80048a2:	2000      	movs	r0, #0
 80048a4:	e7f7      	b.n	8004896 <__swsetup_r+0xba>
 80048a6:	bf00      	nop
 80048a8:	2000000c 	.word	0x2000000c
 80048ac:	080079f8 	.word	0x080079f8
 80048b0:	08007a18 	.word	0x08007a18
 80048b4:	080079d8 	.word	0x080079d8

080048b8 <quorem>:
 80048b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048bc:	6903      	ldr	r3, [r0, #16]
 80048be:	690c      	ldr	r4, [r1, #16]
 80048c0:	4680      	mov	r8, r0
 80048c2:	42a3      	cmp	r3, r4
 80048c4:	f2c0 8084 	blt.w	80049d0 <quorem+0x118>
 80048c8:	3c01      	subs	r4, #1
 80048ca:	f101 0714 	add.w	r7, r1, #20
 80048ce:	f100 0614 	add.w	r6, r0, #20
 80048d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80048d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80048da:	3501      	adds	r5, #1
 80048dc:	fbb0 f5f5 	udiv	r5, r0, r5
 80048e0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80048e4:	eb06 030c 	add.w	r3, r6, ip
 80048e8:	eb07 090c 	add.w	r9, r7, ip
 80048ec:	9301      	str	r3, [sp, #4]
 80048ee:	b39d      	cbz	r5, 8004958 <quorem+0xa0>
 80048f0:	f04f 0a00 	mov.w	sl, #0
 80048f4:	4638      	mov	r0, r7
 80048f6:	46b6      	mov	lr, r6
 80048f8:	46d3      	mov	fp, sl
 80048fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80048fe:	b293      	uxth	r3, r2
 8004900:	fb05 a303 	mla	r3, r5, r3, sl
 8004904:	0c12      	lsrs	r2, r2, #16
 8004906:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800490a:	fb05 a202 	mla	r2, r5, r2, sl
 800490e:	b29b      	uxth	r3, r3
 8004910:	ebab 0303 	sub.w	r3, fp, r3
 8004914:	f8de b000 	ldr.w	fp, [lr]
 8004918:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800491c:	fa1f fb8b 	uxth.w	fp, fp
 8004920:	445b      	add	r3, fp
 8004922:	fa1f fb82 	uxth.w	fp, r2
 8004926:	f8de 2000 	ldr.w	r2, [lr]
 800492a:	4581      	cmp	r9, r0
 800492c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004934:	b29b      	uxth	r3, r3
 8004936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800493a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800493e:	f84e 3b04 	str.w	r3, [lr], #4
 8004942:	d2da      	bcs.n	80048fa <quorem+0x42>
 8004944:	f856 300c 	ldr.w	r3, [r6, ip]
 8004948:	b933      	cbnz	r3, 8004958 <quorem+0xa0>
 800494a:	9b01      	ldr	r3, [sp, #4]
 800494c:	3b04      	subs	r3, #4
 800494e:	429e      	cmp	r6, r3
 8004950:	461a      	mov	r2, r3
 8004952:	d331      	bcc.n	80049b8 <quorem+0x100>
 8004954:	f8c8 4010 	str.w	r4, [r8, #16]
 8004958:	4640      	mov	r0, r8
 800495a:	f001 fa13 	bl	8005d84 <__mcmp>
 800495e:	2800      	cmp	r0, #0
 8004960:	db26      	blt.n	80049b0 <quorem+0xf8>
 8004962:	4630      	mov	r0, r6
 8004964:	f04f 0c00 	mov.w	ip, #0
 8004968:	3501      	adds	r5, #1
 800496a:	f857 1b04 	ldr.w	r1, [r7], #4
 800496e:	f8d0 e000 	ldr.w	lr, [r0]
 8004972:	b28b      	uxth	r3, r1
 8004974:	ebac 0303 	sub.w	r3, ip, r3
 8004978:	fa1f f28e 	uxth.w	r2, lr
 800497c:	4413      	add	r3, r2
 800497e:	0c0a      	lsrs	r2, r1, #16
 8004980:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004984:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004988:	b29b      	uxth	r3, r3
 800498a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800498e:	45b9      	cmp	r9, r7
 8004990:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004994:	f840 3b04 	str.w	r3, [r0], #4
 8004998:	d2e7      	bcs.n	800496a <quorem+0xb2>
 800499a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800499e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80049a2:	b92a      	cbnz	r2, 80049b0 <quorem+0xf8>
 80049a4:	3b04      	subs	r3, #4
 80049a6:	429e      	cmp	r6, r3
 80049a8:	461a      	mov	r2, r3
 80049aa:	d30b      	bcc.n	80049c4 <quorem+0x10c>
 80049ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80049b0:	4628      	mov	r0, r5
 80049b2:	b003      	add	sp, #12
 80049b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b8:	6812      	ldr	r2, [r2, #0]
 80049ba:	3b04      	subs	r3, #4
 80049bc:	2a00      	cmp	r2, #0
 80049be:	d1c9      	bne.n	8004954 <quorem+0x9c>
 80049c0:	3c01      	subs	r4, #1
 80049c2:	e7c4      	b.n	800494e <quorem+0x96>
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	3b04      	subs	r3, #4
 80049c8:	2a00      	cmp	r2, #0
 80049ca:	d1ef      	bne.n	80049ac <quorem+0xf4>
 80049cc:	3c01      	subs	r4, #1
 80049ce:	e7ea      	b.n	80049a6 <quorem+0xee>
 80049d0:	2000      	movs	r0, #0
 80049d2:	e7ee      	b.n	80049b2 <quorem+0xfa>
 80049d4:	0000      	movs	r0, r0
	...

080049d8 <_dtoa_r>:
 80049d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049dc:	4616      	mov	r6, r2
 80049de:	461f      	mov	r7, r3
 80049e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80049e2:	b095      	sub	sp, #84	; 0x54
 80049e4:	4604      	mov	r4, r0
 80049e6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80049ea:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80049ee:	b93d      	cbnz	r5, 8004a00 <_dtoa_r+0x28>
 80049f0:	2010      	movs	r0, #16
 80049f2:	f000 ff91 	bl	8005918 <malloc>
 80049f6:	6260      	str	r0, [r4, #36]	; 0x24
 80049f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80049fc:	6005      	str	r5, [r0, #0]
 80049fe:	60c5      	str	r5, [r0, #12]
 8004a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a02:	6819      	ldr	r1, [r3, #0]
 8004a04:	b151      	cbz	r1, 8004a1c <_dtoa_r+0x44>
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4093      	lsls	r3, r2
 8004a0c:	604a      	str	r2, [r1, #4]
 8004a0e:	608b      	str	r3, [r1, #8]
 8004a10:	4620      	mov	r0, r4
 8004a12:	f000 ffd6 	bl	80059c2 <_Bfree>
 8004a16:	2200      	movs	r2, #0
 8004a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	1e3b      	subs	r3, r7, #0
 8004a1e:	bfaf      	iteee	ge
 8004a20:	2300      	movge	r3, #0
 8004a22:	2201      	movlt	r2, #1
 8004a24:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a28:	9303      	strlt	r3, [sp, #12]
 8004a2a:	bfac      	ite	ge
 8004a2c:	f8c8 3000 	strge.w	r3, [r8]
 8004a30:	f8c8 2000 	strlt.w	r2, [r8]
 8004a34:	4bae      	ldr	r3, [pc, #696]	; (8004cf0 <_dtoa_r+0x318>)
 8004a36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004a3a:	ea33 0308 	bics.w	r3, r3, r8
 8004a3e:	d11b      	bne.n	8004a78 <_dtoa_r+0xa0>
 8004a40:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	9b02      	ldr	r3, [sp, #8]
 8004a4a:	b923      	cbnz	r3, 8004a56 <_dtoa_r+0x7e>
 8004a4c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004a50:	2800      	cmp	r0, #0
 8004a52:	f000 8545 	beq.w	80054e0 <_dtoa_r+0xb08>
 8004a56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a58:	b953      	cbnz	r3, 8004a70 <_dtoa_r+0x98>
 8004a5a:	4ba6      	ldr	r3, [pc, #664]	; (8004cf4 <_dtoa_r+0x31c>)
 8004a5c:	e021      	b.n	8004aa2 <_dtoa_r+0xca>
 8004a5e:	4ba6      	ldr	r3, [pc, #664]	; (8004cf8 <_dtoa_r+0x320>)
 8004a60:	9306      	str	r3, [sp, #24]
 8004a62:	3308      	adds	r3, #8
 8004a64:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	9806      	ldr	r0, [sp, #24]
 8004a6a:	b015      	add	sp, #84	; 0x54
 8004a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a70:	4ba0      	ldr	r3, [pc, #640]	; (8004cf4 <_dtoa_r+0x31c>)
 8004a72:	9306      	str	r3, [sp, #24]
 8004a74:	3303      	adds	r3, #3
 8004a76:	e7f5      	b.n	8004a64 <_dtoa_r+0x8c>
 8004a78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2300      	movs	r3, #0
 8004a80:	4630      	mov	r0, r6
 8004a82:	4639      	mov	r1, r7
 8004a84:	f7fb ff90 	bl	80009a8 <__aeabi_dcmpeq>
 8004a88:	4682      	mov	sl, r0
 8004a8a:	b160      	cbz	r0, 8004aa6 <_dtoa_r+0xce>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8520 	beq.w	80054da <_dtoa_r+0xb02>
 8004a9a:	4b98      	ldr	r3, [pc, #608]	; (8004cfc <_dtoa_r+0x324>)
 8004a9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	9306      	str	r3, [sp, #24]
 8004aa4:	e7e0      	b.n	8004a68 <_dtoa_r+0x90>
 8004aa6:	ab12      	add	r3, sp, #72	; 0x48
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	ab13      	add	r3, sp, #76	; 0x4c
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	4632      	mov	r2, r6
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f001 f9de 	bl	8005e74 <__d2b>
 8004ab8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004abc:	4683      	mov	fp, r0
 8004abe:	2d00      	cmp	r5, #0
 8004ac0:	d07d      	beq.n	8004bbe <_dtoa_r+0x1e6>
 8004ac2:	46b0      	mov	r8, r6
 8004ac4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004ac8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004acc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004ad0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004ad4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004ad8:	2200      	movs	r2, #0
 8004ada:	4b89      	ldr	r3, [pc, #548]	; (8004d00 <_dtoa_r+0x328>)
 8004adc:	4640      	mov	r0, r8
 8004ade:	4649      	mov	r1, r9
 8004ae0:	f7fb fb42 	bl	8000168 <__aeabi_dsub>
 8004ae4:	a37c      	add	r3, pc, #496	; (adr r3, 8004cd8 <_dtoa_r+0x300>)
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	f7fb fcf5 	bl	80004d8 <__aeabi_dmul>
 8004aee:	a37c      	add	r3, pc, #496	; (adr r3, 8004ce0 <_dtoa_r+0x308>)
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f7fb fb3a 	bl	800016c <__adddf3>
 8004af8:	4606      	mov	r6, r0
 8004afa:	4628      	mov	r0, r5
 8004afc:	460f      	mov	r7, r1
 8004afe:	f7fb fc81 	bl	8000404 <__aeabi_i2d>
 8004b02:	a379      	add	r3, pc, #484	; (adr r3, 8004ce8 <_dtoa_r+0x310>)
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f7fb fce6 	bl	80004d8 <__aeabi_dmul>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4630      	mov	r0, r6
 8004b12:	4639      	mov	r1, r7
 8004b14:	f7fb fb2a 	bl	800016c <__adddf3>
 8004b18:	4606      	mov	r6, r0
 8004b1a:	460f      	mov	r7, r1
 8004b1c:	f7fb ff8c 	bl	8000a38 <__aeabi_d2iz>
 8004b20:	2200      	movs	r2, #0
 8004b22:	4682      	mov	sl, r0
 8004b24:	2300      	movs	r3, #0
 8004b26:	4630      	mov	r0, r6
 8004b28:	4639      	mov	r1, r7
 8004b2a:	f7fb ff47 	bl	80009bc <__aeabi_dcmplt>
 8004b2e:	b148      	cbz	r0, 8004b44 <_dtoa_r+0x16c>
 8004b30:	4650      	mov	r0, sl
 8004b32:	f7fb fc67 	bl	8000404 <__aeabi_i2d>
 8004b36:	4632      	mov	r2, r6
 8004b38:	463b      	mov	r3, r7
 8004b3a:	f7fb ff35 	bl	80009a8 <__aeabi_dcmpeq>
 8004b3e:	b908      	cbnz	r0, 8004b44 <_dtoa_r+0x16c>
 8004b40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b44:	f1ba 0f16 	cmp.w	sl, #22
 8004b48:	d85a      	bhi.n	8004c00 <_dtoa_r+0x228>
 8004b4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b4e:	496d      	ldr	r1, [pc, #436]	; (8004d04 <_dtoa_r+0x32c>)
 8004b50:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b58:	f7fb ff4e 	bl	80009f8 <__aeabi_dcmpgt>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d051      	beq.n	8004c04 <_dtoa_r+0x22c>
 8004b60:	2300      	movs	r3, #0
 8004b62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b66:	930d      	str	r3, [sp, #52]	; 0x34
 8004b68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b6a:	1b5d      	subs	r5, r3, r5
 8004b6c:	1e6b      	subs	r3, r5, #1
 8004b6e:	9307      	str	r3, [sp, #28]
 8004b70:	bf43      	ittte	mi
 8004b72:	2300      	movmi	r3, #0
 8004b74:	f1c5 0901 	rsbmi	r9, r5, #1
 8004b78:	9307      	strmi	r3, [sp, #28]
 8004b7a:	f04f 0900 	movpl.w	r9, #0
 8004b7e:	f1ba 0f00 	cmp.w	sl, #0
 8004b82:	db41      	blt.n	8004c08 <_dtoa_r+0x230>
 8004b84:	9b07      	ldr	r3, [sp, #28]
 8004b86:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004b8a:	4453      	add	r3, sl
 8004b8c:	9307      	str	r3, [sp, #28]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	9308      	str	r3, [sp, #32]
 8004b92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004b94:	2b09      	cmp	r3, #9
 8004b96:	f200 808f 	bhi.w	8004cb8 <_dtoa_r+0x2e0>
 8004b9a:	2b05      	cmp	r3, #5
 8004b9c:	bfc4      	itt	gt
 8004b9e:	3b04      	subgt	r3, #4
 8004ba0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004ba2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ba4:	bfc8      	it	gt
 8004ba6:	2500      	movgt	r5, #0
 8004ba8:	f1a3 0302 	sub.w	r3, r3, #2
 8004bac:	bfd8      	it	le
 8004bae:	2501      	movle	r5, #1
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	f200 808d 	bhi.w	8004cd0 <_dtoa_r+0x2f8>
 8004bb6:	e8df f003 	tbb	[pc, r3]
 8004bba:	7d7b      	.short	0x7d7b
 8004bbc:	6f2f      	.short	0x6f2f
 8004bbe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004bc2:	441d      	add	r5, r3
 8004bc4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004bc8:	2820      	cmp	r0, #32
 8004bca:	dd13      	ble.n	8004bf4 <_dtoa_r+0x21c>
 8004bcc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004bd0:	9b02      	ldr	r3, [sp, #8]
 8004bd2:	fa08 f800 	lsl.w	r8, r8, r0
 8004bd6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004bda:	fa23 f000 	lsr.w	r0, r3, r0
 8004bde:	ea48 0000 	orr.w	r0, r8, r0
 8004be2:	f7fb fbff 	bl	80003e4 <__aeabi_ui2d>
 8004be6:	2301      	movs	r3, #1
 8004be8:	4680      	mov	r8, r0
 8004bea:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004bee:	3d01      	subs	r5, #1
 8004bf0:	9310      	str	r3, [sp, #64]	; 0x40
 8004bf2:	e771      	b.n	8004ad8 <_dtoa_r+0x100>
 8004bf4:	9b02      	ldr	r3, [sp, #8]
 8004bf6:	f1c0 0020 	rsb	r0, r0, #32
 8004bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8004bfe:	e7f0      	b.n	8004be2 <_dtoa_r+0x20a>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e7b0      	b.n	8004b66 <_dtoa_r+0x18e>
 8004c04:	900d      	str	r0, [sp, #52]	; 0x34
 8004c06:	e7af      	b.n	8004b68 <_dtoa_r+0x190>
 8004c08:	f1ca 0300 	rsb	r3, sl, #0
 8004c0c:	9308      	str	r3, [sp, #32]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	eba9 090a 	sub.w	r9, r9, sl
 8004c14:	930c      	str	r3, [sp, #48]	; 0x30
 8004c16:	e7bc      	b.n	8004b92 <_dtoa_r+0x1ba>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	dd74      	ble.n	8004d0c <_dtoa_r+0x334>
 8004c22:	4698      	mov	r8, r3
 8004c24:	9304      	str	r3, [sp, #16]
 8004c26:	2200      	movs	r2, #0
 8004c28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004c2a:	6072      	str	r2, [r6, #4]
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	f102 0014 	add.w	r0, r2, #20
 8004c32:	4298      	cmp	r0, r3
 8004c34:	6871      	ldr	r1, [r6, #4]
 8004c36:	d96e      	bls.n	8004d16 <_dtoa_r+0x33e>
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f000 fe8e 	bl	800595a <_Balloc>
 8004c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c40:	6030      	str	r0, [r6, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f1b8 0f0e 	cmp.w	r8, #14
 8004c48:	9306      	str	r3, [sp, #24]
 8004c4a:	f200 80ed 	bhi.w	8004e28 <_dtoa_r+0x450>
 8004c4e:	2d00      	cmp	r5, #0
 8004c50:	f000 80ea 	beq.w	8004e28 <_dtoa_r+0x450>
 8004c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c58:	f1ba 0f00 	cmp.w	sl, #0
 8004c5c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004c60:	dd77      	ble.n	8004d52 <_dtoa_r+0x37a>
 8004c62:	4a28      	ldr	r2, [pc, #160]	; (8004d04 <_dtoa_r+0x32c>)
 8004c64:	f00a 030f 	and.w	r3, sl, #15
 8004c68:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004c6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c70:	06f0      	lsls	r0, r6, #27
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004c7a:	d568      	bpl.n	8004d4e <_dtoa_r+0x376>
 8004c7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004c80:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <_dtoa_r+0x330>)
 8004c82:	2503      	movs	r5, #3
 8004c84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c88:	f7fb fd50 	bl	800072c <__aeabi_ddiv>
 8004c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c90:	f006 060f 	and.w	r6, r6, #15
 8004c94:	4f1c      	ldr	r7, [pc, #112]	; (8004d08 <_dtoa_r+0x330>)
 8004c96:	e04f      	b.n	8004d38 <_dtoa_r+0x360>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c9e:	4453      	add	r3, sl
 8004ca0:	f103 0801 	add.w	r8, r3, #1
 8004ca4:	9304      	str	r3, [sp, #16]
 8004ca6:	4643      	mov	r3, r8
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	bfb8      	it	lt
 8004cac:	2301      	movlt	r3, #1
 8004cae:	e7ba      	b.n	8004c26 <_dtoa_r+0x24e>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e7b2      	b.n	8004c1a <_dtoa_r+0x242>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e7f0      	b.n	8004c9a <_dtoa_r+0x2c2>
 8004cb8:	2501      	movs	r5, #1
 8004cba:	2300      	movs	r3, #0
 8004cbc:	9509      	str	r5, [sp, #36]	; 0x24
 8004cbe:	931e      	str	r3, [sp, #120]	; 0x78
 8004cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	9304      	str	r3, [sp, #16]
 8004cc8:	4698      	mov	r8, r3
 8004cca:	2312      	movs	r3, #18
 8004ccc:	921f      	str	r2, [sp, #124]	; 0x7c
 8004cce:	e7aa      	b.n	8004c26 <_dtoa_r+0x24e>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd4:	e7f4      	b.n	8004cc0 <_dtoa_r+0x2e8>
 8004cd6:	bf00      	nop
 8004cd8:	636f4361 	.word	0x636f4361
 8004cdc:	3fd287a7 	.word	0x3fd287a7
 8004ce0:	8b60c8b3 	.word	0x8b60c8b3
 8004ce4:	3fc68a28 	.word	0x3fc68a28
 8004ce8:	509f79fb 	.word	0x509f79fb
 8004cec:	3fd34413 	.word	0x3fd34413
 8004cf0:	7ff00000 	.word	0x7ff00000
 8004cf4:	080079d1 	.word	0x080079d1
 8004cf8:	080079c8 	.word	0x080079c8
 8004cfc:	080079a5 	.word	0x080079a5
 8004d00:	3ff80000 	.word	0x3ff80000
 8004d04:	08007a60 	.word	0x08007a60
 8004d08:	08007a38 	.word	0x08007a38
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	9304      	str	r3, [sp, #16]
 8004d10:	4698      	mov	r8, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	e7da      	b.n	8004ccc <_dtoa_r+0x2f4>
 8004d16:	3101      	adds	r1, #1
 8004d18:	6071      	str	r1, [r6, #4]
 8004d1a:	0052      	lsls	r2, r2, #1
 8004d1c:	e787      	b.n	8004c2e <_dtoa_r+0x256>
 8004d1e:	07f1      	lsls	r1, r6, #31
 8004d20:	d508      	bpl.n	8004d34 <_dtoa_r+0x35c>
 8004d22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d2a:	f7fb fbd5 	bl	80004d8 <__aeabi_dmul>
 8004d2e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004d32:	3501      	adds	r5, #1
 8004d34:	1076      	asrs	r6, r6, #1
 8004d36:	3708      	adds	r7, #8
 8004d38:	2e00      	cmp	r6, #0
 8004d3a:	d1f0      	bne.n	8004d1e <_dtoa_r+0x346>
 8004d3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d44:	f7fb fcf2 	bl	800072c <__aeabi_ddiv>
 8004d48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d4c:	e01b      	b.n	8004d86 <_dtoa_r+0x3ae>
 8004d4e:	2502      	movs	r5, #2
 8004d50:	e7a0      	b.n	8004c94 <_dtoa_r+0x2bc>
 8004d52:	f000 80a4 	beq.w	8004e9e <_dtoa_r+0x4c6>
 8004d56:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004d5a:	f1ca 0600 	rsb	r6, sl, #0
 8004d5e:	4ba0      	ldr	r3, [pc, #640]	; (8004fe0 <_dtoa_r+0x608>)
 8004d60:	f006 020f 	and.w	r2, r6, #15
 8004d64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb fbb4 	bl	80004d8 <__aeabi_dmul>
 8004d70:	2502      	movs	r5, #2
 8004d72:	2300      	movs	r3, #0
 8004d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d78:	4f9a      	ldr	r7, [pc, #616]	; (8004fe4 <_dtoa_r+0x60c>)
 8004d7a:	1136      	asrs	r6, r6, #4
 8004d7c:	2e00      	cmp	r6, #0
 8004d7e:	f040 8083 	bne.w	8004e88 <_dtoa_r+0x4b0>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e0      	bne.n	8004d48 <_dtoa_r+0x370>
 8004d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 808a 	beq.w	8004ea2 <_dtoa_r+0x4ca>
 8004d8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d92:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004d96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	4b92      	ldr	r3, [pc, #584]	; (8004fe8 <_dtoa_r+0x610>)
 8004d9e:	f7fb fe0d 	bl	80009bc <__aeabi_dcmplt>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d07d      	beq.n	8004ea2 <_dtoa_r+0x4ca>
 8004da6:	f1b8 0f00 	cmp.w	r8, #0
 8004daa:	d07a      	beq.n	8004ea2 <_dtoa_r+0x4ca>
 8004dac:	9b04      	ldr	r3, [sp, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	dd36      	ble.n	8004e20 <_dtoa_r+0x448>
 8004db2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004db6:	2200      	movs	r2, #0
 8004db8:	4b8c      	ldr	r3, [pc, #560]	; (8004fec <_dtoa_r+0x614>)
 8004dba:	f7fb fb8d 	bl	80004d8 <__aeabi_dmul>
 8004dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dc2:	9e04      	ldr	r6, [sp, #16]
 8004dc4:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004dc8:	3501      	adds	r5, #1
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f7fb fb1a 	bl	8000404 <__aeabi_i2d>
 8004dd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dd4:	f7fb fb80 	bl	80004d8 <__aeabi_dmul>
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4b85      	ldr	r3, [pc, #532]	; (8004ff0 <_dtoa_r+0x618>)
 8004ddc:	f7fb f9c6 	bl	800016c <__adddf3>
 8004de0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004de4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004de8:	950b      	str	r5, [sp, #44]	; 0x2c
 8004dea:	2e00      	cmp	r6, #0
 8004dec:	d15c      	bne.n	8004ea8 <_dtoa_r+0x4d0>
 8004dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004df2:	2200      	movs	r2, #0
 8004df4:	4b7f      	ldr	r3, [pc, #508]	; (8004ff4 <_dtoa_r+0x61c>)
 8004df6:	f7fb f9b7 	bl	8000168 <__aeabi_dsub>
 8004dfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e02:	f7fb fdf9 	bl	80009f8 <__aeabi_dcmpgt>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	f040 8281 	bne.w	800530e <_dtoa_r+0x936>
 8004e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e12:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004e16:	f7fb fdd1 	bl	80009bc <__aeabi_dcmplt>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	f040 8275 	bne.w	800530a <_dtoa_r+0x932>
 8004e20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004e24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f2c0 814b 	blt.w	80050c6 <_dtoa_r+0x6ee>
 8004e30:	f1ba 0f0e 	cmp.w	sl, #14
 8004e34:	f300 8147 	bgt.w	80050c6 <_dtoa_r+0x6ee>
 8004e38:	4b69      	ldr	r3, [pc, #420]	; (8004fe0 <_dtoa_r+0x608>)
 8004e3a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f280 80d7 	bge.w	8004ffc <_dtoa_r+0x624>
 8004e4e:	f1b8 0f00 	cmp.w	r8, #0
 8004e52:	f300 80d3 	bgt.w	8004ffc <_dtoa_r+0x624>
 8004e56:	f040 8257 	bne.w	8005308 <_dtoa_r+0x930>
 8004e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	4b64      	ldr	r3, [pc, #400]	; (8004ff4 <_dtoa_r+0x61c>)
 8004e62:	f7fb fb39 	bl	80004d8 <__aeabi_dmul>
 8004e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e6a:	f7fb fdbb 	bl	80009e4 <__aeabi_dcmpge>
 8004e6e:	4646      	mov	r6, r8
 8004e70:	4647      	mov	r7, r8
 8004e72:	2800      	cmp	r0, #0
 8004e74:	f040 822d 	bne.w	80052d2 <_dtoa_r+0x8fa>
 8004e78:	9b06      	ldr	r3, [sp, #24]
 8004e7a:	9a06      	ldr	r2, [sp, #24]
 8004e7c:	1c5d      	adds	r5, r3, #1
 8004e7e:	2331      	movs	r3, #49	; 0x31
 8004e80:	f10a 0a01 	add.w	sl, sl, #1
 8004e84:	7013      	strb	r3, [r2, #0]
 8004e86:	e228      	b.n	80052da <_dtoa_r+0x902>
 8004e88:	07f2      	lsls	r2, r6, #31
 8004e8a:	d505      	bpl.n	8004e98 <_dtoa_r+0x4c0>
 8004e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e90:	f7fb fb22 	bl	80004d8 <__aeabi_dmul>
 8004e94:	2301      	movs	r3, #1
 8004e96:	3501      	adds	r5, #1
 8004e98:	1076      	asrs	r6, r6, #1
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	e76e      	b.n	8004d7c <_dtoa_r+0x3a4>
 8004e9e:	2502      	movs	r5, #2
 8004ea0:	e771      	b.n	8004d86 <_dtoa_r+0x3ae>
 8004ea2:	4657      	mov	r7, sl
 8004ea4:	4646      	mov	r6, r8
 8004ea6:	e790      	b.n	8004dca <_dtoa_r+0x3f2>
 8004ea8:	4b4d      	ldr	r3, [pc, #308]	; (8004fe0 <_dtoa_r+0x608>)
 8004eaa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004eae:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d048      	beq.n	8004f4a <_dtoa_r+0x572>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	494e      	ldr	r1, [pc, #312]	; (8004ff8 <_dtoa_r+0x620>)
 8004ec0:	f7fb fc34 	bl	800072c <__aeabi_ddiv>
 8004ec4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ec8:	f7fb f94e 	bl	8000168 <__aeabi_dsub>
 8004ecc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004ed0:	9d06      	ldr	r5, [sp, #24]
 8004ed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ed6:	f7fb fdaf 	bl	8000a38 <__aeabi_d2iz>
 8004eda:	9011      	str	r0, [sp, #68]	; 0x44
 8004edc:	f7fb fa92 	bl	8000404 <__aeabi_i2d>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ee8:	f7fb f93e 	bl	8000168 <__aeabi_dsub>
 8004eec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ef2:	3330      	adds	r3, #48	; 0x30
 8004ef4:	f805 3b01 	strb.w	r3, [r5], #1
 8004ef8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004efc:	f7fb fd5e 	bl	80009bc <__aeabi_dcmplt>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d163      	bne.n	8004fcc <_dtoa_r+0x5f4>
 8004f04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f08:	2000      	movs	r0, #0
 8004f0a:	4937      	ldr	r1, [pc, #220]	; (8004fe8 <_dtoa_r+0x610>)
 8004f0c:	f7fb f92c 	bl	8000168 <__aeabi_dsub>
 8004f10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f14:	f7fb fd52 	bl	80009bc <__aeabi_dcmplt>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	f040 80b5 	bne.w	8005088 <_dtoa_r+0x6b0>
 8004f1e:	9b06      	ldr	r3, [sp, #24]
 8004f20:	1aeb      	subs	r3, r5, r3
 8004f22:	429e      	cmp	r6, r3
 8004f24:	f77f af7c 	ble.w	8004e20 <_dtoa_r+0x448>
 8004f28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4b2f      	ldr	r3, [pc, #188]	; (8004fec <_dtoa_r+0x614>)
 8004f30:	f7fb fad2 	bl	80004d8 <__aeabi_dmul>
 8004f34:	2200      	movs	r2, #0
 8004f36:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f3e:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <_dtoa_r+0x614>)
 8004f40:	f7fb faca 	bl	80004d8 <__aeabi_dmul>
 8004f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f48:	e7c3      	b.n	8004ed2 <_dtoa_r+0x4fa>
 8004f4a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f4e:	f7fb fac3 	bl	80004d8 <__aeabi_dmul>
 8004f52:	9b06      	ldr	r3, [sp, #24]
 8004f54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f58:	199d      	adds	r5, r3, r6
 8004f5a:	461e      	mov	r6, r3
 8004f5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f60:	f7fb fd6a 	bl	8000a38 <__aeabi_d2iz>
 8004f64:	9011      	str	r0, [sp, #68]	; 0x44
 8004f66:	f7fb fa4d 	bl	8000404 <__aeabi_i2d>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f72:	f7fb f8f9 	bl	8000168 <__aeabi_dsub>
 8004f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f7c:	3330      	adds	r3, #48	; 0x30
 8004f7e:	f806 3b01 	strb.w	r3, [r6], #1
 8004f82:	42ae      	cmp	r6, r5
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	d124      	bne.n	8004fd4 <_dtoa_r+0x5fc>
 8004f8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <_dtoa_r+0x620>)
 8004f90:	f7fb f8ec 	bl	800016c <__adddf3>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f9c:	f7fb fd2c 	bl	80009f8 <__aeabi_dcmpgt>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d171      	bne.n	8005088 <_dtoa_r+0x6b0>
 8004fa4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004fa8:	2000      	movs	r0, #0
 8004faa:	4913      	ldr	r1, [pc, #76]	; (8004ff8 <_dtoa_r+0x620>)
 8004fac:	f7fb f8dc 	bl	8000168 <__aeabi_dsub>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fb8:	f7fb fd00 	bl	80009bc <__aeabi_dcmplt>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	f43f af2f 	beq.w	8004e20 <_dtoa_r+0x448>
 8004fc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004fc6:	1e6a      	subs	r2, r5, #1
 8004fc8:	2b30      	cmp	r3, #48	; 0x30
 8004fca:	d001      	beq.n	8004fd0 <_dtoa_r+0x5f8>
 8004fcc:	46ba      	mov	sl, r7
 8004fce:	e04a      	b.n	8005066 <_dtoa_r+0x68e>
 8004fd0:	4615      	mov	r5, r2
 8004fd2:	e7f6      	b.n	8004fc2 <_dtoa_r+0x5ea>
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <_dtoa_r+0x614>)
 8004fd6:	f7fb fa7f 	bl	80004d8 <__aeabi_dmul>
 8004fda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fde:	e7bd      	b.n	8004f5c <_dtoa_r+0x584>
 8004fe0:	08007a60 	.word	0x08007a60
 8004fe4:	08007a38 	.word	0x08007a38
 8004fe8:	3ff00000 	.word	0x3ff00000
 8004fec:	40240000 	.word	0x40240000
 8004ff0:	401c0000 	.word	0x401c0000
 8004ff4:	40140000 	.word	0x40140000
 8004ff8:	3fe00000 	.word	0x3fe00000
 8004ffc:	9d06      	ldr	r5, [sp, #24]
 8004ffe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005006:	4630      	mov	r0, r6
 8005008:	4639      	mov	r1, r7
 800500a:	f7fb fb8f 	bl	800072c <__aeabi_ddiv>
 800500e:	f7fb fd13 	bl	8000a38 <__aeabi_d2iz>
 8005012:	4681      	mov	r9, r0
 8005014:	f7fb f9f6 	bl	8000404 <__aeabi_i2d>
 8005018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800501c:	f7fb fa5c 	bl	80004d8 <__aeabi_dmul>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4630      	mov	r0, r6
 8005026:	4639      	mov	r1, r7
 8005028:	f7fb f89e 	bl	8000168 <__aeabi_dsub>
 800502c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005030:	f805 6b01 	strb.w	r6, [r5], #1
 8005034:	9e06      	ldr	r6, [sp, #24]
 8005036:	4602      	mov	r2, r0
 8005038:	1bae      	subs	r6, r5, r6
 800503a:	45b0      	cmp	r8, r6
 800503c:	460b      	mov	r3, r1
 800503e:	d135      	bne.n	80050ac <_dtoa_r+0x6d4>
 8005040:	f7fb f894 	bl	800016c <__adddf3>
 8005044:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005048:	4606      	mov	r6, r0
 800504a:	460f      	mov	r7, r1
 800504c:	f7fb fcd4 	bl	80009f8 <__aeabi_dcmpgt>
 8005050:	b9c8      	cbnz	r0, 8005086 <_dtoa_r+0x6ae>
 8005052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005056:	4630      	mov	r0, r6
 8005058:	4639      	mov	r1, r7
 800505a:	f7fb fca5 	bl	80009a8 <__aeabi_dcmpeq>
 800505e:	b110      	cbz	r0, 8005066 <_dtoa_r+0x68e>
 8005060:	f019 0f01 	tst.w	r9, #1
 8005064:	d10f      	bne.n	8005086 <_dtoa_r+0x6ae>
 8005066:	4659      	mov	r1, fp
 8005068:	4620      	mov	r0, r4
 800506a:	f000 fcaa 	bl	80059c2 <_Bfree>
 800506e:	2300      	movs	r3, #0
 8005070:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005072:	702b      	strb	r3, [r5, #0]
 8005074:	f10a 0301 	add.w	r3, sl, #1
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800507c:	2b00      	cmp	r3, #0
 800507e:	f43f acf3 	beq.w	8004a68 <_dtoa_r+0x90>
 8005082:	601d      	str	r5, [r3, #0]
 8005084:	e4f0      	b.n	8004a68 <_dtoa_r+0x90>
 8005086:	4657      	mov	r7, sl
 8005088:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800508c:	1e6b      	subs	r3, r5, #1
 800508e:	2a39      	cmp	r2, #57	; 0x39
 8005090:	d106      	bne.n	80050a0 <_dtoa_r+0x6c8>
 8005092:	9a06      	ldr	r2, [sp, #24]
 8005094:	429a      	cmp	r2, r3
 8005096:	d107      	bne.n	80050a8 <_dtoa_r+0x6d0>
 8005098:	2330      	movs	r3, #48	; 0x30
 800509a:	7013      	strb	r3, [r2, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	3701      	adds	r7, #1
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	3201      	adds	r2, #1
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	e791      	b.n	8004fcc <_dtoa_r+0x5f4>
 80050a8:	461d      	mov	r5, r3
 80050aa:	e7ed      	b.n	8005088 <_dtoa_r+0x6b0>
 80050ac:	2200      	movs	r2, #0
 80050ae:	4b99      	ldr	r3, [pc, #612]	; (8005314 <_dtoa_r+0x93c>)
 80050b0:	f7fb fa12 	bl	80004d8 <__aeabi_dmul>
 80050b4:	2200      	movs	r2, #0
 80050b6:	2300      	movs	r3, #0
 80050b8:	4606      	mov	r6, r0
 80050ba:	460f      	mov	r7, r1
 80050bc:	f7fb fc74 	bl	80009a8 <__aeabi_dcmpeq>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d09e      	beq.n	8005002 <_dtoa_r+0x62a>
 80050c4:	e7cf      	b.n	8005066 <_dtoa_r+0x68e>
 80050c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050c8:	2a00      	cmp	r2, #0
 80050ca:	f000 8088 	beq.w	80051de <_dtoa_r+0x806>
 80050ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80050d0:	2a01      	cmp	r2, #1
 80050d2:	dc6d      	bgt.n	80051b0 <_dtoa_r+0x7d8>
 80050d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050d6:	2a00      	cmp	r2, #0
 80050d8:	d066      	beq.n	80051a8 <_dtoa_r+0x7d0>
 80050da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050de:	464d      	mov	r5, r9
 80050e0:	9e08      	ldr	r6, [sp, #32]
 80050e2:	9a07      	ldr	r2, [sp, #28]
 80050e4:	2101      	movs	r1, #1
 80050e6:	441a      	add	r2, r3
 80050e8:	4620      	mov	r0, r4
 80050ea:	4499      	add	r9, r3
 80050ec:	9207      	str	r2, [sp, #28]
 80050ee:	f000 fd08 	bl	8005b02 <__i2b>
 80050f2:	4607      	mov	r7, r0
 80050f4:	2d00      	cmp	r5, #0
 80050f6:	dd0b      	ble.n	8005110 <_dtoa_r+0x738>
 80050f8:	9b07      	ldr	r3, [sp, #28]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	dd08      	ble.n	8005110 <_dtoa_r+0x738>
 80050fe:	42ab      	cmp	r3, r5
 8005100:	bfa8      	it	ge
 8005102:	462b      	movge	r3, r5
 8005104:	9a07      	ldr	r2, [sp, #28]
 8005106:	eba9 0903 	sub.w	r9, r9, r3
 800510a:	1aed      	subs	r5, r5, r3
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	9307      	str	r3, [sp, #28]
 8005110:	9b08      	ldr	r3, [sp, #32]
 8005112:	b1eb      	cbz	r3, 8005150 <_dtoa_r+0x778>
 8005114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005116:	2b00      	cmp	r3, #0
 8005118:	d065      	beq.n	80051e6 <_dtoa_r+0x80e>
 800511a:	b18e      	cbz	r6, 8005140 <_dtoa_r+0x768>
 800511c:	4639      	mov	r1, r7
 800511e:	4632      	mov	r2, r6
 8005120:	4620      	mov	r0, r4
 8005122:	f000 fd8d 	bl	8005c40 <__pow5mult>
 8005126:	465a      	mov	r2, fp
 8005128:	4601      	mov	r1, r0
 800512a:	4607      	mov	r7, r0
 800512c:	4620      	mov	r0, r4
 800512e:	f000 fcf1 	bl	8005b14 <__multiply>
 8005132:	4659      	mov	r1, fp
 8005134:	900a      	str	r0, [sp, #40]	; 0x28
 8005136:	4620      	mov	r0, r4
 8005138:	f000 fc43 	bl	80059c2 <_Bfree>
 800513c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800513e:	469b      	mov	fp, r3
 8005140:	9b08      	ldr	r3, [sp, #32]
 8005142:	1b9a      	subs	r2, r3, r6
 8005144:	d004      	beq.n	8005150 <_dtoa_r+0x778>
 8005146:	4659      	mov	r1, fp
 8005148:	4620      	mov	r0, r4
 800514a:	f000 fd79 	bl	8005c40 <__pow5mult>
 800514e:	4683      	mov	fp, r0
 8005150:	2101      	movs	r1, #1
 8005152:	4620      	mov	r0, r4
 8005154:	f000 fcd5 	bl	8005b02 <__i2b>
 8005158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800515a:	4606      	mov	r6, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 81c6 	beq.w	80054ee <_dtoa_r+0xb16>
 8005162:	461a      	mov	r2, r3
 8005164:	4601      	mov	r1, r0
 8005166:	4620      	mov	r0, r4
 8005168:	f000 fd6a 	bl	8005c40 <__pow5mult>
 800516c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800516e:	4606      	mov	r6, r0
 8005170:	2b01      	cmp	r3, #1
 8005172:	dc3e      	bgt.n	80051f2 <_dtoa_r+0x81a>
 8005174:	9b02      	ldr	r3, [sp, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d137      	bne.n	80051ea <_dtoa_r+0x812>
 800517a:	9b03      	ldr	r3, [sp, #12]
 800517c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005180:	2b00      	cmp	r3, #0
 8005182:	d134      	bne.n	80051ee <_dtoa_r+0x816>
 8005184:	9b03      	ldr	r3, [sp, #12]
 8005186:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800518a:	0d1b      	lsrs	r3, r3, #20
 800518c:	051b      	lsls	r3, r3, #20
 800518e:	b12b      	cbz	r3, 800519c <_dtoa_r+0x7c4>
 8005190:	9b07      	ldr	r3, [sp, #28]
 8005192:	f109 0901 	add.w	r9, r9, #1
 8005196:	3301      	adds	r3, #1
 8005198:	9307      	str	r3, [sp, #28]
 800519a:	2301      	movs	r3, #1
 800519c:	9308      	str	r3, [sp, #32]
 800519e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d128      	bne.n	80051f6 <_dtoa_r+0x81e>
 80051a4:	2001      	movs	r0, #1
 80051a6:	e02e      	b.n	8005206 <_dtoa_r+0x82e>
 80051a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80051ae:	e796      	b.n	80050de <_dtoa_r+0x706>
 80051b0:	9b08      	ldr	r3, [sp, #32]
 80051b2:	f108 36ff 	add.w	r6, r8, #4294967295
 80051b6:	42b3      	cmp	r3, r6
 80051b8:	bfb7      	itett	lt
 80051ba:	9b08      	ldrlt	r3, [sp, #32]
 80051bc:	1b9e      	subge	r6, r3, r6
 80051be:	1af2      	sublt	r2, r6, r3
 80051c0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80051c2:	bfbf      	itttt	lt
 80051c4:	9608      	strlt	r6, [sp, #32]
 80051c6:	189b      	addlt	r3, r3, r2
 80051c8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80051ca:	2600      	movlt	r6, #0
 80051cc:	f1b8 0f00 	cmp.w	r8, #0
 80051d0:	bfb9      	ittee	lt
 80051d2:	eba9 0508 	sublt.w	r5, r9, r8
 80051d6:	2300      	movlt	r3, #0
 80051d8:	464d      	movge	r5, r9
 80051da:	4643      	movge	r3, r8
 80051dc:	e781      	b.n	80050e2 <_dtoa_r+0x70a>
 80051de:	9e08      	ldr	r6, [sp, #32]
 80051e0:	464d      	mov	r5, r9
 80051e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80051e4:	e786      	b.n	80050f4 <_dtoa_r+0x71c>
 80051e6:	9a08      	ldr	r2, [sp, #32]
 80051e8:	e7ad      	b.n	8005146 <_dtoa_r+0x76e>
 80051ea:	2300      	movs	r3, #0
 80051ec:	e7d6      	b.n	800519c <_dtoa_r+0x7c4>
 80051ee:	9b02      	ldr	r3, [sp, #8]
 80051f0:	e7d4      	b.n	800519c <_dtoa_r+0x7c4>
 80051f2:	2300      	movs	r3, #0
 80051f4:	9308      	str	r3, [sp, #32]
 80051f6:	6933      	ldr	r3, [r6, #16]
 80051f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80051fc:	6918      	ldr	r0, [r3, #16]
 80051fe:	f000 fc32 	bl	8005a66 <__hi0bits>
 8005202:	f1c0 0020 	rsb	r0, r0, #32
 8005206:	9b07      	ldr	r3, [sp, #28]
 8005208:	4418      	add	r0, r3
 800520a:	f010 001f 	ands.w	r0, r0, #31
 800520e:	d047      	beq.n	80052a0 <_dtoa_r+0x8c8>
 8005210:	f1c0 0320 	rsb	r3, r0, #32
 8005214:	2b04      	cmp	r3, #4
 8005216:	dd3b      	ble.n	8005290 <_dtoa_r+0x8b8>
 8005218:	9b07      	ldr	r3, [sp, #28]
 800521a:	f1c0 001c 	rsb	r0, r0, #28
 800521e:	4481      	add	r9, r0
 8005220:	4405      	add	r5, r0
 8005222:	4403      	add	r3, r0
 8005224:	9307      	str	r3, [sp, #28]
 8005226:	f1b9 0f00 	cmp.w	r9, #0
 800522a:	dd05      	ble.n	8005238 <_dtoa_r+0x860>
 800522c:	4659      	mov	r1, fp
 800522e:	464a      	mov	r2, r9
 8005230:	4620      	mov	r0, r4
 8005232:	f000 fd53 	bl	8005cdc <__lshift>
 8005236:	4683      	mov	fp, r0
 8005238:	9b07      	ldr	r3, [sp, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	dd05      	ble.n	800524a <_dtoa_r+0x872>
 800523e:	4631      	mov	r1, r6
 8005240:	461a      	mov	r2, r3
 8005242:	4620      	mov	r0, r4
 8005244:	f000 fd4a 	bl	8005cdc <__lshift>
 8005248:	4606      	mov	r6, r0
 800524a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800524c:	b353      	cbz	r3, 80052a4 <_dtoa_r+0x8cc>
 800524e:	4631      	mov	r1, r6
 8005250:	4658      	mov	r0, fp
 8005252:	f000 fd97 	bl	8005d84 <__mcmp>
 8005256:	2800      	cmp	r0, #0
 8005258:	da24      	bge.n	80052a4 <_dtoa_r+0x8cc>
 800525a:	2300      	movs	r3, #0
 800525c:	4659      	mov	r1, fp
 800525e:	220a      	movs	r2, #10
 8005260:	4620      	mov	r0, r4
 8005262:	f000 fbc5 	bl	80059f0 <__multadd>
 8005266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005268:	f10a 3aff 	add.w	sl, sl, #4294967295
 800526c:	4683      	mov	fp, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8144 	beq.w	80054fc <_dtoa_r+0xb24>
 8005274:	2300      	movs	r3, #0
 8005276:	4639      	mov	r1, r7
 8005278:	220a      	movs	r2, #10
 800527a:	4620      	mov	r0, r4
 800527c:	f000 fbb8 	bl	80059f0 <__multadd>
 8005280:	9b04      	ldr	r3, [sp, #16]
 8005282:	4607      	mov	r7, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	dc4d      	bgt.n	8005324 <_dtoa_r+0x94c>
 8005288:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800528a:	2b02      	cmp	r3, #2
 800528c:	dd4a      	ble.n	8005324 <_dtoa_r+0x94c>
 800528e:	e011      	b.n	80052b4 <_dtoa_r+0x8dc>
 8005290:	d0c9      	beq.n	8005226 <_dtoa_r+0x84e>
 8005292:	9a07      	ldr	r2, [sp, #28]
 8005294:	331c      	adds	r3, #28
 8005296:	441a      	add	r2, r3
 8005298:	4499      	add	r9, r3
 800529a:	441d      	add	r5, r3
 800529c:	4613      	mov	r3, r2
 800529e:	e7c1      	b.n	8005224 <_dtoa_r+0x84c>
 80052a0:	4603      	mov	r3, r0
 80052a2:	e7f6      	b.n	8005292 <_dtoa_r+0x8ba>
 80052a4:	f1b8 0f00 	cmp.w	r8, #0
 80052a8:	dc36      	bgt.n	8005318 <_dtoa_r+0x940>
 80052aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	dd33      	ble.n	8005318 <_dtoa_r+0x940>
 80052b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80052b4:	9b04      	ldr	r3, [sp, #16]
 80052b6:	b963      	cbnz	r3, 80052d2 <_dtoa_r+0x8fa>
 80052b8:	4631      	mov	r1, r6
 80052ba:	2205      	movs	r2, #5
 80052bc:	4620      	mov	r0, r4
 80052be:	f000 fb97 	bl	80059f0 <__multadd>
 80052c2:	4601      	mov	r1, r0
 80052c4:	4606      	mov	r6, r0
 80052c6:	4658      	mov	r0, fp
 80052c8:	f000 fd5c 	bl	8005d84 <__mcmp>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	f73f add3 	bgt.w	8004e78 <_dtoa_r+0x4a0>
 80052d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80052d4:	9d06      	ldr	r5, [sp, #24]
 80052d6:	ea6f 0a03 	mvn.w	sl, r3
 80052da:	f04f 0900 	mov.w	r9, #0
 80052de:	4631      	mov	r1, r6
 80052e0:	4620      	mov	r0, r4
 80052e2:	f000 fb6e 	bl	80059c2 <_Bfree>
 80052e6:	2f00      	cmp	r7, #0
 80052e8:	f43f aebd 	beq.w	8005066 <_dtoa_r+0x68e>
 80052ec:	f1b9 0f00 	cmp.w	r9, #0
 80052f0:	d005      	beq.n	80052fe <_dtoa_r+0x926>
 80052f2:	45b9      	cmp	r9, r7
 80052f4:	d003      	beq.n	80052fe <_dtoa_r+0x926>
 80052f6:	4649      	mov	r1, r9
 80052f8:	4620      	mov	r0, r4
 80052fa:	f000 fb62 	bl	80059c2 <_Bfree>
 80052fe:	4639      	mov	r1, r7
 8005300:	4620      	mov	r0, r4
 8005302:	f000 fb5e 	bl	80059c2 <_Bfree>
 8005306:	e6ae      	b.n	8005066 <_dtoa_r+0x68e>
 8005308:	2600      	movs	r6, #0
 800530a:	4637      	mov	r7, r6
 800530c:	e7e1      	b.n	80052d2 <_dtoa_r+0x8fa>
 800530e:	46ba      	mov	sl, r7
 8005310:	4637      	mov	r7, r6
 8005312:	e5b1      	b.n	8004e78 <_dtoa_r+0x4a0>
 8005314:	40240000 	.word	0x40240000
 8005318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800531a:	f8cd 8010 	str.w	r8, [sp, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 80f3 	beq.w	800550a <_dtoa_r+0xb32>
 8005324:	2d00      	cmp	r5, #0
 8005326:	dd05      	ble.n	8005334 <_dtoa_r+0x95c>
 8005328:	4639      	mov	r1, r7
 800532a:	462a      	mov	r2, r5
 800532c:	4620      	mov	r0, r4
 800532e:	f000 fcd5 	bl	8005cdc <__lshift>
 8005332:	4607      	mov	r7, r0
 8005334:	9b08      	ldr	r3, [sp, #32]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d04c      	beq.n	80053d4 <_dtoa_r+0x9fc>
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4620      	mov	r0, r4
 800533e:	f000 fb0c 	bl	800595a <_Balloc>
 8005342:	4605      	mov	r5, r0
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	f107 010c 	add.w	r1, r7, #12
 800534a:	3202      	adds	r2, #2
 800534c:	0092      	lsls	r2, r2, #2
 800534e:	300c      	adds	r0, #12
 8005350:	f000 faf8 	bl	8005944 <memcpy>
 8005354:	2201      	movs	r2, #1
 8005356:	4629      	mov	r1, r5
 8005358:	4620      	mov	r0, r4
 800535a:	f000 fcbf 	bl	8005cdc <__lshift>
 800535e:	46b9      	mov	r9, r7
 8005360:	4607      	mov	r7, r0
 8005362:	9b06      	ldr	r3, [sp, #24]
 8005364:	9307      	str	r3, [sp, #28]
 8005366:	9b02      	ldr	r3, [sp, #8]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	9308      	str	r3, [sp, #32]
 800536e:	4631      	mov	r1, r6
 8005370:	4658      	mov	r0, fp
 8005372:	f7ff faa1 	bl	80048b8 <quorem>
 8005376:	4649      	mov	r1, r9
 8005378:	4605      	mov	r5, r0
 800537a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800537e:	4658      	mov	r0, fp
 8005380:	f000 fd00 	bl	8005d84 <__mcmp>
 8005384:	463a      	mov	r2, r7
 8005386:	9002      	str	r0, [sp, #8]
 8005388:	4631      	mov	r1, r6
 800538a:	4620      	mov	r0, r4
 800538c:	f000 fd14 	bl	8005db8 <__mdiff>
 8005390:	68c3      	ldr	r3, [r0, #12]
 8005392:	4602      	mov	r2, r0
 8005394:	bb03      	cbnz	r3, 80053d8 <_dtoa_r+0xa00>
 8005396:	4601      	mov	r1, r0
 8005398:	9009      	str	r0, [sp, #36]	; 0x24
 800539a:	4658      	mov	r0, fp
 800539c:	f000 fcf2 	bl	8005d84 <__mcmp>
 80053a0:	4603      	mov	r3, r0
 80053a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053a4:	4611      	mov	r1, r2
 80053a6:	4620      	mov	r0, r4
 80053a8:	9309      	str	r3, [sp, #36]	; 0x24
 80053aa:	f000 fb0a 	bl	80059c2 <_Bfree>
 80053ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b0:	b9a3      	cbnz	r3, 80053dc <_dtoa_r+0xa04>
 80053b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80053b4:	b992      	cbnz	r2, 80053dc <_dtoa_r+0xa04>
 80053b6:	9a08      	ldr	r2, [sp, #32]
 80053b8:	b982      	cbnz	r2, 80053dc <_dtoa_r+0xa04>
 80053ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80053be:	d029      	beq.n	8005414 <_dtoa_r+0xa3c>
 80053c0:	9b02      	ldr	r3, [sp, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	dd01      	ble.n	80053ca <_dtoa_r+0x9f2>
 80053c6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80053ca:	9b07      	ldr	r3, [sp, #28]
 80053cc:	1c5d      	adds	r5, r3, #1
 80053ce:	f883 8000 	strb.w	r8, [r3]
 80053d2:	e784      	b.n	80052de <_dtoa_r+0x906>
 80053d4:	4638      	mov	r0, r7
 80053d6:	e7c2      	b.n	800535e <_dtoa_r+0x986>
 80053d8:	2301      	movs	r3, #1
 80053da:	e7e3      	b.n	80053a4 <_dtoa_r+0x9cc>
 80053dc:	9a02      	ldr	r2, [sp, #8]
 80053de:	2a00      	cmp	r2, #0
 80053e0:	db04      	blt.n	80053ec <_dtoa_r+0xa14>
 80053e2:	d123      	bne.n	800542c <_dtoa_r+0xa54>
 80053e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80053e6:	bb0a      	cbnz	r2, 800542c <_dtoa_r+0xa54>
 80053e8:	9a08      	ldr	r2, [sp, #32]
 80053ea:	b9fa      	cbnz	r2, 800542c <_dtoa_r+0xa54>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	ddec      	ble.n	80053ca <_dtoa_r+0x9f2>
 80053f0:	4659      	mov	r1, fp
 80053f2:	2201      	movs	r2, #1
 80053f4:	4620      	mov	r0, r4
 80053f6:	f000 fc71 	bl	8005cdc <__lshift>
 80053fa:	4631      	mov	r1, r6
 80053fc:	4683      	mov	fp, r0
 80053fe:	f000 fcc1 	bl	8005d84 <__mcmp>
 8005402:	2800      	cmp	r0, #0
 8005404:	dc03      	bgt.n	800540e <_dtoa_r+0xa36>
 8005406:	d1e0      	bne.n	80053ca <_dtoa_r+0x9f2>
 8005408:	f018 0f01 	tst.w	r8, #1
 800540c:	d0dd      	beq.n	80053ca <_dtoa_r+0x9f2>
 800540e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005412:	d1d8      	bne.n	80053c6 <_dtoa_r+0x9ee>
 8005414:	9b07      	ldr	r3, [sp, #28]
 8005416:	9a07      	ldr	r2, [sp, #28]
 8005418:	1c5d      	adds	r5, r3, #1
 800541a:	2339      	movs	r3, #57	; 0x39
 800541c:	7013      	strb	r3, [r2, #0]
 800541e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005422:	1e6a      	subs	r2, r5, #1
 8005424:	2b39      	cmp	r3, #57	; 0x39
 8005426:	d04d      	beq.n	80054c4 <_dtoa_r+0xaec>
 8005428:	3301      	adds	r3, #1
 800542a:	e052      	b.n	80054d2 <_dtoa_r+0xafa>
 800542c:	9a07      	ldr	r2, [sp, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f102 0501 	add.w	r5, r2, #1
 8005434:	dd06      	ble.n	8005444 <_dtoa_r+0xa6c>
 8005436:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800543a:	d0eb      	beq.n	8005414 <_dtoa_r+0xa3c>
 800543c:	f108 0801 	add.w	r8, r8, #1
 8005440:	9b07      	ldr	r3, [sp, #28]
 8005442:	e7c4      	b.n	80053ce <_dtoa_r+0x9f6>
 8005444:	9b06      	ldr	r3, [sp, #24]
 8005446:	9a04      	ldr	r2, [sp, #16]
 8005448:	1aeb      	subs	r3, r5, r3
 800544a:	4293      	cmp	r3, r2
 800544c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005450:	d021      	beq.n	8005496 <_dtoa_r+0xabe>
 8005452:	4659      	mov	r1, fp
 8005454:	2300      	movs	r3, #0
 8005456:	220a      	movs	r2, #10
 8005458:	4620      	mov	r0, r4
 800545a:	f000 fac9 	bl	80059f0 <__multadd>
 800545e:	45b9      	cmp	r9, r7
 8005460:	4683      	mov	fp, r0
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	f04f 020a 	mov.w	r2, #10
 800546a:	4649      	mov	r1, r9
 800546c:	4620      	mov	r0, r4
 800546e:	d105      	bne.n	800547c <_dtoa_r+0xaa4>
 8005470:	f000 fabe 	bl	80059f0 <__multadd>
 8005474:	4681      	mov	r9, r0
 8005476:	4607      	mov	r7, r0
 8005478:	9507      	str	r5, [sp, #28]
 800547a:	e778      	b.n	800536e <_dtoa_r+0x996>
 800547c:	f000 fab8 	bl	80059f0 <__multadd>
 8005480:	4639      	mov	r1, r7
 8005482:	4681      	mov	r9, r0
 8005484:	2300      	movs	r3, #0
 8005486:	220a      	movs	r2, #10
 8005488:	4620      	mov	r0, r4
 800548a:	f000 fab1 	bl	80059f0 <__multadd>
 800548e:	4607      	mov	r7, r0
 8005490:	e7f2      	b.n	8005478 <_dtoa_r+0xaa0>
 8005492:	f04f 0900 	mov.w	r9, #0
 8005496:	4659      	mov	r1, fp
 8005498:	2201      	movs	r2, #1
 800549a:	4620      	mov	r0, r4
 800549c:	f000 fc1e 	bl	8005cdc <__lshift>
 80054a0:	4631      	mov	r1, r6
 80054a2:	4683      	mov	fp, r0
 80054a4:	f000 fc6e 	bl	8005d84 <__mcmp>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	dcb8      	bgt.n	800541e <_dtoa_r+0xa46>
 80054ac:	d102      	bne.n	80054b4 <_dtoa_r+0xadc>
 80054ae:	f018 0f01 	tst.w	r8, #1
 80054b2:	d1b4      	bne.n	800541e <_dtoa_r+0xa46>
 80054b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054b8:	1e6a      	subs	r2, r5, #1
 80054ba:	2b30      	cmp	r3, #48	; 0x30
 80054bc:	f47f af0f 	bne.w	80052de <_dtoa_r+0x906>
 80054c0:	4615      	mov	r5, r2
 80054c2:	e7f7      	b.n	80054b4 <_dtoa_r+0xadc>
 80054c4:	9b06      	ldr	r3, [sp, #24]
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d105      	bne.n	80054d6 <_dtoa_r+0xafe>
 80054ca:	2331      	movs	r3, #49	; 0x31
 80054cc:	9a06      	ldr	r2, [sp, #24]
 80054ce:	f10a 0a01 	add.w	sl, sl, #1
 80054d2:	7013      	strb	r3, [r2, #0]
 80054d4:	e703      	b.n	80052de <_dtoa_r+0x906>
 80054d6:	4615      	mov	r5, r2
 80054d8:	e7a1      	b.n	800541e <_dtoa_r+0xa46>
 80054da:	4b17      	ldr	r3, [pc, #92]	; (8005538 <_dtoa_r+0xb60>)
 80054dc:	f7ff bae1 	b.w	8004aa2 <_dtoa_r+0xca>
 80054e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f47f aabb 	bne.w	8004a5e <_dtoa_r+0x86>
 80054e8:	4b14      	ldr	r3, [pc, #80]	; (800553c <_dtoa_r+0xb64>)
 80054ea:	f7ff bada 	b.w	8004aa2 <_dtoa_r+0xca>
 80054ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	f77f ae3f 	ble.w	8005174 <_dtoa_r+0x79c>
 80054f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054f8:	9308      	str	r3, [sp, #32]
 80054fa:	e653      	b.n	80051a4 <_dtoa_r+0x7cc>
 80054fc:	9b04      	ldr	r3, [sp, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	dc03      	bgt.n	800550a <_dtoa_r+0xb32>
 8005502:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005504:	2b02      	cmp	r3, #2
 8005506:	f73f aed5 	bgt.w	80052b4 <_dtoa_r+0x8dc>
 800550a:	9d06      	ldr	r5, [sp, #24]
 800550c:	4631      	mov	r1, r6
 800550e:	4658      	mov	r0, fp
 8005510:	f7ff f9d2 	bl	80048b8 <quorem>
 8005514:	9b06      	ldr	r3, [sp, #24]
 8005516:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800551a:	f805 8b01 	strb.w	r8, [r5], #1
 800551e:	9a04      	ldr	r2, [sp, #16]
 8005520:	1aeb      	subs	r3, r5, r3
 8005522:	429a      	cmp	r2, r3
 8005524:	ddb5      	ble.n	8005492 <_dtoa_r+0xaba>
 8005526:	4659      	mov	r1, fp
 8005528:	2300      	movs	r3, #0
 800552a:	220a      	movs	r2, #10
 800552c:	4620      	mov	r0, r4
 800552e:	f000 fa5f 	bl	80059f0 <__multadd>
 8005532:	4683      	mov	fp, r0
 8005534:	e7ea      	b.n	800550c <_dtoa_r+0xb34>
 8005536:	bf00      	nop
 8005538:	080079a4 	.word	0x080079a4
 800553c:	080079c8 	.word	0x080079c8

08005540 <__sflush_r>:
 8005540:	898a      	ldrh	r2, [r1, #12]
 8005542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005546:	4605      	mov	r5, r0
 8005548:	0710      	lsls	r0, r2, #28
 800554a:	460c      	mov	r4, r1
 800554c:	d458      	bmi.n	8005600 <__sflush_r+0xc0>
 800554e:	684b      	ldr	r3, [r1, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	dc05      	bgt.n	8005560 <__sflush_r+0x20>
 8005554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	dc02      	bgt.n	8005560 <__sflush_r+0x20>
 800555a:	2000      	movs	r0, #0
 800555c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005562:	2e00      	cmp	r6, #0
 8005564:	d0f9      	beq.n	800555a <__sflush_r+0x1a>
 8005566:	2300      	movs	r3, #0
 8005568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800556c:	682f      	ldr	r7, [r5, #0]
 800556e:	6a21      	ldr	r1, [r4, #32]
 8005570:	602b      	str	r3, [r5, #0]
 8005572:	d032      	beq.n	80055da <__sflush_r+0x9a>
 8005574:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	075a      	lsls	r2, r3, #29
 800557a:	d505      	bpl.n	8005588 <__sflush_r+0x48>
 800557c:	6863      	ldr	r3, [r4, #4]
 800557e:	1ac0      	subs	r0, r0, r3
 8005580:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005582:	b10b      	cbz	r3, 8005588 <__sflush_r+0x48>
 8005584:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005586:	1ac0      	subs	r0, r0, r3
 8005588:	2300      	movs	r3, #0
 800558a:	4602      	mov	r2, r0
 800558c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800558e:	6a21      	ldr	r1, [r4, #32]
 8005590:	4628      	mov	r0, r5
 8005592:	47b0      	blx	r6
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	d106      	bne.n	80055a8 <__sflush_r+0x68>
 800559a:	6829      	ldr	r1, [r5, #0]
 800559c:	291d      	cmp	r1, #29
 800559e:	d848      	bhi.n	8005632 <__sflush_r+0xf2>
 80055a0:	4a29      	ldr	r2, [pc, #164]	; (8005648 <__sflush_r+0x108>)
 80055a2:	40ca      	lsrs	r2, r1
 80055a4:	07d6      	lsls	r6, r2, #31
 80055a6:	d544      	bpl.n	8005632 <__sflush_r+0xf2>
 80055a8:	2200      	movs	r2, #0
 80055aa:	6062      	str	r2, [r4, #4]
 80055ac:	6922      	ldr	r2, [r4, #16]
 80055ae:	04d9      	lsls	r1, r3, #19
 80055b0:	6022      	str	r2, [r4, #0]
 80055b2:	d504      	bpl.n	80055be <__sflush_r+0x7e>
 80055b4:	1c42      	adds	r2, r0, #1
 80055b6:	d101      	bne.n	80055bc <__sflush_r+0x7c>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	b903      	cbnz	r3, 80055be <__sflush_r+0x7e>
 80055bc:	6560      	str	r0, [r4, #84]	; 0x54
 80055be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055c0:	602f      	str	r7, [r5, #0]
 80055c2:	2900      	cmp	r1, #0
 80055c4:	d0c9      	beq.n	800555a <__sflush_r+0x1a>
 80055c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055ca:	4299      	cmp	r1, r3
 80055cc:	d002      	beq.n	80055d4 <__sflush_r+0x94>
 80055ce:	4628      	mov	r0, r5
 80055d0:	f000 fcae 	bl	8005f30 <_free_r>
 80055d4:	2000      	movs	r0, #0
 80055d6:	6360      	str	r0, [r4, #52]	; 0x34
 80055d8:	e7c0      	b.n	800555c <__sflush_r+0x1c>
 80055da:	2301      	movs	r3, #1
 80055dc:	4628      	mov	r0, r5
 80055de:	47b0      	blx	r6
 80055e0:	1c41      	adds	r1, r0, #1
 80055e2:	d1c8      	bne.n	8005576 <__sflush_r+0x36>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0c5      	beq.n	8005576 <__sflush_r+0x36>
 80055ea:	2b1d      	cmp	r3, #29
 80055ec:	d001      	beq.n	80055f2 <__sflush_r+0xb2>
 80055ee:	2b16      	cmp	r3, #22
 80055f0:	d101      	bne.n	80055f6 <__sflush_r+0xb6>
 80055f2:	602f      	str	r7, [r5, #0]
 80055f4:	e7b1      	b.n	800555a <__sflush_r+0x1a>
 80055f6:	89a3      	ldrh	r3, [r4, #12]
 80055f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055fc:	81a3      	strh	r3, [r4, #12]
 80055fe:	e7ad      	b.n	800555c <__sflush_r+0x1c>
 8005600:	690f      	ldr	r7, [r1, #16]
 8005602:	2f00      	cmp	r7, #0
 8005604:	d0a9      	beq.n	800555a <__sflush_r+0x1a>
 8005606:	0793      	lsls	r3, r2, #30
 8005608:	bf18      	it	ne
 800560a:	2300      	movne	r3, #0
 800560c:	680e      	ldr	r6, [r1, #0]
 800560e:	bf08      	it	eq
 8005610:	694b      	ldreq	r3, [r1, #20]
 8005612:	eba6 0807 	sub.w	r8, r6, r7
 8005616:	600f      	str	r7, [r1, #0]
 8005618:	608b      	str	r3, [r1, #8]
 800561a:	f1b8 0f00 	cmp.w	r8, #0
 800561e:	dd9c      	ble.n	800555a <__sflush_r+0x1a>
 8005620:	4643      	mov	r3, r8
 8005622:	463a      	mov	r2, r7
 8005624:	6a21      	ldr	r1, [r4, #32]
 8005626:	4628      	mov	r0, r5
 8005628:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800562a:	47b0      	blx	r6
 800562c:	2800      	cmp	r0, #0
 800562e:	dc06      	bgt.n	800563e <__sflush_r+0xfe>
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	f04f 30ff 	mov.w	r0, #4294967295
 800563c:	e78e      	b.n	800555c <__sflush_r+0x1c>
 800563e:	4407      	add	r7, r0
 8005640:	eba8 0800 	sub.w	r8, r8, r0
 8005644:	e7e9      	b.n	800561a <__sflush_r+0xda>
 8005646:	bf00      	nop
 8005648:	20400001 	.word	0x20400001

0800564c <_fflush_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	690b      	ldr	r3, [r1, #16]
 8005650:	4605      	mov	r5, r0
 8005652:	460c      	mov	r4, r1
 8005654:	b1db      	cbz	r3, 800568e <_fflush_r+0x42>
 8005656:	b118      	cbz	r0, 8005660 <_fflush_r+0x14>
 8005658:	6983      	ldr	r3, [r0, #24]
 800565a:	b90b      	cbnz	r3, 8005660 <_fflush_r+0x14>
 800565c:	f000 f860 	bl	8005720 <__sinit>
 8005660:	4b0c      	ldr	r3, [pc, #48]	; (8005694 <_fflush_r+0x48>)
 8005662:	429c      	cmp	r4, r3
 8005664:	d109      	bne.n	800567a <_fflush_r+0x2e>
 8005666:	686c      	ldr	r4, [r5, #4]
 8005668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800566c:	b17b      	cbz	r3, 800568e <_fflush_r+0x42>
 800566e:	4621      	mov	r1, r4
 8005670:	4628      	mov	r0, r5
 8005672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005676:	f7ff bf63 	b.w	8005540 <__sflush_r>
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <_fflush_r+0x4c>)
 800567c:	429c      	cmp	r4, r3
 800567e:	d101      	bne.n	8005684 <_fflush_r+0x38>
 8005680:	68ac      	ldr	r4, [r5, #8]
 8005682:	e7f1      	b.n	8005668 <_fflush_r+0x1c>
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <_fflush_r+0x50>)
 8005686:	429c      	cmp	r4, r3
 8005688:	bf08      	it	eq
 800568a:	68ec      	ldreq	r4, [r5, #12]
 800568c:	e7ec      	b.n	8005668 <_fflush_r+0x1c>
 800568e:	2000      	movs	r0, #0
 8005690:	bd38      	pop	{r3, r4, r5, pc}
 8005692:	bf00      	nop
 8005694:	080079f8 	.word	0x080079f8
 8005698:	08007a18 	.word	0x08007a18
 800569c:	080079d8 	.word	0x080079d8

080056a0 <std>:
 80056a0:	2300      	movs	r3, #0
 80056a2:	b510      	push	{r4, lr}
 80056a4:	4604      	mov	r4, r0
 80056a6:	e9c0 3300 	strd	r3, r3, [r0]
 80056aa:	6083      	str	r3, [r0, #8]
 80056ac:	8181      	strh	r1, [r0, #12]
 80056ae:	6643      	str	r3, [r0, #100]	; 0x64
 80056b0:	81c2      	strh	r2, [r0, #14]
 80056b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056b6:	6183      	str	r3, [r0, #24]
 80056b8:	4619      	mov	r1, r3
 80056ba:	2208      	movs	r2, #8
 80056bc:	305c      	adds	r0, #92	; 0x5c
 80056be:	f7fe fb67 	bl	8003d90 <memset>
 80056c2:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <std+0x38>)
 80056c4:	6224      	str	r4, [r4, #32]
 80056c6:	6263      	str	r3, [r4, #36]	; 0x24
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <std+0x3c>)
 80056ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <std+0x40>)
 80056ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <std+0x44>)
 80056d2:	6323      	str	r3, [r4, #48]	; 0x30
 80056d4:	bd10      	pop	{r4, pc}
 80056d6:	bf00      	nop
 80056d8:	08006319 	.word	0x08006319
 80056dc:	0800633b 	.word	0x0800633b
 80056e0:	08006373 	.word	0x08006373
 80056e4:	08006397 	.word	0x08006397

080056e8 <_cleanup_r>:
 80056e8:	4901      	ldr	r1, [pc, #4]	; (80056f0 <_cleanup_r+0x8>)
 80056ea:	f000 b885 	b.w	80057f8 <_fwalk_reent>
 80056ee:	bf00      	nop
 80056f0:	0800564d 	.word	0x0800564d

080056f4 <__sfmoreglue>:
 80056f4:	b570      	push	{r4, r5, r6, lr}
 80056f6:	2568      	movs	r5, #104	; 0x68
 80056f8:	1e4a      	subs	r2, r1, #1
 80056fa:	4355      	muls	r5, r2
 80056fc:	460e      	mov	r6, r1
 80056fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005702:	f000 fc61 	bl	8005fc8 <_malloc_r>
 8005706:	4604      	mov	r4, r0
 8005708:	b140      	cbz	r0, 800571c <__sfmoreglue+0x28>
 800570a:	2100      	movs	r1, #0
 800570c:	e9c0 1600 	strd	r1, r6, [r0]
 8005710:	300c      	adds	r0, #12
 8005712:	60a0      	str	r0, [r4, #8]
 8005714:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005718:	f7fe fb3a 	bl	8003d90 <memset>
 800571c:	4620      	mov	r0, r4
 800571e:	bd70      	pop	{r4, r5, r6, pc}

08005720 <__sinit>:
 8005720:	6983      	ldr	r3, [r0, #24]
 8005722:	b510      	push	{r4, lr}
 8005724:	4604      	mov	r4, r0
 8005726:	bb33      	cbnz	r3, 8005776 <__sinit+0x56>
 8005728:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800572c:	6503      	str	r3, [r0, #80]	; 0x50
 800572e:	4b12      	ldr	r3, [pc, #72]	; (8005778 <__sinit+0x58>)
 8005730:	4a12      	ldr	r2, [pc, #72]	; (800577c <__sinit+0x5c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6282      	str	r2, [r0, #40]	; 0x28
 8005736:	4298      	cmp	r0, r3
 8005738:	bf04      	itt	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	6183      	streq	r3, [r0, #24]
 800573e:	f000 f81f 	bl	8005780 <__sfp>
 8005742:	6060      	str	r0, [r4, #4]
 8005744:	4620      	mov	r0, r4
 8005746:	f000 f81b 	bl	8005780 <__sfp>
 800574a:	60a0      	str	r0, [r4, #8]
 800574c:	4620      	mov	r0, r4
 800574e:	f000 f817 	bl	8005780 <__sfp>
 8005752:	2200      	movs	r2, #0
 8005754:	60e0      	str	r0, [r4, #12]
 8005756:	2104      	movs	r1, #4
 8005758:	6860      	ldr	r0, [r4, #4]
 800575a:	f7ff ffa1 	bl	80056a0 <std>
 800575e:	2201      	movs	r2, #1
 8005760:	2109      	movs	r1, #9
 8005762:	68a0      	ldr	r0, [r4, #8]
 8005764:	f7ff ff9c 	bl	80056a0 <std>
 8005768:	2202      	movs	r2, #2
 800576a:	2112      	movs	r1, #18
 800576c:	68e0      	ldr	r0, [r4, #12]
 800576e:	f7ff ff97 	bl	80056a0 <std>
 8005772:	2301      	movs	r3, #1
 8005774:	61a3      	str	r3, [r4, #24]
 8005776:	bd10      	pop	{r4, pc}
 8005778:	08007990 	.word	0x08007990
 800577c:	080056e9 	.word	0x080056e9

08005780 <__sfp>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	4b1b      	ldr	r3, [pc, #108]	; (80057f0 <__sfp+0x70>)
 8005784:	4607      	mov	r7, r0
 8005786:	681e      	ldr	r6, [r3, #0]
 8005788:	69b3      	ldr	r3, [r6, #24]
 800578a:	b913      	cbnz	r3, 8005792 <__sfp+0x12>
 800578c:	4630      	mov	r0, r6
 800578e:	f7ff ffc7 	bl	8005720 <__sinit>
 8005792:	3648      	adds	r6, #72	; 0x48
 8005794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005798:	3b01      	subs	r3, #1
 800579a:	d503      	bpl.n	80057a4 <__sfp+0x24>
 800579c:	6833      	ldr	r3, [r6, #0]
 800579e:	b133      	cbz	r3, 80057ae <__sfp+0x2e>
 80057a0:	6836      	ldr	r6, [r6, #0]
 80057a2:	e7f7      	b.n	8005794 <__sfp+0x14>
 80057a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057a8:	b16d      	cbz	r5, 80057c6 <__sfp+0x46>
 80057aa:	3468      	adds	r4, #104	; 0x68
 80057ac:	e7f4      	b.n	8005798 <__sfp+0x18>
 80057ae:	2104      	movs	r1, #4
 80057b0:	4638      	mov	r0, r7
 80057b2:	f7ff ff9f 	bl	80056f4 <__sfmoreglue>
 80057b6:	6030      	str	r0, [r6, #0]
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d1f1      	bne.n	80057a0 <__sfp+0x20>
 80057bc:	230c      	movs	r3, #12
 80057be:	4604      	mov	r4, r0
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	4620      	mov	r0, r4
 80057c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057c6:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <__sfp+0x74>)
 80057c8:	6665      	str	r5, [r4, #100]	; 0x64
 80057ca:	e9c4 5500 	strd	r5, r5, [r4]
 80057ce:	60a5      	str	r5, [r4, #8]
 80057d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80057d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80057d8:	2208      	movs	r2, #8
 80057da:	4629      	mov	r1, r5
 80057dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057e0:	f7fe fad6 	bl	8003d90 <memset>
 80057e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057ec:	e7e9      	b.n	80057c2 <__sfp+0x42>
 80057ee:	bf00      	nop
 80057f0:	08007990 	.word	0x08007990
 80057f4:	ffff0001 	.word	0xffff0001

080057f8 <_fwalk_reent>:
 80057f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057fc:	4680      	mov	r8, r0
 80057fe:	4689      	mov	r9, r1
 8005800:	2600      	movs	r6, #0
 8005802:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005806:	b914      	cbnz	r4, 800580e <_fwalk_reent+0x16>
 8005808:	4630      	mov	r0, r6
 800580a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800580e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005812:	3f01      	subs	r7, #1
 8005814:	d501      	bpl.n	800581a <_fwalk_reent+0x22>
 8005816:	6824      	ldr	r4, [r4, #0]
 8005818:	e7f5      	b.n	8005806 <_fwalk_reent+0xe>
 800581a:	89ab      	ldrh	r3, [r5, #12]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d907      	bls.n	8005830 <_fwalk_reent+0x38>
 8005820:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005824:	3301      	adds	r3, #1
 8005826:	d003      	beq.n	8005830 <_fwalk_reent+0x38>
 8005828:	4629      	mov	r1, r5
 800582a:	4640      	mov	r0, r8
 800582c:	47c8      	blx	r9
 800582e:	4306      	orrs	r6, r0
 8005830:	3568      	adds	r5, #104	; 0x68
 8005832:	e7ee      	b.n	8005812 <_fwalk_reent+0x1a>

08005834 <_localeconv_r>:
 8005834:	4b04      	ldr	r3, [pc, #16]	; (8005848 <_localeconv_r+0x14>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6a18      	ldr	r0, [r3, #32]
 800583a:	4b04      	ldr	r3, [pc, #16]	; (800584c <_localeconv_r+0x18>)
 800583c:	2800      	cmp	r0, #0
 800583e:	bf08      	it	eq
 8005840:	4618      	moveq	r0, r3
 8005842:	30f0      	adds	r0, #240	; 0xf0
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	2000000c 	.word	0x2000000c
 800584c:	20000070 	.word	0x20000070

08005850 <__swhatbuf_r>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	460e      	mov	r6, r1
 8005854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005858:	b096      	sub	sp, #88	; 0x58
 800585a:	2900      	cmp	r1, #0
 800585c:	4614      	mov	r4, r2
 800585e:	461d      	mov	r5, r3
 8005860:	da07      	bge.n	8005872 <__swhatbuf_r+0x22>
 8005862:	2300      	movs	r3, #0
 8005864:	602b      	str	r3, [r5, #0]
 8005866:	89b3      	ldrh	r3, [r6, #12]
 8005868:	061a      	lsls	r2, r3, #24
 800586a:	d410      	bmi.n	800588e <__swhatbuf_r+0x3e>
 800586c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005870:	e00e      	b.n	8005890 <__swhatbuf_r+0x40>
 8005872:	466a      	mov	r2, sp
 8005874:	f000 fdb6 	bl	80063e4 <_fstat_r>
 8005878:	2800      	cmp	r0, #0
 800587a:	dbf2      	blt.n	8005862 <__swhatbuf_r+0x12>
 800587c:	9a01      	ldr	r2, [sp, #4]
 800587e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005882:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005886:	425a      	negs	r2, r3
 8005888:	415a      	adcs	r2, r3
 800588a:	602a      	str	r2, [r5, #0]
 800588c:	e7ee      	b.n	800586c <__swhatbuf_r+0x1c>
 800588e:	2340      	movs	r3, #64	; 0x40
 8005890:	2000      	movs	r0, #0
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	b016      	add	sp, #88	; 0x58
 8005896:	bd70      	pop	{r4, r5, r6, pc}

08005898 <__smakebuf_r>:
 8005898:	898b      	ldrh	r3, [r1, #12]
 800589a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800589c:	079d      	lsls	r5, r3, #30
 800589e:	4606      	mov	r6, r0
 80058a0:	460c      	mov	r4, r1
 80058a2:	d507      	bpl.n	80058b4 <__smakebuf_r+0x1c>
 80058a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	6123      	str	r3, [r4, #16]
 80058ac:	2301      	movs	r3, #1
 80058ae:	6163      	str	r3, [r4, #20]
 80058b0:	b002      	add	sp, #8
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
 80058b4:	ab01      	add	r3, sp, #4
 80058b6:	466a      	mov	r2, sp
 80058b8:	f7ff ffca 	bl	8005850 <__swhatbuf_r>
 80058bc:	9900      	ldr	r1, [sp, #0]
 80058be:	4605      	mov	r5, r0
 80058c0:	4630      	mov	r0, r6
 80058c2:	f000 fb81 	bl	8005fc8 <_malloc_r>
 80058c6:	b948      	cbnz	r0, 80058dc <__smakebuf_r+0x44>
 80058c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058cc:	059a      	lsls	r2, r3, #22
 80058ce:	d4ef      	bmi.n	80058b0 <__smakebuf_r+0x18>
 80058d0:	f023 0303 	bic.w	r3, r3, #3
 80058d4:	f043 0302 	orr.w	r3, r3, #2
 80058d8:	81a3      	strh	r3, [r4, #12]
 80058da:	e7e3      	b.n	80058a4 <__smakebuf_r+0xc>
 80058dc:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <__smakebuf_r+0x7c>)
 80058de:	62b3      	str	r3, [r6, #40]	; 0x28
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	6020      	str	r0, [r4, #0]
 80058e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e8:	81a3      	strh	r3, [r4, #12]
 80058ea:	9b00      	ldr	r3, [sp, #0]
 80058ec:	6120      	str	r0, [r4, #16]
 80058ee:	6163      	str	r3, [r4, #20]
 80058f0:	9b01      	ldr	r3, [sp, #4]
 80058f2:	b15b      	cbz	r3, 800590c <__smakebuf_r+0x74>
 80058f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058f8:	4630      	mov	r0, r6
 80058fa:	f000 fd85 	bl	8006408 <_isatty_r>
 80058fe:	b128      	cbz	r0, 800590c <__smakebuf_r+0x74>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	f023 0303 	bic.w	r3, r3, #3
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	81a3      	strh	r3, [r4, #12]
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	431d      	orrs	r5, r3
 8005910:	81a5      	strh	r5, [r4, #12]
 8005912:	e7cd      	b.n	80058b0 <__smakebuf_r+0x18>
 8005914:	080056e9 	.word	0x080056e9

08005918 <malloc>:
 8005918:	4b02      	ldr	r3, [pc, #8]	; (8005924 <malloc+0xc>)
 800591a:	4601      	mov	r1, r0
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	f000 bb53 	b.w	8005fc8 <_malloc_r>
 8005922:	bf00      	nop
 8005924:	2000000c 	.word	0x2000000c

08005928 <memchr>:
 8005928:	b510      	push	{r4, lr}
 800592a:	b2c9      	uxtb	r1, r1
 800592c:	4402      	add	r2, r0
 800592e:	4290      	cmp	r0, r2
 8005930:	4603      	mov	r3, r0
 8005932:	d101      	bne.n	8005938 <memchr+0x10>
 8005934:	2300      	movs	r3, #0
 8005936:	e003      	b.n	8005940 <memchr+0x18>
 8005938:	781c      	ldrb	r4, [r3, #0]
 800593a:	3001      	adds	r0, #1
 800593c:	428c      	cmp	r4, r1
 800593e:	d1f6      	bne.n	800592e <memchr+0x6>
 8005940:	4618      	mov	r0, r3
 8005942:	bd10      	pop	{r4, pc}

08005944 <memcpy>:
 8005944:	b510      	push	{r4, lr}
 8005946:	1e43      	subs	r3, r0, #1
 8005948:	440a      	add	r2, r1
 800594a:	4291      	cmp	r1, r2
 800594c:	d100      	bne.n	8005950 <memcpy+0xc>
 800594e:	bd10      	pop	{r4, pc}
 8005950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005954:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005958:	e7f7      	b.n	800594a <memcpy+0x6>

0800595a <_Balloc>:
 800595a:	b570      	push	{r4, r5, r6, lr}
 800595c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800595e:	4604      	mov	r4, r0
 8005960:	460e      	mov	r6, r1
 8005962:	b93d      	cbnz	r5, 8005974 <_Balloc+0x1a>
 8005964:	2010      	movs	r0, #16
 8005966:	f7ff ffd7 	bl	8005918 <malloc>
 800596a:	6260      	str	r0, [r4, #36]	; 0x24
 800596c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005970:	6005      	str	r5, [r0, #0]
 8005972:	60c5      	str	r5, [r0, #12]
 8005974:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005976:	68eb      	ldr	r3, [r5, #12]
 8005978:	b183      	cbz	r3, 800599c <_Balloc+0x42>
 800597a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005982:	b9b8      	cbnz	r0, 80059b4 <_Balloc+0x5a>
 8005984:	2101      	movs	r1, #1
 8005986:	fa01 f506 	lsl.w	r5, r1, r6
 800598a:	1d6a      	adds	r2, r5, #5
 800598c:	0092      	lsls	r2, r2, #2
 800598e:	4620      	mov	r0, r4
 8005990:	f000 fabf 	bl	8005f12 <_calloc_r>
 8005994:	b160      	cbz	r0, 80059b0 <_Balloc+0x56>
 8005996:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800599a:	e00e      	b.n	80059ba <_Balloc+0x60>
 800599c:	2221      	movs	r2, #33	; 0x21
 800599e:	2104      	movs	r1, #4
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 fab6 	bl	8005f12 <_calloc_r>
 80059a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059a8:	60e8      	str	r0, [r5, #12]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e4      	bne.n	800597a <_Balloc+0x20>
 80059b0:	2000      	movs	r0, #0
 80059b2:	bd70      	pop	{r4, r5, r6, pc}
 80059b4:	6802      	ldr	r2, [r0, #0]
 80059b6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80059ba:	2300      	movs	r3, #0
 80059bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059c0:	e7f7      	b.n	80059b2 <_Balloc+0x58>

080059c2 <_Bfree>:
 80059c2:	b570      	push	{r4, r5, r6, lr}
 80059c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80059c6:	4606      	mov	r6, r0
 80059c8:	460d      	mov	r5, r1
 80059ca:	b93c      	cbnz	r4, 80059dc <_Bfree+0x1a>
 80059cc:	2010      	movs	r0, #16
 80059ce:	f7ff ffa3 	bl	8005918 <malloc>
 80059d2:	6270      	str	r0, [r6, #36]	; 0x24
 80059d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059d8:	6004      	str	r4, [r0, #0]
 80059da:	60c4      	str	r4, [r0, #12]
 80059dc:	b13d      	cbz	r5, 80059ee <_Bfree+0x2c>
 80059de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80059e0:	686a      	ldr	r2, [r5, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059e8:	6029      	str	r1, [r5, #0]
 80059ea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80059ee:	bd70      	pop	{r4, r5, r6, pc}

080059f0 <__multadd>:
 80059f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f4:	461f      	mov	r7, r3
 80059f6:	4606      	mov	r6, r0
 80059f8:	460c      	mov	r4, r1
 80059fa:	2300      	movs	r3, #0
 80059fc:	690d      	ldr	r5, [r1, #16]
 80059fe:	f101 0c14 	add.w	ip, r1, #20
 8005a02:	f8dc 0000 	ldr.w	r0, [ip]
 8005a06:	3301      	adds	r3, #1
 8005a08:	b281      	uxth	r1, r0
 8005a0a:	fb02 7101 	mla	r1, r2, r1, r7
 8005a0e:	0c00      	lsrs	r0, r0, #16
 8005a10:	0c0f      	lsrs	r7, r1, #16
 8005a12:	fb02 7000 	mla	r0, r2, r0, r7
 8005a16:	b289      	uxth	r1, r1
 8005a18:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005a1c:	429d      	cmp	r5, r3
 8005a1e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005a22:	f84c 1b04 	str.w	r1, [ip], #4
 8005a26:	dcec      	bgt.n	8005a02 <__multadd+0x12>
 8005a28:	b1d7      	cbz	r7, 8005a60 <__multadd+0x70>
 8005a2a:	68a3      	ldr	r3, [r4, #8]
 8005a2c:	42ab      	cmp	r3, r5
 8005a2e:	dc12      	bgt.n	8005a56 <__multadd+0x66>
 8005a30:	6861      	ldr	r1, [r4, #4]
 8005a32:	4630      	mov	r0, r6
 8005a34:	3101      	adds	r1, #1
 8005a36:	f7ff ff90 	bl	800595a <_Balloc>
 8005a3a:	4680      	mov	r8, r0
 8005a3c:	6922      	ldr	r2, [r4, #16]
 8005a3e:	f104 010c 	add.w	r1, r4, #12
 8005a42:	3202      	adds	r2, #2
 8005a44:	0092      	lsls	r2, r2, #2
 8005a46:	300c      	adds	r0, #12
 8005a48:	f7ff ff7c 	bl	8005944 <memcpy>
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f7ff ffb7 	bl	80059c2 <_Bfree>
 8005a54:	4644      	mov	r4, r8
 8005a56:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a5a:	3501      	adds	r5, #1
 8005a5c:	615f      	str	r7, [r3, #20]
 8005a5e:	6125      	str	r5, [r4, #16]
 8005a60:	4620      	mov	r0, r4
 8005a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a66 <__hi0bits>:
 8005a66:	0c02      	lsrs	r2, r0, #16
 8005a68:	0412      	lsls	r2, r2, #16
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	b9b2      	cbnz	r2, 8005a9c <__hi0bits+0x36>
 8005a6e:	0403      	lsls	r3, r0, #16
 8005a70:	2010      	movs	r0, #16
 8005a72:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a76:	bf04      	itt	eq
 8005a78:	021b      	lsleq	r3, r3, #8
 8005a7a:	3008      	addeq	r0, #8
 8005a7c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a80:	bf04      	itt	eq
 8005a82:	011b      	lsleq	r3, r3, #4
 8005a84:	3004      	addeq	r0, #4
 8005a86:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a8a:	bf04      	itt	eq
 8005a8c:	009b      	lsleq	r3, r3, #2
 8005a8e:	3002      	addeq	r0, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	db06      	blt.n	8005aa2 <__hi0bits+0x3c>
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	d503      	bpl.n	8005aa0 <__hi0bits+0x3a>
 8005a98:	3001      	adds	r0, #1
 8005a9a:	4770      	bx	lr
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e7e8      	b.n	8005a72 <__hi0bits+0xc>
 8005aa0:	2020      	movs	r0, #32
 8005aa2:	4770      	bx	lr

08005aa4 <__lo0bits>:
 8005aa4:	6803      	ldr	r3, [r0, #0]
 8005aa6:	4601      	mov	r1, r0
 8005aa8:	f013 0207 	ands.w	r2, r3, #7
 8005aac:	d00b      	beq.n	8005ac6 <__lo0bits+0x22>
 8005aae:	07da      	lsls	r2, r3, #31
 8005ab0:	d423      	bmi.n	8005afa <__lo0bits+0x56>
 8005ab2:	0798      	lsls	r0, r3, #30
 8005ab4:	bf49      	itett	mi
 8005ab6:	085b      	lsrmi	r3, r3, #1
 8005ab8:	089b      	lsrpl	r3, r3, #2
 8005aba:	2001      	movmi	r0, #1
 8005abc:	600b      	strmi	r3, [r1, #0]
 8005abe:	bf5c      	itt	pl
 8005ac0:	600b      	strpl	r3, [r1, #0]
 8005ac2:	2002      	movpl	r0, #2
 8005ac4:	4770      	bx	lr
 8005ac6:	b298      	uxth	r0, r3
 8005ac8:	b9a8      	cbnz	r0, 8005af6 <__lo0bits+0x52>
 8005aca:	2010      	movs	r0, #16
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005ad2:	bf04      	itt	eq
 8005ad4:	0a1b      	lsreq	r3, r3, #8
 8005ad6:	3008      	addeq	r0, #8
 8005ad8:	071a      	lsls	r2, r3, #28
 8005ada:	bf04      	itt	eq
 8005adc:	091b      	lsreq	r3, r3, #4
 8005ade:	3004      	addeq	r0, #4
 8005ae0:	079a      	lsls	r2, r3, #30
 8005ae2:	bf04      	itt	eq
 8005ae4:	089b      	lsreq	r3, r3, #2
 8005ae6:	3002      	addeq	r0, #2
 8005ae8:	07da      	lsls	r2, r3, #31
 8005aea:	d402      	bmi.n	8005af2 <__lo0bits+0x4e>
 8005aec:	085b      	lsrs	r3, r3, #1
 8005aee:	d006      	beq.n	8005afe <__lo0bits+0x5a>
 8005af0:	3001      	adds	r0, #1
 8005af2:	600b      	str	r3, [r1, #0]
 8005af4:	4770      	bx	lr
 8005af6:	4610      	mov	r0, r2
 8005af8:	e7e9      	b.n	8005ace <__lo0bits+0x2a>
 8005afa:	2000      	movs	r0, #0
 8005afc:	4770      	bx	lr
 8005afe:	2020      	movs	r0, #32
 8005b00:	4770      	bx	lr

08005b02 <__i2b>:
 8005b02:	b510      	push	{r4, lr}
 8005b04:	460c      	mov	r4, r1
 8005b06:	2101      	movs	r1, #1
 8005b08:	f7ff ff27 	bl	800595a <_Balloc>
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	6144      	str	r4, [r0, #20]
 8005b10:	6102      	str	r2, [r0, #16]
 8005b12:	bd10      	pop	{r4, pc}

08005b14 <__multiply>:
 8005b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b18:	4614      	mov	r4, r2
 8005b1a:	690a      	ldr	r2, [r1, #16]
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	4688      	mov	r8, r1
 8005b20:	429a      	cmp	r2, r3
 8005b22:	bfbe      	ittt	lt
 8005b24:	460b      	movlt	r3, r1
 8005b26:	46a0      	movlt	r8, r4
 8005b28:	461c      	movlt	r4, r3
 8005b2a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005b2e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005b32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b36:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005b3a:	eb07 0609 	add.w	r6, r7, r9
 8005b3e:	42b3      	cmp	r3, r6
 8005b40:	bfb8      	it	lt
 8005b42:	3101      	addlt	r1, #1
 8005b44:	f7ff ff09 	bl	800595a <_Balloc>
 8005b48:	f100 0514 	add.w	r5, r0, #20
 8005b4c:	462b      	mov	r3, r5
 8005b4e:	2200      	movs	r2, #0
 8005b50:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005b54:	4573      	cmp	r3, lr
 8005b56:	d316      	bcc.n	8005b86 <__multiply+0x72>
 8005b58:	f104 0214 	add.w	r2, r4, #20
 8005b5c:	f108 0114 	add.w	r1, r8, #20
 8005b60:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005b64:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	9b00      	ldr	r3, [sp, #0]
 8005b6c:	9201      	str	r2, [sp, #4]
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d80c      	bhi.n	8005b8c <__multiply+0x78>
 8005b72:	2e00      	cmp	r6, #0
 8005b74:	dd03      	ble.n	8005b7e <__multiply+0x6a>
 8005b76:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d05d      	beq.n	8005c3a <__multiply+0x126>
 8005b7e:	6106      	str	r6, [r0, #16]
 8005b80:	b003      	add	sp, #12
 8005b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b86:	f843 2b04 	str.w	r2, [r3], #4
 8005b8a:	e7e3      	b.n	8005b54 <__multiply+0x40>
 8005b8c:	f8b2 b000 	ldrh.w	fp, [r2]
 8005b90:	f1bb 0f00 	cmp.w	fp, #0
 8005b94:	d023      	beq.n	8005bde <__multiply+0xca>
 8005b96:	4689      	mov	r9, r1
 8005b98:	46ac      	mov	ip, r5
 8005b9a:	f04f 0800 	mov.w	r8, #0
 8005b9e:	f859 4b04 	ldr.w	r4, [r9], #4
 8005ba2:	f8dc a000 	ldr.w	sl, [ip]
 8005ba6:	b2a3      	uxth	r3, r4
 8005ba8:	fa1f fa8a 	uxth.w	sl, sl
 8005bac:	fb0b a303 	mla	r3, fp, r3, sl
 8005bb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005bb4:	f8dc 4000 	ldr.w	r4, [ip]
 8005bb8:	4443      	add	r3, r8
 8005bba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005bbe:	fb0b 840a 	mla	r4, fp, sl, r8
 8005bc2:	46e2      	mov	sl, ip
 8005bc4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005bce:	454f      	cmp	r7, r9
 8005bd0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005bd4:	f84a 3b04 	str.w	r3, [sl], #4
 8005bd8:	d82b      	bhi.n	8005c32 <__multiply+0x11e>
 8005bda:	f8cc 8004 	str.w	r8, [ip, #4]
 8005bde:	9b01      	ldr	r3, [sp, #4]
 8005be0:	3204      	adds	r2, #4
 8005be2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005be6:	f1ba 0f00 	cmp.w	sl, #0
 8005bea:	d020      	beq.n	8005c2e <__multiply+0x11a>
 8005bec:	4689      	mov	r9, r1
 8005bee:	46a8      	mov	r8, r5
 8005bf0:	f04f 0b00 	mov.w	fp, #0
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	f8b9 c000 	ldrh.w	ip, [r9]
 8005bfa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	fb0a 440c 	mla	r4, sl, ip, r4
 8005c04:	46c4      	mov	ip, r8
 8005c06:	445c      	add	r4, fp
 8005c08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005c0c:	f84c 3b04 	str.w	r3, [ip], #4
 8005c10:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c14:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005c18:	0c1b      	lsrs	r3, r3, #16
 8005c1a:	fb0a b303 	mla	r3, sl, r3, fp
 8005c1e:	454f      	cmp	r7, r9
 8005c20:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005c24:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005c28:	d805      	bhi.n	8005c36 <__multiply+0x122>
 8005c2a:	f8c8 3004 	str.w	r3, [r8, #4]
 8005c2e:	3504      	adds	r5, #4
 8005c30:	e79b      	b.n	8005b6a <__multiply+0x56>
 8005c32:	46d4      	mov	ip, sl
 8005c34:	e7b3      	b.n	8005b9e <__multiply+0x8a>
 8005c36:	46e0      	mov	r8, ip
 8005c38:	e7dd      	b.n	8005bf6 <__multiply+0xe2>
 8005c3a:	3e01      	subs	r6, #1
 8005c3c:	e799      	b.n	8005b72 <__multiply+0x5e>
	...

08005c40 <__pow5mult>:
 8005c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c44:	4615      	mov	r5, r2
 8005c46:	f012 0203 	ands.w	r2, r2, #3
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	460f      	mov	r7, r1
 8005c4e:	d007      	beq.n	8005c60 <__pow5mult+0x20>
 8005c50:	4c21      	ldr	r4, [pc, #132]	; (8005cd8 <__pow5mult+0x98>)
 8005c52:	3a01      	subs	r2, #1
 8005c54:	2300      	movs	r3, #0
 8005c56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c5a:	f7ff fec9 	bl	80059f0 <__multadd>
 8005c5e:	4607      	mov	r7, r0
 8005c60:	10ad      	asrs	r5, r5, #2
 8005c62:	d035      	beq.n	8005cd0 <__pow5mult+0x90>
 8005c64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c66:	b93c      	cbnz	r4, 8005c78 <__pow5mult+0x38>
 8005c68:	2010      	movs	r0, #16
 8005c6a:	f7ff fe55 	bl	8005918 <malloc>
 8005c6e:	6270      	str	r0, [r6, #36]	; 0x24
 8005c70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c74:	6004      	str	r4, [r0, #0]
 8005c76:	60c4      	str	r4, [r0, #12]
 8005c78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c80:	b94c      	cbnz	r4, 8005c96 <__pow5mult+0x56>
 8005c82:	f240 2171 	movw	r1, #625	; 0x271
 8005c86:	4630      	mov	r0, r6
 8005c88:	f7ff ff3b 	bl	8005b02 <__i2b>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4604      	mov	r4, r0
 8005c90:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c94:	6003      	str	r3, [r0, #0]
 8005c96:	f04f 0800 	mov.w	r8, #0
 8005c9a:	07eb      	lsls	r3, r5, #31
 8005c9c:	d50a      	bpl.n	8005cb4 <__pow5mult+0x74>
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f7ff ff36 	bl	8005b14 <__multiply>
 8005ca8:	4681      	mov	r9, r0
 8005caa:	4639      	mov	r1, r7
 8005cac:	4630      	mov	r0, r6
 8005cae:	f7ff fe88 	bl	80059c2 <_Bfree>
 8005cb2:	464f      	mov	r7, r9
 8005cb4:	106d      	asrs	r5, r5, #1
 8005cb6:	d00b      	beq.n	8005cd0 <__pow5mult+0x90>
 8005cb8:	6820      	ldr	r0, [r4, #0]
 8005cba:	b938      	cbnz	r0, 8005ccc <__pow5mult+0x8c>
 8005cbc:	4622      	mov	r2, r4
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f7ff ff27 	bl	8005b14 <__multiply>
 8005cc6:	6020      	str	r0, [r4, #0]
 8005cc8:	f8c0 8000 	str.w	r8, [r0]
 8005ccc:	4604      	mov	r4, r0
 8005cce:	e7e4      	b.n	8005c9a <__pow5mult+0x5a>
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cd6:	bf00      	nop
 8005cd8:	08007b28 	.word	0x08007b28

08005cdc <__lshift>:
 8005cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	4607      	mov	r7, r0
 8005ce4:	4616      	mov	r6, r2
 8005ce6:	6923      	ldr	r3, [r4, #16]
 8005ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cec:	eb0a 0903 	add.w	r9, sl, r3
 8005cf0:	6849      	ldr	r1, [r1, #4]
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	f109 0501 	add.w	r5, r9, #1
 8005cf8:	42ab      	cmp	r3, r5
 8005cfa:	db32      	blt.n	8005d62 <__lshift+0x86>
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	f7ff fe2c 	bl	800595a <_Balloc>
 8005d02:	2300      	movs	r3, #0
 8005d04:	4680      	mov	r8, r0
 8005d06:	461a      	mov	r2, r3
 8005d08:	f100 0114 	add.w	r1, r0, #20
 8005d0c:	4553      	cmp	r3, sl
 8005d0e:	db2b      	blt.n	8005d68 <__lshift+0x8c>
 8005d10:	6920      	ldr	r0, [r4, #16]
 8005d12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d16:	f104 0314 	add.w	r3, r4, #20
 8005d1a:	f016 021f 	ands.w	r2, r6, #31
 8005d1e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d26:	d025      	beq.n	8005d74 <__lshift+0x98>
 8005d28:	2000      	movs	r0, #0
 8005d2a:	f1c2 0e20 	rsb	lr, r2, #32
 8005d2e:	468a      	mov	sl, r1
 8005d30:	681e      	ldr	r6, [r3, #0]
 8005d32:	4096      	lsls	r6, r2
 8005d34:	4330      	orrs	r0, r6
 8005d36:	f84a 0b04 	str.w	r0, [sl], #4
 8005d3a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005d3e:	459c      	cmp	ip, r3
 8005d40:	fa20 f00e 	lsr.w	r0, r0, lr
 8005d44:	d814      	bhi.n	8005d70 <__lshift+0x94>
 8005d46:	6048      	str	r0, [r1, #4]
 8005d48:	b108      	cbz	r0, 8005d4e <__lshift+0x72>
 8005d4a:	f109 0502 	add.w	r5, r9, #2
 8005d4e:	3d01      	subs	r5, #1
 8005d50:	4638      	mov	r0, r7
 8005d52:	f8c8 5010 	str.w	r5, [r8, #16]
 8005d56:	4621      	mov	r1, r4
 8005d58:	f7ff fe33 	bl	80059c2 <_Bfree>
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d62:	3101      	adds	r1, #1
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	e7c7      	b.n	8005cf8 <__lshift+0x1c>
 8005d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	e7cd      	b.n	8005d0c <__lshift+0x30>
 8005d70:	4651      	mov	r1, sl
 8005d72:	e7dc      	b.n	8005d2e <__lshift+0x52>
 8005d74:	3904      	subs	r1, #4
 8005d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d7a:	459c      	cmp	ip, r3
 8005d7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d80:	d8f9      	bhi.n	8005d76 <__lshift+0x9a>
 8005d82:	e7e4      	b.n	8005d4e <__lshift+0x72>

08005d84 <__mcmp>:
 8005d84:	6903      	ldr	r3, [r0, #16]
 8005d86:	690a      	ldr	r2, [r1, #16]
 8005d88:	b530      	push	{r4, r5, lr}
 8005d8a:	1a9b      	subs	r3, r3, r2
 8005d8c:	d10c      	bne.n	8005da8 <__mcmp+0x24>
 8005d8e:	0092      	lsls	r2, r2, #2
 8005d90:	3014      	adds	r0, #20
 8005d92:	3114      	adds	r1, #20
 8005d94:	1884      	adds	r4, r0, r2
 8005d96:	4411      	add	r1, r2
 8005d98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005da0:	4295      	cmp	r5, r2
 8005da2:	d003      	beq.n	8005dac <__mcmp+0x28>
 8005da4:	d305      	bcc.n	8005db2 <__mcmp+0x2e>
 8005da6:	2301      	movs	r3, #1
 8005da8:	4618      	mov	r0, r3
 8005daa:	bd30      	pop	{r4, r5, pc}
 8005dac:	42a0      	cmp	r0, r4
 8005dae:	d3f3      	bcc.n	8005d98 <__mcmp+0x14>
 8005db0:	e7fa      	b.n	8005da8 <__mcmp+0x24>
 8005db2:	f04f 33ff 	mov.w	r3, #4294967295
 8005db6:	e7f7      	b.n	8005da8 <__mcmp+0x24>

08005db8 <__mdiff>:
 8005db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dbc:	460d      	mov	r5, r1
 8005dbe:	4607      	mov	r7, r0
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	4614      	mov	r4, r2
 8005dc6:	f7ff ffdd 	bl	8005d84 <__mcmp>
 8005dca:	1e06      	subs	r6, r0, #0
 8005dcc:	d108      	bne.n	8005de0 <__mdiff+0x28>
 8005dce:	4631      	mov	r1, r6
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f7ff fdc2 	bl	800595a <_Balloc>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de0:	bfa4      	itt	ge
 8005de2:	4623      	movge	r3, r4
 8005de4:	462c      	movge	r4, r5
 8005de6:	4638      	mov	r0, r7
 8005de8:	6861      	ldr	r1, [r4, #4]
 8005dea:	bfa6      	itte	ge
 8005dec:	461d      	movge	r5, r3
 8005dee:	2600      	movge	r6, #0
 8005df0:	2601      	movlt	r6, #1
 8005df2:	f7ff fdb2 	bl	800595a <_Balloc>
 8005df6:	f04f 0e00 	mov.w	lr, #0
 8005dfa:	60c6      	str	r6, [r0, #12]
 8005dfc:	692b      	ldr	r3, [r5, #16]
 8005dfe:	6926      	ldr	r6, [r4, #16]
 8005e00:	f104 0214 	add.w	r2, r4, #20
 8005e04:	f105 0914 	add.w	r9, r5, #20
 8005e08:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005e0c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005e10:	f100 0114 	add.w	r1, r0, #20
 8005e14:	f852 ab04 	ldr.w	sl, [r2], #4
 8005e18:	f859 5b04 	ldr.w	r5, [r9], #4
 8005e1c:	fa1f f38a 	uxth.w	r3, sl
 8005e20:	4473      	add	r3, lr
 8005e22:	b2ac      	uxth	r4, r5
 8005e24:	1b1b      	subs	r3, r3, r4
 8005e26:	0c2c      	lsrs	r4, r5, #16
 8005e28:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005e2c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005e36:	45c8      	cmp	r8, r9
 8005e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005e3c:	4694      	mov	ip, r2
 8005e3e:	f841 4b04 	str.w	r4, [r1], #4
 8005e42:	d8e7      	bhi.n	8005e14 <__mdiff+0x5c>
 8005e44:	45bc      	cmp	ip, r7
 8005e46:	d304      	bcc.n	8005e52 <__mdiff+0x9a>
 8005e48:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005e4c:	b183      	cbz	r3, 8005e70 <__mdiff+0xb8>
 8005e4e:	6106      	str	r6, [r0, #16]
 8005e50:	e7c4      	b.n	8005ddc <__mdiff+0x24>
 8005e52:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005e56:	b2a2      	uxth	r2, r4
 8005e58:	4472      	add	r2, lr
 8005e5a:	1413      	asrs	r3, r2, #16
 8005e5c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005e60:	b292      	uxth	r2, r2
 8005e62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e66:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005e6a:	f841 2b04 	str.w	r2, [r1], #4
 8005e6e:	e7e9      	b.n	8005e44 <__mdiff+0x8c>
 8005e70:	3e01      	subs	r6, #1
 8005e72:	e7e9      	b.n	8005e48 <__mdiff+0x90>

08005e74 <__d2b>:
 8005e74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005e78:	461c      	mov	r4, r3
 8005e7a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005e7e:	2101      	movs	r1, #1
 8005e80:	4690      	mov	r8, r2
 8005e82:	f7ff fd6a 	bl	800595a <_Balloc>
 8005e86:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005e8a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005e8e:	4607      	mov	r7, r0
 8005e90:	bb34      	cbnz	r4, 8005ee0 <__d2b+0x6c>
 8005e92:	9201      	str	r2, [sp, #4]
 8005e94:	f1b8 0200 	subs.w	r2, r8, #0
 8005e98:	d027      	beq.n	8005eea <__d2b+0x76>
 8005e9a:	a802      	add	r0, sp, #8
 8005e9c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005ea0:	f7ff fe00 	bl	8005aa4 <__lo0bits>
 8005ea4:	9900      	ldr	r1, [sp, #0]
 8005ea6:	b1f0      	cbz	r0, 8005ee6 <__d2b+0x72>
 8005ea8:	9a01      	ldr	r2, [sp, #4]
 8005eaa:	f1c0 0320 	rsb	r3, r0, #32
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	430b      	orrs	r3, r1
 8005eb4:	40c2      	lsrs	r2, r0
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	9201      	str	r2, [sp, #4]
 8005eba:	9b01      	ldr	r3, [sp, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bf14      	ite	ne
 8005ec0:	2102      	movne	r1, #2
 8005ec2:	2101      	moveq	r1, #1
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	6139      	str	r1, [r7, #16]
 8005ec8:	b1c4      	cbz	r4, 8005efc <__d2b+0x88>
 8005eca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005ece:	4404      	add	r4, r0
 8005ed0:	6034      	str	r4, [r6, #0]
 8005ed2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ed6:	6028      	str	r0, [r5, #0]
 8005ed8:	4638      	mov	r0, r7
 8005eda:	b002      	add	sp, #8
 8005edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005ee4:	e7d5      	b.n	8005e92 <__d2b+0x1e>
 8005ee6:	6179      	str	r1, [r7, #20]
 8005ee8:	e7e7      	b.n	8005eba <__d2b+0x46>
 8005eea:	a801      	add	r0, sp, #4
 8005eec:	f7ff fdda 	bl	8005aa4 <__lo0bits>
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	9b01      	ldr	r3, [sp, #4]
 8005ef4:	6139      	str	r1, [r7, #16]
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	3020      	adds	r0, #32
 8005efa:	e7e5      	b.n	8005ec8 <__d2b+0x54>
 8005efc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f00:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005f04:	6030      	str	r0, [r6, #0]
 8005f06:	6918      	ldr	r0, [r3, #16]
 8005f08:	f7ff fdad 	bl	8005a66 <__hi0bits>
 8005f0c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005f10:	e7e1      	b.n	8005ed6 <__d2b+0x62>

08005f12 <_calloc_r>:
 8005f12:	b538      	push	{r3, r4, r5, lr}
 8005f14:	fb02 f401 	mul.w	r4, r2, r1
 8005f18:	4621      	mov	r1, r4
 8005f1a:	f000 f855 	bl	8005fc8 <_malloc_r>
 8005f1e:	4605      	mov	r5, r0
 8005f20:	b118      	cbz	r0, 8005f2a <_calloc_r+0x18>
 8005f22:	4622      	mov	r2, r4
 8005f24:	2100      	movs	r1, #0
 8005f26:	f7fd ff33 	bl	8003d90 <memset>
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005f30 <_free_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4605      	mov	r5, r0
 8005f34:	2900      	cmp	r1, #0
 8005f36:	d043      	beq.n	8005fc0 <_free_r+0x90>
 8005f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f3c:	1f0c      	subs	r4, r1, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bfb8      	it	lt
 8005f42:	18e4      	addlt	r4, r4, r3
 8005f44:	f000 fa94 	bl	8006470 <__malloc_lock>
 8005f48:	4a1e      	ldr	r2, [pc, #120]	; (8005fc4 <_free_r+0x94>)
 8005f4a:	6813      	ldr	r3, [r2, #0]
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	b933      	cbnz	r3, 8005f5e <_free_r+0x2e>
 8005f50:	6063      	str	r3, [r4, #4]
 8005f52:	6014      	str	r4, [r2, #0]
 8005f54:	4628      	mov	r0, r5
 8005f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f5a:	f000 ba8a 	b.w	8006472 <__malloc_unlock>
 8005f5e:	42a3      	cmp	r3, r4
 8005f60:	d90b      	bls.n	8005f7a <_free_r+0x4a>
 8005f62:	6821      	ldr	r1, [r4, #0]
 8005f64:	1862      	adds	r2, r4, r1
 8005f66:	4293      	cmp	r3, r2
 8005f68:	bf01      	itttt	eq
 8005f6a:	681a      	ldreq	r2, [r3, #0]
 8005f6c:	685b      	ldreq	r3, [r3, #4]
 8005f6e:	1852      	addeq	r2, r2, r1
 8005f70:	6022      	streq	r2, [r4, #0]
 8005f72:	6063      	str	r3, [r4, #4]
 8005f74:	6004      	str	r4, [r0, #0]
 8005f76:	e7ed      	b.n	8005f54 <_free_r+0x24>
 8005f78:	4613      	mov	r3, r2
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	b10a      	cbz	r2, 8005f82 <_free_r+0x52>
 8005f7e:	42a2      	cmp	r2, r4
 8005f80:	d9fa      	bls.n	8005f78 <_free_r+0x48>
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	1858      	adds	r0, r3, r1
 8005f86:	42a0      	cmp	r0, r4
 8005f88:	d10b      	bne.n	8005fa2 <_free_r+0x72>
 8005f8a:	6820      	ldr	r0, [r4, #0]
 8005f8c:	4401      	add	r1, r0
 8005f8e:	1858      	adds	r0, r3, r1
 8005f90:	4282      	cmp	r2, r0
 8005f92:	6019      	str	r1, [r3, #0]
 8005f94:	d1de      	bne.n	8005f54 <_free_r+0x24>
 8005f96:	6810      	ldr	r0, [r2, #0]
 8005f98:	6852      	ldr	r2, [r2, #4]
 8005f9a:	4401      	add	r1, r0
 8005f9c:	6019      	str	r1, [r3, #0]
 8005f9e:	605a      	str	r2, [r3, #4]
 8005fa0:	e7d8      	b.n	8005f54 <_free_r+0x24>
 8005fa2:	d902      	bls.n	8005faa <_free_r+0x7a>
 8005fa4:	230c      	movs	r3, #12
 8005fa6:	602b      	str	r3, [r5, #0]
 8005fa8:	e7d4      	b.n	8005f54 <_free_r+0x24>
 8005faa:	6820      	ldr	r0, [r4, #0]
 8005fac:	1821      	adds	r1, r4, r0
 8005fae:	428a      	cmp	r2, r1
 8005fb0:	bf01      	itttt	eq
 8005fb2:	6811      	ldreq	r1, [r2, #0]
 8005fb4:	6852      	ldreq	r2, [r2, #4]
 8005fb6:	1809      	addeq	r1, r1, r0
 8005fb8:	6021      	streq	r1, [r4, #0]
 8005fba:	6062      	str	r2, [r4, #4]
 8005fbc:	605c      	str	r4, [r3, #4]
 8005fbe:	e7c9      	b.n	8005f54 <_free_r+0x24>
 8005fc0:	bd38      	pop	{r3, r4, r5, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000218 	.word	0x20000218

08005fc8 <_malloc_r>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	1ccd      	adds	r5, r1, #3
 8005fcc:	f025 0503 	bic.w	r5, r5, #3
 8005fd0:	3508      	adds	r5, #8
 8005fd2:	2d0c      	cmp	r5, #12
 8005fd4:	bf38      	it	cc
 8005fd6:	250c      	movcc	r5, #12
 8005fd8:	2d00      	cmp	r5, #0
 8005fda:	4606      	mov	r6, r0
 8005fdc:	db01      	blt.n	8005fe2 <_malloc_r+0x1a>
 8005fde:	42a9      	cmp	r1, r5
 8005fe0:	d903      	bls.n	8005fea <_malloc_r+0x22>
 8005fe2:	230c      	movs	r3, #12
 8005fe4:	6033      	str	r3, [r6, #0]
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	bd70      	pop	{r4, r5, r6, pc}
 8005fea:	f000 fa41 	bl	8006470 <__malloc_lock>
 8005fee:	4a21      	ldr	r2, [pc, #132]	; (8006074 <_malloc_r+0xac>)
 8005ff0:	6814      	ldr	r4, [r2, #0]
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	b991      	cbnz	r1, 800601c <_malloc_r+0x54>
 8005ff6:	4c20      	ldr	r4, [pc, #128]	; (8006078 <_malloc_r+0xb0>)
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	b91b      	cbnz	r3, 8006004 <_malloc_r+0x3c>
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	f000 f97b 	bl	80062f8 <_sbrk_r>
 8006002:	6020      	str	r0, [r4, #0]
 8006004:	4629      	mov	r1, r5
 8006006:	4630      	mov	r0, r6
 8006008:	f000 f976 	bl	80062f8 <_sbrk_r>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d124      	bne.n	800605a <_malloc_r+0x92>
 8006010:	230c      	movs	r3, #12
 8006012:	4630      	mov	r0, r6
 8006014:	6033      	str	r3, [r6, #0]
 8006016:	f000 fa2c 	bl	8006472 <__malloc_unlock>
 800601a:	e7e4      	b.n	8005fe6 <_malloc_r+0x1e>
 800601c:	680b      	ldr	r3, [r1, #0]
 800601e:	1b5b      	subs	r3, r3, r5
 8006020:	d418      	bmi.n	8006054 <_malloc_r+0x8c>
 8006022:	2b0b      	cmp	r3, #11
 8006024:	d90f      	bls.n	8006046 <_malloc_r+0x7e>
 8006026:	600b      	str	r3, [r1, #0]
 8006028:	18cc      	adds	r4, r1, r3
 800602a:	50cd      	str	r5, [r1, r3]
 800602c:	4630      	mov	r0, r6
 800602e:	f000 fa20 	bl	8006472 <__malloc_unlock>
 8006032:	f104 000b 	add.w	r0, r4, #11
 8006036:	1d23      	adds	r3, r4, #4
 8006038:	f020 0007 	bic.w	r0, r0, #7
 800603c:	1ac3      	subs	r3, r0, r3
 800603e:	d0d3      	beq.n	8005fe8 <_malloc_r+0x20>
 8006040:	425a      	negs	r2, r3
 8006042:	50e2      	str	r2, [r4, r3]
 8006044:	e7d0      	b.n	8005fe8 <_malloc_r+0x20>
 8006046:	684b      	ldr	r3, [r1, #4]
 8006048:	428c      	cmp	r4, r1
 800604a:	bf16      	itet	ne
 800604c:	6063      	strne	r3, [r4, #4]
 800604e:	6013      	streq	r3, [r2, #0]
 8006050:	460c      	movne	r4, r1
 8006052:	e7eb      	b.n	800602c <_malloc_r+0x64>
 8006054:	460c      	mov	r4, r1
 8006056:	6849      	ldr	r1, [r1, #4]
 8006058:	e7cc      	b.n	8005ff4 <_malloc_r+0x2c>
 800605a:	1cc4      	adds	r4, r0, #3
 800605c:	f024 0403 	bic.w	r4, r4, #3
 8006060:	42a0      	cmp	r0, r4
 8006062:	d005      	beq.n	8006070 <_malloc_r+0xa8>
 8006064:	1a21      	subs	r1, r4, r0
 8006066:	4630      	mov	r0, r6
 8006068:	f000 f946 	bl	80062f8 <_sbrk_r>
 800606c:	3001      	adds	r0, #1
 800606e:	d0cf      	beq.n	8006010 <_malloc_r+0x48>
 8006070:	6025      	str	r5, [r4, #0]
 8006072:	e7db      	b.n	800602c <_malloc_r+0x64>
 8006074:	20000218 	.word	0x20000218
 8006078:	2000021c 	.word	0x2000021c

0800607c <__sfputc_r>:
 800607c:	6893      	ldr	r3, [r2, #8]
 800607e:	b410      	push	{r4}
 8006080:	3b01      	subs	r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	6093      	str	r3, [r2, #8]
 8006086:	da07      	bge.n	8006098 <__sfputc_r+0x1c>
 8006088:	6994      	ldr	r4, [r2, #24]
 800608a:	42a3      	cmp	r3, r4
 800608c:	db01      	blt.n	8006092 <__sfputc_r+0x16>
 800608e:	290a      	cmp	r1, #10
 8006090:	d102      	bne.n	8006098 <__sfputc_r+0x1c>
 8006092:	bc10      	pop	{r4}
 8006094:	f7fe bb50 	b.w	8004738 <__swbuf_r>
 8006098:	6813      	ldr	r3, [r2, #0]
 800609a:	1c58      	adds	r0, r3, #1
 800609c:	6010      	str	r0, [r2, #0]
 800609e:	7019      	strb	r1, [r3, #0]
 80060a0:	4608      	mov	r0, r1
 80060a2:	bc10      	pop	{r4}
 80060a4:	4770      	bx	lr

080060a6 <__sfputs_r>:
 80060a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a8:	4606      	mov	r6, r0
 80060aa:	460f      	mov	r7, r1
 80060ac:	4614      	mov	r4, r2
 80060ae:	18d5      	adds	r5, r2, r3
 80060b0:	42ac      	cmp	r4, r5
 80060b2:	d101      	bne.n	80060b8 <__sfputs_r+0x12>
 80060b4:	2000      	movs	r0, #0
 80060b6:	e007      	b.n	80060c8 <__sfputs_r+0x22>
 80060b8:	463a      	mov	r2, r7
 80060ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060be:	4630      	mov	r0, r6
 80060c0:	f7ff ffdc 	bl	800607c <__sfputc_r>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d1f3      	bne.n	80060b0 <__sfputs_r+0xa>
 80060c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060cc <_vfiprintf_r>:
 80060cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d0:	460c      	mov	r4, r1
 80060d2:	b09d      	sub	sp, #116	; 0x74
 80060d4:	4617      	mov	r7, r2
 80060d6:	461d      	mov	r5, r3
 80060d8:	4606      	mov	r6, r0
 80060da:	b118      	cbz	r0, 80060e4 <_vfiprintf_r+0x18>
 80060dc:	6983      	ldr	r3, [r0, #24]
 80060de:	b90b      	cbnz	r3, 80060e4 <_vfiprintf_r+0x18>
 80060e0:	f7ff fb1e 	bl	8005720 <__sinit>
 80060e4:	4b7c      	ldr	r3, [pc, #496]	; (80062d8 <_vfiprintf_r+0x20c>)
 80060e6:	429c      	cmp	r4, r3
 80060e8:	d158      	bne.n	800619c <_vfiprintf_r+0xd0>
 80060ea:	6874      	ldr	r4, [r6, #4]
 80060ec:	89a3      	ldrh	r3, [r4, #12]
 80060ee:	0718      	lsls	r0, r3, #28
 80060f0:	d55e      	bpl.n	80061b0 <_vfiprintf_r+0xe4>
 80060f2:	6923      	ldr	r3, [r4, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d05b      	beq.n	80061b0 <_vfiprintf_r+0xe4>
 80060f8:	2300      	movs	r3, #0
 80060fa:	9309      	str	r3, [sp, #36]	; 0x24
 80060fc:	2320      	movs	r3, #32
 80060fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006102:	2330      	movs	r3, #48	; 0x30
 8006104:	f04f 0b01 	mov.w	fp, #1
 8006108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800610c:	9503      	str	r5, [sp, #12]
 800610e:	46b8      	mov	r8, r7
 8006110:	4645      	mov	r5, r8
 8006112:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006116:	b10b      	cbz	r3, 800611c <_vfiprintf_r+0x50>
 8006118:	2b25      	cmp	r3, #37	; 0x25
 800611a:	d154      	bne.n	80061c6 <_vfiprintf_r+0xfa>
 800611c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006120:	d00b      	beq.n	800613a <_vfiprintf_r+0x6e>
 8006122:	4653      	mov	r3, sl
 8006124:	463a      	mov	r2, r7
 8006126:	4621      	mov	r1, r4
 8006128:	4630      	mov	r0, r6
 800612a:	f7ff ffbc 	bl	80060a6 <__sfputs_r>
 800612e:	3001      	adds	r0, #1
 8006130:	f000 80c2 	beq.w	80062b8 <_vfiprintf_r+0x1ec>
 8006134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006136:	4453      	add	r3, sl
 8006138:	9309      	str	r3, [sp, #36]	; 0x24
 800613a:	f898 3000 	ldrb.w	r3, [r8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 80ba 	beq.w	80062b8 <_vfiprintf_r+0x1ec>
 8006144:	2300      	movs	r3, #0
 8006146:	f04f 32ff 	mov.w	r2, #4294967295
 800614a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800614e:	9304      	str	r3, [sp, #16]
 8006150:	9307      	str	r3, [sp, #28]
 8006152:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006156:	931a      	str	r3, [sp, #104]	; 0x68
 8006158:	46a8      	mov	r8, r5
 800615a:	2205      	movs	r2, #5
 800615c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006160:	485e      	ldr	r0, [pc, #376]	; (80062dc <_vfiprintf_r+0x210>)
 8006162:	f7ff fbe1 	bl	8005928 <memchr>
 8006166:	9b04      	ldr	r3, [sp, #16]
 8006168:	bb78      	cbnz	r0, 80061ca <_vfiprintf_r+0xfe>
 800616a:	06d9      	lsls	r1, r3, #27
 800616c:	bf44      	itt	mi
 800616e:	2220      	movmi	r2, #32
 8006170:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006174:	071a      	lsls	r2, r3, #28
 8006176:	bf44      	itt	mi
 8006178:	222b      	movmi	r2, #43	; 0x2b
 800617a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800617e:	782a      	ldrb	r2, [r5, #0]
 8006180:	2a2a      	cmp	r2, #42	; 0x2a
 8006182:	d02a      	beq.n	80061da <_vfiprintf_r+0x10e>
 8006184:	46a8      	mov	r8, r5
 8006186:	2000      	movs	r0, #0
 8006188:	250a      	movs	r5, #10
 800618a:	9a07      	ldr	r2, [sp, #28]
 800618c:	4641      	mov	r1, r8
 800618e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006192:	3b30      	subs	r3, #48	; 0x30
 8006194:	2b09      	cmp	r3, #9
 8006196:	d969      	bls.n	800626c <_vfiprintf_r+0x1a0>
 8006198:	b360      	cbz	r0, 80061f4 <_vfiprintf_r+0x128>
 800619a:	e024      	b.n	80061e6 <_vfiprintf_r+0x11a>
 800619c:	4b50      	ldr	r3, [pc, #320]	; (80062e0 <_vfiprintf_r+0x214>)
 800619e:	429c      	cmp	r4, r3
 80061a0:	d101      	bne.n	80061a6 <_vfiprintf_r+0xda>
 80061a2:	68b4      	ldr	r4, [r6, #8]
 80061a4:	e7a2      	b.n	80060ec <_vfiprintf_r+0x20>
 80061a6:	4b4f      	ldr	r3, [pc, #316]	; (80062e4 <_vfiprintf_r+0x218>)
 80061a8:	429c      	cmp	r4, r3
 80061aa:	bf08      	it	eq
 80061ac:	68f4      	ldreq	r4, [r6, #12]
 80061ae:	e79d      	b.n	80060ec <_vfiprintf_r+0x20>
 80061b0:	4621      	mov	r1, r4
 80061b2:	4630      	mov	r0, r6
 80061b4:	f7fe fb12 	bl	80047dc <__swsetup_r>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d09d      	beq.n	80060f8 <_vfiprintf_r+0x2c>
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	b01d      	add	sp, #116	; 0x74
 80061c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c6:	46a8      	mov	r8, r5
 80061c8:	e7a2      	b.n	8006110 <_vfiprintf_r+0x44>
 80061ca:	4a44      	ldr	r2, [pc, #272]	; (80062dc <_vfiprintf_r+0x210>)
 80061cc:	4645      	mov	r5, r8
 80061ce:	1a80      	subs	r0, r0, r2
 80061d0:	fa0b f000 	lsl.w	r0, fp, r0
 80061d4:	4318      	orrs	r0, r3
 80061d6:	9004      	str	r0, [sp, #16]
 80061d8:	e7be      	b.n	8006158 <_vfiprintf_r+0x8c>
 80061da:	9a03      	ldr	r2, [sp, #12]
 80061dc:	1d11      	adds	r1, r2, #4
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	9103      	str	r1, [sp, #12]
 80061e2:	2a00      	cmp	r2, #0
 80061e4:	db01      	blt.n	80061ea <_vfiprintf_r+0x11e>
 80061e6:	9207      	str	r2, [sp, #28]
 80061e8:	e004      	b.n	80061f4 <_vfiprintf_r+0x128>
 80061ea:	4252      	negs	r2, r2
 80061ec:	f043 0302 	orr.w	r3, r3, #2
 80061f0:	9207      	str	r2, [sp, #28]
 80061f2:	9304      	str	r3, [sp, #16]
 80061f4:	f898 3000 	ldrb.w	r3, [r8]
 80061f8:	2b2e      	cmp	r3, #46	; 0x2e
 80061fa:	d10e      	bne.n	800621a <_vfiprintf_r+0x14e>
 80061fc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006200:	2b2a      	cmp	r3, #42	; 0x2a
 8006202:	d138      	bne.n	8006276 <_vfiprintf_r+0x1aa>
 8006204:	9b03      	ldr	r3, [sp, #12]
 8006206:	f108 0802 	add.w	r8, r8, #2
 800620a:	1d1a      	adds	r2, r3, #4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	9203      	str	r2, [sp, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	bfb8      	it	lt
 8006214:	f04f 33ff 	movlt.w	r3, #4294967295
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	4d33      	ldr	r5, [pc, #204]	; (80062e8 <_vfiprintf_r+0x21c>)
 800621c:	2203      	movs	r2, #3
 800621e:	f898 1000 	ldrb.w	r1, [r8]
 8006222:	4628      	mov	r0, r5
 8006224:	f7ff fb80 	bl	8005928 <memchr>
 8006228:	b140      	cbz	r0, 800623c <_vfiprintf_r+0x170>
 800622a:	2340      	movs	r3, #64	; 0x40
 800622c:	1b40      	subs	r0, r0, r5
 800622e:	fa03 f000 	lsl.w	r0, r3, r0
 8006232:	9b04      	ldr	r3, [sp, #16]
 8006234:	f108 0801 	add.w	r8, r8, #1
 8006238:	4303      	orrs	r3, r0
 800623a:	9304      	str	r3, [sp, #16]
 800623c:	f898 1000 	ldrb.w	r1, [r8]
 8006240:	2206      	movs	r2, #6
 8006242:	482a      	ldr	r0, [pc, #168]	; (80062ec <_vfiprintf_r+0x220>)
 8006244:	f108 0701 	add.w	r7, r8, #1
 8006248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800624c:	f7ff fb6c 	bl	8005928 <memchr>
 8006250:	2800      	cmp	r0, #0
 8006252:	d037      	beq.n	80062c4 <_vfiprintf_r+0x1f8>
 8006254:	4b26      	ldr	r3, [pc, #152]	; (80062f0 <_vfiprintf_r+0x224>)
 8006256:	bb1b      	cbnz	r3, 80062a0 <_vfiprintf_r+0x1d4>
 8006258:	9b03      	ldr	r3, [sp, #12]
 800625a:	3307      	adds	r3, #7
 800625c:	f023 0307 	bic.w	r3, r3, #7
 8006260:	3308      	adds	r3, #8
 8006262:	9303      	str	r3, [sp, #12]
 8006264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006266:	444b      	add	r3, r9
 8006268:	9309      	str	r3, [sp, #36]	; 0x24
 800626a:	e750      	b.n	800610e <_vfiprintf_r+0x42>
 800626c:	fb05 3202 	mla	r2, r5, r2, r3
 8006270:	2001      	movs	r0, #1
 8006272:	4688      	mov	r8, r1
 8006274:	e78a      	b.n	800618c <_vfiprintf_r+0xc0>
 8006276:	2300      	movs	r3, #0
 8006278:	250a      	movs	r5, #10
 800627a:	4619      	mov	r1, r3
 800627c:	f108 0801 	add.w	r8, r8, #1
 8006280:	9305      	str	r3, [sp, #20]
 8006282:	4640      	mov	r0, r8
 8006284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006288:	3a30      	subs	r2, #48	; 0x30
 800628a:	2a09      	cmp	r2, #9
 800628c:	d903      	bls.n	8006296 <_vfiprintf_r+0x1ca>
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0c3      	beq.n	800621a <_vfiprintf_r+0x14e>
 8006292:	9105      	str	r1, [sp, #20]
 8006294:	e7c1      	b.n	800621a <_vfiprintf_r+0x14e>
 8006296:	fb05 2101 	mla	r1, r5, r1, r2
 800629a:	2301      	movs	r3, #1
 800629c:	4680      	mov	r8, r0
 800629e:	e7f0      	b.n	8006282 <_vfiprintf_r+0x1b6>
 80062a0:	ab03      	add	r3, sp, #12
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	4622      	mov	r2, r4
 80062a6:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <_vfiprintf_r+0x228>)
 80062a8:	a904      	add	r1, sp, #16
 80062aa:	4630      	mov	r0, r6
 80062ac:	f7fd fe0a 	bl	8003ec4 <_printf_float>
 80062b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80062b4:	4681      	mov	r9, r0
 80062b6:	d1d5      	bne.n	8006264 <_vfiprintf_r+0x198>
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	065b      	lsls	r3, r3, #25
 80062bc:	f53f af7e 	bmi.w	80061bc <_vfiprintf_r+0xf0>
 80062c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062c2:	e77d      	b.n	80061c0 <_vfiprintf_r+0xf4>
 80062c4:	ab03      	add	r3, sp, #12
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	4622      	mov	r2, r4
 80062ca:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <_vfiprintf_r+0x228>)
 80062cc:	a904      	add	r1, sp, #16
 80062ce:	4630      	mov	r0, r6
 80062d0:	f7fe f8a4 	bl	800441c <_printf_i>
 80062d4:	e7ec      	b.n	80062b0 <_vfiprintf_r+0x1e4>
 80062d6:	bf00      	nop
 80062d8:	080079f8 	.word	0x080079f8
 80062dc:	08007b34 	.word	0x08007b34
 80062e0:	08007a18 	.word	0x08007a18
 80062e4:	080079d8 	.word	0x080079d8
 80062e8:	08007b3a 	.word	0x08007b3a
 80062ec:	08007b3e 	.word	0x08007b3e
 80062f0:	08003ec5 	.word	0x08003ec5
 80062f4:	080060a7 	.word	0x080060a7

080062f8 <_sbrk_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	2300      	movs	r3, #0
 80062fc:	4c05      	ldr	r4, [pc, #20]	; (8006314 <_sbrk_r+0x1c>)
 80062fe:	4605      	mov	r5, r0
 8006300:	4608      	mov	r0, r1
 8006302:	6023      	str	r3, [r4, #0]
 8006304:	f7fb fbfc 	bl	8001b00 <_sbrk>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d102      	bne.n	8006312 <_sbrk_r+0x1a>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	b103      	cbz	r3, 8006312 <_sbrk_r+0x1a>
 8006310:	602b      	str	r3, [r5, #0]
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	200002e8 	.word	0x200002e8

08006318 <__sread>:
 8006318:	b510      	push	{r4, lr}
 800631a:	460c      	mov	r4, r1
 800631c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006320:	f000 f8a8 	bl	8006474 <_read_r>
 8006324:	2800      	cmp	r0, #0
 8006326:	bfab      	itete	ge
 8006328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800632a:	89a3      	ldrhlt	r3, [r4, #12]
 800632c:	181b      	addge	r3, r3, r0
 800632e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006332:	bfac      	ite	ge
 8006334:	6563      	strge	r3, [r4, #84]	; 0x54
 8006336:	81a3      	strhlt	r3, [r4, #12]
 8006338:	bd10      	pop	{r4, pc}

0800633a <__swrite>:
 800633a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633e:	461f      	mov	r7, r3
 8006340:	898b      	ldrh	r3, [r1, #12]
 8006342:	4605      	mov	r5, r0
 8006344:	05db      	lsls	r3, r3, #23
 8006346:	460c      	mov	r4, r1
 8006348:	4616      	mov	r6, r2
 800634a:	d505      	bpl.n	8006358 <__swrite+0x1e>
 800634c:	2302      	movs	r3, #2
 800634e:	2200      	movs	r2, #0
 8006350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006354:	f000 f868 	bl	8006428 <_lseek_r>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	4632      	mov	r2, r6
 800635c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006360:	81a3      	strh	r3, [r4, #12]
 8006362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006366:	463b      	mov	r3, r7
 8006368:	4628      	mov	r0, r5
 800636a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800636e:	f000 b817 	b.w	80063a0 <_write_r>

08006372 <__sseek>:
 8006372:	b510      	push	{r4, lr}
 8006374:	460c      	mov	r4, r1
 8006376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637a:	f000 f855 	bl	8006428 <_lseek_r>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	bf15      	itete	ne
 8006384:	6560      	strne	r0, [r4, #84]	; 0x54
 8006386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800638a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800638e:	81a3      	strheq	r3, [r4, #12]
 8006390:	bf18      	it	ne
 8006392:	81a3      	strhne	r3, [r4, #12]
 8006394:	bd10      	pop	{r4, pc}

08006396 <__sclose>:
 8006396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639a:	f000 b813 	b.w	80063c4 <_close_r>
	...

080063a0 <_write_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4605      	mov	r5, r0
 80063a4:	4608      	mov	r0, r1
 80063a6:	4611      	mov	r1, r2
 80063a8:	2200      	movs	r2, #0
 80063aa:	4c05      	ldr	r4, [pc, #20]	; (80063c0 <_write_r+0x20>)
 80063ac:	6022      	str	r2, [r4, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f7fb fb59 	bl	8001a66 <_write>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_write_r+0x1e>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	b103      	cbz	r3, 80063be <_write_r+0x1e>
 80063bc:	602b      	str	r3, [r5, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	200002e8 	.word	0x200002e8

080063c4 <_close_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	2300      	movs	r3, #0
 80063c8:	4c05      	ldr	r4, [pc, #20]	; (80063e0 <_close_r+0x1c>)
 80063ca:	4605      	mov	r5, r0
 80063cc:	4608      	mov	r0, r1
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	f7fb fb65 	bl	8001a9e <_close>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d102      	bne.n	80063de <_close_r+0x1a>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	b103      	cbz	r3, 80063de <_close_r+0x1a>
 80063dc:	602b      	str	r3, [r5, #0]
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	200002e8 	.word	0x200002e8

080063e4 <_fstat_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	2300      	movs	r3, #0
 80063e8:	4c06      	ldr	r4, [pc, #24]	; (8006404 <_fstat_r+0x20>)
 80063ea:	4605      	mov	r5, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	f7fb fb5f 	bl	8001ab4 <_fstat>
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	d102      	bne.n	8006400 <_fstat_r+0x1c>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	b103      	cbz	r3, 8006400 <_fstat_r+0x1c>
 80063fe:	602b      	str	r3, [r5, #0]
 8006400:	bd38      	pop	{r3, r4, r5, pc}
 8006402:	bf00      	nop
 8006404:	200002e8 	.word	0x200002e8

08006408 <_isatty_r>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	2300      	movs	r3, #0
 800640c:	4c05      	ldr	r4, [pc, #20]	; (8006424 <_isatty_r+0x1c>)
 800640e:	4605      	mov	r5, r0
 8006410:	4608      	mov	r0, r1
 8006412:	6023      	str	r3, [r4, #0]
 8006414:	f7fb fb5d 	bl	8001ad2 <_isatty>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d102      	bne.n	8006422 <_isatty_r+0x1a>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	b103      	cbz	r3, 8006422 <_isatty_r+0x1a>
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	bd38      	pop	{r3, r4, r5, pc}
 8006424:	200002e8 	.word	0x200002e8

08006428 <_lseek_r>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4605      	mov	r5, r0
 800642c:	4608      	mov	r0, r1
 800642e:	4611      	mov	r1, r2
 8006430:	2200      	movs	r2, #0
 8006432:	4c05      	ldr	r4, [pc, #20]	; (8006448 <_lseek_r+0x20>)
 8006434:	6022      	str	r2, [r4, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	f7fb fb55 	bl	8001ae6 <_lseek>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_lseek_r+0x1e>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	b103      	cbz	r3, 8006446 <_lseek_r+0x1e>
 8006444:	602b      	str	r3, [r5, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	200002e8 	.word	0x200002e8

0800644c <__ascii_mbtowc>:
 800644c:	b082      	sub	sp, #8
 800644e:	b901      	cbnz	r1, 8006452 <__ascii_mbtowc+0x6>
 8006450:	a901      	add	r1, sp, #4
 8006452:	b142      	cbz	r2, 8006466 <__ascii_mbtowc+0x1a>
 8006454:	b14b      	cbz	r3, 800646a <__ascii_mbtowc+0x1e>
 8006456:	7813      	ldrb	r3, [r2, #0]
 8006458:	600b      	str	r3, [r1, #0]
 800645a:	7812      	ldrb	r2, [r2, #0]
 800645c:	1c10      	adds	r0, r2, #0
 800645e:	bf18      	it	ne
 8006460:	2001      	movne	r0, #1
 8006462:	b002      	add	sp, #8
 8006464:	4770      	bx	lr
 8006466:	4610      	mov	r0, r2
 8006468:	e7fb      	b.n	8006462 <__ascii_mbtowc+0x16>
 800646a:	f06f 0001 	mvn.w	r0, #1
 800646e:	e7f8      	b.n	8006462 <__ascii_mbtowc+0x16>

08006470 <__malloc_lock>:
 8006470:	4770      	bx	lr

08006472 <__malloc_unlock>:
 8006472:	4770      	bx	lr

08006474 <_read_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4605      	mov	r5, r0
 8006478:	4608      	mov	r0, r1
 800647a:	4611      	mov	r1, r2
 800647c:	2200      	movs	r2, #0
 800647e:	4c05      	ldr	r4, [pc, #20]	; (8006494 <_read_r+0x20>)
 8006480:	6022      	str	r2, [r4, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	f7fb fad2 	bl	8001a2c <_read>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d102      	bne.n	8006492 <_read_r+0x1e>
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	b103      	cbz	r3, 8006492 <_read_r+0x1e>
 8006490:	602b      	str	r3, [r5, #0]
 8006492:	bd38      	pop	{r3, r4, r5, pc}
 8006494:	200002e8 	.word	0x200002e8

08006498 <__ascii_wctomb>:
 8006498:	b149      	cbz	r1, 80064ae <__ascii_wctomb+0x16>
 800649a:	2aff      	cmp	r2, #255	; 0xff
 800649c:	bf8b      	itete	hi
 800649e:	238a      	movhi	r3, #138	; 0x8a
 80064a0:	700a      	strbls	r2, [r1, #0]
 80064a2:	6003      	strhi	r3, [r0, #0]
 80064a4:	2001      	movls	r0, #1
 80064a6:	bf88      	it	hi
 80064a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80064ac:	4770      	bx	lr
 80064ae:	4608      	mov	r0, r1
 80064b0:	4770      	bx	lr
 80064b2:	0000      	movs	r0, r0
 80064b4:	0000      	movs	r0, r0
	...

080064b8 <atan>:
 80064b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	4bb6      	ldr	r3, [pc, #728]	; (8006798 <atan+0x2e0>)
 80064be:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80064c2:	429e      	cmp	r6, r3
 80064c4:	4604      	mov	r4, r0
 80064c6:	460d      	mov	r5, r1
 80064c8:	468b      	mov	fp, r1
 80064ca:	dd17      	ble.n	80064fc <atan+0x44>
 80064cc:	4bb3      	ldr	r3, [pc, #716]	; (800679c <atan+0x2e4>)
 80064ce:	429e      	cmp	r6, r3
 80064d0:	dc01      	bgt.n	80064d6 <atan+0x1e>
 80064d2:	d109      	bne.n	80064e8 <atan+0x30>
 80064d4:	b140      	cbz	r0, 80064e8 <atan+0x30>
 80064d6:	4622      	mov	r2, r4
 80064d8:	462b      	mov	r3, r5
 80064da:	4620      	mov	r0, r4
 80064dc:	4629      	mov	r1, r5
 80064de:	f7f9 fe45 	bl	800016c <__adddf3>
 80064e2:	4604      	mov	r4, r0
 80064e4:	460d      	mov	r5, r1
 80064e6:	e005      	b.n	80064f4 <atan+0x3c>
 80064e8:	f1bb 0f00 	cmp.w	fp, #0
 80064ec:	4cac      	ldr	r4, [pc, #688]	; (80067a0 <atan+0x2e8>)
 80064ee:	f340 8121 	ble.w	8006734 <atan+0x27c>
 80064f2:	4dac      	ldr	r5, [pc, #688]	; (80067a4 <atan+0x2ec>)
 80064f4:	4620      	mov	r0, r4
 80064f6:	4629      	mov	r1, r5
 80064f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fc:	4baa      	ldr	r3, [pc, #680]	; (80067a8 <atan+0x2f0>)
 80064fe:	429e      	cmp	r6, r3
 8006500:	dc11      	bgt.n	8006526 <atan+0x6e>
 8006502:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006506:	429e      	cmp	r6, r3
 8006508:	dc0a      	bgt.n	8006520 <atan+0x68>
 800650a:	a38b      	add	r3, pc, #556	; (adr r3, 8006738 <atan+0x280>)
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f7f9 fe2c 	bl	800016c <__adddf3>
 8006514:	2200      	movs	r2, #0
 8006516:	4ba5      	ldr	r3, [pc, #660]	; (80067ac <atan+0x2f4>)
 8006518:	f7fa fa6e 	bl	80009f8 <__aeabi_dcmpgt>
 800651c:	2800      	cmp	r0, #0
 800651e:	d1e9      	bne.n	80064f4 <atan+0x3c>
 8006520:	f04f 3aff 	mov.w	sl, #4294967295
 8006524:	e027      	b.n	8006576 <atan+0xbe>
 8006526:	f000 f951 	bl	80067cc <fabs>
 800652a:	4ba1      	ldr	r3, [pc, #644]	; (80067b0 <atan+0x2f8>)
 800652c:	4604      	mov	r4, r0
 800652e:	429e      	cmp	r6, r3
 8006530:	460d      	mov	r5, r1
 8006532:	f300 80b8 	bgt.w	80066a6 <atan+0x1ee>
 8006536:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800653a:	429e      	cmp	r6, r3
 800653c:	f300 809c 	bgt.w	8006678 <atan+0x1c0>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	f7f9 fe12 	bl	800016c <__adddf3>
 8006548:	2200      	movs	r2, #0
 800654a:	4b98      	ldr	r3, [pc, #608]	; (80067ac <atan+0x2f4>)
 800654c:	f7f9 fe0c 	bl	8000168 <__aeabi_dsub>
 8006550:	2200      	movs	r2, #0
 8006552:	4606      	mov	r6, r0
 8006554:	460f      	mov	r7, r1
 8006556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800655a:	4620      	mov	r0, r4
 800655c:	4629      	mov	r1, r5
 800655e:	f7f9 fe05 	bl	800016c <__adddf3>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4630      	mov	r0, r6
 8006568:	4639      	mov	r1, r7
 800656a:	f7fa f8df 	bl	800072c <__aeabi_ddiv>
 800656e:	f04f 0a00 	mov.w	sl, #0
 8006572:	4604      	mov	r4, r0
 8006574:	460d      	mov	r5, r1
 8006576:	4622      	mov	r2, r4
 8006578:	462b      	mov	r3, r5
 800657a:	4620      	mov	r0, r4
 800657c:	4629      	mov	r1, r5
 800657e:	f7f9 ffab 	bl	80004d8 <__aeabi_dmul>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4680      	mov	r8, r0
 8006588:	4689      	mov	r9, r1
 800658a:	f7f9 ffa5 	bl	80004d8 <__aeabi_dmul>
 800658e:	a36c      	add	r3, pc, #432	; (adr r3, 8006740 <atan+0x288>)
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	4606      	mov	r6, r0
 8006596:	460f      	mov	r7, r1
 8006598:	f7f9 ff9e 	bl	80004d8 <__aeabi_dmul>
 800659c:	a36a      	add	r3, pc, #424	; (adr r3, 8006748 <atan+0x290>)
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f7f9 fde3 	bl	800016c <__adddf3>
 80065a6:	4632      	mov	r2, r6
 80065a8:	463b      	mov	r3, r7
 80065aa:	f7f9 ff95 	bl	80004d8 <__aeabi_dmul>
 80065ae:	a368      	add	r3, pc, #416	; (adr r3, 8006750 <atan+0x298>)
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f7f9 fdda 	bl	800016c <__adddf3>
 80065b8:	4632      	mov	r2, r6
 80065ba:	463b      	mov	r3, r7
 80065bc:	f7f9 ff8c 	bl	80004d8 <__aeabi_dmul>
 80065c0:	a365      	add	r3, pc, #404	; (adr r3, 8006758 <atan+0x2a0>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f7f9 fdd1 	bl	800016c <__adddf3>
 80065ca:	4632      	mov	r2, r6
 80065cc:	463b      	mov	r3, r7
 80065ce:	f7f9 ff83 	bl	80004d8 <__aeabi_dmul>
 80065d2:	a363      	add	r3, pc, #396	; (adr r3, 8006760 <atan+0x2a8>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f7f9 fdc8 	bl	800016c <__adddf3>
 80065dc:	4632      	mov	r2, r6
 80065de:	463b      	mov	r3, r7
 80065e0:	f7f9 ff7a 	bl	80004d8 <__aeabi_dmul>
 80065e4:	a360      	add	r3, pc, #384	; (adr r3, 8006768 <atan+0x2b0>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7f9 fdbf 	bl	800016c <__adddf3>
 80065ee:	4642      	mov	r2, r8
 80065f0:	464b      	mov	r3, r9
 80065f2:	f7f9 ff71 	bl	80004d8 <__aeabi_dmul>
 80065f6:	a35e      	add	r3, pc, #376	; (adr r3, 8006770 <atan+0x2b8>)
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	4680      	mov	r8, r0
 80065fe:	4689      	mov	r9, r1
 8006600:	4630      	mov	r0, r6
 8006602:	4639      	mov	r1, r7
 8006604:	f7f9 ff68 	bl	80004d8 <__aeabi_dmul>
 8006608:	a35b      	add	r3, pc, #364	; (adr r3, 8006778 <atan+0x2c0>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f7f9 fdab 	bl	8000168 <__aeabi_dsub>
 8006612:	4632      	mov	r2, r6
 8006614:	463b      	mov	r3, r7
 8006616:	f7f9 ff5f 	bl	80004d8 <__aeabi_dmul>
 800661a:	a359      	add	r3, pc, #356	; (adr r3, 8006780 <atan+0x2c8>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7f9 fda2 	bl	8000168 <__aeabi_dsub>
 8006624:	4632      	mov	r2, r6
 8006626:	463b      	mov	r3, r7
 8006628:	f7f9 ff56 	bl	80004d8 <__aeabi_dmul>
 800662c:	a356      	add	r3, pc, #344	; (adr r3, 8006788 <atan+0x2d0>)
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f7f9 fd99 	bl	8000168 <__aeabi_dsub>
 8006636:	4632      	mov	r2, r6
 8006638:	463b      	mov	r3, r7
 800663a:	f7f9 ff4d 	bl	80004d8 <__aeabi_dmul>
 800663e:	a354      	add	r3, pc, #336	; (adr r3, 8006790 <atan+0x2d8>)
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f7f9 fd90 	bl	8000168 <__aeabi_dsub>
 8006648:	4632      	mov	r2, r6
 800664a:	463b      	mov	r3, r7
 800664c:	f7f9 ff44 	bl	80004d8 <__aeabi_dmul>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4640      	mov	r0, r8
 8006656:	4649      	mov	r1, r9
 8006658:	f7f9 fd88 	bl	800016c <__adddf3>
 800665c:	4622      	mov	r2, r4
 800665e:	462b      	mov	r3, r5
 8006660:	f7f9 ff3a 	bl	80004d8 <__aeabi_dmul>
 8006664:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	d144      	bne.n	80066f8 <atan+0x240>
 800666e:	4620      	mov	r0, r4
 8006670:	4629      	mov	r1, r5
 8006672:	f7f9 fd79 	bl	8000168 <__aeabi_dsub>
 8006676:	e734      	b.n	80064e2 <atan+0x2a>
 8006678:	2200      	movs	r2, #0
 800667a:	4b4c      	ldr	r3, [pc, #304]	; (80067ac <atan+0x2f4>)
 800667c:	f7f9 fd74 	bl	8000168 <__aeabi_dsub>
 8006680:	2200      	movs	r2, #0
 8006682:	4606      	mov	r6, r0
 8006684:	460f      	mov	r7, r1
 8006686:	4b49      	ldr	r3, [pc, #292]	; (80067ac <atan+0x2f4>)
 8006688:	4620      	mov	r0, r4
 800668a:	4629      	mov	r1, r5
 800668c:	f7f9 fd6e 	bl	800016c <__adddf3>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4630      	mov	r0, r6
 8006696:	4639      	mov	r1, r7
 8006698:	f7fa f848 	bl	800072c <__aeabi_ddiv>
 800669c:	f04f 0a01 	mov.w	sl, #1
 80066a0:	4604      	mov	r4, r0
 80066a2:	460d      	mov	r5, r1
 80066a4:	e767      	b.n	8006576 <atan+0xbe>
 80066a6:	4b43      	ldr	r3, [pc, #268]	; (80067b4 <atan+0x2fc>)
 80066a8:	429e      	cmp	r6, r3
 80066aa:	dc1a      	bgt.n	80066e2 <atan+0x22a>
 80066ac:	2200      	movs	r2, #0
 80066ae:	4b42      	ldr	r3, [pc, #264]	; (80067b8 <atan+0x300>)
 80066b0:	f7f9 fd5a 	bl	8000168 <__aeabi_dsub>
 80066b4:	2200      	movs	r2, #0
 80066b6:	4606      	mov	r6, r0
 80066b8:	460f      	mov	r7, r1
 80066ba:	4b3f      	ldr	r3, [pc, #252]	; (80067b8 <atan+0x300>)
 80066bc:	4620      	mov	r0, r4
 80066be:	4629      	mov	r1, r5
 80066c0:	f7f9 ff0a 	bl	80004d8 <__aeabi_dmul>
 80066c4:	2200      	movs	r2, #0
 80066c6:	4b39      	ldr	r3, [pc, #228]	; (80067ac <atan+0x2f4>)
 80066c8:	f7f9 fd50 	bl	800016c <__adddf3>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4630      	mov	r0, r6
 80066d2:	4639      	mov	r1, r7
 80066d4:	f7fa f82a 	bl	800072c <__aeabi_ddiv>
 80066d8:	f04f 0a02 	mov.w	sl, #2
 80066dc:	4604      	mov	r4, r0
 80066de:	460d      	mov	r5, r1
 80066e0:	e749      	b.n	8006576 <atan+0xbe>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	2000      	movs	r0, #0
 80066e8:	4934      	ldr	r1, [pc, #208]	; (80067bc <atan+0x304>)
 80066ea:	f7fa f81f 	bl	800072c <__aeabi_ddiv>
 80066ee:	f04f 0a03 	mov.w	sl, #3
 80066f2:	4604      	mov	r4, r0
 80066f4:	460d      	mov	r5, r1
 80066f6:	e73e      	b.n	8006576 <atan+0xbe>
 80066f8:	4b31      	ldr	r3, [pc, #196]	; (80067c0 <atan+0x308>)
 80066fa:	4e32      	ldr	r6, [pc, #200]	; (80067c4 <atan+0x30c>)
 80066fc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006700:	4456      	add	r6, sl
 8006702:	449a      	add	sl, r3
 8006704:	e9da 2300 	ldrd	r2, r3, [sl]
 8006708:	f7f9 fd2e 	bl	8000168 <__aeabi_dsub>
 800670c:	4622      	mov	r2, r4
 800670e:	462b      	mov	r3, r5
 8006710:	f7f9 fd2a 	bl	8000168 <__aeabi_dsub>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	e9d6 0100 	ldrd	r0, r1, [r6]
 800671c:	f7f9 fd24 	bl	8000168 <__aeabi_dsub>
 8006720:	f1bb 0f00 	cmp.w	fp, #0
 8006724:	4604      	mov	r4, r0
 8006726:	460d      	mov	r5, r1
 8006728:	f6bf aee4 	bge.w	80064f4 <atan+0x3c>
 800672c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006730:	461d      	mov	r5, r3
 8006732:	e6df      	b.n	80064f4 <atan+0x3c>
 8006734:	4d24      	ldr	r5, [pc, #144]	; (80067c8 <atan+0x310>)
 8006736:	e6dd      	b.n	80064f4 <atan+0x3c>
 8006738:	8800759c 	.word	0x8800759c
 800673c:	7e37e43c 	.word	0x7e37e43c
 8006740:	e322da11 	.word	0xe322da11
 8006744:	3f90ad3a 	.word	0x3f90ad3a
 8006748:	24760deb 	.word	0x24760deb
 800674c:	3fa97b4b 	.word	0x3fa97b4b
 8006750:	a0d03d51 	.word	0xa0d03d51
 8006754:	3fb10d66 	.word	0x3fb10d66
 8006758:	c54c206e 	.word	0xc54c206e
 800675c:	3fb745cd 	.word	0x3fb745cd
 8006760:	920083ff 	.word	0x920083ff
 8006764:	3fc24924 	.word	0x3fc24924
 8006768:	5555550d 	.word	0x5555550d
 800676c:	3fd55555 	.word	0x3fd55555
 8006770:	2c6a6c2f 	.word	0x2c6a6c2f
 8006774:	bfa2b444 	.word	0xbfa2b444
 8006778:	52defd9a 	.word	0x52defd9a
 800677c:	3fadde2d 	.word	0x3fadde2d
 8006780:	af749a6d 	.word	0xaf749a6d
 8006784:	3fb3b0f2 	.word	0x3fb3b0f2
 8006788:	fe231671 	.word	0xfe231671
 800678c:	3fbc71c6 	.word	0x3fbc71c6
 8006790:	9998ebc4 	.word	0x9998ebc4
 8006794:	3fc99999 	.word	0x3fc99999
 8006798:	440fffff 	.word	0x440fffff
 800679c:	7ff00000 	.word	0x7ff00000
 80067a0:	54442d18 	.word	0x54442d18
 80067a4:	3ff921fb 	.word	0x3ff921fb
 80067a8:	3fdbffff 	.word	0x3fdbffff
 80067ac:	3ff00000 	.word	0x3ff00000
 80067b0:	3ff2ffff 	.word	0x3ff2ffff
 80067b4:	40037fff 	.word	0x40037fff
 80067b8:	3ff80000 	.word	0x3ff80000
 80067bc:	bff00000 	.word	0xbff00000
 80067c0:	08007c70 	.word	0x08007c70
 80067c4:	08007c50 	.word	0x08007c50
 80067c8:	bff921fb 	.word	0xbff921fb

080067cc <fabs>:
 80067cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80067d0:	4619      	mov	r1, r3
 80067d2:	4770      	bx	lr

080067d4 <pow>:
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	b08f      	sub	sp, #60	; 0x3c
 80067da:	461d      	mov	r5, r3
 80067dc:	4680      	mov	r8, r0
 80067de:	4689      	mov	r9, r1
 80067e0:	4614      	mov	r4, r2
 80067e2:	f000 f9a9 	bl	8006b38 <__ieee754_pow>
 80067e6:	4fa1      	ldr	r7, [pc, #644]	; (8006a6c <pow+0x298>)
 80067e8:	e9cd 0100 	strd	r0, r1, [sp]
 80067ec:	f997 3000 	ldrsb.w	r3, [r7]
 80067f0:	463e      	mov	r6, r7
 80067f2:	9302      	str	r3, [sp, #8]
 80067f4:	3301      	adds	r3, #1
 80067f6:	d05f      	beq.n	80068b8 <pow+0xe4>
 80067f8:	4622      	mov	r2, r4
 80067fa:	462b      	mov	r3, r5
 80067fc:	4620      	mov	r0, r4
 80067fe:	4629      	mov	r1, r5
 8006800:	f7fa f904 	bl	8000a0c <__aeabi_dcmpun>
 8006804:	4682      	mov	sl, r0
 8006806:	2800      	cmp	r0, #0
 8006808:	d156      	bne.n	80068b8 <pow+0xe4>
 800680a:	4642      	mov	r2, r8
 800680c:	464b      	mov	r3, r9
 800680e:	4640      	mov	r0, r8
 8006810:	4649      	mov	r1, r9
 8006812:	f7fa f8fb 	bl	8000a0c <__aeabi_dcmpun>
 8006816:	9003      	str	r0, [sp, #12]
 8006818:	b1e8      	cbz	r0, 8006856 <pow+0x82>
 800681a:	2200      	movs	r2, #0
 800681c:	2300      	movs	r3, #0
 800681e:	4620      	mov	r0, r4
 8006820:	4629      	mov	r1, r5
 8006822:	f7fa f8c1 	bl	80009a8 <__aeabi_dcmpeq>
 8006826:	2800      	cmp	r0, #0
 8006828:	d046      	beq.n	80068b8 <pow+0xe4>
 800682a:	2301      	movs	r3, #1
 800682c:	2200      	movs	r2, #0
 800682e:	9304      	str	r3, [sp, #16]
 8006830:	4b8f      	ldr	r3, [pc, #572]	; (8006a70 <pow+0x29c>)
 8006832:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006836:	9305      	str	r3, [sp, #20]
 8006838:	4b8e      	ldr	r3, [pc, #568]	; (8006a74 <pow+0x2a0>)
 800683a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800683e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006842:	9b02      	ldr	r3, [sp, #8]
 8006844:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d031      	beq.n	80068b0 <pow+0xdc>
 800684c:	a804      	add	r0, sp, #16
 800684e:	f000 ff2f 	bl	80076b0 <matherr>
 8006852:	bb38      	cbnz	r0, 80068a4 <pow+0xd0>
 8006854:	e058      	b.n	8006908 <pow+0x134>
 8006856:	f04f 0a00 	mov.w	sl, #0
 800685a:	f04f 0b00 	mov.w	fp, #0
 800685e:	4652      	mov	r2, sl
 8006860:	465b      	mov	r3, fp
 8006862:	4640      	mov	r0, r8
 8006864:	4649      	mov	r1, r9
 8006866:	f7fa f89f 	bl	80009a8 <__aeabi_dcmpeq>
 800686a:	2800      	cmp	r0, #0
 800686c:	d051      	beq.n	8006912 <pow+0x13e>
 800686e:	4652      	mov	r2, sl
 8006870:	465b      	mov	r3, fp
 8006872:	4620      	mov	r0, r4
 8006874:	4629      	mov	r1, r5
 8006876:	f7fa f897 	bl	80009a8 <__aeabi_dcmpeq>
 800687a:	4606      	mov	r6, r0
 800687c:	b308      	cbz	r0, 80068c2 <pow+0xee>
 800687e:	2301      	movs	r3, #1
 8006880:	9304      	str	r3, [sp, #16]
 8006882:	4b7b      	ldr	r3, [pc, #492]	; (8006a70 <pow+0x29c>)
 8006884:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006888:	9305      	str	r3, [sp, #20]
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006890:	930c      	str	r3, [sp, #48]	; 0x30
 8006892:	9b02      	ldr	r3, [sp, #8]
 8006894:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0d7      	beq.n	800684c <pow+0x78>
 800689c:	2200      	movs	r2, #0
 800689e:	4b75      	ldr	r3, [pc, #468]	; (8006a74 <pow+0x2a0>)
 80068a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80068a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068a6:	b11b      	cbz	r3, 80068b0 <pow+0xdc>
 80068a8:	f7fd fa48 	bl	8003d3c <__errno>
 80068ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068ae:	6003      	str	r3, [r0, #0]
 80068b0:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80068b4:	e9cd 3400 	strd	r3, r4, [sp]
 80068b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068bc:	b00f      	add	sp, #60	; 0x3c
 80068be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c2:	4620      	mov	r0, r4
 80068c4:	4629      	mov	r1, r5
 80068c6:	f000 feed 	bl	80076a4 <finite>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	d0f4      	beq.n	80068b8 <pow+0xe4>
 80068ce:	4652      	mov	r2, sl
 80068d0:	465b      	mov	r3, fp
 80068d2:	4620      	mov	r0, r4
 80068d4:	4629      	mov	r1, r5
 80068d6:	f7fa f871 	bl	80009bc <__aeabi_dcmplt>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d0ec      	beq.n	80068b8 <pow+0xe4>
 80068de:	2301      	movs	r3, #1
 80068e0:	9304      	str	r3, [sp, #16]
 80068e2:	4b63      	ldr	r3, [pc, #396]	; (8006a70 <pow+0x29c>)
 80068e4:	960c      	str	r6, [sp, #48]	; 0x30
 80068e6:	9305      	str	r3, [sp, #20]
 80068e8:	f997 3000 	ldrsb.w	r3, [r7]
 80068ec:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80068f0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80068f4:	b913      	cbnz	r3, 80068fc <pow+0x128>
 80068f6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80068fa:	e7a7      	b.n	800684c <pow+0x78>
 80068fc:	2000      	movs	r0, #0
 80068fe:	495e      	ldr	r1, [pc, #376]	; (8006a78 <pow+0x2a4>)
 8006900:	2b02      	cmp	r3, #2
 8006902:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006906:	d1a1      	bne.n	800684c <pow+0x78>
 8006908:	f7fd fa18 	bl	8003d3c <__errno>
 800690c:	2321      	movs	r3, #33	; 0x21
 800690e:	6003      	str	r3, [r0, #0]
 8006910:	e7c8      	b.n	80068a4 <pow+0xd0>
 8006912:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006916:	f000 fec5 	bl	80076a4 <finite>
 800691a:	9002      	str	r0, [sp, #8]
 800691c:	2800      	cmp	r0, #0
 800691e:	d177      	bne.n	8006a10 <pow+0x23c>
 8006920:	4640      	mov	r0, r8
 8006922:	4649      	mov	r1, r9
 8006924:	f000 febe 	bl	80076a4 <finite>
 8006928:	2800      	cmp	r0, #0
 800692a:	d071      	beq.n	8006a10 <pow+0x23c>
 800692c:	4620      	mov	r0, r4
 800692e:	4629      	mov	r1, r5
 8006930:	f000 feb8 	bl	80076a4 <finite>
 8006934:	2800      	cmp	r0, #0
 8006936:	d06b      	beq.n	8006a10 <pow+0x23c>
 8006938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800693c:	4619      	mov	r1, r3
 800693e:	4610      	mov	r0, r2
 8006940:	f7fa f864 	bl	8000a0c <__aeabi_dcmpun>
 8006944:	f997 7000 	ldrsb.w	r7, [r7]
 8006948:	4b49      	ldr	r3, [pc, #292]	; (8006a70 <pow+0x29c>)
 800694a:	b1a0      	cbz	r0, 8006976 <pow+0x1a2>
 800694c:	2201      	movs	r2, #1
 800694e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006952:	9b02      	ldr	r3, [sp, #8]
 8006954:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006958:	930c      	str	r3, [sp, #48]	; 0x30
 800695a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800695e:	2f00      	cmp	r7, #0
 8006960:	d0c9      	beq.n	80068f6 <pow+0x122>
 8006962:	4652      	mov	r2, sl
 8006964:	465b      	mov	r3, fp
 8006966:	4650      	mov	r0, sl
 8006968:	4659      	mov	r1, fp
 800696a:	f7f9 fedf 	bl	800072c <__aeabi_ddiv>
 800696e:	2f02      	cmp	r7, #2
 8006970:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006974:	e7c7      	b.n	8006906 <pow+0x132>
 8006976:	2203      	movs	r2, #3
 8006978:	900c      	str	r0, [sp, #48]	; 0x30
 800697a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800697e:	4620      	mov	r0, r4
 8006980:	4629      	mov	r1, r5
 8006982:	2200      	movs	r2, #0
 8006984:	4b3d      	ldr	r3, [pc, #244]	; (8006a7c <pow+0x2a8>)
 8006986:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800698a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800698e:	f7f9 fda3 	bl	80004d8 <__aeabi_dmul>
 8006992:	4604      	mov	r4, r0
 8006994:	460d      	mov	r5, r1
 8006996:	bb17      	cbnz	r7, 80069de <pow+0x20a>
 8006998:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800699c:	4b38      	ldr	r3, [pc, #224]	; (8006a80 <pow+0x2ac>)
 800699e:	4640      	mov	r0, r8
 80069a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80069a4:	4649      	mov	r1, r9
 80069a6:	4652      	mov	r2, sl
 80069a8:	465b      	mov	r3, fp
 80069aa:	f7fa f807 	bl	80009bc <__aeabi_dcmplt>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d054      	beq.n	8006a5c <pow+0x288>
 80069b2:	4620      	mov	r0, r4
 80069b4:	4629      	mov	r1, r5
 80069b6:	f000 fe83 	bl	80076c0 <rint>
 80069ba:	4622      	mov	r2, r4
 80069bc:	462b      	mov	r3, r5
 80069be:	f7f9 fff3 	bl	80009a8 <__aeabi_dcmpeq>
 80069c2:	b920      	cbnz	r0, 80069ce <pow+0x1fa>
 80069c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80069c8:	4b2e      	ldr	r3, [pc, #184]	; (8006a84 <pow+0x2b0>)
 80069ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80069ce:	f996 3000 	ldrsb.w	r3, [r6]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d142      	bne.n	8006a5c <pow+0x288>
 80069d6:	f7fd f9b1 	bl	8003d3c <__errno>
 80069da:	2322      	movs	r3, #34	; 0x22
 80069dc:	e797      	b.n	800690e <pow+0x13a>
 80069de:	2200      	movs	r2, #0
 80069e0:	4b29      	ldr	r3, [pc, #164]	; (8006a88 <pow+0x2b4>)
 80069e2:	4640      	mov	r0, r8
 80069e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80069e8:	4649      	mov	r1, r9
 80069ea:	4652      	mov	r2, sl
 80069ec:	465b      	mov	r3, fp
 80069ee:	f7f9 ffe5 	bl	80009bc <__aeabi_dcmplt>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d0eb      	beq.n	80069ce <pow+0x1fa>
 80069f6:	4620      	mov	r0, r4
 80069f8:	4629      	mov	r1, r5
 80069fa:	f000 fe61 	bl	80076c0 <rint>
 80069fe:	4622      	mov	r2, r4
 8006a00:	462b      	mov	r3, r5
 8006a02:	f7f9 ffd1 	bl	80009a8 <__aeabi_dcmpeq>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d1e1      	bne.n	80069ce <pow+0x1fa>
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4b1a      	ldr	r3, [pc, #104]	; (8006a78 <pow+0x2a4>)
 8006a0e:	e7dc      	b.n	80069ca <pow+0x1f6>
 8006a10:	2200      	movs	r2, #0
 8006a12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a16:	2300      	movs	r3, #0
 8006a18:	f7f9 ffc6 	bl	80009a8 <__aeabi_dcmpeq>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	f43f af4b 	beq.w	80068b8 <pow+0xe4>
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	f000 fe3d 	bl	80076a4 <finite>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	f43f af44 	beq.w	80068b8 <pow+0xe4>
 8006a30:	4620      	mov	r0, r4
 8006a32:	4629      	mov	r1, r5
 8006a34:	f000 fe36 	bl	80076a4 <finite>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	f43f af3d 	beq.w	80068b8 <pow+0xe4>
 8006a3e:	2304      	movs	r3, #4
 8006a40:	9304      	str	r3, [sp, #16]
 8006a42:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <pow+0x29c>)
 8006a44:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006a48:	9305      	str	r3, [sp, #20]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2400      	movs	r4, #0
 8006a4e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a50:	2300      	movs	r3, #0
 8006a52:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006a56:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8006a5a:	e7b8      	b.n	80069ce <pow+0x1fa>
 8006a5c:	a804      	add	r0, sp, #16
 8006a5e:	f000 fe27 	bl	80076b0 <matherr>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	f47f af1e 	bne.w	80068a4 <pow+0xd0>
 8006a68:	e7b5      	b.n	80069d6 <pow+0x202>
 8006a6a:	bf00      	nop
 8006a6c:	200001dc 	.word	0x200001dc
 8006a70:	08007c90 	.word	0x08007c90
 8006a74:	3ff00000 	.word	0x3ff00000
 8006a78:	fff00000 	.word	0xfff00000
 8006a7c:	3fe00000 	.word	0x3fe00000
 8006a80:	47efffff 	.word	0x47efffff
 8006a84:	c7efffff 	.word	0xc7efffff
 8006a88:	7ff00000 	.word	0x7ff00000

08006a8c <sqrt>:
 8006a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a90:	b08b      	sub	sp, #44	; 0x2c
 8006a92:	4604      	mov	r4, r0
 8006a94:	460d      	mov	r5, r1
 8006a96:	f000 fd59 	bl	800754c <__ieee754_sqrt>
 8006a9a:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <sqrt+0xa0>)
 8006a9c:	4680      	mov	r8, r0
 8006a9e:	f993 a000 	ldrsb.w	sl, [r3]
 8006aa2:	4689      	mov	r9, r1
 8006aa4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006aa8:	d02b      	beq.n	8006b02 <sqrt+0x76>
 8006aaa:	4622      	mov	r2, r4
 8006aac:	462b      	mov	r3, r5
 8006aae:	4620      	mov	r0, r4
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	f7f9 ffab 	bl	8000a0c <__aeabi_dcmpun>
 8006ab6:	4683      	mov	fp, r0
 8006ab8:	bb18      	cbnz	r0, 8006b02 <sqrt+0x76>
 8006aba:	2600      	movs	r6, #0
 8006abc:	2700      	movs	r7, #0
 8006abe:	4632      	mov	r2, r6
 8006ac0:	463b      	mov	r3, r7
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	f7f9 ff79 	bl	80009bc <__aeabi_dcmplt>
 8006aca:	b1d0      	cbz	r0, 8006b02 <sqrt+0x76>
 8006acc:	2301      	movs	r3, #1
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <sqrt+0xa4>)
 8006ad2:	f8cd b020 	str.w	fp, [sp, #32]
 8006ad6:	9301      	str	r3, [sp, #4]
 8006ad8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006adc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006ae0:	f1ba 0f00 	cmp.w	sl, #0
 8006ae4:	d112      	bne.n	8006b0c <sqrt+0x80>
 8006ae6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006aea:	4668      	mov	r0, sp
 8006aec:	f000 fde0 	bl	80076b0 <matherr>
 8006af0:	b1b8      	cbz	r0, 8006b22 <sqrt+0x96>
 8006af2:	9b08      	ldr	r3, [sp, #32]
 8006af4:	b11b      	cbz	r3, 8006afe <sqrt+0x72>
 8006af6:	f7fd f921 	bl	8003d3c <__errno>
 8006afa:	9b08      	ldr	r3, [sp, #32]
 8006afc:	6003      	str	r3, [r0, #0]
 8006afe:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8006b02:	4640      	mov	r0, r8
 8006b04:	4649      	mov	r1, r9
 8006b06:	b00b      	add	sp, #44	; 0x2c
 8006b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0c:	4632      	mov	r2, r6
 8006b0e:	463b      	mov	r3, r7
 8006b10:	4630      	mov	r0, r6
 8006b12:	4639      	mov	r1, r7
 8006b14:	f7f9 fe0a 	bl	800072c <__aeabi_ddiv>
 8006b18:	f1ba 0f02 	cmp.w	sl, #2
 8006b1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b20:	d1e3      	bne.n	8006aea <sqrt+0x5e>
 8006b22:	f7fd f90b 	bl	8003d3c <__errno>
 8006b26:	2321      	movs	r3, #33	; 0x21
 8006b28:	6003      	str	r3, [r0, #0]
 8006b2a:	e7e2      	b.n	8006af2 <sqrt+0x66>
 8006b2c:	200001dc 	.word	0x200001dc
 8006b30:	08007c94 	.word	0x08007c94
 8006b34:	00000000 	.word	0x00000000

08006b38 <__ieee754_pow>:
 8006b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	b091      	sub	sp, #68	; 0x44
 8006b3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b42:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8006b46:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006b4a:	ea55 0302 	orrs.w	r3, r5, r2
 8006b4e:	4607      	mov	r7, r0
 8006b50:	4688      	mov	r8, r1
 8006b52:	f000 84b7 	beq.w	80074c4 <__ieee754_pow+0x98c>
 8006b56:	4b80      	ldr	r3, [pc, #512]	; (8006d58 <__ieee754_pow+0x220>)
 8006b58:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006b5c:	429c      	cmp	r4, r3
 8006b5e:	4689      	mov	r9, r1
 8006b60:	4682      	mov	sl, r0
 8006b62:	dc09      	bgt.n	8006b78 <__ieee754_pow+0x40>
 8006b64:	d103      	bne.n	8006b6e <__ieee754_pow+0x36>
 8006b66:	b938      	cbnz	r0, 8006b78 <__ieee754_pow+0x40>
 8006b68:	42a5      	cmp	r5, r4
 8006b6a:	dc0d      	bgt.n	8006b88 <__ieee754_pow+0x50>
 8006b6c:	e001      	b.n	8006b72 <__ieee754_pow+0x3a>
 8006b6e:	429d      	cmp	r5, r3
 8006b70:	dc02      	bgt.n	8006b78 <__ieee754_pow+0x40>
 8006b72:	429d      	cmp	r5, r3
 8006b74:	d10e      	bne.n	8006b94 <__ieee754_pow+0x5c>
 8006b76:	b16a      	cbz	r2, 8006b94 <__ieee754_pow+0x5c>
 8006b78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006b7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b80:	ea54 030a 	orrs.w	r3, r4, sl
 8006b84:	f000 849e 	beq.w	80074c4 <__ieee754_pow+0x98c>
 8006b88:	4874      	ldr	r0, [pc, #464]	; (8006d5c <__ieee754_pow+0x224>)
 8006b8a:	b011      	add	sp, #68	; 0x44
 8006b8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b90:	f000 bd90 	b.w	80076b4 <nan>
 8006b94:	f1b9 0f00 	cmp.w	r9, #0
 8006b98:	da53      	bge.n	8006c42 <__ieee754_pow+0x10a>
 8006b9a:	4b71      	ldr	r3, [pc, #452]	; (8006d60 <__ieee754_pow+0x228>)
 8006b9c:	429d      	cmp	r5, r3
 8006b9e:	dc4e      	bgt.n	8006c3e <__ieee754_pow+0x106>
 8006ba0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006ba4:	429d      	cmp	r5, r3
 8006ba6:	dd4c      	ble.n	8006c42 <__ieee754_pow+0x10a>
 8006ba8:	152b      	asrs	r3, r5, #20
 8006baa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006bae:	2b14      	cmp	r3, #20
 8006bb0:	dd28      	ble.n	8006c04 <__ieee754_pow+0xcc>
 8006bb2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006bb6:	fa22 f103 	lsr.w	r1, r2, r3
 8006bba:	fa01 f303 	lsl.w	r3, r1, r3
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d13f      	bne.n	8006c42 <__ieee754_pow+0x10a>
 8006bc2:	f001 0101 	and.w	r1, r1, #1
 8006bc6:	f1c1 0302 	rsb	r3, r1, #2
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	2a00      	cmp	r2, #0
 8006bce:	d15c      	bne.n	8006c8a <__ieee754_pow+0x152>
 8006bd0:	4b61      	ldr	r3, [pc, #388]	; (8006d58 <__ieee754_pow+0x220>)
 8006bd2:	429d      	cmp	r5, r3
 8006bd4:	d126      	bne.n	8006c24 <__ieee754_pow+0xec>
 8006bd6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006bda:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006bde:	ea53 030a 	orrs.w	r3, r3, sl
 8006be2:	f000 846f 	beq.w	80074c4 <__ieee754_pow+0x98c>
 8006be6:	4b5f      	ldr	r3, [pc, #380]	; (8006d64 <__ieee754_pow+0x22c>)
 8006be8:	429c      	cmp	r4, r3
 8006bea:	dd2c      	ble.n	8006c46 <__ieee754_pow+0x10e>
 8006bec:	2e00      	cmp	r6, #0
 8006bee:	f280 846f 	bge.w	80074d0 <__ieee754_pow+0x998>
 8006bf2:	f04f 0b00 	mov.w	fp, #0
 8006bf6:	f04f 0c00 	mov.w	ip, #0
 8006bfa:	4658      	mov	r0, fp
 8006bfc:	4661      	mov	r1, ip
 8006bfe:	b011      	add	sp, #68	; 0x44
 8006c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c04:	2a00      	cmp	r2, #0
 8006c06:	d13e      	bne.n	8006c86 <__ieee754_pow+0x14e>
 8006c08:	f1c3 0314 	rsb	r3, r3, #20
 8006c0c:	fa45 f103 	asr.w	r1, r5, r3
 8006c10:	fa01 f303 	lsl.w	r3, r1, r3
 8006c14:	42ab      	cmp	r3, r5
 8006c16:	f040 8463 	bne.w	80074e0 <__ieee754_pow+0x9a8>
 8006c1a:	f001 0101 	and.w	r1, r1, #1
 8006c1e:	f1c1 0302 	rsb	r3, r1, #2
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	4b50      	ldr	r3, [pc, #320]	; (8006d68 <__ieee754_pow+0x230>)
 8006c26:	429d      	cmp	r5, r3
 8006c28:	d114      	bne.n	8006c54 <__ieee754_pow+0x11c>
 8006c2a:	2e00      	cmp	r6, #0
 8006c2c:	f280 8454 	bge.w	80074d8 <__ieee754_pow+0x9a0>
 8006c30:	463a      	mov	r2, r7
 8006c32:	4643      	mov	r3, r8
 8006c34:	2000      	movs	r0, #0
 8006c36:	494c      	ldr	r1, [pc, #304]	; (8006d68 <__ieee754_pow+0x230>)
 8006c38:	f7f9 fd78 	bl	800072c <__aeabi_ddiv>
 8006c3c:	e013      	b.n	8006c66 <__ieee754_pow+0x12e>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e7c3      	b.n	8006bca <__ieee754_pow+0x92>
 8006c42:	2300      	movs	r3, #0
 8006c44:	e7c1      	b.n	8006bca <__ieee754_pow+0x92>
 8006c46:	2e00      	cmp	r6, #0
 8006c48:	dad3      	bge.n	8006bf2 <__ieee754_pow+0xba>
 8006c4a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006c4e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006c52:	e7d2      	b.n	8006bfa <__ieee754_pow+0xc2>
 8006c54:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8006c58:	d108      	bne.n	8006c6c <__ieee754_pow+0x134>
 8006c5a:	463a      	mov	r2, r7
 8006c5c:	4643      	mov	r3, r8
 8006c5e:	4638      	mov	r0, r7
 8006c60:	4641      	mov	r1, r8
 8006c62:	f7f9 fc39 	bl	80004d8 <__aeabi_dmul>
 8006c66:	4683      	mov	fp, r0
 8006c68:	468c      	mov	ip, r1
 8006c6a:	e7c6      	b.n	8006bfa <__ieee754_pow+0xc2>
 8006c6c:	4b3f      	ldr	r3, [pc, #252]	; (8006d6c <__ieee754_pow+0x234>)
 8006c6e:	429e      	cmp	r6, r3
 8006c70:	d10b      	bne.n	8006c8a <__ieee754_pow+0x152>
 8006c72:	f1b9 0f00 	cmp.w	r9, #0
 8006c76:	db08      	blt.n	8006c8a <__ieee754_pow+0x152>
 8006c78:	4638      	mov	r0, r7
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	b011      	add	sp, #68	; 0x44
 8006c7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c82:	f000 bc63 	b.w	800754c <__ieee754_sqrt>
 8006c86:	2300      	movs	r3, #0
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	4641      	mov	r1, r8
 8006c8e:	f7ff fd9d 	bl	80067cc <fabs>
 8006c92:	4683      	mov	fp, r0
 8006c94:	468c      	mov	ip, r1
 8006c96:	f1ba 0f00 	cmp.w	sl, #0
 8006c9a:	d12b      	bne.n	8006cf4 <__ieee754_pow+0x1bc>
 8006c9c:	b124      	cbz	r4, 8006ca8 <__ieee754_pow+0x170>
 8006c9e:	4b32      	ldr	r3, [pc, #200]	; (8006d68 <__ieee754_pow+0x230>)
 8006ca0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d125      	bne.n	8006cf4 <__ieee754_pow+0x1bc>
 8006ca8:	2e00      	cmp	r6, #0
 8006caa:	da07      	bge.n	8006cbc <__ieee754_pow+0x184>
 8006cac:	465a      	mov	r2, fp
 8006cae:	4663      	mov	r3, ip
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	492d      	ldr	r1, [pc, #180]	; (8006d68 <__ieee754_pow+0x230>)
 8006cb4:	f7f9 fd3a 	bl	800072c <__aeabi_ddiv>
 8006cb8:	4683      	mov	fp, r0
 8006cba:	468c      	mov	ip, r1
 8006cbc:	f1b9 0f00 	cmp.w	r9, #0
 8006cc0:	da9b      	bge.n	8006bfa <__ieee754_pow+0xc2>
 8006cc2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006cc6:	9b00      	ldr	r3, [sp, #0]
 8006cc8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006ccc:	4323      	orrs	r3, r4
 8006cce:	d108      	bne.n	8006ce2 <__ieee754_pow+0x1aa>
 8006cd0:	465a      	mov	r2, fp
 8006cd2:	4663      	mov	r3, ip
 8006cd4:	4658      	mov	r0, fp
 8006cd6:	4661      	mov	r1, ip
 8006cd8:	f7f9 fa46 	bl	8000168 <__aeabi_dsub>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	e7aa      	b.n	8006c38 <__ieee754_pow+0x100>
 8006ce2:	9b00      	ldr	r3, [sp, #0]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d188      	bne.n	8006bfa <__ieee754_pow+0xc2>
 8006ce8:	4658      	mov	r0, fp
 8006cea:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006cee:	4683      	mov	fp, r0
 8006cf0:	469c      	mov	ip, r3
 8006cf2:	e782      	b.n	8006bfa <__ieee754_pow+0xc2>
 8006cf4:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8006cf8:	f109 33ff 	add.w	r3, r9, #4294967295
 8006cfc:	930d      	str	r3, [sp, #52]	; 0x34
 8006cfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d00:	9b00      	ldr	r3, [sp, #0]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	d104      	bne.n	8006d10 <__ieee754_pow+0x1d8>
 8006d06:	463a      	mov	r2, r7
 8006d08:	4643      	mov	r3, r8
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	4641      	mov	r1, r8
 8006d0e:	e7e3      	b.n	8006cd8 <__ieee754_pow+0x1a0>
 8006d10:	4b17      	ldr	r3, [pc, #92]	; (8006d70 <__ieee754_pow+0x238>)
 8006d12:	429d      	cmp	r5, r3
 8006d14:	f340 80fe 	ble.w	8006f14 <__ieee754_pow+0x3dc>
 8006d18:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006d1c:	429d      	cmp	r5, r3
 8006d1e:	dd0b      	ble.n	8006d38 <__ieee754_pow+0x200>
 8006d20:	4b10      	ldr	r3, [pc, #64]	; (8006d64 <__ieee754_pow+0x22c>)
 8006d22:	429c      	cmp	r4, r3
 8006d24:	dc0e      	bgt.n	8006d44 <__ieee754_pow+0x20c>
 8006d26:	2e00      	cmp	r6, #0
 8006d28:	f6bf af63 	bge.w	8006bf2 <__ieee754_pow+0xba>
 8006d2c:	a308      	add	r3, pc, #32	; (adr r3, 8006d50 <__ieee754_pow+0x218>)
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	4610      	mov	r0, r2
 8006d34:	4619      	mov	r1, r3
 8006d36:	e794      	b.n	8006c62 <__ieee754_pow+0x12a>
 8006d38:	4b0e      	ldr	r3, [pc, #56]	; (8006d74 <__ieee754_pow+0x23c>)
 8006d3a:	429c      	cmp	r4, r3
 8006d3c:	ddf3      	ble.n	8006d26 <__ieee754_pow+0x1ee>
 8006d3e:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <__ieee754_pow+0x230>)
 8006d40:	429c      	cmp	r4, r3
 8006d42:	dd19      	ble.n	8006d78 <__ieee754_pow+0x240>
 8006d44:	2e00      	cmp	r6, #0
 8006d46:	dcf1      	bgt.n	8006d2c <__ieee754_pow+0x1f4>
 8006d48:	e753      	b.n	8006bf2 <__ieee754_pow+0xba>
 8006d4a:	bf00      	nop
 8006d4c:	f3af 8000 	nop.w
 8006d50:	8800759c 	.word	0x8800759c
 8006d54:	7e37e43c 	.word	0x7e37e43c
 8006d58:	7ff00000 	.word	0x7ff00000
 8006d5c:	08007b39 	.word	0x08007b39
 8006d60:	433fffff 	.word	0x433fffff
 8006d64:	3fefffff 	.word	0x3fefffff
 8006d68:	3ff00000 	.word	0x3ff00000
 8006d6c:	3fe00000 	.word	0x3fe00000
 8006d70:	41e00000 	.word	0x41e00000
 8006d74:	3feffffe 	.word	0x3feffffe
 8006d78:	4661      	mov	r1, ip
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	4b60      	ldr	r3, [pc, #384]	; (8006f00 <__ieee754_pow+0x3c8>)
 8006d7e:	4658      	mov	r0, fp
 8006d80:	f7f9 f9f2 	bl	8000168 <__aeabi_dsub>
 8006d84:	a354      	add	r3, pc, #336	; (adr r3, 8006ed8 <__ieee754_pow+0x3a0>)
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	460d      	mov	r5, r1
 8006d8e:	f7f9 fba3 	bl	80004d8 <__aeabi_dmul>
 8006d92:	a353      	add	r3, pc, #332	; (adr r3, 8006ee0 <__ieee754_pow+0x3a8>)
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	4606      	mov	r6, r0
 8006d9a:	460f      	mov	r7, r1
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7f9 fb9a 	bl	80004d8 <__aeabi_dmul>
 8006da4:	2200      	movs	r2, #0
 8006da6:	4682      	mov	sl, r0
 8006da8:	468b      	mov	fp, r1
 8006daa:	4b56      	ldr	r3, [pc, #344]	; (8006f04 <__ieee754_pow+0x3cc>)
 8006dac:	4620      	mov	r0, r4
 8006dae:	4629      	mov	r1, r5
 8006db0:	f7f9 fb92 	bl	80004d8 <__aeabi_dmul>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	a14b      	add	r1, pc, #300	; (adr r1, 8006ee8 <__ieee754_pow+0x3b0>)
 8006dba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dbe:	f7f9 f9d3 	bl	8000168 <__aeabi_dsub>
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	462b      	mov	r3, r5
 8006dc6:	f7f9 fb87 	bl	80004d8 <__aeabi_dmul>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	2000      	movs	r0, #0
 8006dd0:	494d      	ldr	r1, [pc, #308]	; (8006f08 <__ieee754_pow+0x3d0>)
 8006dd2:	f7f9 f9c9 	bl	8000168 <__aeabi_dsub>
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	462b      	mov	r3, r5
 8006dda:	4680      	mov	r8, r0
 8006ddc:	4689      	mov	r9, r1
 8006dde:	4620      	mov	r0, r4
 8006de0:	4629      	mov	r1, r5
 8006de2:	f7f9 fb79 	bl	80004d8 <__aeabi_dmul>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4640      	mov	r0, r8
 8006dec:	4649      	mov	r1, r9
 8006dee:	f7f9 fb73 	bl	80004d8 <__aeabi_dmul>
 8006df2:	a33f      	add	r3, pc, #252	; (adr r3, 8006ef0 <__ieee754_pow+0x3b8>)
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	f7f9 fb6e 	bl	80004d8 <__aeabi_dmul>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4650      	mov	r0, sl
 8006e02:	4659      	mov	r1, fp
 8006e04:	f7f9 f9b0 	bl	8000168 <__aeabi_dsub>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	460d      	mov	r5, r1
 8006e10:	4630      	mov	r0, r6
 8006e12:	4639      	mov	r1, r7
 8006e14:	f7f9 f9aa 	bl	800016c <__adddf3>
 8006e18:	2000      	movs	r0, #0
 8006e1a:	468b      	mov	fp, r1
 8006e1c:	4682      	mov	sl, r0
 8006e1e:	4632      	mov	r2, r6
 8006e20:	463b      	mov	r3, r7
 8006e22:	f7f9 f9a1 	bl	8000168 <__aeabi_dsub>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f7f9 f99b 	bl	8000168 <__aeabi_dsub>
 8006e32:	9b00      	ldr	r3, [sp, #0]
 8006e34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e36:	3b01      	subs	r3, #1
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	bf0c      	ite	eq
 8006e40:	4c32      	ldreq	r4, [pc, #200]	; (8006f0c <__ieee754_pow+0x3d4>)
 8006e42:	4c2f      	ldrne	r4, [pc, #188]	; (8006f00 <__ieee754_pow+0x3c8>)
 8006e44:	4606      	mov	r6, r0
 8006e46:	e9cd 3400 	strd	r3, r4, [sp]
 8006e4a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e4e:	2400      	movs	r4, #0
 8006e50:	460f      	mov	r7, r1
 8006e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e56:	4622      	mov	r2, r4
 8006e58:	462b      	mov	r3, r5
 8006e5a:	f7f9 f985 	bl	8000168 <__aeabi_dsub>
 8006e5e:	4652      	mov	r2, sl
 8006e60:	465b      	mov	r3, fp
 8006e62:	f7f9 fb39 	bl	80004d8 <__aeabi_dmul>
 8006e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e6a:	4680      	mov	r8, r0
 8006e6c:	4689      	mov	r9, r1
 8006e6e:	4630      	mov	r0, r6
 8006e70:	4639      	mov	r1, r7
 8006e72:	f7f9 fb31 	bl	80004d8 <__aeabi_dmul>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	f7f9 f975 	bl	800016c <__adddf3>
 8006e82:	4622      	mov	r2, r4
 8006e84:	462b      	mov	r3, r5
 8006e86:	4680      	mov	r8, r0
 8006e88:	4689      	mov	r9, r1
 8006e8a:	4650      	mov	r0, sl
 8006e8c:	4659      	mov	r1, fp
 8006e8e:	f7f9 fb23 	bl	80004d8 <__aeabi_dmul>
 8006e92:	4604      	mov	r4, r0
 8006e94:	460d      	mov	r5, r1
 8006e96:	460b      	mov	r3, r1
 8006e98:	4602      	mov	r2, r0
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006ea2:	f7f9 f963 	bl	800016c <__adddf3>
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <__ieee754_pow+0x3d8>)
 8006ea8:	4682      	mov	sl, r0
 8006eaa:	4299      	cmp	r1, r3
 8006eac:	460f      	mov	r7, r1
 8006eae:	460e      	mov	r6, r1
 8006eb0:	f340 82e1 	ble.w	8007476 <__ieee754_pow+0x93e>
 8006eb4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006eb8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006ebc:	4303      	orrs	r3, r0
 8006ebe:	f000 81db 	beq.w	8007278 <__ieee754_pow+0x740>
 8006ec2:	a30d      	add	r3, pc, #52	; (adr r3, 8006ef8 <__ieee754_pow+0x3c0>)
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ecc:	f7f9 fb04 	bl	80004d8 <__aeabi_dmul>
 8006ed0:	a309      	add	r3, pc, #36	; (adr r3, 8006ef8 <__ieee754_pow+0x3c0>)
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	e6c4      	b.n	8006c62 <__ieee754_pow+0x12a>
 8006ed8:	60000000 	.word	0x60000000
 8006edc:	3ff71547 	.word	0x3ff71547
 8006ee0:	f85ddf44 	.word	0xf85ddf44
 8006ee4:	3e54ae0b 	.word	0x3e54ae0b
 8006ee8:	55555555 	.word	0x55555555
 8006eec:	3fd55555 	.word	0x3fd55555
 8006ef0:	652b82fe 	.word	0x652b82fe
 8006ef4:	3ff71547 	.word	0x3ff71547
 8006ef8:	8800759c 	.word	0x8800759c
 8006efc:	7e37e43c 	.word	0x7e37e43c
 8006f00:	3ff00000 	.word	0x3ff00000
 8006f04:	3fd00000 	.word	0x3fd00000
 8006f08:	3fe00000 	.word	0x3fe00000
 8006f0c:	bff00000 	.word	0xbff00000
 8006f10:	408fffff 	.word	0x408fffff
 8006f14:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	da08      	bge.n	8006f30 <__ieee754_pow+0x3f8>
 8006f1e:	4658      	mov	r0, fp
 8006f20:	4bcd      	ldr	r3, [pc, #820]	; (8007258 <__ieee754_pow+0x720>)
 8006f22:	4661      	mov	r1, ip
 8006f24:	f7f9 fad8 	bl	80004d8 <__aeabi_dmul>
 8006f28:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006f2c:	4683      	mov	fp, r0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	1523      	asrs	r3, r4, #20
 8006f32:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006f36:	4413      	add	r3, r2
 8006f38:	930c      	str	r3, [sp, #48]	; 0x30
 8006f3a:	4bc8      	ldr	r3, [pc, #800]	; (800725c <__ieee754_pow+0x724>)
 8006f3c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006f40:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006f44:	429c      	cmp	r4, r3
 8006f46:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006f4a:	dd08      	ble.n	8006f5e <__ieee754_pow+0x426>
 8006f4c:	4bc4      	ldr	r3, [pc, #784]	; (8007260 <__ieee754_pow+0x728>)
 8006f4e:	429c      	cmp	r4, r3
 8006f50:	f340 815b 	ble.w	800720a <__ieee754_pow+0x6d2>
 8006f54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f56:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	930c      	str	r3, [sp, #48]	; 0x30
 8006f5e:	f04f 0800 	mov.w	r8, #0
 8006f62:	4658      	mov	r0, fp
 8006f64:	4629      	mov	r1, r5
 8006f66:	4bbf      	ldr	r3, [pc, #764]	; (8007264 <__ieee754_pow+0x72c>)
 8006f68:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8006f6c:	444b      	add	r3, r9
 8006f6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f72:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006f76:	461a      	mov	r2, r3
 8006f78:	4623      	mov	r3, r4
 8006f7a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f7e:	f7f9 f8f3 	bl	8000168 <__aeabi_dsub>
 8006f82:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f86:	4606      	mov	r6, r0
 8006f88:	460f      	mov	r7, r1
 8006f8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f8e:	f7f9 f8ed 	bl	800016c <__adddf3>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	2000      	movs	r0, #0
 8006f98:	49b3      	ldr	r1, [pc, #716]	; (8007268 <__ieee754_pow+0x730>)
 8006f9a:	f7f9 fbc7 	bl	800072c <__aeabi_ddiv>
 8006f9e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	4639      	mov	r1, r7
 8006faa:	f7f9 fa95 	bl	80004d8 <__aeabi_dmul>
 8006fae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006fb2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006fb6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	106d      	asrs	r5, r5, #1
 8006fc0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006fc4:	9304      	str	r3, [sp, #16]
 8006fc6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006fca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006fce:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8006fd2:	4650      	mov	r0, sl
 8006fd4:	4659      	mov	r1, fp
 8006fd6:	4614      	mov	r4, r2
 8006fd8:	461d      	mov	r5, r3
 8006fda:	f7f9 fa7d 	bl	80004d8 <__aeabi_dmul>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	f7f9 f8bf 	bl	8000168 <__aeabi_dsub>
 8006fea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fee:	4606      	mov	r6, r0
 8006ff0:	460f      	mov	r7, r1
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	f7f9 f8b7 	bl	8000168 <__aeabi_dsub>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007002:	f7f9 f8b1 	bl	8000168 <__aeabi_dsub>
 8007006:	4652      	mov	r2, sl
 8007008:	465b      	mov	r3, fp
 800700a:	f7f9 fa65 	bl	80004d8 <__aeabi_dmul>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4630      	mov	r0, r6
 8007014:	4639      	mov	r1, r7
 8007016:	f7f9 f8a7 	bl	8000168 <__aeabi_dsub>
 800701a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800701e:	f7f9 fa5b 	bl	80004d8 <__aeabi_dmul>
 8007022:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007026:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800702a:	4610      	mov	r0, r2
 800702c:	4619      	mov	r1, r3
 800702e:	f7f9 fa53 	bl	80004d8 <__aeabi_dmul>
 8007032:	a377      	add	r3, pc, #476	; (adr r3, 8007210 <__ieee754_pow+0x6d8>)
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	4604      	mov	r4, r0
 800703a:	460d      	mov	r5, r1
 800703c:	f7f9 fa4c 	bl	80004d8 <__aeabi_dmul>
 8007040:	a375      	add	r3, pc, #468	; (adr r3, 8007218 <__ieee754_pow+0x6e0>)
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f7f9 f891 	bl	800016c <__adddf3>
 800704a:	4622      	mov	r2, r4
 800704c:	462b      	mov	r3, r5
 800704e:	f7f9 fa43 	bl	80004d8 <__aeabi_dmul>
 8007052:	a373      	add	r3, pc, #460	; (adr r3, 8007220 <__ieee754_pow+0x6e8>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f7f9 f888 	bl	800016c <__adddf3>
 800705c:	4622      	mov	r2, r4
 800705e:	462b      	mov	r3, r5
 8007060:	f7f9 fa3a 	bl	80004d8 <__aeabi_dmul>
 8007064:	a370      	add	r3, pc, #448	; (adr r3, 8007228 <__ieee754_pow+0x6f0>)
 8007066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706a:	f7f9 f87f 	bl	800016c <__adddf3>
 800706e:	4622      	mov	r2, r4
 8007070:	462b      	mov	r3, r5
 8007072:	f7f9 fa31 	bl	80004d8 <__aeabi_dmul>
 8007076:	a36e      	add	r3, pc, #440	; (adr r3, 8007230 <__ieee754_pow+0x6f8>)
 8007078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707c:	f7f9 f876 	bl	800016c <__adddf3>
 8007080:	4622      	mov	r2, r4
 8007082:	462b      	mov	r3, r5
 8007084:	f7f9 fa28 	bl	80004d8 <__aeabi_dmul>
 8007088:	a36b      	add	r3, pc, #428	; (adr r3, 8007238 <__ieee754_pow+0x700>)
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	f7f9 f86d 	bl	800016c <__adddf3>
 8007092:	4622      	mov	r2, r4
 8007094:	4606      	mov	r6, r0
 8007096:	460f      	mov	r7, r1
 8007098:	462b      	mov	r3, r5
 800709a:	4620      	mov	r0, r4
 800709c:	4629      	mov	r1, r5
 800709e:	f7f9 fa1b 	bl	80004d8 <__aeabi_dmul>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4630      	mov	r0, r6
 80070a8:	4639      	mov	r1, r7
 80070aa:	f7f9 fa15 	bl	80004d8 <__aeabi_dmul>
 80070ae:	4604      	mov	r4, r0
 80070b0:	460d      	mov	r5, r1
 80070b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070b6:	4652      	mov	r2, sl
 80070b8:	465b      	mov	r3, fp
 80070ba:	f7f9 f857 	bl	800016c <__adddf3>
 80070be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80070c2:	f7f9 fa09 	bl	80004d8 <__aeabi_dmul>
 80070c6:	4622      	mov	r2, r4
 80070c8:	462b      	mov	r3, r5
 80070ca:	f7f9 f84f 	bl	800016c <__adddf3>
 80070ce:	4652      	mov	r2, sl
 80070d0:	4606      	mov	r6, r0
 80070d2:	460f      	mov	r7, r1
 80070d4:	465b      	mov	r3, fp
 80070d6:	4650      	mov	r0, sl
 80070d8:	4659      	mov	r1, fp
 80070da:	f7f9 f9fd 	bl	80004d8 <__aeabi_dmul>
 80070de:	2200      	movs	r2, #0
 80070e0:	4b62      	ldr	r3, [pc, #392]	; (800726c <__ieee754_pow+0x734>)
 80070e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80070e6:	f7f9 f841 	bl	800016c <__adddf3>
 80070ea:	4632      	mov	r2, r6
 80070ec:	463b      	mov	r3, r7
 80070ee:	f7f9 f83d 	bl	800016c <__adddf3>
 80070f2:	9804      	ldr	r0, [sp, #16]
 80070f4:	460d      	mov	r5, r1
 80070f6:	4604      	mov	r4, r0
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4650      	mov	r0, sl
 80070fe:	4659      	mov	r1, fp
 8007100:	f7f9 f9ea 	bl	80004d8 <__aeabi_dmul>
 8007104:	2200      	movs	r2, #0
 8007106:	4682      	mov	sl, r0
 8007108:	468b      	mov	fp, r1
 800710a:	4b58      	ldr	r3, [pc, #352]	; (800726c <__ieee754_pow+0x734>)
 800710c:	4620      	mov	r0, r4
 800710e:	4629      	mov	r1, r5
 8007110:	f7f9 f82a 	bl	8000168 <__aeabi_dsub>
 8007114:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007118:	f7f9 f826 	bl	8000168 <__aeabi_dsub>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4630      	mov	r0, r6
 8007122:	4639      	mov	r1, r7
 8007124:	f7f9 f820 	bl	8000168 <__aeabi_dsub>
 8007128:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800712c:	f7f9 f9d4 	bl	80004d8 <__aeabi_dmul>
 8007130:	4622      	mov	r2, r4
 8007132:	4606      	mov	r6, r0
 8007134:	460f      	mov	r7, r1
 8007136:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800713a:	462b      	mov	r3, r5
 800713c:	f7f9 f9cc 	bl	80004d8 <__aeabi_dmul>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4630      	mov	r0, r6
 8007146:	4639      	mov	r1, r7
 8007148:	f7f9 f810 	bl	800016c <__adddf3>
 800714c:	4606      	mov	r6, r0
 800714e:	460f      	mov	r7, r1
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4650      	mov	r0, sl
 8007156:	4659      	mov	r1, fp
 8007158:	f7f9 f808 	bl	800016c <__adddf3>
 800715c:	a338      	add	r3, pc, #224	; (adr r3, 8007240 <__ieee754_pow+0x708>)
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	9804      	ldr	r0, [sp, #16]
 8007164:	460d      	mov	r5, r1
 8007166:	4604      	mov	r4, r0
 8007168:	f7f9 f9b6 	bl	80004d8 <__aeabi_dmul>
 800716c:	4652      	mov	r2, sl
 800716e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007172:	465b      	mov	r3, fp
 8007174:	4620      	mov	r0, r4
 8007176:	4629      	mov	r1, r5
 8007178:	f7f8 fff6 	bl	8000168 <__aeabi_dsub>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4630      	mov	r0, r6
 8007182:	4639      	mov	r1, r7
 8007184:	f7f8 fff0 	bl	8000168 <__aeabi_dsub>
 8007188:	a32f      	add	r3, pc, #188	; (adr r3, 8007248 <__ieee754_pow+0x710>)
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	f7f9 f9a3 	bl	80004d8 <__aeabi_dmul>
 8007192:	a32f      	add	r3, pc, #188	; (adr r3, 8007250 <__ieee754_pow+0x718>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	4606      	mov	r6, r0
 800719a:	460f      	mov	r7, r1
 800719c:	4620      	mov	r0, r4
 800719e:	4629      	mov	r1, r5
 80071a0:	f7f9 f99a 	bl	80004d8 <__aeabi_dmul>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	4630      	mov	r0, r6
 80071aa:	4639      	mov	r1, r7
 80071ac:	f7f8 ffde 	bl	800016c <__adddf3>
 80071b0:	4b2f      	ldr	r3, [pc, #188]	; (8007270 <__ieee754_pow+0x738>)
 80071b2:	444b      	add	r3, r9
 80071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b8:	f7f8 ffd8 	bl	800016c <__adddf3>
 80071bc:	4604      	mov	r4, r0
 80071be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80071c0:	460d      	mov	r5, r1
 80071c2:	f7f9 f91f 	bl	8000404 <__aeabi_i2d>
 80071c6:	4606      	mov	r6, r0
 80071c8:	460f      	mov	r7, r1
 80071ca:	4b2a      	ldr	r3, [pc, #168]	; (8007274 <__ieee754_pow+0x73c>)
 80071cc:	4622      	mov	r2, r4
 80071ce:	444b      	add	r3, r9
 80071d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071d4:	462b      	mov	r3, r5
 80071d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071da:	f7f8 ffc7 	bl	800016c <__adddf3>
 80071de:	4642      	mov	r2, r8
 80071e0:	464b      	mov	r3, r9
 80071e2:	f7f8 ffc3 	bl	800016c <__adddf3>
 80071e6:	4632      	mov	r2, r6
 80071e8:	463b      	mov	r3, r7
 80071ea:	f7f8 ffbf 	bl	800016c <__adddf3>
 80071ee:	9804      	ldr	r0, [sp, #16]
 80071f0:	4632      	mov	r2, r6
 80071f2:	463b      	mov	r3, r7
 80071f4:	4682      	mov	sl, r0
 80071f6:	468b      	mov	fp, r1
 80071f8:	f7f8 ffb6 	bl	8000168 <__aeabi_dsub>
 80071fc:	4642      	mov	r2, r8
 80071fe:	464b      	mov	r3, r9
 8007200:	f7f8 ffb2 	bl	8000168 <__aeabi_dsub>
 8007204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007208:	e60b      	b.n	8006e22 <__ieee754_pow+0x2ea>
 800720a:	f04f 0801 	mov.w	r8, #1
 800720e:	e6a8      	b.n	8006f62 <__ieee754_pow+0x42a>
 8007210:	4a454eef 	.word	0x4a454eef
 8007214:	3fca7e28 	.word	0x3fca7e28
 8007218:	93c9db65 	.word	0x93c9db65
 800721c:	3fcd864a 	.word	0x3fcd864a
 8007220:	a91d4101 	.word	0xa91d4101
 8007224:	3fd17460 	.word	0x3fd17460
 8007228:	518f264d 	.word	0x518f264d
 800722c:	3fd55555 	.word	0x3fd55555
 8007230:	db6fabff 	.word	0xdb6fabff
 8007234:	3fdb6db6 	.word	0x3fdb6db6
 8007238:	33333303 	.word	0x33333303
 800723c:	3fe33333 	.word	0x3fe33333
 8007240:	e0000000 	.word	0xe0000000
 8007244:	3feec709 	.word	0x3feec709
 8007248:	dc3a03fd 	.word	0xdc3a03fd
 800724c:	3feec709 	.word	0x3feec709
 8007250:	145b01f5 	.word	0x145b01f5
 8007254:	be3e2fe0 	.word	0xbe3e2fe0
 8007258:	43400000 	.word	0x43400000
 800725c:	0003988e 	.word	0x0003988e
 8007260:	000bb679 	.word	0x000bb679
 8007264:	08007ca0 	.word	0x08007ca0
 8007268:	3ff00000 	.word	0x3ff00000
 800726c:	40080000 	.word	0x40080000
 8007270:	08007cc0 	.word	0x08007cc0
 8007274:	08007cb0 	.word	0x08007cb0
 8007278:	a39b      	add	r3, pc, #620	; (adr r3, 80074e8 <__ieee754_pow+0x9b0>)
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	4640      	mov	r0, r8
 8007280:	4649      	mov	r1, r9
 8007282:	f7f8 ff73 	bl	800016c <__adddf3>
 8007286:	4622      	mov	r2, r4
 8007288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800728c:	462b      	mov	r3, r5
 800728e:	4650      	mov	r0, sl
 8007290:	4639      	mov	r1, r7
 8007292:	f7f8 ff69 	bl	8000168 <__aeabi_dsub>
 8007296:	4602      	mov	r2, r0
 8007298:	460b      	mov	r3, r1
 800729a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800729e:	f7f9 fbab 	bl	80009f8 <__aeabi_dcmpgt>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	f47f ae0d 	bne.w	8006ec2 <__ieee754_pow+0x38a>
 80072a8:	4aa3      	ldr	r2, [pc, #652]	; (8007538 <__ieee754_pow+0xa00>)
 80072aa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80072ae:	4293      	cmp	r3, r2
 80072b0:	f340 8103 	ble.w	80074ba <__ieee754_pow+0x982>
 80072b4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80072b8:	2000      	movs	r0, #0
 80072ba:	151b      	asrs	r3, r3, #20
 80072bc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80072c0:	fa4a f303 	asr.w	r3, sl, r3
 80072c4:	4433      	add	r3, r6
 80072c6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80072ca:	4f9c      	ldr	r7, [pc, #624]	; (800753c <__ieee754_pow+0xa04>)
 80072cc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80072d0:	4117      	asrs	r7, r2
 80072d2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80072d6:	ea23 0107 	bic.w	r1, r3, r7
 80072da:	f1c2 0214 	rsb	r2, r2, #20
 80072de:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80072e2:	fa4a fa02 	asr.w	sl, sl, r2
 80072e6:	2e00      	cmp	r6, #0
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4620      	mov	r0, r4
 80072ee:	4629      	mov	r1, r5
 80072f0:	bfb8      	it	lt
 80072f2:	f1ca 0a00 	rsblt	sl, sl, #0
 80072f6:	f7f8 ff37 	bl	8000168 <__aeabi_dsub>
 80072fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007302:	4642      	mov	r2, r8
 8007304:	464b      	mov	r3, r9
 8007306:	f7f8 ff31 	bl	800016c <__adddf3>
 800730a:	a379      	add	r3, pc, #484	; (adr r3, 80074f0 <__ieee754_pow+0x9b8>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	2000      	movs	r0, #0
 8007312:	460d      	mov	r5, r1
 8007314:	4604      	mov	r4, r0
 8007316:	f7f9 f8df 	bl	80004d8 <__aeabi_dmul>
 800731a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800731e:	4606      	mov	r6, r0
 8007320:	460f      	mov	r7, r1
 8007322:	4620      	mov	r0, r4
 8007324:	4629      	mov	r1, r5
 8007326:	f7f8 ff1f 	bl	8000168 <__aeabi_dsub>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4640      	mov	r0, r8
 8007330:	4649      	mov	r1, r9
 8007332:	f7f8 ff19 	bl	8000168 <__aeabi_dsub>
 8007336:	a370      	add	r3, pc, #448	; (adr r3, 80074f8 <__ieee754_pow+0x9c0>)
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	f7f9 f8cc 	bl	80004d8 <__aeabi_dmul>
 8007340:	a36f      	add	r3, pc, #444	; (adr r3, 8007500 <__ieee754_pow+0x9c8>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	4680      	mov	r8, r0
 8007348:	4689      	mov	r9, r1
 800734a:	4620      	mov	r0, r4
 800734c:	4629      	mov	r1, r5
 800734e:	f7f9 f8c3 	bl	80004d8 <__aeabi_dmul>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	4640      	mov	r0, r8
 8007358:	4649      	mov	r1, r9
 800735a:	f7f8 ff07 	bl	800016c <__adddf3>
 800735e:	4604      	mov	r4, r0
 8007360:	460d      	mov	r5, r1
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4630      	mov	r0, r6
 8007368:	4639      	mov	r1, r7
 800736a:	f7f8 feff 	bl	800016c <__adddf3>
 800736e:	4632      	mov	r2, r6
 8007370:	463b      	mov	r3, r7
 8007372:	4680      	mov	r8, r0
 8007374:	4689      	mov	r9, r1
 8007376:	f7f8 fef7 	bl	8000168 <__aeabi_dsub>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4620      	mov	r0, r4
 8007380:	4629      	mov	r1, r5
 8007382:	f7f8 fef1 	bl	8000168 <__aeabi_dsub>
 8007386:	4642      	mov	r2, r8
 8007388:	4606      	mov	r6, r0
 800738a:	460f      	mov	r7, r1
 800738c:	464b      	mov	r3, r9
 800738e:	4640      	mov	r0, r8
 8007390:	4649      	mov	r1, r9
 8007392:	f7f9 f8a1 	bl	80004d8 <__aeabi_dmul>
 8007396:	a35c      	add	r3, pc, #368	; (adr r3, 8007508 <__ieee754_pow+0x9d0>)
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	4604      	mov	r4, r0
 800739e:	460d      	mov	r5, r1
 80073a0:	f7f9 f89a 	bl	80004d8 <__aeabi_dmul>
 80073a4:	a35a      	add	r3, pc, #360	; (adr r3, 8007510 <__ieee754_pow+0x9d8>)
 80073a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073aa:	f7f8 fedd 	bl	8000168 <__aeabi_dsub>
 80073ae:	4622      	mov	r2, r4
 80073b0:	462b      	mov	r3, r5
 80073b2:	f7f9 f891 	bl	80004d8 <__aeabi_dmul>
 80073b6:	a358      	add	r3, pc, #352	; (adr r3, 8007518 <__ieee754_pow+0x9e0>)
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	f7f8 fed6 	bl	800016c <__adddf3>
 80073c0:	4622      	mov	r2, r4
 80073c2:	462b      	mov	r3, r5
 80073c4:	f7f9 f888 	bl	80004d8 <__aeabi_dmul>
 80073c8:	a355      	add	r3, pc, #340	; (adr r3, 8007520 <__ieee754_pow+0x9e8>)
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f7f8 fecb 	bl	8000168 <__aeabi_dsub>
 80073d2:	4622      	mov	r2, r4
 80073d4:	462b      	mov	r3, r5
 80073d6:	f7f9 f87f 	bl	80004d8 <__aeabi_dmul>
 80073da:	a353      	add	r3, pc, #332	; (adr r3, 8007528 <__ieee754_pow+0x9f0>)
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f7f8 fec4 	bl	800016c <__adddf3>
 80073e4:	4622      	mov	r2, r4
 80073e6:	462b      	mov	r3, r5
 80073e8:	f7f9 f876 	bl	80004d8 <__aeabi_dmul>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4640      	mov	r0, r8
 80073f2:	4649      	mov	r1, r9
 80073f4:	f7f8 feb8 	bl	8000168 <__aeabi_dsub>
 80073f8:	4604      	mov	r4, r0
 80073fa:	460d      	mov	r5, r1
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	4640      	mov	r0, r8
 8007402:	4649      	mov	r1, r9
 8007404:	f7f9 f868 	bl	80004d8 <__aeabi_dmul>
 8007408:	2200      	movs	r2, #0
 800740a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800740e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007412:	4620      	mov	r0, r4
 8007414:	4629      	mov	r1, r5
 8007416:	f7f8 fea7 	bl	8000168 <__aeabi_dsub>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007422:	f7f9 f983 	bl	800072c <__aeabi_ddiv>
 8007426:	4632      	mov	r2, r6
 8007428:	4604      	mov	r4, r0
 800742a:	460d      	mov	r5, r1
 800742c:	463b      	mov	r3, r7
 800742e:	4640      	mov	r0, r8
 8007430:	4649      	mov	r1, r9
 8007432:	f7f9 f851 	bl	80004d8 <__aeabi_dmul>
 8007436:	4632      	mov	r2, r6
 8007438:	463b      	mov	r3, r7
 800743a:	f7f8 fe97 	bl	800016c <__adddf3>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	4620      	mov	r0, r4
 8007444:	4629      	mov	r1, r5
 8007446:	f7f8 fe8f 	bl	8000168 <__aeabi_dsub>
 800744a:	4642      	mov	r2, r8
 800744c:	464b      	mov	r3, r9
 800744e:	f7f8 fe8b 	bl	8000168 <__aeabi_dsub>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	2000      	movs	r0, #0
 8007458:	4939      	ldr	r1, [pc, #228]	; (8007540 <__ieee754_pow+0xa08>)
 800745a:	f7f8 fe85 	bl	8000168 <__aeabi_dsub>
 800745e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007462:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007466:	da2b      	bge.n	80074c0 <__ieee754_pow+0x988>
 8007468:	4652      	mov	r2, sl
 800746a:	f000 f9b5 	bl	80077d8 <scalbn>
 800746e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007472:	f7ff bbf6 	b.w	8006c62 <__ieee754_pow+0x12a>
 8007476:	4b33      	ldr	r3, [pc, #204]	; (8007544 <__ieee754_pow+0xa0c>)
 8007478:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800747c:	429f      	cmp	r7, r3
 800747e:	f77f af13 	ble.w	80072a8 <__ieee754_pow+0x770>
 8007482:	4b31      	ldr	r3, [pc, #196]	; (8007548 <__ieee754_pow+0xa10>)
 8007484:	440b      	add	r3, r1
 8007486:	4303      	orrs	r3, r0
 8007488:	d00b      	beq.n	80074a2 <__ieee754_pow+0x96a>
 800748a:	a329      	add	r3, pc, #164	; (adr r3, 8007530 <__ieee754_pow+0x9f8>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007494:	f7f9 f820 	bl	80004d8 <__aeabi_dmul>
 8007498:	a325      	add	r3, pc, #148	; (adr r3, 8007530 <__ieee754_pow+0x9f8>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7ff bbe0 	b.w	8006c62 <__ieee754_pow+0x12a>
 80074a2:	4622      	mov	r2, r4
 80074a4:	462b      	mov	r3, r5
 80074a6:	f7f8 fe5f 	bl	8000168 <__aeabi_dsub>
 80074aa:	4642      	mov	r2, r8
 80074ac:	464b      	mov	r3, r9
 80074ae:	f7f9 fa99 	bl	80009e4 <__aeabi_dcmpge>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	f43f aef8 	beq.w	80072a8 <__ieee754_pow+0x770>
 80074b8:	e7e7      	b.n	800748a <__ieee754_pow+0x952>
 80074ba:	f04f 0a00 	mov.w	sl, #0
 80074be:	e71e      	b.n	80072fe <__ieee754_pow+0x7c6>
 80074c0:	4621      	mov	r1, r4
 80074c2:	e7d4      	b.n	800746e <__ieee754_pow+0x936>
 80074c4:	f04f 0b00 	mov.w	fp, #0
 80074c8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007540 <__ieee754_pow+0xa08>
 80074cc:	f7ff bb95 	b.w	8006bfa <__ieee754_pow+0xc2>
 80074d0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80074d4:	f7ff bb91 	b.w	8006bfa <__ieee754_pow+0xc2>
 80074d8:	4638      	mov	r0, r7
 80074da:	4641      	mov	r1, r8
 80074dc:	f7ff bbc3 	b.w	8006c66 <__ieee754_pow+0x12e>
 80074e0:	9200      	str	r2, [sp, #0]
 80074e2:	f7ff bb9f 	b.w	8006c24 <__ieee754_pow+0xec>
 80074e6:	bf00      	nop
 80074e8:	652b82fe 	.word	0x652b82fe
 80074ec:	3c971547 	.word	0x3c971547
 80074f0:	00000000 	.word	0x00000000
 80074f4:	3fe62e43 	.word	0x3fe62e43
 80074f8:	fefa39ef 	.word	0xfefa39ef
 80074fc:	3fe62e42 	.word	0x3fe62e42
 8007500:	0ca86c39 	.word	0x0ca86c39
 8007504:	be205c61 	.word	0xbe205c61
 8007508:	72bea4d0 	.word	0x72bea4d0
 800750c:	3e663769 	.word	0x3e663769
 8007510:	c5d26bf1 	.word	0xc5d26bf1
 8007514:	3ebbbd41 	.word	0x3ebbbd41
 8007518:	af25de2c 	.word	0xaf25de2c
 800751c:	3f11566a 	.word	0x3f11566a
 8007520:	16bebd93 	.word	0x16bebd93
 8007524:	3f66c16c 	.word	0x3f66c16c
 8007528:	5555553e 	.word	0x5555553e
 800752c:	3fc55555 	.word	0x3fc55555
 8007530:	c2f8f359 	.word	0xc2f8f359
 8007534:	01a56e1f 	.word	0x01a56e1f
 8007538:	3fe00000 	.word	0x3fe00000
 800753c:	000fffff 	.word	0x000fffff
 8007540:	3ff00000 	.word	0x3ff00000
 8007544:	4090cbff 	.word	0x4090cbff
 8007548:	3f6f3400 	.word	0x3f6f3400

0800754c <__ieee754_sqrt>:
 800754c:	4b54      	ldr	r3, [pc, #336]	; (80076a0 <__ieee754_sqrt+0x154>)
 800754e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007552:	438b      	bics	r3, r1
 8007554:	4606      	mov	r6, r0
 8007556:	460d      	mov	r5, r1
 8007558:	460a      	mov	r2, r1
 800755a:	460c      	mov	r4, r1
 800755c:	d10f      	bne.n	800757e <__ieee754_sqrt+0x32>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	f7f8 ffb9 	bl	80004d8 <__aeabi_dmul>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4630      	mov	r0, r6
 800756c:	4629      	mov	r1, r5
 800756e:	f7f8 fdfd 	bl	800016c <__adddf3>
 8007572:	4606      	mov	r6, r0
 8007574:	460d      	mov	r5, r1
 8007576:	4630      	mov	r0, r6
 8007578:	4629      	mov	r1, r5
 800757a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800757e:	2900      	cmp	r1, #0
 8007580:	4607      	mov	r7, r0
 8007582:	4603      	mov	r3, r0
 8007584:	dc0e      	bgt.n	80075a4 <__ieee754_sqrt+0x58>
 8007586:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800758a:	ea5c 0707 	orrs.w	r7, ip, r7
 800758e:	d0f2      	beq.n	8007576 <__ieee754_sqrt+0x2a>
 8007590:	b141      	cbz	r1, 80075a4 <__ieee754_sqrt+0x58>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	f7f8 fde7 	bl	8000168 <__aeabi_dsub>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	f7f9 f8c5 	bl	800072c <__aeabi_ddiv>
 80075a2:	e7e6      	b.n	8007572 <__ieee754_sqrt+0x26>
 80075a4:	1512      	asrs	r2, r2, #20
 80075a6:	d074      	beq.n	8007692 <__ieee754_sqrt+0x146>
 80075a8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80075ac:	07d5      	lsls	r5, r2, #31
 80075ae:	f04f 0500 	mov.w	r5, #0
 80075b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80075b6:	bf48      	it	mi
 80075b8:	0fd9      	lsrmi	r1, r3, #31
 80075ba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80075be:	bf44      	itt	mi
 80075c0:	005b      	lslmi	r3, r3, #1
 80075c2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80075c6:	1051      	asrs	r1, r2, #1
 80075c8:	0fda      	lsrs	r2, r3, #31
 80075ca:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80075ce:	4628      	mov	r0, r5
 80075d0:	2216      	movs	r2, #22
 80075d2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	1987      	adds	r7, r0, r6
 80075da:	42a7      	cmp	r7, r4
 80075dc:	bfde      	ittt	le
 80075de:	19b8      	addle	r0, r7, r6
 80075e0:	1be4      	suble	r4, r4, r7
 80075e2:	19ad      	addle	r5, r5, r6
 80075e4:	0fdf      	lsrs	r7, r3, #31
 80075e6:	3a01      	subs	r2, #1
 80075e8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80075ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80075f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80075f4:	d1f0      	bne.n	80075d8 <__ieee754_sqrt+0x8c>
 80075f6:	f04f 0c20 	mov.w	ip, #32
 80075fa:	4696      	mov	lr, r2
 80075fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007600:	4284      	cmp	r4, r0
 8007602:	eb06 070e 	add.w	r7, r6, lr
 8007606:	dc02      	bgt.n	800760e <__ieee754_sqrt+0xc2>
 8007608:	d112      	bne.n	8007630 <__ieee754_sqrt+0xe4>
 800760a:	429f      	cmp	r7, r3
 800760c:	d810      	bhi.n	8007630 <__ieee754_sqrt+0xe4>
 800760e:	2f00      	cmp	r7, #0
 8007610:	eb07 0e06 	add.w	lr, r7, r6
 8007614:	da42      	bge.n	800769c <__ieee754_sqrt+0x150>
 8007616:	f1be 0f00 	cmp.w	lr, #0
 800761a:	db3f      	blt.n	800769c <__ieee754_sqrt+0x150>
 800761c:	f100 0801 	add.w	r8, r0, #1
 8007620:	1a24      	subs	r4, r4, r0
 8007622:	4640      	mov	r0, r8
 8007624:	429f      	cmp	r7, r3
 8007626:	bf88      	it	hi
 8007628:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800762c:	1bdb      	subs	r3, r3, r7
 800762e:	4432      	add	r2, r6
 8007630:	0064      	lsls	r4, r4, #1
 8007632:	f1bc 0c01 	subs.w	ip, ip, #1
 8007636:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800763a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800763e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007642:	d1dd      	bne.n	8007600 <__ieee754_sqrt+0xb4>
 8007644:	4323      	orrs	r3, r4
 8007646:	d006      	beq.n	8007656 <__ieee754_sqrt+0x10a>
 8007648:	1c54      	adds	r4, r2, #1
 800764a:	bf0b      	itete	eq
 800764c:	4662      	moveq	r2, ip
 800764e:	3201      	addne	r2, #1
 8007650:	3501      	addeq	r5, #1
 8007652:	f022 0201 	bicne.w	r2, r2, #1
 8007656:	106b      	asrs	r3, r5, #1
 8007658:	0852      	lsrs	r2, r2, #1
 800765a:	07e8      	lsls	r0, r5, #31
 800765c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007660:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007664:	bf48      	it	mi
 8007666:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800766a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800766e:	4616      	mov	r6, r2
 8007670:	e781      	b.n	8007576 <__ieee754_sqrt+0x2a>
 8007672:	0adc      	lsrs	r4, r3, #11
 8007674:	3915      	subs	r1, #21
 8007676:	055b      	lsls	r3, r3, #21
 8007678:	2c00      	cmp	r4, #0
 800767a:	d0fa      	beq.n	8007672 <__ieee754_sqrt+0x126>
 800767c:	02e6      	lsls	r6, r4, #11
 800767e:	d50a      	bpl.n	8007696 <__ieee754_sqrt+0x14a>
 8007680:	f1c2 0020 	rsb	r0, r2, #32
 8007684:	fa23 f000 	lsr.w	r0, r3, r0
 8007688:	1e55      	subs	r5, r2, #1
 800768a:	4093      	lsls	r3, r2
 800768c:	4304      	orrs	r4, r0
 800768e:	1b4a      	subs	r2, r1, r5
 8007690:	e78a      	b.n	80075a8 <__ieee754_sqrt+0x5c>
 8007692:	4611      	mov	r1, r2
 8007694:	e7f0      	b.n	8007678 <__ieee754_sqrt+0x12c>
 8007696:	0064      	lsls	r4, r4, #1
 8007698:	3201      	adds	r2, #1
 800769a:	e7ef      	b.n	800767c <__ieee754_sqrt+0x130>
 800769c:	4680      	mov	r8, r0
 800769e:	e7bf      	b.n	8007620 <__ieee754_sqrt+0xd4>
 80076a0:	7ff00000 	.word	0x7ff00000

080076a4 <finite>:
 80076a4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80076a8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80076ac:	0fc0      	lsrs	r0, r0, #31
 80076ae:	4770      	bx	lr

080076b0 <matherr>:
 80076b0:	2000      	movs	r0, #0
 80076b2:	4770      	bx	lr

080076b4 <nan>:
 80076b4:	2000      	movs	r0, #0
 80076b6:	4901      	ldr	r1, [pc, #4]	; (80076bc <nan+0x8>)
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	7ff80000 	.word	0x7ff80000

080076c0 <rint>:
 80076c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80076c6:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 80076ca:	f1bc 0f13 	cmp.w	ip, #19
 80076ce:	4604      	mov	r4, r0
 80076d0:	460d      	mov	r5, r1
 80076d2:	460b      	mov	r3, r1
 80076d4:	4606      	mov	r6, r0
 80076d6:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 80076da:	dc5a      	bgt.n	8007792 <rint+0xd2>
 80076dc:	f1bc 0f00 	cmp.w	ip, #0
 80076e0:	da2b      	bge.n	800773a <rint+0x7a>
 80076e2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80076e6:	4302      	orrs	r2, r0
 80076e8:	d023      	beq.n	8007732 <rint+0x72>
 80076ea:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80076ee:	4302      	orrs	r2, r0
 80076f0:	4256      	negs	r6, r2
 80076f2:	4316      	orrs	r6, r2
 80076f4:	0c4b      	lsrs	r3, r1, #17
 80076f6:	0b36      	lsrs	r6, r6, #12
 80076f8:	4934      	ldr	r1, [pc, #208]	; (80077cc <rint+0x10c>)
 80076fa:	045b      	lsls	r3, r3, #17
 80076fc:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8007700:	ea46 0503 	orr.w	r5, r6, r3
 8007704:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8007708:	4602      	mov	r2, r0
 800770a:	462b      	mov	r3, r5
 800770c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8007710:	4620      	mov	r0, r4
 8007712:	4629      	mov	r1, r5
 8007714:	f7f8 fd2a 	bl	800016c <__adddf3>
 8007718:	e9cd 0100 	strd	r0, r1, [sp]
 800771c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007720:	462b      	mov	r3, r5
 8007722:	4622      	mov	r2, r4
 8007724:	f7f8 fd20 	bl	8000168 <__aeabi_dsub>
 8007728:	4604      	mov	r4, r0
 800772a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800772e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8007732:	4620      	mov	r0, r4
 8007734:	4629      	mov	r1, r5
 8007736:	b003      	add	sp, #12
 8007738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800773a:	4a25      	ldr	r2, [pc, #148]	; (80077d0 <rint+0x110>)
 800773c:	fa42 f20c 	asr.w	r2, r2, ip
 8007740:	4011      	ands	r1, r2
 8007742:	4301      	orrs	r1, r0
 8007744:	d0f5      	beq.n	8007732 <rint+0x72>
 8007746:	0852      	lsrs	r2, r2, #1
 8007748:	ea05 0102 	and.w	r1, r5, r2
 800774c:	ea50 0601 	orrs.w	r6, r0, r1
 8007750:	d00c      	beq.n	800776c <rint+0xac>
 8007752:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007756:	f1bc 0f13 	cmp.w	ip, #19
 800775a:	bf0c      	ite	eq
 800775c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8007760:	2600      	movne	r6, #0
 8007762:	ea25 0202 	bic.w	r2, r5, r2
 8007766:	fa43 f30c 	asr.w	r3, r3, ip
 800776a:	4313      	orrs	r3, r2
 800776c:	4917      	ldr	r1, [pc, #92]	; (80077cc <rint+0x10c>)
 800776e:	4632      	mov	r2, r6
 8007770:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8007774:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007778:	4620      	mov	r0, r4
 800777a:	4629      	mov	r1, r5
 800777c:	f7f8 fcf6 	bl	800016c <__adddf3>
 8007780:	e9cd 0100 	strd	r0, r1, [sp]
 8007784:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007788:	4622      	mov	r2, r4
 800778a:	462b      	mov	r3, r5
 800778c:	f7f8 fcec 	bl	8000168 <__aeabi_dsub>
 8007790:	e008      	b.n	80077a4 <rint+0xe4>
 8007792:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8007796:	dd08      	ble.n	80077aa <rint+0xea>
 8007798:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800779c:	d1c9      	bne.n	8007732 <rint+0x72>
 800779e:	4602      	mov	r2, r0
 80077a0:	f7f8 fce4 	bl	800016c <__adddf3>
 80077a4:	4604      	mov	r4, r0
 80077a6:	460d      	mov	r5, r1
 80077a8:	e7c3      	b.n	8007732 <rint+0x72>
 80077aa:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 80077ae:	f04f 32ff 	mov.w	r2, #4294967295
 80077b2:	40ca      	lsrs	r2, r1
 80077b4:	4210      	tst	r0, r2
 80077b6:	d0bc      	beq.n	8007732 <rint+0x72>
 80077b8:	0852      	lsrs	r2, r2, #1
 80077ba:	4210      	tst	r0, r2
 80077bc:	bf1f      	itttt	ne
 80077be:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 80077c2:	ea20 0202 	bicne.w	r2, r0, r2
 80077c6:	410e      	asrne	r6, r1
 80077c8:	4316      	orrne	r6, r2
 80077ca:	e7cf      	b.n	800776c <rint+0xac>
 80077cc:	08007cd0 	.word	0x08007cd0
 80077d0:	000fffff 	.word	0x000fffff
 80077d4:	00000000 	.word	0x00000000

080077d8 <scalbn>:
 80077d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077da:	4616      	mov	r6, r2
 80077dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80077e0:	4604      	mov	r4, r0
 80077e2:	460d      	mov	r5, r1
 80077e4:	460b      	mov	r3, r1
 80077e6:	b982      	cbnz	r2, 800780a <scalbn+0x32>
 80077e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80077ec:	4303      	orrs	r3, r0
 80077ee:	d034      	beq.n	800785a <scalbn+0x82>
 80077f0:	4b2d      	ldr	r3, [pc, #180]	; (80078a8 <scalbn+0xd0>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	f7f8 fe70 	bl	80004d8 <__aeabi_dmul>
 80077f8:	4b2c      	ldr	r3, [pc, #176]	; (80078ac <scalbn+0xd4>)
 80077fa:	4604      	mov	r4, r0
 80077fc:	429e      	cmp	r6, r3
 80077fe:	460d      	mov	r5, r1
 8007800:	da0d      	bge.n	800781e <scalbn+0x46>
 8007802:	a325      	add	r3, pc, #148	; (adr r3, 8007898 <scalbn+0xc0>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	e01c      	b.n	8007844 <scalbn+0x6c>
 800780a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800780e:	42ba      	cmp	r2, r7
 8007810:	d109      	bne.n	8007826 <scalbn+0x4e>
 8007812:	4602      	mov	r2, r0
 8007814:	f7f8 fcaa 	bl	800016c <__adddf3>
 8007818:	4604      	mov	r4, r0
 800781a:	460d      	mov	r5, r1
 800781c:	e01d      	b.n	800785a <scalbn+0x82>
 800781e:	460b      	mov	r3, r1
 8007820:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007824:	3a36      	subs	r2, #54	; 0x36
 8007826:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800782a:	4432      	add	r2, r6
 800782c:	428a      	cmp	r2, r1
 800782e:	dd0c      	ble.n	800784a <scalbn+0x72>
 8007830:	4622      	mov	r2, r4
 8007832:	462b      	mov	r3, r5
 8007834:	a11a      	add	r1, pc, #104	; (adr r1, 80078a0 <scalbn+0xc8>)
 8007836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800783a:	f000 f83b 	bl	80078b4 <copysign>
 800783e:	a318      	add	r3, pc, #96	; (adr r3, 80078a0 <scalbn+0xc8>)
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	f7f8 fe48 	bl	80004d8 <__aeabi_dmul>
 8007848:	e7e6      	b.n	8007818 <scalbn+0x40>
 800784a:	2a00      	cmp	r2, #0
 800784c:	dd08      	ble.n	8007860 <scalbn+0x88>
 800784e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007852:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007856:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800785a:	4620      	mov	r0, r4
 800785c:	4629      	mov	r1, r5
 800785e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007860:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007864:	da0b      	bge.n	800787e <scalbn+0xa6>
 8007866:	f24c 3350 	movw	r3, #50000	; 0xc350
 800786a:	429e      	cmp	r6, r3
 800786c:	4622      	mov	r2, r4
 800786e:	462b      	mov	r3, r5
 8007870:	dce0      	bgt.n	8007834 <scalbn+0x5c>
 8007872:	a109      	add	r1, pc, #36	; (adr r1, 8007898 <scalbn+0xc0>)
 8007874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007878:	f000 f81c 	bl	80078b4 <copysign>
 800787c:	e7c1      	b.n	8007802 <scalbn+0x2a>
 800787e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007882:	3236      	adds	r2, #54	; 0x36
 8007884:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007888:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800788c:	4620      	mov	r0, r4
 800788e:	4629      	mov	r1, r5
 8007890:	2200      	movs	r2, #0
 8007892:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <scalbn+0xd8>)
 8007894:	e7d6      	b.n	8007844 <scalbn+0x6c>
 8007896:	bf00      	nop
 8007898:	c2f8f359 	.word	0xc2f8f359
 800789c:	01a56e1f 	.word	0x01a56e1f
 80078a0:	8800759c 	.word	0x8800759c
 80078a4:	7e37e43c 	.word	0x7e37e43c
 80078a8:	43500000 	.word	0x43500000
 80078ac:	ffff3cb0 	.word	0xffff3cb0
 80078b0:	3c900000 	.word	0x3c900000

080078b4 <copysign>:
 80078b4:	b530      	push	{r4, r5, lr}
 80078b6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80078ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078be:	ea42 0503 	orr.w	r5, r2, r3
 80078c2:	4629      	mov	r1, r5
 80078c4:	bd30      	pop	{r4, r5, pc}
	...

080078c8 <_init>:
 80078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ca:	bf00      	nop
 80078cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ce:	bc08      	pop	{r3}
 80078d0:	469e      	mov	lr, r3
 80078d2:	4770      	bx	lr

080078d4 <_fini>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr
