
020_I2C_HMC5883L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bf4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08005d08  08005d08  00015d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006000  08006000  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006000  08006000  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006000  08006000  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  200001dc  080061e4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080061e4  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aff7  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001af6  00000000  00000000  0002b1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c0  00000000  00000000  0002ccf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  0002d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015521  00000000  00000000  0002dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000080cd  00000000  00000000  000434e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ef41  00000000  00000000  0004b5ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ba4ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d8  00000000  00000000  000ba56c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005cec 	.word	0x08005cec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005cec 	.word	0x08005cec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <HMC5883L_readRaw>:
//#include <math.h>

extern I2C_HandleTypeDef I2C;

Vector HMC5883L_readRaw(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    v.XAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset;
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f933 	bl	8000f18 <HMC5883L_readRegister16>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HMC5883L_readRaw+0x68>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff9d 	bl	8000bfc <__aeabi_i2f>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HMC5883L_readRaw+0x6c>)
 8000cc6:	601a      	str	r2, [r3, #0]
    v.YAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset;
 8000cc8:	2007      	movs	r0, #7
 8000cca:	f000 f925 	bl	8000f18 <HMC5883L_readRegister16>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HMC5883L_readRaw+0x70>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff8f 	bl	8000bfc <__aeabi_i2f>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HMC5883L_readRaw+0x6c>)
 8000ce2:	605a      	str	r2, [r3, #4]
    v.ZAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M);
 8000ce4:	2005      	movs	r0, #5
 8000ce6:	f000 f917 	bl	8000f18 <HMC5883L_readRegister16>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff85 	bl	8000bfc <__aeabi_i2f>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HMC5883L_readRaw+0x6c>)
 8000cf6:	609a      	str	r2, [r3, #8]

    return v;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <HMC5883L_readRaw+0x6c>)
 8000cfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000204 	.word	0x20000204
 8000d10:	20000208 	.word	0x20000208
 8000d14:	20000214 	.word	0x20000214

08000d18 <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <HMC5883L_setOffset+0x20>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HMC5883L_setOffset+0x24>)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	6013      	str	r3, [r2, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	20000204 	.word	0x20000204
 8000d3c:	20000214 	.word	0x20000214

08000d40 <HMC5883L_setRange>:

void HMC5883L_setRange(hmc5883l_range_t range)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
    switch(range)
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b07      	cmp	r3, #7
 8000d4e:	d833      	bhi.n	8000db8 <HMC5883L_setRange+0x78>
 8000d50:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <HMC5883L_setRange+0x18>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d79 	.word	0x08000d79
 8000d5c:	08000d81 	.word	0x08000d81
 8000d60:	08000d89 	.word	0x08000d89
 8000d64:	08000d91 	.word	0x08000d91
 8000d68:	08000d99 	.word	0x08000d99
 8000d6c:	08000da1 	.word	0x08000da1
 8000d70:	08000da9 	.word	0x08000da9
 8000d74:	08000db1 	.word	0x08000db1
    {
	case HMC5883L_RANGE_0_88GA:
	    mgPerDigit = 0.073f;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HMC5883L_setRange+0x90>)
 8000d7a:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <HMC5883L_setRange+0x94>)
 8000d7c:	601a      	str	r2, [r3, #0]
	    break;
 8000d7e:	e01c      	b.n	8000dba <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mgPerDigit = 0.92f;
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HMC5883L_setRange+0x90>)
 8000d82:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <HMC5883L_setRange+0x98>)
 8000d84:	601a      	str	r2, [r3, #0]
	    break;
 8000d86:	e018      	b.n	8000dba <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mgPerDigit = 1.22f;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HMC5883L_setRange+0x90>)
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <HMC5883L_setRange+0x9c>)
 8000d8c:	601a      	str	r2, [r3, #0]
	    break;
 8000d8e:	e014      	b.n	8000dba <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mgPerDigit = 1.52f;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HMC5883L_setRange+0x90>)
 8000d92:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <HMC5883L_setRange+0xa0>)
 8000d94:	601a      	str	r2, [r3, #0]
	    break;
 8000d96:	e010      	b.n	8000dba <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mgPerDigit = 2.27f;
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HMC5883L_setRange+0x90>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <HMC5883L_setRange+0xa4>)
 8000d9c:	601a      	str	r2, [r3, #0]
	    break;
 8000d9e:	e00c      	b.n	8000dba <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mgPerDigit = 2.56f;
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HMC5883L_setRange+0x90>)
 8000da2:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <HMC5883L_setRange+0xa8>)
 8000da4:	601a      	str	r2, [r3, #0]
	    break;
 8000da6:	e008      	b.n	8000dba <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mgPerDigit = 3.03f;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HMC5883L_setRange+0x90>)
 8000daa:	4a10      	ldr	r2, [pc, #64]	; (8000dec <HMC5883L_setRange+0xac>)
 8000dac:	601a      	str	r2, [r3, #0]
	    break;
 8000dae:	e004      	b.n	8000dba <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mgPerDigit = 4.35f;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <HMC5883L_setRange+0x90>)
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <HMC5883L_setRange+0xb0>)
 8000db4:	601a      	str	r2, [r3, #0]
	    break;
 8000db6:	e000      	b.n	8000dba <HMC5883L_setRange+0x7a>

	default:
	    break;
 8000db8:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	015b      	lsls	r3, r3, #5
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f000 f870 	bl	8000ea8 <HMC5883L_writeRegister8>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000218 	.word	0x20000218
 8000dd4:	3d958106 	.word	0x3d958106
 8000dd8:	3f6b851f 	.word	0x3f6b851f
 8000ddc:	3f9c28f6 	.word	0x3f9c28f6
 8000de0:	3fc28f5c 	.word	0x3fc28f5c
 8000de4:	401147ae 	.word	0x401147ae
 8000de8:	4023d70a 	.word	0x4023d70a
 8000dec:	4041eb85 	.word	0x4041eb85
 8000df0:	408b3333 	.word	0x408b3333

08000df4 <HMC5883L_setMeasurementMode>:
{
    return (hmc5883l_range_t)((readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(hmc5883l_mode_t mode)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f000 f86e 	bl	8000ee0 <HMC5883L_readRegister8>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
    value &= 0b11111100;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	f023 0303 	bic.w	r3, r3, #3
 8000e0e:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 8000e10:	7bfa      	ldrb	r2, [r7, #15]
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f000 f843 	bl	8000ea8 <HMC5883L_writeRegister8>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HMC5883L_setDataRate>:

    return (hmc5883l_mode_t)value;
}

void HMC5883L_setDataRate(hmc5883l_dataRate_t dataRate)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 f853 	bl	8000ee0 <HMC5883L_readRegister8>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73fb      	strb	r3, [r7, #15]
    value &= 0b11100011;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	f023 031c 	bic.w	r3, r3, #28
 8000e44:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	b25a      	sxtb	r2, r3
 8000e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f824 	bl	8000ea8 <HMC5883L_writeRegister8>
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HMC5883L_setSamples>:

    return (hmc5883l_dataRate_t)value;
}

void HMC5883L_setSamples(hmc5883l_samples_t samples)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f834 	bl	8000ee0 <HMC5883L_readRegister8>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	73fb      	strb	r3, [r7, #15]
    value &= 0b10011111;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000e82:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	015b      	lsls	r3, r3, #5
 8000e88:	b25a      	sxtb	r2, r3
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	4619      	mov	r1, r3
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 f805 	bl	8000ea8 <HMC5883L_writeRegister8>
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HMC5883L_writeRegister8>:
    return (hmc5883l_samples_t)value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 ,&value,1,500);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ec0:	9302      	str	r3, [sp, #8]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	1dbb      	adds	r3, r7, #6
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	213c      	movs	r1, #60	; 0x3c
 8000ece:	4803      	ldr	r0, [pc, #12]	; (8000edc <HMC5883L_writeRegister8+0x34>)
 8000ed0:	f000 ff2a 	bl	8001d28 <HAL_I2C_Mem_Write>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000021c 	.word	0x2000021c

08000ee0 <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af04      	add	r7, sp, #16
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C,HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 1, 500);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	f107 030f 	add.w	r3, r7, #15
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	213c      	movs	r1, #60	; 0x3c
 8000f02:	4804      	ldr	r0, [pc, #16]	; (8000f14 <HMC5883L_readRegister8+0x34>)
 8000f04:	f001 f80a 	bl	8001f1c <HAL_I2C_Mem_Read>
    return value;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000021c 	.word	0x2000021c

08000f18 <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af04      	add	r7, sp, #16
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
    int16_t value;
    HAL_I2C_Mem_Read(&I2C,HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 2, 500);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	f107 030e 	add.w	r3, r7, #14
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2301      	movs	r3, #1
 8000f38:	213c      	movs	r1, #60	; 0x3c
 8000f3a:	4804      	ldr	r0, [pc, #16]	; (8000f4c <HMC5883L_readRegister16+0x34>)
 8000f3c:	f000 ffee 	bl	8001f1c <HAL_I2C_Mem_Read>
    return value;
 8000f40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000021c 	.word	0x2000021c

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f54:	b088      	sub	sp, #32
 8000f56:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f58:	f000 fafc 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5c:	f000 f83c 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f60:	f000 f8d8 	bl	8001114 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f64:	f000 f87e 	bl	8001064 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f68:	f000 f8aa 	bl	80010c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HMC5883L_setRange (HMC5883L_RANGE_1_3GA);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fee7 	bl	8000d40 <HMC5883L_setRange>
  HMC5883L_setMeasurementMode (HMC5883L_CONTINOUS);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff ff3e 	bl	8000df4 <HMC5883L_setMeasurementMode>
  HMC5883L_setDataRate (HMC5883L_DATARATE_15HZ);
 8000f78:	2004      	movs	r0, #4
 8000f7a:	f7ff ff56 	bl	8000e2a <HMC5883L_setDataRate>
  HMC5883L_setSamples (HMC5883L_SAMPLES_1);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff ff72 	bl	8000e68 <HMC5883L_setSamples>
  HMC5883L_setOffset(0, 0);
 8000f84:	2100      	movs	r1, #0
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff fec6 	bl	8000d18 <HMC5883L_setOffset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Vector mag = HMC5883L_readRaw();
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fe88 	bl	8000ca4 <HMC5883L_readRaw>
	  printf("%f %f %f\r\n",mag.XAxis,mag.YAxis,mag.ZAxis);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fa46 	bl	8000428 <__aeabi_f2d>
 8000f9c:	4680      	mov	r8, r0
 8000f9e:	4689      	mov	r9, r1
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fa40 	bl	8000428 <__aeabi_f2d>
 8000fa8:	4604      	mov	r4, r0
 8000faa:	460d      	mov	r5, r1
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fa3a 	bl	8000428 <__aeabi_f2d>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fbc:	e9cd 4500 	strd	r4, r5, [sp]
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	464b      	mov	r3, r9
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <main+0x84>)
 8000fc6:	f002 ffbd 	bl	8003f44 <iprintf>
	  HAL_Delay(500);
 8000fca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fce:	f000 fb23 	bl	8001618 <HAL_Delay>
  {
 8000fd2:	e7db      	b.n	8000f8c <main+0x3c>
 8000fd4:	08005d08 	.word	0x08005d08

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b090      	sub	sp, #64	; 0x40
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	2228      	movs	r2, #40	; 0x28
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 fb54 	bl	8003694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001002:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	2302      	movs	r3, #2
 800100e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001016:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800101a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fce7 	bl	80029f4 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800102c:	f000 f8b6 	bl	800119c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001040:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2102      	movs	r1, #2
 800104a:	4618      	mov	r0, r3
 800104c:	f001 ff52 	bl	8002ef4 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001056:	f000 f8a1 	bl	800119c <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	3740      	adds	r7, #64	; 0x40
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_I2C1_Init+0x50>)
 800106a:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <MX_I2C1_Init+0x54>)
 800106c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_I2C1_Init+0x50>)
 8001070:	4a12      	ldr	r2, [pc, #72]	; (80010bc <MX_I2C1_Init+0x58>)
 8001072:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_I2C1_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_I2C1_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_I2C1_Init+0x50>)
 8001082:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001086:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <MX_I2C1_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_I2C1_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <MX_I2C1_Init+0x50>)
 80010a2:	f000 fd19 	bl	8001ad8 <HAL_I2C_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010ac:	f000 f876 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000021c 	.word	0x2000021c
 80010b8:	40005400 	.word	0x40005400
 80010bc:	000186a0 	.word	0x000186a0

080010c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <MX_USART1_UART_Init+0x50>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_USART1_UART_Init+0x4c>)
 80010f8:	f002 f898 	bl	800322c <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001102:	f000 f84b 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000270 	.word	0x20000270
 8001110:	40013800 	.word	0x40013800

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_GPIO_Init+0x58>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	4a13      	ldr	r2, [pc, #76]	; (800116c <MX_GPIO_Init+0x58>)
 8001120:	f043 0320 	orr.w	r3, r3, #32
 8001124:	6193      	str	r3, [r2, #24]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_GPIO_Init+0x58>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_GPIO_Init+0x58>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4a0d      	ldr	r2, [pc, #52]	; (800116c <MX_GPIO_Init+0x58>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6193      	str	r3, [r2, #24]
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_GPIO_Init+0x58>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_GPIO_Init+0x58>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <MX_GPIO_Init+0x58>)
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <MX_GPIO_Init+0x58>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	40021000 	.word	0x40021000

08001170 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */
int __io_putchar(int ch)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint8_t c;
	c = ch & 0x00FF;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 10);
 800117e:	f107 010f 	add.w	r1, r7, #15
 8001182:	230a      	movs	r3, #10
 8001184:	2201      	movs	r2, #1
 8001186:	4804      	ldr	r0, [pc, #16]	; (8001198 <__io_putchar+0x28>)
 8001188:	f002 f89d 	bl	80032c6 <HAL_UART_Transmit>
	return ch;
 800118c:	687b      	ldr	r3, [r7, #4]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000270 	.word	0x20000270

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_MspInit+0x5c>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_MspInit+0x5c>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_MspInit+0x5c>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_MspInit+0x5c>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_MspInit+0x5c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_MspInit+0x5c>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_MspInit+0x60>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_MspInit+0x60>)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40021000 	.word	0x40021000
 8001208:	40010000 	.word	0x40010000

0800120c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a15      	ldr	r2, [pc, #84]	; (800127c <HAL_I2C_MspInit+0x70>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d123      	bne.n	8001274 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_I2C_MspInit+0x74>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <HAL_I2C_MspInit+0x74>)
 8001232:	f043 0308 	orr.w	r3, r3, #8
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_I2C_MspInit+0x74>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001244:	23c0      	movs	r3, #192	; 0xc0
 8001246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001248:	2312      	movs	r3, #18
 800124a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4619      	mov	r1, r3
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <HAL_I2C_MspInit+0x78>)
 8001258:	f000 fae4 	bl	8001824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_I2C_MspInit+0x74>)
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_I2C_MspInit+0x74>)
 8001262:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001266:	61d3      	str	r3, [r2, #28]
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_I2C_MspInit+0x74>)
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40005400 	.word	0x40005400
 8001280:	40021000 	.word	0x40021000
 8001284:	40010c00 	.word	0x40010c00

08001288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <HAL_UART_MspInit+0x8c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d131      	bne.n	800130c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_UART_MspInit+0x90>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <HAL_UART_MspInit+0x90>)
 80012ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_UART_MspInit+0x90>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_UART_MspInit+0x90>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <HAL_UART_MspInit+0x90>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_UART_MspInit+0x90>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4619      	mov	r1, r3
 80012ec:	480b      	ldr	r0, [pc, #44]	; (800131c <HAL_UART_MspInit+0x94>)
 80012ee:	f000 fa99 	bl	8001824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <HAL_UART_MspInit+0x94>)
 8001308:	f000 fa8c 	bl	8001824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40013800 	.word	0x40013800
 8001318:	40021000 	.word	0x40021000
 800131c:	40010800 	.word	0x40010800

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <HardFault_Handler+0x4>

08001332 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <MemManage_Handler+0x4>

08001338 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <BusFault_Handler+0x4>

0800133e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <UsageFault_Handler+0x4>

08001344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136c:	f000 f938 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	e00a      	b.n	800139c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001386:	f3af 8000 	nop.w
 800138a:	4601      	mov	r1, r0
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	60ba      	str	r2, [r7, #8]
 8001392:	b2ca      	uxtb	r2, r1
 8001394:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dbf0      	blt.n	8001386 <_read+0x12>
	}

return len;
 80013a4:	687b      	ldr	r3, [r7, #4]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e009      	b.n	80013d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	60ba      	str	r2, [r7, #8]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fed1 	bl	8001170 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	429a      	cmp	r2, r3
 80013da:	dbf1      	blt.n	80013c0 <_write+0x12>
	}
	return len;
 80013dc:	687b      	ldr	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <_close>:

int _close(int file)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
	return -1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140c:	605a      	str	r2, [r3, #4]
	return 0;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <_isatty>:

int _isatty(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return 1;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800142e:	b480      	push	{r7}
 8001430:	b085      	sub	sp, #20
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
	return 0;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
	...

08001448 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <_sbrk+0x50>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x16>
		heap_end = &end;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <_sbrk+0x50>)
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <_sbrk+0x54>)
 800145c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <_sbrk+0x50>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <_sbrk+0x50>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	466a      	mov	r2, sp
 800146e:	4293      	cmp	r3, r2
 8001470:	d907      	bls.n	8001482 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001472:	f002 f8e5 	bl	8003640 <__errno>
 8001476:	4602      	mov	r2, r0
 8001478:	230c      	movs	r3, #12
 800147a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	e006      	b.n	8001490 <_sbrk+0x48>
	}

	heap_end += incr;
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <_sbrk+0x50>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a03      	ldr	r2, [pc, #12]	; (8001498 <_sbrk+0x50>)
 800148c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200001f8 	.word	0x200001f8
 800149c:	200002b8 	.word	0x200002b8

080014a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <SystemInit+0x5c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a14      	ldr	r2, [pc, #80]	; (80014fc <SystemInit+0x5c>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <SystemInit+0x5c>)
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4911      	ldr	r1, [pc, #68]	; (80014fc <SystemInit+0x5c>)
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <SystemInit+0x60>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <SystemInit+0x5c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <SystemInit+0x5c>)
 80014c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <SystemInit+0x5c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <SystemInit+0x5c>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <SystemInit+0x5c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <SystemInit+0x5c>)
 80014de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80014e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SystemInit+0x5c>)
 80014e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SystemInit+0x64>)
 80014ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000
 8001500:	f8ff0000 	.word	0xf8ff0000
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001508:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800150a:	e003      	b.n	8001514 <LoopCopyDataInit>

0800150c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800150e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001510:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001512:	3104      	adds	r1, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001514:	480a      	ldr	r0, [pc, #40]	; (8001540 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001518:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800151a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800151c:	d3f6      	bcc.n	800150c <CopyDataInit>
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001520:	e002      	b.n	8001528 <LoopFillZerobss>

08001522 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001524:	f842 3b04 	str.w	r3, [r2], #4

08001528 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800152a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800152c:	d3f9      	bcc.n	8001522 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800152e:	f7ff ffb7 	bl	80014a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001532:	f002 f88b 	bl	800364c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001536:	f7ff fd0b 	bl	8000f50 <main>
  bx lr
 800153a:	4770      	bx	lr
  ldr r3, =_sidata
 800153c:	08006008 	.word	0x08006008
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001544:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001548:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800154c:	200002b8 	.word	0x200002b8

08001550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC1_2_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_Init+0x28>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_Init+0x28>)
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f929 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fe1a 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40022000 	.word	0x40022000

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f933 	bl	800180a <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f000 f909 	bl	80017d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000004 	.word	0x20000004

080015e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_IncTick+0x1c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_IncTick+0x20>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a03      	ldr	r2, [pc, #12]	; (8001600 <HAL_IncTick+0x20>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	20000008 	.word	0x20000008
 8001600:	200002b0 	.word	0x200002b0

08001604 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b02      	ldr	r3, [pc, #8]	; (8001614 <HAL_GetTick+0x10>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	200002b0 	.word	0x200002b0

08001618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff fff0 	bl	8001604 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d005      	beq.n	800163e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_Delay+0x40>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800163e:	bf00      	nop
 8001640:	f7ff ffe0 	bl	8001604 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	429a      	cmp	r2, r3
 800164e:	d8f7      	bhi.n	8001640 <HAL_Delay+0x28>
  {
  }
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000008 	.word	0x20000008

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f7ff ff90 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff49 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e4:	f7ff ff5e 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 80017e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff90 	bl	8001714 <NVIC_EncodePriority>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff5f 	bl	80016c0 <__NVIC_SetPriority>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffb0 	bl	8001778 <SysTick_Config>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001824:	b480      	push	{r7}
 8001826:	b08b      	sub	sp, #44	; 0x2c
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001836:	e127      	b.n	8001a88 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001838:	2201      	movs	r2, #1
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	429a      	cmp	r2, r3
 8001852:	f040 8116 	bne.w	8001a82 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b12      	cmp	r3, #18
 800185c:	d034      	beq.n	80018c8 <HAL_GPIO_Init+0xa4>
 800185e:	2b12      	cmp	r3, #18
 8001860:	d80d      	bhi.n	800187e <HAL_GPIO_Init+0x5a>
 8001862:	2b02      	cmp	r3, #2
 8001864:	d02b      	beq.n	80018be <HAL_GPIO_Init+0x9a>
 8001866:	2b02      	cmp	r3, #2
 8001868:	d804      	bhi.n	8001874 <HAL_GPIO_Init+0x50>
 800186a:	2b00      	cmp	r3, #0
 800186c:	d031      	beq.n	80018d2 <HAL_GPIO_Init+0xae>
 800186e:	2b01      	cmp	r3, #1
 8001870:	d01c      	beq.n	80018ac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001872:	e048      	b.n	8001906 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001874:	2b03      	cmp	r3, #3
 8001876:	d043      	beq.n	8001900 <HAL_GPIO_Init+0xdc>
 8001878:	2b11      	cmp	r3, #17
 800187a:	d01b      	beq.n	80018b4 <HAL_GPIO_Init+0x90>
          break;
 800187c:	e043      	b.n	8001906 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800187e:	4a89      	ldr	r2, [pc, #548]	; (8001aa4 <HAL_GPIO_Init+0x280>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d026      	beq.n	80018d2 <HAL_GPIO_Init+0xae>
 8001884:	4a87      	ldr	r2, [pc, #540]	; (8001aa4 <HAL_GPIO_Init+0x280>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d806      	bhi.n	8001898 <HAL_GPIO_Init+0x74>
 800188a:	4a87      	ldr	r2, [pc, #540]	; (8001aa8 <HAL_GPIO_Init+0x284>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d020      	beq.n	80018d2 <HAL_GPIO_Init+0xae>
 8001890:	4a86      	ldr	r2, [pc, #536]	; (8001aac <HAL_GPIO_Init+0x288>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <HAL_GPIO_Init+0xae>
          break;
 8001896:	e036      	b.n	8001906 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001898:	4a85      	ldr	r2, [pc, #532]	; (8001ab0 <HAL_GPIO_Init+0x28c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d019      	beq.n	80018d2 <HAL_GPIO_Init+0xae>
 800189e:	4a85      	ldr	r2, [pc, #532]	; (8001ab4 <HAL_GPIO_Init+0x290>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d016      	beq.n	80018d2 <HAL_GPIO_Init+0xae>
 80018a4:	4a84      	ldr	r2, [pc, #528]	; (8001ab8 <HAL_GPIO_Init+0x294>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0xae>
          break;
 80018aa:	e02c      	b.n	8001906 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e028      	b.n	8001906 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	3304      	adds	r3, #4
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e023      	b.n	8001906 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	3308      	adds	r3, #8
 80018c4:	623b      	str	r3, [r7, #32]
          break;
 80018c6:	e01e      	b.n	8001906 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	330c      	adds	r3, #12
 80018ce:	623b      	str	r3, [r7, #32]
          break;
 80018d0:	e019      	b.n	8001906 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d102      	bne.n	80018e0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018da:	2304      	movs	r3, #4
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e012      	b.n	8001906 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d105      	bne.n	80018f4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e8:	2308      	movs	r3, #8
 80018ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	611a      	str	r2, [r3, #16]
          break;
 80018f2:	e008      	b.n	8001906 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f4:	2308      	movs	r3, #8
 80018f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	615a      	str	r2, [r3, #20]
          break;
 80018fe:	e002      	b.n	8001906 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
          break;
 8001904:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2bff      	cmp	r3, #255	; 0xff
 800190a:	d801      	bhi.n	8001910 <HAL_GPIO_Init+0xec>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	e001      	b.n	8001914 <HAL_GPIO_Init+0xf0>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3304      	adds	r3, #4
 8001914:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2bff      	cmp	r3, #255	; 0xff
 800191a:	d802      	bhi.n	8001922 <HAL_GPIO_Init+0xfe>
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	e002      	b.n	8001928 <HAL_GPIO_Init+0x104>
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	3b08      	subs	r3, #8
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	210f      	movs	r1, #15
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	401a      	ands	r2, r3
 800193a:	6a39      	ldr	r1, [r7, #32]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	431a      	orrs	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 8096 	beq.w	8001a82 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001956:	4b59      	ldr	r3, [pc, #356]	; (8001abc <HAL_GPIO_Init+0x298>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	4a58      	ldr	r2, [pc, #352]	; (8001abc <HAL_GPIO_Init+0x298>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6193      	str	r3, [r2, #24]
 8001962:	4b56      	ldr	r3, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x298>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800196e:	4a54      	ldr	r2, [pc, #336]	; (8001ac0 <HAL_GPIO_Init+0x29c>)
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	220f      	movs	r2, #15
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4013      	ands	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_GPIO_Init+0x2a0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d013      	beq.n	80019c2 <HAL_GPIO_Init+0x19e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_GPIO_Init+0x2a4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00d      	beq.n	80019be <HAL_GPIO_Init+0x19a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a49      	ldr	r2, [pc, #292]	; (8001acc <HAL_GPIO_Init+0x2a8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d007      	beq.n	80019ba <HAL_GPIO_Init+0x196>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_GPIO_Init+0x2ac>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_GPIO_Init+0x192>
 80019b2:	2303      	movs	r3, #3
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x1a0>
 80019b6:	2304      	movs	r3, #4
 80019b8:	e004      	b.n	80019c4 <HAL_GPIO_Init+0x1a0>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_Init+0x1a0>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x1a0>
 80019c2:	2300      	movs	r3, #0
 80019c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c6:	f002 0203 	and.w	r2, r2, #3
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	4093      	lsls	r3, r2
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019d4:	493a      	ldr	r1, [pc, #232]	; (8001ac0 <HAL_GPIO_Init+0x29c>)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d006      	beq.n	80019fc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ee:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4938      	ldr	r1, [pc, #224]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
 80019fa:	e006      	b.n	8001a0a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019fc:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	4933      	ldr	r1, [pc, #204]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d006      	beq.n	8001a24 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	492e      	ldr	r1, [pc, #184]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
 8001a22:	e006      	b.n	8001a32 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a24:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	4929      	ldr	r1, [pc, #164]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	4924      	ldr	r1, [pc, #144]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
 8001a4a:	e006      	b.n	8001a5a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	491f      	ldr	r1, [pc, #124]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	491a      	ldr	r1, [pc, #104]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60cb      	str	r3, [r1, #12]
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	4915      	ldr	r1, [pc, #84]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	3301      	adds	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f47f aed0 	bne.w	8001838 <HAL_GPIO_Init+0x14>
  }
}
 8001a98:	bf00      	nop
 8001a9a:	372c      	adds	r7, #44	; 0x2c
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	10210000 	.word	0x10210000
 8001aa8:	10110000 	.word	0x10110000
 8001aac:	10120000 	.word	0x10120000
 8001ab0:	10310000 	.word	0x10310000
 8001ab4:	10320000 	.word	0x10320000
 8001ab8:	10220000 	.word	0x10220000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	40010800 	.word	0x40010800
 8001ac8:	40010c00 	.word	0x40010c00
 8001acc:	40011000 	.word	0x40011000
 8001ad0:	40011400 	.word	0x40011400
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e10f      	b.n	8001d0a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fb84 	bl	800120c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2224      	movs	r2, #36	; 0x24
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b1c:	f001 fb40 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8001b20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4a7b      	ldr	r2, [pc, #492]	; (8001d14 <HAL_I2C_Init+0x23c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d807      	bhi.n	8001b3c <HAL_I2C_Init+0x64>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4a7a      	ldr	r2, [pc, #488]	; (8001d18 <HAL_I2C_Init+0x240>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	bf94      	ite	ls
 8001b34:	2301      	movls	r3, #1
 8001b36:	2300      	movhi	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	e006      	b.n	8001b4a <HAL_I2C_Init+0x72>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4a77      	ldr	r2, [pc, #476]	; (8001d1c <HAL_I2C_Init+0x244>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	bf94      	ite	ls
 8001b44:	2301      	movls	r3, #1
 8001b46:	2300      	movhi	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e0db      	b.n	8001d0a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4a72      	ldr	r2, [pc, #456]	; (8001d20 <HAL_I2C_Init+0x248>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	0c9b      	lsrs	r3, r3, #18
 8001b5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a64      	ldr	r2, [pc, #400]	; (8001d14 <HAL_I2C_Init+0x23c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d802      	bhi.n	8001b8c <HAL_I2C_Init+0xb4>
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	e009      	b.n	8001ba0 <HAL_I2C_Init+0xc8>
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	4a63      	ldr	r2, [pc, #396]	; (8001d24 <HAL_I2C_Init+0x24c>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	099b      	lsrs	r3, r3, #6
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4956      	ldr	r1, [pc, #344]	; (8001d14 <HAL_I2C_Init+0x23c>)
 8001bbc:	428b      	cmp	r3, r1
 8001bbe:	d80d      	bhi.n	8001bdc <HAL_I2C_Init+0x104>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1e59      	subs	r1, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	bf38      	it	cc
 8001bd8:	2304      	movcc	r3, #4
 8001bda:	e04f      	b.n	8001c7c <HAL_I2C_Init+0x1a4>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d111      	bne.n	8001c08 <HAL_I2C_Init+0x130>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1e58      	subs	r0, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	440b      	add	r3, r1
 8001bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e012      	b.n	8001c2e <HAL_I2C_Init+0x156>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	0099      	lsls	r1, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_Init+0x15e>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e022      	b.n	8001c7c <HAL_I2C_Init+0x1a4>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10e      	bne.n	8001c5c <HAL_I2C_Init+0x184>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e58      	subs	r0, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	440b      	add	r3, r1
 8001c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c5a:	e00f      	b.n	8001c7c <HAL_I2C_Init+0x1a4>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e58      	subs	r0, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	0099      	lsls	r1, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	6809      	ldr	r1, [r1, #0]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69da      	ldr	r2, [r3, #28]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001caa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6911      	ldr	r1, [r2, #16]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68d2      	ldr	r2, [r2, #12]
 8001cb6:	4311      	orrs	r1, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	000186a0 	.word	0x000186a0
 8001d18:	001e847f 	.word	0x001e847f
 8001d1c:	003d08ff 	.word	0x003d08ff
 8001d20:	431bde83 	.word	0x431bde83
 8001d24:	10624dd3 	.word	0x10624dd3

08001d28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	4608      	mov	r0, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	817b      	strh	r3, [r7, #10]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	813b      	strh	r3, [r7, #8]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d42:	f7ff fc5f 	bl	8001604 <HAL_GetTick>
 8001d46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	f040 80d9 	bne.w	8001f08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2319      	movs	r3, #25
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	496d      	ldr	r1, [pc, #436]	; (8001f14 <HAL_I2C_Mem_Write+0x1ec>)
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 fc6b 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e0cc      	b.n	8001f0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_I2C_Mem_Write+0x56>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e0c5      	b.n	8001f0a <HAL_I2C_Mem_Write+0x1e2>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d007      	beq.n	8001da4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2221      	movs	r2, #33	; 0x21
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2240      	movs	r2, #64	; 0x40
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a3a      	ldr	r2, [r7, #32]
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4a4d      	ldr	r2, [pc, #308]	; (8001f18 <HAL_I2C_Mem_Write+0x1f0>)
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001de6:	88f8      	ldrh	r0, [r7, #6]
 8001de8:	893a      	ldrh	r2, [r7, #8]
 8001dea:	8979      	ldrh	r1, [r7, #10]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	4603      	mov	r3, r0
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 fac6 	bl	8002388 <I2C_RequestMemoryWrite>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d052      	beq.n	8001ea8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e081      	b.n	8001f0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 fcec 	bl	80027e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00d      	beq.n	8001e32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d107      	bne.n	8001e2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e06b      	b.n	8001f0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	781a      	ldrb	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_I2C_Mem_Write+0x180>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d017      	beq.n	8001ea8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1aa      	bne.n	8001e06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 fcd8 	bl	800286a <I2C_WaitOnBTFFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00d      	beq.n	8001edc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d107      	bne.n	8001ed8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e016      	b.n	8001f0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e000      	b.n	8001f0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f08:	2302      	movs	r3, #2
  }
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	00100002 	.word	0x00100002
 8001f18:	ffff0000 	.word	0xffff0000

08001f1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	; 0x30
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	817b      	strh	r3, [r7, #10]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	813b      	strh	r3, [r7, #8]
 8001f32:	4613      	mov	r3, r2
 8001f34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f36:	f7ff fb65 	bl	8001604 <HAL_GetTick>
 8001f3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	f040 8218 	bne.w	800237a <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2319      	movs	r3, #25
 8001f50:	2201      	movs	r2, #1
 8001f52:	4981      	ldr	r1, [pc, #516]	; (8002158 <HAL_I2C_Mem_Read+0x23c>)
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 fb71 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001f60:	2302      	movs	r3, #2
 8001f62:	e20b      	b.n	800237c <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2C_Mem_Read+0x56>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e204      	b.n	800237c <HAL_I2C_Mem_Read+0x460>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d007      	beq.n	8001f98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2222      	movs	r2, #34	; 0x22
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2240      	movs	r2, #64	; 0x40
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a61      	ldr	r2, [pc, #388]	; (800215c <HAL_I2C_Mem_Read+0x240>)
 8001fd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fda:	88f8      	ldrh	r0, [r7, #6]
 8001fdc:	893a      	ldrh	r2, [r7, #8]
 8001fde:	8979      	ldrh	r1, [r7, #10]
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	4603      	mov	r3, r0
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fa56 	bl	800249c <I2C_RequestMemoryRead>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1c0      	b.n	800237c <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d113      	bne.n	800202a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	623b      	str	r3, [r7, #32]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	623b      	str	r3, [r7, #32]
 8002016:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e194      	b.n	8002354 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	2b01      	cmp	r3, #1
 8002030:	d11d      	bne.n	800206e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002040:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002042:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002068:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800206a:	b662      	cpsie	i
 800206c:	e172      	b.n	8002354 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002072:	2b02      	cmp	r3, #2
 8002074:	d11d      	bne.n	80020b2 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002084:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002086:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	61bb      	str	r3, [r7, #24]
 800209c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020ae:	b662      	cpsie	i
 80020b0:	e150      	b.n	8002354 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80020d8:	e13c      	b.n	8002354 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	2b03      	cmp	r3, #3
 80020e0:	f200 80f5 	bhi.w	80022ce <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d123      	bne.n	8002134 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fbfb 	bl	80028ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e13d      	b.n	800237c <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002132:	e10f      	b.n	8002354 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002138:	2b02      	cmp	r3, #2
 800213a:	d150      	bne.n	80021de <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002142:	2200      	movs	r2, #0
 8002144:	4906      	ldr	r1, [pc, #24]	; (8002160 <HAL_I2C_Mem_Read+0x244>)
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fa78 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d008      	beq.n	8002164 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e112      	b.n	800237c <HAL_I2C_Mem_Read+0x460>
 8002156:	bf00      	nop
 8002158:	00100002 	.word	0x00100002
 800215c:	ffff0000 	.word	0xffff0000
 8002160:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002164:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002174:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021a8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021dc:	e0ba      	b.n	8002354 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e4:	2200      	movs	r2, #0
 80021e6:	4967      	ldr	r1, [pc, #412]	; (8002384 <HAL_I2C_Mem_Read+0x468>)
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 fa27 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0c1      	b.n	800237c <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002206:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002232:	b29b      	uxth	r3, r3
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002242:	2200      	movs	r2, #0
 8002244:	494f      	ldr	r1, [pc, #316]	; (8002384 <HAL_I2C_Mem_Read+0x468>)
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f9f8 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e092      	b.n	800237c <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002264:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002298:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022cc:	e042      	b.n	8002354 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fb0a 	bl	80028ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e04c      	b.n	800237c <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d118      	bne.n	8002354 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	f47f aebe 	bne.w	80020da <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 800237a:	2302      	movs	r3, #2
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	3728      	adds	r7, #40	; 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	00010004 	.word	0x00010004

08002388 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	461a      	mov	r2, r3
 8002396:	4603      	mov	r3, r0
 8002398:	817b      	strh	r3, [r7, #10]
 800239a:	460b      	mov	r3, r1
 800239c:	813b      	strh	r3, [r7, #8]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f93c 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e05f      	b.n	800248e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023ce:	897b      	ldrh	r3, [r7, #10]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	6a3a      	ldr	r2, [r7, #32]
 80023e2:	492d      	ldr	r1, [pc, #180]	; (8002498 <I2C_RequestMemoryWrite+0x110>)
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f980 	bl	80026ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e04c      	b.n	800248e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800240a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240c:	6a39      	ldr	r1, [r7, #32]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f9ea 	bl	80027e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	2b04      	cmp	r3, #4
 8002420:	d107      	bne.n	8002432 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002430:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e02b      	b.n	800248e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800243c:	893b      	ldrh	r3, [r7, #8]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	611a      	str	r2, [r3, #16]
 8002446:	e021      	b.n	800248c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002448:	893b      	ldrh	r3, [r7, #8]
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	b29b      	uxth	r3, r3
 800244e:	b2da      	uxtb	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002458:	6a39      	ldr	r1, [r7, #32]
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f9c4 	bl	80027e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00d      	beq.n	8002482 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2b04      	cmp	r3, #4
 800246c:	d107      	bne.n	800247e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e005      	b.n	800248e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002482:	893b      	ldrh	r3, [r7, #8]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	00010002 	.word	0x00010002

0800249c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	4608      	mov	r0, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	461a      	mov	r2, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	817b      	strh	r3, [r7, #10]
 80024ae:	460b      	mov	r3, r1
 80024b0:	813b      	strh	r3, [r7, #8]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	2200      	movs	r2, #0
 80024de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f8aa 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e09e      	b.n	8002630 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024f2:	897b      	ldrh	r3, [r7, #10]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002500:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	6a3a      	ldr	r2, [r7, #32]
 8002506:	494c      	ldr	r1, [pc, #304]	; (8002638 <I2C_RequestMemoryRead+0x19c>)
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f8ee 	bl	80026ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e08b      	b.n	8002630 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800252e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002530:	6a39      	ldr	r1, [r7, #32]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f958 	bl	80027e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00d      	beq.n	800255a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b04      	cmp	r3, #4
 8002544:	d107      	bne.n	8002556 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e06a      	b.n	8002630 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002560:	893b      	ldrh	r3, [r7, #8]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	e021      	b.n	80025b0 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800256c:	893b      	ldrh	r3, [r7, #8]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	b29b      	uxth	r3, r3
 8002572:	b2da      	uxtb	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800257a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257c:	6a39      	ldr	r1, [r7, #32]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f932 	bl	80027e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00d      	beq.n	80025a6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b04      	cmp	r3, #4
 8002590:	d107      	bne.n	80025a2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e044      	b.n	8002630 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025a6:	893b      	ldrh	r3, [r7, #8]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b2:	6a39      	ldr	r1, [r7, #32]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f917 	bl	80027e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00d      	beq.n	80025dc <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d107      	bne.n	80025d8 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e029      	b.n	8002630 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f81f 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e013      	b.n	8002630 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002608:	897b      	ldrh	r3, [r7, #10]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	b2da      	uxtb	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	6a3a      	ldr	r2, [r7, #32]
 800261c:	4906      	ldr	r1, [pc, #24]	; (8002638 <I2C_RequestMemoryRead+0x19c>)
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f863 	bl	80026ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	00010002 	.word	0x00010002

0800263c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264c:	e025      	b.n	800269a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d021      	beq.n	800269a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002656:	f7fe ffd5 	bl	8001604 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d302      	bcc.n	800266c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d116      	bne.n	800269a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f043 0220 	orr.w	r2, r3, #32
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e023      	b.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d10d      	bne.n	80026c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	43da      	mvns	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4013      	ands	r3, r2
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf0c      	ite	eq
 80026b6:	2301      	moveq	r3, #1
 80026b8:	2300      	movne	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	e00c      	b.n	80026da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4013      	ands	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d0b6      	beq.n	800264e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026f8:	e051      	b.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002708:	d123      	bne.n	8002752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002718:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002722:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f043 0204 	orr.w	r2, r3, #4
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e046      	b.n	80027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d021      	beq.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275a:	f7fe ff53 	bl	8001604 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	d302      	bcc.n	8002770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d116      	bne.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f043 0220 	orr.w	r2, r3, #32
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e020      	b.n	80027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	0c1b      	lsrs	r3, r3, #16
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d10c      	bne.n	80027c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4013      	ands	r3, r2
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bf14      	ite	ne
 80027ba:	2301      	movne	r3, #1
 80027bc:	2300      	moveq	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	e00b      	b.n	80027da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	43da      	mvns	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	4013      	ands	r3, r2
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf14      	ite	ne
 80027d4:	2301      	movne	r3, #1
 80027d6:	2300      	moveq	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d18d      	bne.n	80026fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027f4:	e02d      	b.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f8ce 	bl	8002998 <I2C_IsAcknowledgeFailed>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e02d      	b.n	8002862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d021      	beq.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280e:	f7fe fef9 	bl	8001604 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d116      	bne.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f043 0220 	orr.w	r2, r3, #32
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e007      	b.n	8002862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285c:	2b80      	cmp	r3, #128	; 0x80
 800285e:	d1ca      	bne.n	80027f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002876:	e02d      	b.n	80028d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f88d 	bl	8002998 <I2C_IsAcknowledgeFailed>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e02d      	b.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288e:	d021      	beq.n	80028d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002890:	f7fe feb8 	bl	8001604 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	d302      	bcc.n	80028a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e007      	b.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d1ca      	bne.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028f8:	e042      	b.n	8002980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b10      	cmp	r3, #16
 8002906:	d119      	bne.n	800293c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0210 	mvn.w	r2, #16
 8002910:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e029      	b.n	8002990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293c:	f7fe fe62 	bl	8001604 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	429a      	cmp	r2, r3
 800294a:	d302      	bcc.n	8002952 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d116      	bne.n	8002980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e007      	b.n	8002990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	d1b5      	bne.n	80028fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ae:	d11b      	bne.n	80029e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f043 0204 	orr.w	r2, r3, #4
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e26c      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 8087 	beq.w	8002b22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a14:	4b92      	ldr	r3, [pc, #584]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 030c 	and.w	r3, r3, #12
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d00c      	beq.n	8002a3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a20:	4b8f      	ldr	r3, [pc, #572]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d112      	bne.n	8002a52 <HAL_RCC_OscConfig+0x5e>
 8002a2c:	4b8c      	ldr	r3, [pc, #560]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a38:	d10b      	bne.n	8002a52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3a:	4b89      	ldr	r3, [pc, #548]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d06c      	beq.n	8002b20 <HAL_RCC_OscConfig+0x12c>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d168      	bne.n	8002b20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e246      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCC_OscConfig+0x76>
 8002a5c:	4b80      	ldr	r3, [pc, #512]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a7f      	ldr	r2, [pc, #508]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	e02e      	b.n	8002ac8 <HAL_RCC_OscConfig+0xd4>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x98>
 8002a72:	4b7b      	ldr	r3, [pc, #492]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a7a      	ldr	r2, [pc, #488]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b78      	ldr	r3, [pc, #480]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a77      	ldr	r2, [pc, #476]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e01d      	b.n	8002ac8 <HAL_RCC_OscConfig+0xd4>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0xbc>
 8002a96:	4b72      	ldr	r3, [pc, #456]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a71      	ldr	r2, [pc, #452]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	4b6f      	ldr	r3, [pc, #444]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a6e      	ldr	r2, [pc, #440]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCC_OscConfig+0xd4>
 8002ab0:	4b6b      	ldr	r3, [pc, #428]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a6a      	ldr	r2, [pc, #424]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	4b68      	ldr	r3, [pc, #416]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a67      	ldr	r2, [pc, #412]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d013      	beq.n	8002af8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fd98 	bl	8001604 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7fe fd94 	bl	8001604 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e1fa      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	4b5d      	ldr	r3, [pc, #372]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0xe4>
 8002af6:	e014      	b.n	8002b22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fe fd84 	bl	8001604 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b00:	f7fe fd80 	bl	8001604 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	; 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e1e6      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	4b53      	ldr	r3, [pc, #332]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x10c>
 8002b1e:	e000      	b.n	8002b22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d063      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b2e:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00b      	beq.n	8002b52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b3a:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d11c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x18c>
 8002b46:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d116      	bne.n	8002b80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b52:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <HAL_RCC_OscConfig+0x176>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d001      	beq.n	8002b6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e1ba      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6a:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4939      	ldr	r1, [pc, #228]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7e:	e03a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d020      	beq.n	8002bca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b88:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fd39 	bl	8001604 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b96:	f7fe fd35 	bl	8001604 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e19b      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4927      	ldr	r1, [pc, #156]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	600b      	str	r3, [r1, #0]
 8002bc8:	e015      	b.n	8002bf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bca:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <HAL_RCC_OscConfig+0x270>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fd18 	bl	8001604 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd8:	f7fe fd14 	bl	8001604 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e17a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d03a      	beq.n	8002c78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d019      	beq.n	8002c3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0a:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c10:	f7fe fcf8 	bl	8001604 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c18:	f7fe fcf4 	bl	8001604 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e15a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c36:	2001      	movs	r0, #1
 8002c38:	f000 fada 	bl	80031f0 <RCC_Delay>
 8002c3c:	e01c      	b.n	8002c78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <HAL_RCC_OscConfig+0x274>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c44:	f7fe fcde 	bl	8001604 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4a:	e00f      	b.n	8002c6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4c:	f7fe fcda 	bl	8001604 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d908      	bls.n	8002c6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e140      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
 8002c64:	42420000 	.word	0x42420000
 8002c68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6c:	4b9e      	ldr	r3, [pc, #632]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e9      	bne.n	8002c4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a6 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8a:	4b97      	ldr	r3, [pc, #604]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10d      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	4b94      	ldr	r3, [pc, #592]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4a93      	ldr	r2, [pc, #588]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	61d3      	str	r3, [r2, #28]
 8002ca2:	4b91      	ldr	r3, [pc, #580]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb2:	4b8e      	ldr	r3, [pc, #568]	; (8002eec <HAL_RCC_OscConfig+0x4f8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d118      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cbe:	4b8b      	ldr	r3, [pc, #556]	; (8002eec <HAL_RCC_OscConfig+0x4f8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a8a      	ldr	r2, [pc, #552]	; (8002eec <HAL_RCC_OscConfig+0x4f8>)
 8002cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cca:	f7fe fc9b 	bl	8001604 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd2:	f7fe fc97 	bl	8001604 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b64      	cmp	r3, #100	; 0x64
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0fd      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	4b81      	ldr	r3, [pc, #516]	; (8002eec <HAL_RCC_OscConfig+0x4f8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d106      	bne.n	8002d06 <HAL_RCC_OscConfig+0x312>
 8002cf8:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4a7a      	ldr	r2, [pc, #488]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6213      	str	r3, [r2, #32]
 8002d04:	e02d      	b.n	8002d62 <HAL_RCC_OscConfig+0x36e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x334>
 8002d0e:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	4a75      	ldr	r2, [pc, #468]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	6213      	str	r3, [r2, #32]
 8002d1a:	4b73      	ldr	r3, [pc, #460]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	4a72      	ldr	r2, [pc, #456]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002d20:	f023 0304 	bic.w	r3, r3, #4
 8002d24:	6213      	str	r3, [r2, #32]
 8002d26:	e01c      	b.n	8002d62 <HAL_RCC_OscConfig+0x36e>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d10c      	bne.n	8002d4a <HAL_RCC_OscConfig+0x356>
 8002d30:	4b6d      	ldr	r3, [pc, #436]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	4a6c      	ldr	r2, [pc, #432]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	6213      	str	r3, [r2, #32]
 8002d3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4a69      	ldr	r2, [pc, #420]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6213      	str	r3, [r2, #32]
 8002d48:	e00b      	b.n	8002d62 <HAL_RCC_OscConfig+0x36e>
 8002d4a:	4b67      	ldr	r3, [pc, #412]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4a66      	ldr	r2, [pc, #408]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6213      	str	r3, [r2, #32]
 8002d56:	4b64      	ldr	r3, [pc, #400]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	4a63      	ldr	r2, [pc, #396]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002d5c:	f023 0304 	bic.w	r3, r3, #4
 8002d60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d015      	beq.n	8002d96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6a:	f7fe fc4b 	bl	8001604 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7fe fc47 	bl	8001604 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e0ab      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	4b57      	ldr	r3, [pc, #348]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0ee      	beq.n	8002d72 <HAL_RCC_OscConfig+0x37e>
 8002d94:	e014      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d96:	f7fe fc35 	bl	8001604 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7fe fc31 	bl	8001604 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e095      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db4:	4b4c      	ldr	r3, [pc, #304]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1ee      	bne.n	8002d9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dc0:	7dfb      	ldrb	r3, [r7, #23]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d105      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc6:	4b48      	ldr	r3, [pc, #288]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	4a47      	ldr	r2, [pc, #284]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8081 	beq.w	8002ede <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ddc:	4b42      	ldr	r3, [pc, #264]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d061      	beq.n	8002eac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d146      	bne.n	8002e7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df0:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <HAL_RCC_OscConfig+0x4fc>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fe fc05 	bl	8001604 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe fc01 	bl	8001604 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e067      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e10:	4b35      	ldr	r3, [pc, #212]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f0      	bne.n	8002dfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e24:	d108      	bne.n	8002e38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e26:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	492d      	ldr	r1, [pc, #180]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a19      	ldr	r1, [r3, #32]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	4927      	ldr	r1, [pc, #156]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e50:	4b27      	ldr	r3, [pc, #156]	; (8002ef0 <HAL_RCC_OscConfig+0x4fc>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e56:	f7fe fbd5 	bl	8001604 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5e:	f7fe fbd1 	bl	8001604 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e037      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x46a>
 8002e7c:	e02f      	b.n	8002ede <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <HAL_RCC_OscConfig+0x4fc>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fe fbbe 	bl	8001604 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe fbba 	bl	8001604 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e020      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x498>
 8002eaa:	e018      	b.n	8002ede <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e013      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_OscConfig+0x4f4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d106      	bne.n	8002eda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d001      	beq.n	8002ede <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	42420060 	.word	0x42420060

08002ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0d0      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d910      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b67      	ldr	r3, [pc, #412]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 0207 	bic.w	r2, r3, #7
 8002f1e:	4965      	ldr	r1, [pc, #404]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b63      	ldr	r3, [pc, #396]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0b8      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d020      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f50:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a58      	ldr	r2, [pc, #352]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f68:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f74:	4b50      	ldr	r3, [pc, #320]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	494d      	ldr	r1, [pc, #308]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d040      	beq.n	8003014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d115      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e07f      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e073      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06b      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4936      	ldr	r1, [pc, #216]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fb0e 	bl	8001604 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fe fb0a 	bl	8001604 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e053      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d210      	bcs.n	8003044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 0207 	bic.w	r2, r3, #7
 800302a:	4922      	ldr	r1, [pc, #136]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e032      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4916      	ldr	r1, [pc, #88]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	490e      	ldr	r1, [pc, #56]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003082:	f000 f821 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003086:	4601      	mov	r1, r0
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <HAL_RCC_ClockConfig+0x1c8>)
 8003094:	5cd3      	ldrb	r3, [r2, r3]
 8003096:	fa21 f303 	lsr.w	r3, r1, r3
 800309a:	4a09      	ldr	r2, [pc, #36]	; (80030c0 <HAL_RCC_ClockConfig+0x1cc>)
 800309c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_RCC_ClockConfig+0x1d0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fa6c 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40022000 	.word	0x40022000
 80030b8:	40021000 	.word	0x40021000
 80030bc:	08005d28 	.word	0x08005d28
 80030c0:	20000000 	.word	0x20000000
 80030c4:	20000004 	.word	0x20000004

080030c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	b490      	push	{r4, r7}
 80030ca:	b08a      	sub	sp, #40	; 0x28
 80030cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030d0:	1d3c      	adds	r4, r7, #4
 80030d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030d8:	4b28      	ldr	r3, [pc, #160]	; (800317c <HAL_RCC_GetSysClockFreq+0xb4>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030f2:	4b23      	ldr	r3, [pc, #140]	; (8003180 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d002      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x40>
 8003102:	2b08      	cmp	r3, #8
 8003104:	d003      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0x46>
 8003106:	e02d      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003108:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <HAL_RCC_GetSysClockFreq+0xbc>)
 800310a:	623b      	str	r3, [r7, #32]
      break;
 800310c:	e02d      	b.n	800316a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	0c9b      	lsrs	r3, r3, #18
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800311a:	4413      	add	r3, r2
 800311c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003120:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d013      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800312c:	4b14      	ldr	r3, [pc, #80]	; (8003180 <HAL_RCC_GetSysClockFreq+0xb8>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c5b      	lsrs	r3, r3, #17
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800313a:	4413      	add	r3, r2
 800313c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003140:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003146:	fb02 f203 	mul.w	r2, r2, r3
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
 8003152:	e004      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003158:	fb02 f303 	mul.w	r3, r2, r3
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	623b      	str	r3, [r7, #32]
      break;
 8003162:	e002      	b.n	800316a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003166:	623b      	str	r3, [r7, #32]
      break;
 8003168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316a:	6a3b      	ldr	r3, [r7, #32]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3728      	adds	r7, #40	; 0x28
 8003170:	46bd      	mov	sp, r7
 8003172:	bc90      	pop	{r4, r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	08005d14 	.word	0x08005d14
 800317c:	08005d24 	.word	0x08005d24
 8003180:	40021000 	.word	0x40021000
 8003184:	007a1200 	.word	0x007a1200
 8003188:	003d0900 	.word	0x003d0900

0800318c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003190:	4b02      	ldr	r3, [pc, #8]	; (800319c <HAL_RCC_GetHCLKFreq+0x10>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	20000000 	.word	0x20000000

080031a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031a4:	f7ff fff2 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031a8:	4601      	mov	r1, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4a03      	ldr	r2, [pc, #12]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	08005d38 	.word	0x08005d38

080031c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031cc:	f7ff ffde 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031d0:	4601      	mov	r1, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	0adb      	lsrs	r3, r3, #11
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4a03      	ldr	r2, [pc, #12]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80031de:	5cd3      	ldrb	r3, [r2, r3]
 80031e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	08005d38 	.word	0x08005d38

080031f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <RCC_Delay+0x34>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <RCC_Delay+0x38>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	0a5b      	lsrs	r3, r3, #9
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800320c:	bf00      	nop
  }
  while (Delay --);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	60fa      	str	r2, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f9      	bne.n	800320c <RCC_Delay+0x1c>
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000000 	.word	0x20000000
 8003228:	10624dd3 	.word	0x10624dd3

0800322c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e03f      	b.n	80032be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fe f818 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2224      	movs	r2, #36	; 0x24
 800325c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800326e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f90b 	bl	800348c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b088      	sub	sp, #32
 80032ca:	af02      	add	r7, sp, #8
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	f040 8083 	bne.w	80033ee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_UART_Transmit+0x2e>
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e07b      	b.n	80033f0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_UART_Transmit+0x40>
 8003302:	2302      	movs	r3, #2
 8003304:	e074      	b.n	80033f0 <HAL_UART_Transmit+0x12a>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2221      	movs	r2, #33	; 0x21
 8003318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800331c:	f7fe f972 	bl	8001604 <HAL_GetTick>
 8003320:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	88fa      	ldrh	r2, [r7, #6]
 800332c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800332e:	e042      	b.n	80033b6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003346:	d122      	bne.n	800338e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2200      	movs	r2, #0
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f850 	bl	80033f8 <UART_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e046      	b.n	80033f0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003374:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	3302      	adds	r3, #2
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	e017      	b.n	80033b6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	3301      	adds	r3, #1
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	e013      	b.n	80033b6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2200      	movs	r2, #0
 8003396:	2180      	movs	r1, #128	; 0x80
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f82d 	bl	80033f8 <UART_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e023      	b.n	80033f0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	60ba      	str	r2, [r7, #8]
 80033ae:	781a      	ldrb	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1b7      	bne.n	8003330 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2200      	movs	r2, #0
 80033c8:	2140      	movs	r1, #64	; 0x40
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f814 	bl	80033f8 <UART_WaitOnFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e00a      	b.n	80033f0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e000      	b.n	80033f0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80033ee:	2302      	movs	r3, #2
  }
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003408:	e02c      	b.n	8003464 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d028      	beq.n	8003464 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <UART_WaitOnFlagUntilTimeout+0x30>
 8003418:	f7fe f8f4 	bl	8001604 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	429a      	cmp	r2, r3
 8003426:	d21d      	bcs.n	8003464 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003436:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0201 	bic.w	r2, r2, #1
 8003446:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e00f      	b.n	8003484 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4013      	ands	r3, r2
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	429a      	cmp	r2, r3
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	429a      	cmp	r2, r3
 8003480:	d0c3      	beq.n	800340a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034c6:	f023 030c 	bic.w	r3, r3, #12
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	68f9      	ldr	r1, [r7, #12]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a52      	ldr	r2, [pc, #328]	; (8003638 <UART_SetConfig+0x1ac>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d14e      	bne.n	8003592 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034f4:	f7ff fe68 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 80034f8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009a      	lsls	r2, r3, #2
 8003504:	441a      	add	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	4a4a      	ldr	r2, [pc, #296]	; (800363c <UART_SetConfig+0x1b0>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	0119      	lsls	r1, r3, #4
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	009a      	lsls	r2, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003530:	4b42      	ldr	r3, [pc, #264]	; (800363c <UART_SetConfig+0x1b0>)
 8003532:	fba3 0302 	umull	r0, r3, r3, r2
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2064      	movs	r0, #100	; 0x64
 800353a:	fb00 f303 	mul.w	r3, r0, r3
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	3332      	adds	r3, #50	; 0x32
 8003544:	4a3d      	ldr	r2, [pc, #244]	; (800363c <UART_SetConfig+0x1b0>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003550:	4419      	add	r1, r3
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	fbb2 f2f3 	udiv	r2, r2, r3
 8003568:	4b34      	ldr	r3, [pc, #208]	; (800363c <UART_SetConfig+0x1b0>)
 800356a:	fba3 0302 	umull	r0, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2064      	movs	r0, #100	; 0x64
 8003572:	fb00 f303 	mul.w	r3, r0, r3
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	3332      	adds	r3, #50	; 0x32
 800357c:	4a2f      	ldr	r2, [pc, #188]	; (800363c <UART_SetConfig+0x1b0>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	440a      	add	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003590:	e04d      	b.n	800362e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003592:	f7ff fe05 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8003596:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009a      	lsls	r2, r3, #2
 80035a2:	441a      	add	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ae:	4a23      	ldr	r2, [pc, #140]	; (800363c <UART_SetConfig+0x1b0>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	0119      	lsls	r1, r3, #4
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	009a      	lsls	r2, r3, #2
 80035c2:	441a      	add	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <UART_SetConfig+0x1b0>)
 80035d0:	fba3 0302 	umull	r0, r3, r3, r2
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	2064      	movs	r0, #100	; 0x64
 80035d8:	fb00 f303 	mul.w	r3, r0, r3
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	3332      	adds	r3, #50	; 0x32
 80035e2:	4a16      	ldr	r2, [pc, #88]	; (800363c <UART_SetConfig+0x1b0>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ee:	4419      	add	r1, r3
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	009a      	lsls	r2, r3, #2
 80035fa:	441a      	add	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	fbb2 f2f3 	udiv	r2, r2, r3
 8003606:	4b0d      	ldr	r3, [pc, #52]	; (800363c <UART_SetConfig+0x1b0>)
 8003608:	fba3 0302 	umull	r0, r3, r3, r2
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	2064      	movs	r0, #100	; 0x64
 8003610:	fb00 f303 	mul.w	r3, r0, r3
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	3332      	adds	r3, #50	; 0x32
 800361a:	4a08      	ldr	r2, [pc, #32]	; (800363c <UART_SetConfig+0x1b0>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	f003 020f 	and.w	r2, r3, #15
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	440a      	add	r2, r1
 800362c:	609a      	str	r2, [r3, #8]
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40013800 	.word	0x40013800
 800363c:	51eb851f 	.word	0x51eb851f

08003640 <__errno>:
 8003640:	4b01      	ldr	r3, [pc, #4]	; (8003648 <__errno+0x8>)
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	2000000c 	.word	0x2000000c

0800364c <__libc_init_array>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	2500      	movs	r5, #0
 8003650:	4e0c      	ldr	r6, [pc, #48]	; (8003684 <__libc_init_array+0x38>)
 8003652:	4c0d      	ldr	r4, [pc, #52]	; (8003688 <__libc_init_array+0x3c>)
 8003654:	1ba4      	subs	r4, r4, r6
 8003656:	10a4      	asrs	r4, r4, #2
 8003658:	42a5      	cmp	r5, r4
 800365a:	d109      	bne.n	8003670 <__libc_init_array+0x24>
 800365c:	f002 fb46 	bl	8005cec <_init>
 8003660:	2500      	movs	r5, #0
 8003662:	4e0a      	ldr	r6, [pc, #40]	; (800368c <__libc_init_array+0x40>)
 8003664:	4c0a      	ldr	r4, [pc, #40]	; (8003690 <__libc_init_array+0x44>)
 8003666:	1ba4      	subs	r4, r4, r6
 8003668:	10a4      	asrs	r4, r4, #2
 800366a:	42a5      	cmp	r5, r4
 800366c:	d105      	bne.n	800367a <__libc_init_array+0x2e>
 800366e:	bd70      	pop	{r4, r5, r6, pc}
 8003670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003674:	4798      	blx	r3
 8003676:	3501      	adds	r5, #1
 8003678:	e7ee      	b.n	8003658 <__libc_init_array+0xc>
 800367a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800367e:	4798      	blx	r3
 8003680:	3501      	adds	r5, #1
 8003682:	e7f2      	b.n	800366a <__libc_init_array+0x1e>
 8003684:	08006000 	.word	0x08006000
 8003688:	08006000 	.word	0x08006000
 800368c:	08006000 	.word	0x08006000
 8003690:	08006004 	.word	0x08006004

08003694 <memset>:
 8003694:	4603      	mov	r3, r0
 8003696:	4402      	add	r2, r0
 8003698:	4293      	cmp	r3, r2
 800369a:	d100      	bne.n	800369e <memset+0xa>
 800369c:	4770      	bx	lr
 800369e:	f803 1b01 	strb.w	r1, [r3], #1
 80036a2:	e7f9      	b.n	8003698 <memset+0x4>

080036a4 <__cvt>:
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036aa:	461e      	mov	r6, r3
 80036ac:	bfbb      	ittet	lt
 80036ae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80036b2:	461e      	movlt	r6, r3
 80036b4:	2300      	movge	r3, #0
 80036b6:	232d      	movlt	r3, #45	; 0x2d
 80036b8:	b088      	sub	sp, #32
 80036ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80036bc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80036c0:	f027 0720 	bic.w	r7, r7, #32
 80036c4:	2f46      	cmp	r7, #70	; 0x46
 80036c6:	4614      	mov	r4, r2
 80036c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80036ca:	700b      	strb	r3, [r1, #0]
 80036cc:	d004      	beq.n	80036d8 <__cvt+0x34>
 80036ce:	2f45      	cmp	r7, #69	; 0x45
 80036d0:	d100      	bne.n	80036d4 <__cvt+0x30>
 80036d2:	3501      	adds	r5, #1
 80036d4:	2302      	movs	r3, #2
 80036d6:	e000      	b.n	80036da <__cvt+0x36>
 80036d8:	2303      	movs	r3, #3
 80036da:	aa07      	add	r2, sp, #28
 80036dc:	9204      	str	r2, [sp, #16]
 80036de:	aa06      	add	r2, sp, #24
 80036e0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80036e4:	e9cd 3500 	strd	r3, r5, [sp]
 80036e8:	4622      	mov	r2, r4
 80036ea:	4633      	mov	r3, r6
 80036ec:	f000 fcd0 	bl	8004090 <_dtoa_r>
 80036f0:	2f47      	cmp	r7, #71	; 0x47
 80036f2:	4680      	mov	r8, r0
 80036f4:	d102      	bne.n	80036fc <__cvt+0x58>
 80036f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80036f8:	07db      	lsls	r3, r3, #31
 80036fa:	d526      	bpl.n	800374a <__cvt+0xa6>
 80036fc:	2f46      	cmp	r7, #70	; 0x46
 80036fe:	eb08 0905 	add.w	r9, r8, r5
 8003702:	d111      	bne.n	8003728 <__cvt+0x84>
 8003704:	f898 3000 	ldrb.w	r3, [r8]
 8003708:	2b30      	cmp	r3, #48	; 0x30
 800370a:	d10a      	bne.n	8003722 <__cvt+0x7e>
 800370c:	2200      	movs	r2, #0
 800370e:	2300      	movs	r3, #0
 8003710:	4620      	mov	r0, r4
 8003712:	4631      	mov	r1, r6
 8003714:	f7fd f948 	bl	80009a8 <__aeabi_dcmpeq>
 8003718:	b918      	cbnz	r0, 8003722 <__cvt+0x7e>
 800371a:	f1c5 0501 	rsb	r5, r5, #1
 800371e:	f8ca 5000 	str.w	r5, [sl]
 8003722:	f8da 3000 	ldr.w	r3, [sl]
 8003726:	4499      	add	r9, r3
 8003728:	2200      	movs	r2, #0
 800372a:	2300      	movs	r3, #0
 800372c:	4620      	mov	r0, r4
 800372e:	4631      	mov	r1, r6
 8003730:	f7fd f93a 	bl	80009a8 <__aeabi_dcmpeq>
 8003734:	b938      	cbnz	r0, 8003746 <__cvt+0xa2>
 8003736:	2230      	movs	r2, #48	; 0x30
 8003738:	9b07      	ldr	r3, [sp, #28]
 800373a:	454b      	cmp	r3, r9
 800373c:	d205      	bcs.n	800374a <__cvt+0xa6>
 800373e:	1c59      	adds	r1, r3, #1
 8003740:	9107      	str	r1, [sp, #28]
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	e7f8      	b.n	8003738 <__cvt+0x94>
 8003746:	f8cd 901c 	str.w	r9, [sp, #28]
 800374a:	4640      	mov	r0, r8
 800374c:	9b07      	ldr	r3, [sp, #28]
 800374e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003750:	eba3 0308 	sub.w	r3, r3, r8
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	b008      	add	sp, #32
 8003758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800375c <__exponent>:
 800375c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800375e:	2900      	cmp	r1, #0
 8003760:	bfb4      	ite	lt
 8003762:	232d      	movlt	r3, #45	; 0x2d
 8003764:	232b      	movge	r3, #43	; 0x2b
 8003766:	4604      	mov	r4, r0
 8003768:	bfb8      	it	lt
 800376a:	4249      	neglt	r1, r1
 800376c:	2909      	cmp	r1, #9
 800376e:	f804 2b02 	strb.w	r2, [r4], #2
 8003772:	7043      	strb	r3, [r0, #1]
 8003774:	dd21      	ble.n	80037ba <__exponent+0x5e>
 8003776:	f10d 0307 	add.w	r3, sp, #7
 800377a:	461f      	mov	r7, r3
 800377c:	260a      	movs	r6, #10
 800377e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003782:	fb06 1115 	mls	r1, r6, r5, r1
 8003786:	2d09      	cmp	r5, #9
 8003788:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800378c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003790:	f103 32ff 	add.w	r2, r3, #4294967295
 8003794:	4629      	mov	r1, r5
 8003796:	dc09      	bgt.n	80037ac <__exponent+0x50>
 8003798:	3130      	adds	r1, #48	; 0x30
 800379a:	3b02      	subs	r3, #2
 800379c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80037a0:	42bb      	cmp	r3, r7
 80037a2:	4622      	mov	r2, r4
 80037a4:	d304      	bcc.n	80037b0 <__exponent+0x54>
 80037a6:	1a10      	subs	r0, r2, r0
 80037a8:	b003      	add	sp, #12
 80037aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ac:	4613      	mov	r3, r2
 80037ae:	e7e6      	b.n	800377e <__exponent+0x22>
 80037b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037b4:	f804 2b01 	strb.w	r2, [r4], #1
 80037b8:	e7f2      	b.n	80037a0 <__exponent+0x44>
 80037ba:	2330      	movs	r3, #48	; 0x30
 80037bc:	4419      	add	r1, r3
 80037be:	7083      	strb	r3, [r0, #2]
 80037c0:	1d02      	adds	r2, r0, #4
 80037c2:	70c1      	strb	r1, [r0, #3]
 80037c4:	e7ef      	b.n	80037a6 <__exponent+0x4a>
	...

080037c8 <_printf_float>:
 80037c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037cc:	b091      	sub	sp, #68	; 0x44
 80037ce:	460c      	mov	r4, r1
 80037d0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80037d2:	4693      	mov	fp, r2
 80037d4:	461e      	mov	r6, r3
 80037d6:	4605      	mov	r5, r0
 80037d8:	f001 fad8 	bl	8004d8c <_localeconv_r>
 80037dc:	6803      	ldr	r3, [r0, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	9309      	str	r3, [sp, #36]	; 0x24
 80037e2:	f7fc fcb5 	bl	8000150 <strlen>
 80037e6:	2300      	movs	r3, #0
 80037e8:	930e      	str	r3, [sp, #56]	; 0x38
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	900a      	str	r0, [sp, #40]	; 0x28
 80037ee:	3307      	adds	r3, #7
 80037f0:	f023 0307 	bic.w	r3, r3, #7
 80037f4:	f103 0208 	add.w	r2, r3, #8
 80037f8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80037fc:	f8d4 a000 	ldr.w	sl, [r4]
 8003800:	603a      	str	r2, [r7, #0]
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800380a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800380e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003812:	930b      	str	r3, [sp, #44]	; 0x2c
 8003814:	f04f 32ff 	mov.w	r2, #4294967295
 8003818:	4ba6      	ldr	r3, [pc, #664]	; (8003ab4 <_printf_float+0x2ec>)
 800381a:	4638      	mov	r0, r7
 800381c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800381e:	f7fd f8f5 	bl	8000a0c <__aeabi_dcmpun>
 8003822:	bb68      	cbnz	r0, 8003880 <_printf_float+0xb8>
 8003824:	f04f 32ff 	mov.w	r2, #4294967295
 8003828:	4ba2      	ldr	r3, [pc, #648]	; (8003ab4 <_printf_float+0x2ec>)
 800382a:	4638      	mov	r0, r7
 800382c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800382e:	f7fd f8cf 	bl	80009d0 <__aeabi_dcmple>
 8003832:	bb28      	cbnz	r0, 8003880 <_printf_float+0xb8>
 8003834:	2200      	movs	r2, #0
 8003836:	2300      	movs	r3, #0
 8003838:	4638      	mov	r0, r7
 800383a:	4649      	mov	r1, r9
 800383c:	f7fd f8be 	bl	80009bc <__aeabi_dcmplt>
 8003840:	b110      	cbz	r0, 8003848 <_printf_float+0x80>
 8003842:	232d      	movs	r3, #45	; 0x2d
 8003844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003848:	4f9b      	ldr	r7, [pc, #620]	; (8003ab8 <_printf_float+0x2f0>)
 800384a:	4b9c      	ldr	r3, [pc, #624]	; (8003abc <_printf_float+0x2f4>)
 800384c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003850:	bf98      	it	ls
 8003852:	461f      	movls	r7, r3
 8003854:	2303      	movs	r3, #3
 8003856:	f04f 0900 	mov.w	r9, #0
 800385a:	6123      	str	r3, [r4, #16]
 800385c:	f02a 0304 	bic.w	r3, sl, #4
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	9600      	str	r6, [sp, #0]
 8003864:	465b      	mov	r3, fp
 8003866:	aa0f      	add	r2, sp, #60	; 0x3c
 8003868:	4621      	mov	r1, r4
 800386a:	4628      	mov	r0, r5
 800386c:	f000 f9e2 	bl	8003c34 <_printf_common>
 8003870:	3001      	adds	r0, #1
 8003872:	f040 8090 	bne.w	8003996 <_printf_float+0x1ce>
 8003876:	f04f 30ff 	mov.w	r0, #4294967295
 800387a:	b011      	add	sp, #68	; 0x44
 800387c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003880:	463a      	mov	r2, r7
 8003882:	464b      	mov	r3, r9
 8003884:	4638      	mov	r0, r7
 8003886:	4649      	mov	r1, r9
 8003888:	f7fd f8c0 	bl	8000a0c <__aeabi_dcmpun>
 800388c:	b110      	cbz	r0, 8003894 <_printf_float+0xcc>
 800388e:	4f8c      	ldr	r7, [pc, #560]	; (8003ac0 <_printf_float+0x2f8>)
 8003890:	4b8c      	ldr	r3, [pc, #560]	; (8003ac4 <_printf_float+0x2fc>)
 8003892:	e7db      	b.n	800384c <_printf_float+0x84>
 8003894:	6863      	ldr	r3, [r4, #4]
 8003896:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800389a:	1c59      	adds	r1, r3, #1
 800389c:	a80d      	add	r0, sp, #52	; 0x34
 800389e:	a90e      	add	r1, sp, #56	; 0x38
 80038a0:	d140      	bne.n	8003924 <_printf_float+0x15c>
 80038a2:	2306      	movs	r3, #6
 80038a4:	6063      	str	r3, [r4, #4]
 80038a6:	f04f 0c00 	mov.w	ip, #0
 80038aa:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80038ae:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80038b2:	6863      	ldr	r3, [r4, #4]
 80038b4:	6022      	str	r2, [r4, #0]
 80038b6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	463a      	mov	r2, r7
 80038be:	464b      	mov	r3, r9
 80038c0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80038c4:	4628      	mov	r0, r5
 80038c6:	f7ff feed 	bl	80036a4 <__cvt>
 80038ca:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80038ce:	2b47      	cmp	r3, #71	; 0x47
 80038d0:	4607      	mov	r7, r0
 80038d2:	d109      	bne.n	80038e8 <_printf_float+0x120>
 80038d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038d6:	1cd8      	adds	r0, r3, #3
 80038d8:	db02      	blt.n	80038e0 <_printf_float+0x118>
 80038da:	6862      	ldr	r2, [r4, #4]
 80038dc:	4293      	cmp	r3, r2
 80038de:	dd47      	ble.n	8003970 <_printf_float+0x1a8>
 80038e0:	f1a8 0802 	sub.w	r8, r8, #2
 80038e4:	fa5f f888 	uxtb.w	r8, r8
 80038e8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80038ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80038ee:	d824      	bhi.n	800393a <_printf_float+0x172>
 80038f0:	3901      	subs	r1, #1
 80038f2:	4642      	mov	r2, r8
 80038f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80038f8:	910d      	str	r1, [sp, #52]	; 0x34
 80038fa:	f7ff ff2f 	bl	800375c <__exponent>
 80038fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003900:	4681      	mov	r9, r0
 8003902:	1813      	adds	r3, r2, r0
 8003904:	2a01      	cmp	r2, #1
 8003906:	6123      	str	r3, [r4, #16]
 8003908:	dc02      	bgt.n	8003910 <_printf_float+0x148>
 800390a:	6822      	ldr	r2, [r4, #0]
 800390c:	07d1      	lsls	r1, r2, #31
 800390e:	d501      	bpl.n	8003914 <_printf_float+0x14c>
 8003910:	3301      	adds	r3, #1
 8003912:	6123      	str	r3, [r4, #16]
 8003914:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0a2      	beq.n	8003862 <_printf_float+0x9a>
 800391c:	232d      	movs	r3, #45	; 0x2d
 800391e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003922:	e79e      	b.n	8003862 <_printf_float+0x9a>
 8003924:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003928:	f000 816e 	beq.w	8003c08 <_printf_float+0x440>
 800392c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003930:	d1b9      	bne.n	80038a6 <_printf_float+0xde>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1b7      	bne.n	80038a6 <_printf_float+0xde>
 8003936:	2301      	movs	r3, #1
 8003938:	e7b4      	b.n	80038a4 <_printf_float+0xdc>
 800393a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800393e:	d119      	bne.n	8003974 <_printf_float+0x1ac>
 8003940:	2900      	cmp	r1, #0
 8003942:	6863      	ldr	r3, [r4, #4]
 8003944:	dd0c      	ble.n	8003960 <_printf_float+0x198>
 8003946:	6121      	str	r1, [r4, #16]
 8003948:	b913      	cbnz	r3, 8003950 <_printf_float+0x188>
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	07d2      	lsls	r2, r2, #31
 800394e:	d502      	bpl.n	8003956 <_printf_float+0x18e>
 8003950:	3301      	adds	r3, #1
 8003952:	440b      	add	r3, r1
 8003954:	6123      	str	r3, [r4, #16]
 8003956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003958:	f04f 0900 	mov.w	r9, #0
 800395c:	65a3      	str	r3, [r4, #88]	; 0x58
 800395e:	e7d9      	b.n	8003914 <_printf_float+0x14c>
 8003960:	b913      	cbnz	r3, 8003968 <_printf_float+0x1a0>
 8003962:	6822      	ldr	r2, [r4, #0]
 8003964:	07d0      	lsls	r0, r2, #31
 8003966:	d501      	bpl.n	800396c <_printf_float+0x1a4>
 8003968:	3302      	adds	r3, #2
 800396a:	e7f3      	b.n	8003954 <_printf_float+0x18c>
 800396c:	2301      	movs	r3, #1
 800396e:	e7f1      	b.n	8003954 <_printf_float+0x18c>
 8003970:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003974:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003978:	4293      	cmp	r3, r2
 800397a:	db05      	blt.n	8003988 <_printf_float+0x1c0>
 800397c:	6822      	ldr	r2, [r4, #0]
 800397e:	6123      	str	r3, [r4, #16]
 8003980:	07d1      	lsls	r1, r2, #31
 8003982:	d5e8      	bpl.n	8003956 <_printf_float+0x18e>
 8003984:	3301      	adds	r3, #1
 8003986:	e7e5      	b.n	8003954 <_printf_float+0x18c>
 8003988:	2b00      	cmp	r3, #0
 800398a:	bfcc      	ite	gt
 800398c:	2301      	movgt	r3, #1
 800398e:	f1c3 0302 	rsble	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	e7de      	b.n	8003954 <_printf_float+0x18c>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	055a      	lsls	r2, r3, #21
 800399a:	d407      	bmi.n	80039ac <_printf_float+0x1e4>
 800399c:	6923      	ldr	r3, [r4, #16]
 800399e:	463a      	mov	r2, r7
 80039a0:	4659      	mov	r1, fp
 80039a2:	4628      	mov	r0, r5
 80039a4:	47b0      	blx	r6
 80039a6:	3001      	adds	r0, #1
 80039a8:	d129      	bne.n	80039fe <_printf_float+0x236>
 80039aa:	e764      	b.n	8003876 <_printf_float+0xae>
 80039ac:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80039b0:	f240 80d7 	bls.w	8003b62 <_printf_float+0x39a>
 80039b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039b8:	2200      	movs	r2, #0
 80039ba:	2300      	movs	r3, #0
 80039bc:	f7fc fff4 	bl	80009a8 <__aeabi_dcmpeq>
 80039c0:	b388      	cbz	r0, 8003a26 <_printf_float+0x25e>
 80039c2:	2301      	movs	r3, #1
 80039c4:	4a40      	ldr	r2, [pc, #256]	; (8003ac8 <_printf_float+0x300>)
 80039c6:	4659      	mov	r1, fp
 80039c8:	4628      	mov	r0, r5
 80039ca:	47b0      	blx	r6
 80039cc:	3001      	adds	r0, #1
 80039ce:	f43f af52 	beq.w	8003876 <_printf_float+0xae>
 80039d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80039d6:	429a      	cmp	r2, r3
 80039d8:	db02      	blt.n	80039e0 <_printf_float+0x218>
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	07d8      	lsls	r0, r3, #31
 80039de:	d50e      	bpl.n	80039fe <_printf_float+0x236>
 80039e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039e4:	4659      	mov	r1, fp
 80039e6:	4628      	mov	r0, r5
 80039e8:	47b0      	blx	r6
 80039ea:	3001      	adds	r0, #1
 80039ec:	f43f af43 	beq.w	8003876 <_printf_float+0xae>
 80039f0:	2700      	movs	r7, #0
 80039f2:	f104 081a 	add.w	r8, r4, #26
 80039f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039f8:	3b01      	subs	r3, #1
 80039fa:	42bb      	cmp	r3, r7
 80039fc:	dc09      	bgt.n	8003a12 <_printf_float+0x24a>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	079f      	lsls	r7, r3, #30
 8003a02:	f100 80fd 	bmi.w	8003c00 <_printf_float+0x438>
 8003a06:	68e0      	ldr	r0, [r4, #12]
 8003a08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a0a:	4298      	cmp	r0, r3
 8003a0c:	bfb8      	it	lt
 8003a0e:	4618      	movlt	r0, r3
 8003a10:	e733      	b.n	800387a <_printf_float+0xb2>
 8003a12:	2301      	movs	r3, #1
 8003a14:	4642      	mov	r2, r8
 8003a16:	4659      	mov	r1, fp
 8003a18:	4628      	mov	r0, r5
 8003a1a:	47b0      	blx	r6
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	f43f af2a 	beq.w	8003876 <_printf_float+0xae>
 8003a22:	3701      	adds	r7, #1
 8003a24:	e7e7      	b.n	80039f6 <_printf_float+0x22e>
 8003a26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	dc2b      	bgt.n	8003a84 <_printf_float+0x2bc>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	4a26      	ldr	r2, [pc, #152]	; (8003ac8 <_printf_float+0x300>)
 8003a30:	4659      	mov	r1, fp
 8003a32:	4628      	mov	r0, r5
 8003a34:	47b0      	blx	r6
 8003a36:	3001      	adds	r0, #1
 8003a38:	f43f af1d 	beq.w	8003876 <_printf_float+0xae>
 8003a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a3e:	b923      	cbnz	r3, 8003a4a <_printf_float+0x282>
 8003a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a42:	b913      	cbnz	r3, 8003a4a <_printf_float+0x282>
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	07d9      	lsls	r1, r3, #31
 8003a48:	d5d9      	bpl.n	80039fe <_printf_float+0x236>
 8003a4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a4e:	4659      	mov	r1, fp
 8003a50:	4628      	mov	r0, r5
 8003a52:	47b0      	blx	r6
 8003a54:	3001      	adds	r0, #1
 8003a56:	f43f af0e 	beq.w	8003876 <_printf_float+0xae>
 8003a5a:	f04f 0800 	mov.w	r8, #0
 8003a5e:	f104 091a 	add.w	r9, r4, #26
 8003a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a64:	425b      	negs	r3, r3
 8003a66:	4543      	cmp	r3, r8
 8003a68:	dc01      	bgt.n	8003a6e <_printf_float+0x2a6>
 8003a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a6c:	e797      	b.n	800399e <_printf_float+0x1d6>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	464a      	mov	r2, r9
 8003a72:	4659      	mov	r1, fp
 8003a74:	4628      	mov	r0, r5
 8003a76:	47b0      	blx	r6
 8003a78:	3001      	adds	r0, #1
 8003a7a:	f43f aefc 	beq.w	8003876 <_printf_float+0xae>
 8003a7e:	f108 0801 	add.w	r8, r8, #1
 8003a82:	e7ee      	b.n	8003a62 <_printf_float+0x29a>
 8003a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	bfa8      	it	ge
 8003a8c:	461a      	movge	r2, r3
 8003a8e:	2a00      	cmp	r2, #0
 8003a90:	4690      	mov	r8, r2
 8003a92:	dd07      	ble.n	8003aa4 <_printf_float+0x2dc>
 8003a94:	4613      	mov	r3, r2
 8003a96:	4659      	mov	r1, fp
 8003a98:	463a      	mov	r2, r7
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	47b0      	blx	r6
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	f43f aee9 	beq.w	8003876 <_printf_float+0xae>
 8003aa4:	f104 031a 	add.w	r3, r4, #26
 8003aa8:	f04f 0a00 	mov.w	sl, #0
 8003aac:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003ab0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ab2:	e015      	b.n	8003ae0 <_printf_float+0x318>
 8003ab4:	7fefffff 	.word	0x7fefffff
 8003ab8:	08005d48 	.word	0x08005d48
 8003abc:	08005d44 	.word	0x08005d44
 8003ac0:	08005d50 	.word	0x08005d50
 8003ac4:	08005d4c 	.word	0x08005d4c
 8003ac8:	08005d54 	.word	0x08005d54
 8003acc:	2301      	movs	r3, #1
 8003ace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ad0:	4659      	mov	r1, fp
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	47b0      	blx	r6
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	f43f aecd 	beq.w	8003876 <_printf_float+0xae>
 8003adc:	f10a 0a01 	add.w	sl, sl, #1
 8003ae0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003ae4:	eba9 0308 	sub.w	r3, r9, r8
 8003ae8:	4553      	cmp	r3, sl
 8003aea:	dcef      	bgt.n	8003acc <_printf_float+0x304>
 8003aec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003af0:	429a      	cmp	r2, r3
 8003af2:	444f      	add	r7, r9
 8003af4:	db14      	blt.n	8003b20 <_printf_float+0x358>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	07da      	lsls	r2, r3, #31
 8003afa:	d411      	bmi.n	8003b20 <_printf_float+0x358>
 8003afc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003afe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b00:	eba3 0209 	sub.w	r2, r3, r9
 8003b04:	eba3 0901 	sub.w	r9, r3, r1
 8003b08:	4591      	cmp	r9, r2
 8003b0a:	bfa8      	it	ge
 8003b0c:	4691      	movge	r9, r2
 8003b0e:	f1b9 0f00 	cmp.w	r9, #0
 8003b12:	dc0d      	bgt.n	8003b30 <_printf_float+0x368>
 8003b14:	2700      	movs	r7, #0
 8003b16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b1a:	f104 081a 	add.w	r8, r4, #26
 8003b1e:	e018      	b.n	8003b52 <_printf_float+0x38a>
 8003b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b24:	4659      	mov	r1, fp
 8003b26:	4628      	mov	r0, r5
 8003b28:	47b0      	blx	r6
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d1e6      	bne.n	8003afc <_printf_float+0x334>
 8003b2e:	e6a2      	b.n	8003876 <_printf_float+0xae>
 8003b30:	464b      	mov	r3, r9
 8003b32:	463a      	mov	r2, r7
 8003b34:	4659      	mov	r1, fp
 8003b36:	4628      	mov	r0, r5
 8003b38:	47b0      	blx	r6
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d1ea      	bne.n	8003b14 <_printf_float+0x34c>
 8003b3e:	e69a      	b.n	8003876 <_printf_float+0xae>
 8003b40:	2301      	movs	r3, #1
 8003b42:	4642      	mov	r2, r8
 8003b44:	4659      	mov	r1, fp
 8003b46:	4628      	mov	r0, r5
 8003b48:	47b0      	blx	r6
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	f43f ae93 	beq.w	8003876 <_printf_float+0xae>
 8003b50:	3701      	adds	r7, #1
 8003b52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	eba3 0309 	sub.w	r3, r3, r9
 8003b5c:	42bb      	cmp	r3, r7
 8003b5e:	dcef      	bgt.n	8003b40 <_printf_float+0x378>
 8003b60:	e74d      	b.n	80039fe <_printf_float+0x236>
 8003b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b64:	2a01      	cmp	r2, #1
 8003b66:	dc01      	bgt.n	8003b6c <_printf_float+0x3a4>
 8003b68:	07db      	lsls	r3, r3, #31
 8003b6a:	d538      	bpl.n	8003bde <_printf_float+0x416>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	463a      	mov	r2, r7
 8003b70:	4659      	mov	r1, fp
 8003b72:	4628      	mov	r0, r5
 8003b74:	47b0      	blx	r6
 8003b76:	3001      	adds	r0, #1
 8003b78:	f43f ae7d 	beq.w	8003876 <_printf_float+0xae>
 8003b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b80:	4659      	mov	r1, fp
 8003b82:	4628      	mov	r0, r5
 8003b84:	47b0      	blx	r6
 8003b86:	3001      	adds	r0, #1
 8003b88:	f107 0701 	add.w	r7, r7, #1
 8003b8c:	f43f ae73 	beq.w	8003876 <_printf_float+0xae>
 8003b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b96:	2200      	movs	r2, #0
 8003b98:	f103 38ff 	add.w	r8, r3, #4294967295
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f7fc ff03 	bl	80009a8 <__aeabi_dcmpeq>
 8003ba2:	b9c0      	cbnz	r0, 8003bd6 <_printf_float+0x40e>
 8003ba4:	4643      	mov	r3, r8
 8003ba6:	463a      	mov	r2, r7
 8003ba8:	4659      	mov	r1, fp
 8003baa:	4628      	mov	r0, r5
 8003bac:	47b0      	blx	r6
 8003bae:	3001      	adds	r0, #1
 8003bb0:	d10d      	bne.n	8003bce <_printf_float+0x406>
 8003bb2:	e660      	b.n	8003876 <_printf_float+0xae>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	4642      	mov	r2, r8
 8003bb8:	4659      	mov	r1, fp
 8003bba:	4628      	mov	r0, r5
 8003bbc:	47b0      	blx	r6
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	f43f ae59 	beq.w	8003876 <_printf_float+0xae>
 8003bc4:	3701      	adds	r7, #1
 8003bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	42bb      	cmp	r3, r7
 8003bcc:	dcf2      	bgt.n	8003bb4 <_printf_float+0x3ec>
 8003bce:	464b      	mov	r3, r9
 8003bd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003bd4:	e6e4      	b.n	80039a0 <_printf_float+0x1d8>
 8003bd6:	2700      	movs	r7, #0
 8003bd8:	f104 081a 	add.w	r8, r4, #26
 8003bdc:	e7f3      	b.n	8003bc6 <_printf_float+0x3fe>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e7e1      	b.n	8003ba6 <_printf_float+0x3de>
 8003be2:	2301      	movs	r3, #1
 8003be4:	4642      	mov	r2, r8
 8003be6:	4659      	mov	r1, fp
 8003be8:	4628      	mov	r0, r5
 8003bea:	47b0      	blx	r6
 8003bec:	3001      	adds	r0, #1
 8003bee:	f43f ae42 	beq.w	8003876 <_printf_float+0xae>
 8003bf2:	3701      	adds	r7, #1
 8003bf4:	68e3      	ldr	r3, [r4, #12]
 8003bf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	42bb      	cmp	r3, r7
 8003bfc:	dcf1      	bgt.n	8003be2 <_printf_float+0x41a>
 8003bfe:	e702      	b.n	8003a06 <_printf_float+0x23e>
 8003c00:	2700      	movs	r7, #0
 8003c02:	f104 0819 	add.w	r8, r4, #25
 8003c06:	e7f5      	b.n	8003bf4 <_printf_float+0x42c>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f43f ae94 	beq.w	8003936 <_printf_float+0x16e>
 8003c0e:	f04f 0c00 	mov.w	ip, #0
 8003c12:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003c16:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003c1a:	6022      	str	r2, [r4, #0]
 8003c1c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003c20:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	463a      	mov	r2, r7
 8003c28:	464b      	mov	r3, r9
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	f7ff fd3a 	bl	80036a4 <__cvt>
 8003c30:	4607      	mov	r7, r0
 8003c32:	e64f      	b.n	80038d4 <_printf_float+0x10c>

08003c34 <_printf_common>:
 8003c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	4691      	mov	r9, r2
 8003c3a:	461f      	mov	r7, r3
 8003c3c:	688a      	ldr	r2, [r1, #8]
 8003c3e:	690b      	ldr	r3, [r1, #16]
 8003c40:	4606      	mov	r6, r0
 8003c42:	4293      	cmp	r3, r2
 8003c44:	bfb8      	it	lt
 8003c46:	4613      	movlt	r3, r2
 8003c48:	f8c9 3000 	str.w	r3, [r9]
 8003c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c50:	460c      	mov	r4, r1
 8003c52:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c56:	b112      	cbz	r2, 8003c5e <_printf_common+0x2a>
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f8c9 3000 	str.w	r3, [r9]
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	0699      	lsls	r1, r3, #26
 8003c62:	bf42      	ittt	mi
 8003c64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c68:	3302      	addmi	r3, #2
 8003c6a:	f8c9 3000 	strmi.w	r3, [r9]
 8003c6e:	6825      	ldr	r5, [r4, #0]
 8003c70:	f015 0506 	ands.w	r5, r5, #6
 8003c74:	d107      	bne.n	8003c86 <_printf_common+0x52>
 8003c76:	f104 0a19 	add.w	sl, r4, #25
 8003c7a:	68e3      	ldr	r3, [r4, #12]
 8003c7c:	f8d9 2000 	ldr.w	r2, [r9]
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	42ab      	cmp	r3, r5
 8003c84:	dc29      	bgt.n	8003cda <_printf_common+0xa6>
 8003c86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c8a:	6822      	ldr	r2, [r4, #0]
 8003c8c:	3300      	adds	r3, #0
 8003c8e:	bf18      	it	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	0692      	lsls	r2, r2, #26
 8003c94:	d42e      	bmi.n	8003cf4 <_printf_common+0xc0>
 8003c96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c9a:	4639      	mov	r1, r7
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	47c0      	blx	r8
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	d021      	beq.n	8003ce8 <_printf_common+0xb4>
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	68e5      	ldr	r5, [r4, #12]
 8003ca8:	f003 0306 	and.w	r3, r3, #6
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	bf18      	it	ne
 8003cb0:	2500      	movne	r5, #0
 8003cb2:	f8d9 2000 	ldr.w	r2, [r9]
 8003cb6:	f04f 0900 	mov.w	r9, #0
 8003cba:	bf08      	it	eq
 8003cbc:	1aad      	subeq	r5, r5, r2
 8003cbe:	68a3      	ldr	r3, [r4, #8]
 8003cc0:	6922      	ldr	r2, [r4, #16]
 8003cc2:	bf08      	it	eq
 8003cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	bfc4      	itt	gt
 8003ccc:	1a9b      	subgt	r3, r3, r2
 8003cce:	18ed      	addgt	r5, r5, r3
 8003cd0:	341a      	adds	r4, #26
 8003cd2:	454d      	cmp	r5, r9
 8003cd4:	d11a      	bne.n	8003d0c <_printf_common+0xd8>
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	e008      	b.n	8003cec <_printf_common+0xb8>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4652      	mov	r2, sl
 8003cde:	4639      	mov	r1, r7
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	47c0      	blx	r8
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d103      	bne.n	8003cf0 <_printf_common+0xbc>
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf0:	3501      	adds	r5, #1
 8003cf2:	e7c2      	b.n	8003c7a <_printf_common+0x46>
 8003cf4:	2030      	movs	r0, #48	; 0x30
 8003cf6:	18e1      	adds	r1, r4, r3
 8003cf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d02:	4422      	add	r2, r4
 8003d04:	3302      	adds	r3, #2
 8003d06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d0a:	e7c4      	b.n	8003c96 <_printf_common+0x62>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	4622      	mov	r2, r4
 8003d10:	4639      	mov	r1, r7
 8003d12:	4630      	mov	r0, r6
 8003d14:	47c0      	blx	r8
 8003d16:	3001      	adds	r0, #1
 8003d18:	d0e6      	beq.n	8003ce8 <_printf_common+0xb4>
 8003d1a:	f109 0901 	add.w	r9, r9, #1
 8003d1e:	e7d8      	b.n	8003cd2 <_printf_common+0x9e>

08003d20 <_printf_i>:
 8003d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d28:	460c      	mov	r4, r1
 8003d2a:	7e09      	ldrb	r1, [r1, #24]
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	296e      	cmp	r1, #110	; 0x6e
 8003d30:	4617      	mov	r7, r2
 8003d32:	4606      	mov	r6, r0
 8003d34:	4698      	mov	r8, r3
 8003d36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d38:	f000 80b3 	beq.w	8003ea2 <_printf_i+0x182>
 8003d3c:	d822      	bhi.n	8003d84 <_printf_i+0x64>
 8003d3e:	2963      	cmp	r1, #99	; 0x63
 8003d40:	d036      	beq.n	8003db0 <_printf_i+0x90>
 8003d42:	d80a      	bhi.n	8003d5a <_printf_i+0x3a>
 8003d44:	2900      	cmp	r1, #0
 8003d46:	f000 80b9 	beq.w	8003ebc <_printf_i+0x19c>
 8003d4a:	2958      	cmp	r1, #88	; 0x58
 8003d4c:	f000 8083 	beq.w	8003e56 <_printf_i+0x136>
 8003d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d58:	e032      	b.n	8003dc0 <_printf_i+0xa0>
 8003d5a:	2964      	cmp	r1, #100	; 0x64
 8003d5c:	d001      	beq.n	8003d62 <_printf_i+0x42>
 8003d5e:	2969      	cmp	r1, #105	; 0x69
 8003d60:	d1f6      	bne.n	8003d50 <_printf_i+0x30>
 8003d62:	6820      	ldr	r0, [r4, #0]
 8003d64:	6813      	ldr	r3, [r2, #0]
 8003d66:	0605      	lsls	r5, r0, #24
 8003d68:	f103 0104 	add.w	r1, r3, #4
 8003d6c:	d52a      	bpl.n	8003dc4 <_printf_i+0xa4>
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6011      	str	r1, [r2, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	da03      	bge.n	8003d7e <_printf_i+0x5e>
 8003d76:	222d      	movs	r2, #45	; 0x2d
 8003d78:	425b      	negs	r3, r3
 8003d7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d7e:	486f      	ldr	r0, [pc, #444]	; (8003f3c <_printf_i+0x21c>)
 8003d80:	220a      	movs	r2, #10
 8003d82:	e039      	b.n	8003df8 <_printf_i+0xd8>
 8003d84:	2973      	cmp	r1, #115	; 0x73
 8003d86:	f000 809d 	beq.w	8003ec4 <_printf_i+0x1a4>
 8003d8a:	d808      	bhi.n	8003d9e <_printf_i+0x7e>
 8003d8c:	296f      	cmp	r1, #111	; 0x6f
 8003d8e:	d020      	beq.n	8003dd2 <_printf_i+0xb2>
 8003d90:	2970      	cmp	r1, #112	; 0x70
 8003d92:	d1dd      	bne.n	8003d50 <_printf_i+0x30>
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	f043 0320 	orr.w	r3, r3, #32
 8003d9a:	6023      	str	r3, [r4, #0]
 8003d9c:	e003      	b.n	8003da6 <_printf_i+0x86>
 8003d9e:	2975      	cmp	r1, #117	; 0x75
 8003da0:	d017      	beq.n	8003dd2 <_printf_i+0xb2>
 8003da2:	2978      	cmp	r1, #120	; 0x78
 8003da4:	d1d4      	bne.n	8003d50 <_printf_i+0x30>
 8003da6:	2378      	movs	r3, #120	; 0x78
 8003da8:	4865      	ldr	r0, [pc, #404]	; (8003f40 <_printf_i+0x220>)
 8003daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dae:	e055      	b.n	8003e5c <_printf_i+0x13c>
 8003db0:	6813      	ldr	r3, [r2, #0]
 8003db2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db6:	1d19      	adds	r1, r3, #4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6011      	str	r1, [r2, #0]
 8003dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e08c      	b.n	8003ede <_printf_i+0x1be>
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dca:	6011      	str	r1, [r2, #0]
 8003dcc:	bf18      	it	ne
 8003dce:	b21b      	sxthne	r3, r3
 8003dd0:	e7cf      	b.n	8003d72 <_printf_i+0x52>
 8003dd2:	6813      	ldr	r3, [r2, #0]
 8003dd4:	6825      	ldr	r5, [r4, #0]
 8003dd6:	1d18      	adds	r0, r3, #4
 8003dd8:	6010      	str	r0, [r2, #0]
 8003dda:	0628      	lsls	r0, r5, #24
 8003ddc:	d501      	bpl.n	8003de2 <_printf_i+0xc2>
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	e002      	b.n	8003de8 <_printf_i+0xc8>
 8003de2:	0668      	lsls	r0, r5, #25
 8003de4:	d5fb      	bpl.n	8003dde <_printf_i+0xbe>
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	296f      	cmp	r1, #111	; 0x6f
 8003dea:	bf14      	ite	ne
 8003dec:	220a      	movne	r2, #10
 8003dee:	2208      	moveq	r2, #8
 8003df0:	4852      	ldr	r0, [pc, #328]	; (8003f3c <_printf_i+0x21c>)
 8003df2:	2100      	movs	r1, #0
 8003df4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003df8:	6865      	ldr	r5, [r4, #4]
 8003dfa:	2d00      	cmp	r5, #0
 8003dfc:	60a5      	str	r5, [r4, #8]
 8003dfe:	f2c0 8095 	blt.w	8003f2c <_printf_i+0x20c>
 8003e02:	6821      	ldr	r1, [r4, #0]
 8003e04:	f021 0104 	bic.w	r1, r1, #4
 8003e08:	6021      	str	r1, [r4, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d13d      	bne.n	8003e8a <_printf_i+0x16a>
 8003e0e:	2d00      	cmp	r5, #0
 8003e10:	f040 808e 	bne.w	8003f30 <_printf_i+0x210>
 8003e14:	4665      	mov	r5, ip
 8003e16:	2a08      	cmp	r2, #8
 8003e18:	d10b      	bne.n	8003e32 <_printf_i+0x112>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	07db      	lsls	r3, r3, #31
 8003e1e:	d508      	bpl.n	8003e32 <_printf_i+0x112>
 8003e20:	6923      	ldr	r3, [r4, #16]
 8003e22:	6862      	ldr	r2, [r4, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	bfde      	ittt	le
 8003e28:	2330      	movle	r3, #48	; 0x30
 8003e2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e32:	ebac 0305 	sub.w	r3, ip, r5
 8003e36:	6123      	str	r3, [r4, #16]
 8003e38:	f8cd 8000 	str.w	r8, [sp]
 8003e3c:	463b      	mov	r3, r7
 8003e3e:	aa03      	add	r2, sp, #12
 8003e40:	4621      	mov	r1, r4
 8003e42:	4630      	mov	r0, r6
 8003e44:	f7ff fef6 	bl	8003c34 <_printf_common>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d14d      	bne.n	8003ee8 <_printf_i+0x1c8>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	b005      	add	sp, #20
 8003e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e56:	4839      	ldr	r0, [pc, #228]	; (8003f3c <_printf_i+0x21c>)
 8003e58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e5c:	6813      	ldr	r3, [r2, #0]
 8003e5e:	6821      	ldr	r1, [r4, #0]
 8003e60:	1d1d      	adds	r5, r3, #4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6015      	str	r5, [r2, #0]
 8003e66:	060a      	lsls	r2, r1, #24
 8003e68:	d50b      	bpl.n	8003e82 <_printf_i+0x162>
 8003e6a:	07ca      	lsls	r2, r1, #31
 8003e6c:	bf44      	itt	mi
 8003e6e:	f041 0120 	orrmi.w	r1, r1, #32
 8003e72:	6021      	strmi	r1, [r4, #0]
 8003e74:	b91b      	cbnz	r3, 8003e7e <_printf_i+0x15e>
 8003e76:	6822      	ldr	r2, [r4, #0]
 8003e78:	f022 0220 	bic.w	r2, r2, #32
 8003e7c:	6022      	str	r2, [r4, #0]
 8003e7e:	2210      	movs	r2, #16
 8003e80:	e7b7      	b.n	8003df2 <_printf_i+0xd2>
 8003e82:	064d      	lsls	r5, r1, #25
 8003e84:	bf48      	it	mi
 8003e86:	b29b      	uxthmi	r3, r3
 8003e88:	e7ef      	b.n	8003e6a <_printf_i+0x14a>
 8003e8a:	4665      	mov	r5, ip
 8003e8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e90:	fb02 3311 	mls	r3, r2, r1, r3
 8003e94:	5cc3      	ldrb	r3, [r0, r3]
 8003e96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	2900      	cmp	r1, #0
 8003e9e:	d1f5      	bne.n	8003e8c <_printf_i+0x16c>
 8003ea0:	e7b9      	b.n	8003e16 <_printf_i+0xf6>
 8003ea2:	6813      	ldr	r3, [r2, #0]
 8003ea4:	6825      	ldr	r5, [r4, #0]
 8003ea6:	1d18      	adds	r0, r3, #4
 8003ea8:	6961      	ldr	r1, [r4, #20]
 8003eaa:	6010      	str	r0, [r2, #0]
 8003eac:	0628      	lsls	r0, r5, #24
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	d501      	bpl.n	8003eb6 <_printf_i+0x196>
 8003eb2:	6019      	str	r1, [r3, #0]
 8003eb4:	e002      	b.n	8003ebc <_printf_i+0x19c>
 8003eb6:	066a      	lsls	r2, r5, #25
 8003eb8:	d5fb      	bpl.n	8003eb2 <_printf_i+0x192>
 8003eba:	8019      	strh	r1, [r3, #0]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	4665      	mov	r5, ip
 8003ec0:	6123      	str	r3, [r4, #16]
 8003ec2:	e7b9      	b.n	8003e38 <_printf_i+0x118>
 8003ec4:	6813      	ldr	r3, [r2, #0]
 8003ec6:	1d19      	adds	r1, r3, #4
 8003ec8:	6011      	str	r1, [r2, #0]
 8003eca:	681d      	ldr	r5, [r3, #0]
 8003ecc:	6862      	ldr	r2, [r4, #4]
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	f000 ff71 	bl	8004db8 <memchr>
 8003ed6:	b108      	cbz	r0, 8003edc <_printf_i+0x1bc>
 8003ed8:	1b40      	subs	r0, r0, r5
 8003eda:	6060      	str	r0, [r4, #4]
 8003edc:	6863      	ldr	r3, [r4, #4]
 8003ede:	6123      	str	r3, [r4, #16]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ee6:	e7a7      	b.n	8003e38 <_printf_i+0x118>
 8003ee8:	6923      	ldr	r3, [r4, #16]
 8003eea:	462a      	mov	r2, r5
 8003eec:	4639      	mov	r1, r7
 8003eee:	4630      	mov	r0, r6
 8003ef0:	47c0      	blx	r8
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d0aa      	beq.n	8003e4c <_printf_i+0x12c>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	079b      	lsls	r3, r3, #30
 8003efa:	d413      	bmi.n	8003f24 <_printf_i+0x204>
 8003efc:	68e0      	ldr	r0, [r4, #12]
 8003efe:	9b03      	ldr	r3, [sp, #12]
 8003f00:	4298      	cmp	r0, r3
 8003f02:	bfb8      	it	lt
 8003f04:	4618      	movlt	r0, r3
 8003f06:	e7a3      	b.n	8003e50 <_printf_i+0x130>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	464a      	mov	r2, r9
 8003f0c:	4639      	mov	r1, r7
 8003f0e:	4630      	mov	r0, r6
 8003f10:	47c0      	blx	r8
 8003f12:	3001      	adds	r0, #1
 8003f14:	d09a      	beq.n	8003e4c <_printf_i+0x12c>
 8003f16:	3501      	adds	r5, #1
 8003f18:	68e3      	ldr	r3, [r4, #12]
 8003f1a:	9a03      	ldr	r2, [sp, #12]
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	42ab      	cmp	r3, r5
 8003f20:	dcf2      	bgt.n	8003f08 <_printf_i+0x1e8>
 8003f22:	e7eb      	b.n	8003efc <_printf_i+0x1dc>
 8003f24:	2500      	movs	r5, #0
 8003f26:	f104 0919 	add.w	r9, r4, #25
 8003f2a:	e7f5      	b.n	8003f18 <_printf_i+0x1f8>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ac      	bne.n	8003e8a <_printf_i+0x16a>
 8003f30:	7803      	ldrb	r3, [r0, #0]
 8003f32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f3a:	e76c      	b.n	8003e16 <_printf_i+0xf6>
 8003f3c:	08005d56 	.word	0x08005d56
 8003f40:	08005d67 	.word	0x08005d67

08003f44 <iprintf>:
 8003f44:	b40f      	push	{r0, r1, r2, r3}
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <iprintf+0x2c>)
 8003f48:	b513      	push	{r0, r1, r4, lr}
 8003f4a:	681c      	ldr	r4, [r3, #0]
 8003f4c:	b124      	cbz	r4, 8003f58 <iprintf+0x14>
 8003f4e:	69a3      	ldr	r3, [r4, #24]
 8003f50:	b913      	cbnz	r3, 8003f58 <iprintf+0x14>
 8003f52:	4620      	mov	r0, r4
 8003f54:	f000 fe90 	bl	8004c78 <__sinit>
 8003f58:	ab05      	add	r3, sp, #20
 8003f5a:	9a04      	ldr	r2, [sp, #16]
 8003f5c:	68a1      	ldr	r1, [r4, #8]
 8003f5e:	4620      	mov	r0, r4
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	f001 fafb 	bl	800555c <_vfiprintf_r>
 8003f66:	b002      	add	sp, #8
 8003f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f6c:	b004      	add	sp, #16
 8003f6e:	4770      	bx	lr
 8003f70:	2000000c 	.word	0x2000000c

08003f74 <quorem>:
 8003f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f78:	6903      	ldr	r3, [r0, #16]
 8003f7a:	690c      	ldr	r4, [r1, #16]
 8003f7c:	4680      	mov	r8, r0
 8003f7e:	42a3      	cmp	r3, r4
 8003f80:	f2c0 8084 	blt.w	800408c <quorem+0x118>
 8003f84:	3c01      	subs	r4, #1
 8003f86:	f101 0714 	add.w	r7, r1, #20
 8003f8a:	f100 0614 	add.w	r6, r0, #20
 8003f8e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003f92:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003f96:	3501      	adds	r5, #1
 8003f98:	fbb0 f5f5 	udiv	r5, r0, r5
 8003f9c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003fa0:	eb06 030c 	add.w	r3, r6, ip
 8003fa4:	eb07 090c 	add.w	r9, r7, ip
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	b39d      	cbz	r5, 8004014 <quorem+0xa0>
 8003fac:	f04f 0a00 	mov.w	sl, #0
 8003fb0:	4638      	mov	r0, r7
 8003fb2:	46b6      	mov	lr, r6
 8003fb4:	46d3      	mov	fp, sl
 8003fb6:	f850 2b04 	ldr.w	r2, [r0], #4
 8003fba:	b293      	uxth	r3, r2
 8003fbc:	fb05 a303 	mla	r3, r5, r3, sl
 8003fc0:	0c12      	lsrs	r2, r2, #16
 8003fc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003fc6:	fb05 a202 	mla	r2, r5, r2, sl
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	ebab 0303 	sub.w	r3, fp, r3
 8003fd0:	f8de b000 	ldr.w	fp, [lr]
 8003fd4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003fd8:	fa1f fb8b 	uxth.w	fp, fp
 8003fdc:	445b      	add	r3, fp
 8003fde:	fa1f fb82 	uxth.w	fp, r2
 8003fe2:	f8de 2000 	ldr.w	r2, [lr]
 8003fe6:	4581      	cmp	r9, r0
 8003fe8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003fec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ff6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003ffa:	f84e 3b04 	str.w	r3, [lr], #4
 8003ffe:	d2da      	bcs.n	8003fb6 <quorem+0x42>
 8004000:	f856 300c 	ldr.w	r3, [r6, ip]
 8004004:	b933      	cbnz	r3, 8004014 <quorem+0xa0>
 8004006:	9b01      	ldr	r3, [sp, #4]
 8004008:	3b04      	subs	r3, #4
 800400a:	429e      	cmp	r6, r3
 800400c:	461a      	mov	r2, r3
 800400e:	d331      	bcc.n	8004074 <quorem+0x100>
 8004010:	f8c8 4010 	str.w	r4, [r8, #16]
 8004014:	4640      	mov	r0, r8
 8004016:	f001 f8fd 	bl	8005214 <__mcmp>
 800401a:	2800      	cmp	r0, #0
 800401c:	db26      	blt.n	800406c <quorem+0xf8>
 800401e:	4630      	mov	r0, r6
 8004020:	f04f 0c00 	mov.w	ip, #0
 8004024:	3501      	adds	r5, #1
 8004026:	f857 1b04 	ldr.w	r1, [r7], #4
 800402a:	f8d0 e000 	ldr.w	lr, [r0]
 800402e:	b28b      	uxth	r3, r1
 8004030:	ebac 0303 	sub.w	r3, ip, r3
 8004034:	fa1f f28e 	uxth.w	r2, lr
 8004038:	4413      	add	r3, r2
 800403a:	0c0a      	lsrs	r2, r1, #16
 800403c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004040:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004044:	b29b      	uxth	r3, r3
 8004046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800404a:	45b9      	cmp	r9, r7
 800404c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004050:	f840 3b04 	str.w	r3, [r0], #4
 8004054:	d2e7      	bcs.n	8004026 <quorem+0xb2>
 8004056:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800405a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800405e:	b92a      	cbnz	r2, 800406c <quorem+0xf8>
 8004060:	3b04      	subs	r3, #4
 8004062:	429e      	cmp	r6, r3
 8004064:	461a      	mov	r2, r3
 8004066:	d30b      	bcc.n	8004080 <quorem+0x10c>
 8004068:	f8c8 4010 	str.w	r4, [r8, #16]
 800406c:	4628      	mov	r0, r5
 800406e:	b003      	add	sp, #12
 8004070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	3b04      	subs	r3, #4
 8004078:	2a00      	cmp	r2, #0
 800407a:	d1c9      	bne.n	8004010 <quorem+0x9c>
 800407c:	3c01      	subs	r4, #1
 800407e:	e7c4      	b.n	800400a <quorem+0x96>
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	3b04      	subs	r3, #4
 8004084:	2a00      	cmp	r2, #0
 8004086:	d1ef      	bne.n	8004068 <quorem+0xf4>
 8004088:	3c01      	subs	r4, #1
 800408a:	e7ea      	b.n	8004062 <quorem+0xee>
 800408c:	2000      	movs	r0, #0
 800408e:	e7ee      	b.n	800406e <quorem+0xfa>

08004090 <_dtoa_r>:
 8004090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004094:	4616      	mov	r6, r2
 8004096:	461f      	mov	r7, r3
 8004098:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800409a:	b095      	sub	sp, #84	; 0x54
 800409c:	4604      	mov	r4, r0
 800409e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80040a2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80040a6:	b93d      	cbnz	r5, 80040b8 <_dtoa_r+0x28>
 80040a8:	2010      	movs	r0, #16
 80040aa:	f000 fe7d 	bl	8004da8 <malloc>
 80040ae:	6260      	str	r0, [r4, #36]	; 0x24
 80040b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80040b4:	6005      	str	r5, [r0, #0]
 80040b6:	60c5      	str	r5, [r0, #12]
 80040b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040ba:	6819      	ldr	r1, [r3, #0]
 80040bc:	b151      	cbz	r1, 80040d4 <_dtoa_r+0x44>
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	2301      	movs	r3, #1
 80040c2:	4093      	lsls	r3, r2
 80040c4:	604a      	str	r2, [r1, #4]
 80040c6:	608b      	str	r3, [r1, #8]
 80040c8:	4620      	mov	r0, r4
 80040ca:	f000 fec2 	bl	8004e52 <_Bfree>
 80040ce:	2200      	movs	r2, #0
 80040d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	1e3b      	subs	r3, r7, #0
 80040d6:	bfaf      	iteee	ge
 80040d8:	2300      	movge	r3, #0
 80040da:	2201      	movlt	r2, #1
 80040dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80040e0:	9303      	strlt	r3, [sp, #12]
 80040e2:	bfac      	ite	ge
 80040e4:	f8c8 3000 	strge.w	r3, [r8]
 80040e8:	f8c8 2000 	strlt.w	r2, [r8]
 80040ec:	4bae      	ldr	r3, [pc, #696]	; (80043a8 <_dtoa_r+0x318>)
 80040ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80040f2:	ea33 0308 	bics.w	r3, r3, r8
 80040f6:	d11b      	bne.n	8004130 <_dtoa_r+0xa0>
 80040f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80040fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	9b02      	ldr	r3, [sp, #8]
 8004102:	b923      	cbnz	r3, 800410e <_dtoa_r+0x7e>
 8004104:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004108:	2800      	cmp	r0, #0
 800410a:	f000 8545 	beq.w	8004b98 <_dtoa_r+0xb08>
 800410e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004110:	b953      	cbnz	r3, 8004128 <_dtoa_r+0x98>
 8004112:	4ba6      	ldr	r3, [pc, #664]	; (80043ac <_dtoa_r+0x31c>)
 8004114:	e021      	b.n	800415a <_dtoa_r+0xca>
 8004116:	4ba6      	ldr	r3, [pc, #664]	; (80043b0 <_dtoa_r+0x320>)
 8004118:	9306      	str	r3, [sp, #24]
 800411a:	3308      	adds	r3, #8
 800411c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	9806      	ldr	r0, [sp, #24]
 8004122:	b015      	add	sp, #84	; 0x54
 8004124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004128:	4ba0      	ldr	r3, [pc, #640]	; (80043ac <_dtoa_r+0x31c>)
 800412a:	9306      	str	r3, [sp, #24]
 800412c:	3303      	adds	r3, #3
 800412e:	e7f5      	b.n	800411c <_dtoa_r+0x8c>
 8004130:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004134:	2200      	movs	r2, #0
 8004136:	2300      	movs	r3, #0
 8004138:	4630      	mov	r0, r6
 800413a:	4639      	mov	r1, r7
 800413c:	f7fc fc34 	bl	80009a8 <__aeabi_dcmpeq>
 8004140:	4682      	mov	sl, r0
 8004142:	b160      	cbz	r0, 800415e <_dtoa_r+0xce>
 8004144:	2301      	movs	r3, #1
 8004146:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 8520 	beq.w	8004b92 <_dtoa_r+0xb02>
 8004152:	4b98      	ldr	r3, [pc, #608]	; (80043b4 <_dtoa_r+0x324>)
 8004154:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	3b01      	subs	r3, #1
 800415a:	9306      	str	r3, [sp, #24]
 800415c:	e7e0      	b.n	8004120 <_dtoa_r+0x90>
 800415e:	ab12      	add	r3, sp, #72	; 0x48
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	ab13      	add	r3, sp, #76	; 0x4c
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	4632      	mov	r2, r6
 8004168:	463b      	mov	r3, r7
 800416a:	4620      	mov	r0, r4
 800416c:	f001 f8ca 	bl	8005304 <__d2b>
 8004170:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004174:	4683      	mov	fp, r0
 8004176:	2d00      	cmp	r5, #0
 8004178:	d07d      	beq.n	8004276 <_dtoa_r+0x1e6>
 800417a:	46b0      	mov	r8, r6
 800417c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004180:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004184:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004188:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800418c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004190:	2200      	movs	r2, #0
 8004192:	4b89      	ldr	r3, [pc, #548]	; (80043b8 <_dtoa_r+0x328>)
 8004194:	4640      	mov	r0, r8
 8004196:	4649      	mov	r1, r9
 8004198:	f7fb ffe6 	bl	8000168 <__aeabi_dsub>
 800419c:	a37c      	add	r3, pc, #496	; (adr r3, 8004390 <_dtoa_r+0x300>)
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	f7fc f999 	bl	80004d8 <__aeabi_dmul>
 80041a6:	a37c      	add	r3, pc, #496	; (adr r3, 8004398 <_dtoa_r+0x308>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f7fb ffde 	bl	800016c <__adddf3>
 80041b0:	4606      	mov	r6, r0
 80041b2:	4628      	mov	r0, r5
 80041b4:	460f      	mov	r7, r1
 80041b6:	f7fc f925 	bl	8000404 <__aeabi_i2d>
 80041ba:	a379      	add	r3, pc, #484	; (adr r3, 80043a0 <_dtoa_r+0x310>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f7fc f98a 	bl	80004d8 <__aeabi_dmul>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4630      	mov	r0, r6
 80041ca:	4639      	mov	r1, r7
 80041cc:	f7fb ffce 	bl	800016c <__adddf3>
 80041d0:	4606      	mov	r6, r0
 80041d2:	460f      	mov	r7, r1
 80041d4:	f7fc fc30 	bl	8000a38 <__aeabi_d2iz>
 80041d8:	2200      	movs	r2, #0
 80041da:	4682      	mov	sl, r0
 80041dc:	2300      	movs	r3, #0
 80041de:	4630      	mov	r0, r6
 80041e0:	4639      	mov	r1, r7
 80041e2:	f7fc fbeb 	bl	80009bc <__aeabi_dcmplt>
 80041e6:	b148      	cbz	r0, 80041fc <_dtoa_r+0x16c>
 80041e8:	4650      	mov	r0, sl
 80041ea:	f7fc f90b 	bl	8000404 <__aeabi_i2d>
 80041ee:	4632      	mov	r2, r6
 80041f0:	463b      	mov	r3, r7
 80041f2:	f7fc fbd9 	bl	80009a8 <__aeabi_dcmpeq>
 80041f6:	b908      	cbnz	r0, 80041fc <_dtoa_r+0x16c>
 80041f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041fc:	f1ba 0f16 	cmp.w	sl, #22
 8004200:	d85a      	bhi.n	80042b8 <_dtoa_r+0x228>
 8004202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004206:	496d      	ldr	r1, [pc, #436]	; (80043bc <_dtoa_r+0x32c>)
 8004208:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800420c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004210:	f7fc fbf2 	bl	80009f8 <__aeabi_dcmpgt>
 8004214:	2800      	cmp	r0, #0
 8004216:	d051      	beq.n	80042bc <_dtoa_r+0x22c>
 8004218:	2300      	movs	r3, #0
 800421a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800421e:	930d      	str	r3, [sp, #52]	; 0x34
 8004220:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004222:	1b5d      	subs	r5, r3, r5
 8004224:	1e6b      	subs	r3, r5, #1
 8004226:	9307      	str	r3, [sp, #28]
 8004228:	bf43      	ittte	mi
 800422a:	2300      	movmi	r3, #0
 800422c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004230:	9307      	strmi	r3, [sp, #28]
 8004232:	f04f 0900 	movpl.w	r9, #0
 8004236:	f1ba 0f00 	cmp.w	sl, #0
 800423a:	db41      	blt.n	80042c0 <_dtoa_r+0x230>
 800423c:	9b07      	ldr	r3, [sp, #28]
 800423e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004242:	4453      	add	r3, sl
 8004244:	9307      	str	r3, [sp, #28]
 8004246:	2300      	movs	r3, #0
 8004248:	9308      	str	r3, [sp, #32]
 800424a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800424c:	2b09      	cmp	r3, #9
 800424e:	f200 808f 	bhi.w	8004370 <_dtoa_r+0x2e0>
 8004252:	2b05      	cmp	r3, #5
 8004254:	bfc4      	itt	gt
 8004256:	3b04      	subgt	r3, #4
 8004258:	931e      	strgt	r3, [sp, #120]	; 0x78
 800425a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800425c:	bfc8      	it	gt
 800425e:	2500      	movgt	r5, #0
 8004260:	f1a3 0302 	sub.w	r3, r3, #2
 8004264:	bfd8      	it	le
 8004266:	2501      	movle	r5, #1
 8004268:	2b03      	cmp	r3, #3
 800426a:	f200 808d 	bhi.w	8004388 <_dtoa_r+0x2f8>
 800426e:	e8df f003 	tbb	[pc, r3]
 8004272:	7d7b      	.short	0x7d7b
 8004274:	6f2f      	.short	0x6f2f
 8004276:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800427a:	441d      	add	r5, r3
 800427c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004280:	2820      	cmp	r0, #32
 8004282:	dd13      	ble.n	80042ac <_dtoa_r+0x21c>
 8004284:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004288:	9b02      	ldr	r3, [sp, #8]
 800428a:	fa08 f800 	lsl.w	r8, r8, r0
 800428e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004292:	fa23 f000 	lsr.w	r0, r3, r0
 8004296:	ea48 0000 	orr.w	r0, r8, r0
 800429a:	f7fc f8a3 	bl	80003e4 <__aeabi_ui2d>
 800429e:	2301      	movs	r3, #1
 80042a0:	4680      	mov	r8, r0
 80042a2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80042a6:	3d01      	subs	r5, #1
 80042a8:	9310      	str	r3, [sp, #64]	; 0x40
 80042aa:	e771      	b.n	8004190 <_dtoa_r+0x100>
 80042ac:	9b02      	ldr	r3, [sp, #8]
 80042ae:	f1c0 0020 	rsb	r0, r0, #32
 80042b2:	fa03 f000 	lsl.w	r0, r3, r0
 80042b6:	e7f0      	b.n	800429a <_dtoa_r+0x20a>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e7b0      	b.n	800421e <_dtoa_r+0x18e>
 80042bc:	900d      	str	r0, [sp, #52]	; 0x34
 80042be:	e7af      	b.n	8004220 <_dtoa_r+0x190>
 80042c0:	f1ca 0300 	rsb	r3, sl, #0
 80042c4:	9308      	str	r3, [sp, #32]
 80042c6:	2300      	movs	r3, #0
 80042c8:	eba9 090a 	sub.w	r9, r9, sl
 80042cc:	930c      	str	r3, [sp, #48]	; 0x30
 80042ce:	e7bc      	b.n	800424a <_dtoa_r+0x1ba>
 80042d0:	2301      	movs	r3, #1
 80042d2:	9309      	str	r3, [sp, #36]	; 0x24
 80042d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	dd74      	ble.n	80043c4 <_dtoa_r+0x334>
 80042da:	4698      	mov	r8, r3
 80042dc:	9304      	str	r3, [sp, #16]
 80042de:	2200      	movs	r2, #0
 80042e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80042e2:	6072      	str	r2, [r6, #4]
 80042e4:	2204      	movs	r2, #4
 80042e6:	f102 0014 	add.w	r0, r2, #20
 80042ea:	4298      	cmp	r0, r3
 80042ec:	6871      	ldr	r1, [r6, #4]
 80042ee:	d96e      	bls.n	80043ce <_dtoa_r+0x33e>
 80042f0:	4620      	mov	r0, r4
 80042f2:	f000 fd7a 	bl	8004dea <_Balloc>
 80042f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042f8:	6030      	str	r0, [r6, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f1b8 0f0e 	cmp.w	r8, #14
 8004300:	9306      	str	r3, [sp, #24]
 8004302:	f200 80ed 	bhi.w	80044e0 <_dtoa_r+0x450>
 8004306:	2d00      	cmp	r5, #0
 8004308:	f000 80ea 	beq.w	80044e0 <_dtoa_r+0x450>
 800430c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004310:	f1ba 0f00 	cmp.w	sl, #0
 8004314:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004318:	dd77      	ble.n	800440a <_dtoa_r+0x37a>
 800431a:	4a28      	ldr	r2, [pc, #160]	; (80043bc <_dtoa_r+0x32c>)
 800431c:	f00a 030f 	and.w	r3, sl, #15
 8004320:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004324:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004328:	06f0      	lsls	r0, r6, #27
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004332:	d568      	bpl.n	8004406 <_dtoa_r+0x376>
 8004334:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004338:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <_dtoa_r+0x330>)
 800433a:	2503      	movs	r5, #3
 800433c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004340:	f7fc f9f4 	bl	800072c <__aeabi_ddiv>
 8004344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004348:	f006 060f 	and.w	r6, r6, #15
 800434c:	4f1c      	ldr	r7, [pc, #112]	; (80043c0 <_dtoa_r+0x330>)
 800434e:	e04f      	b.n	80043f0 <_dtoa_r+0x360>
 8004350:	2301      	movs	r3, #1
 8004352:	9309      	str	r3, [sp, #36]	; 0x24
 8004354:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004356:	4453      	add	r3, sl
 8004358:	f103 0801 	add.w	r8, r3, #1
 800435c:	9304      	str	r3, [sp, #16]
 800435e:	4643      	mov	r3, r8
 8004360:	2b01      	cmp	r3, #1
 8004362:	bfb8      	it	lt
 8004364:	2301      	movlt	r3, #1
 8004366:	e7ba      	b.n	80042de <_dtoa_r+0x24e>
 8004368:	2300      	movs	r3, #0
 800436a:	e7b2      	b.n	80042d2 <_dtoa_r+0x242>
 800436c:	2300      	movs	r3, #0
 800436e:	e7f0      	b.n	8004352 <_dtoa_r+0x2c2>
 8004370:	2501      	movs	r5, #1
 8004372:	2300      	movs	r3, #0
 8004374:	9509      	str	r5, [sp, #36]	; 0x24
 8004376:	931e      	str	r3, [sp, #120]	; 0x78
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
 800437c:	2200      	movs	r2, #0
 800437e:	9304      	str	r3, [sp, #16]
 8004380:	4698      	mov	r8, r3
 8004382:	2312      	movs	r3, #18
 8004384:	921f      	str	r2, [sp, #124]	; 0x7c
 8004386:	e7aa      	b.n	80042de <_dtoa_r+0x24e>
 8004388:	2301      	movs	r3, #1
 800438a:	9309      	str	r3, [sp, #36]	; 0x24
 800438c:	e7f4      	b.n	8004378 <_dtoa_r+0x2e8>
 800438e:	bf00      	nop
 8004390:	636f4361 	.word	0x636f4361
 8004394:	3fd287a7 	.word	0x3fd287a7
 8004398:	8b60c8b3 	.word	0x8b60c8b3
 800439c:	3fc68a28 	.word	0x3fc68a28
 80043a0:	509f79fb 	.word	0x509f79fb
 80043a4:	3fd34413 	.word	0x3fd34413
 80043a8:	7ff00000 	.word	0x7ff00000
 80043ac:	08005d81 	.word	0x08005d81
 80043b0:	08005d78 	.word	0x08005d78
 80043b4:	08005d55 	.word	0x08005d55
 80043b8:	3ff80000 	.word	0x3ff80000
 80043bc:	08005e10 	.word	0x08005e10
 80043c0:	08005de8 	.word	0x08005de8
 80043c4:	2301      	movs	r3, #1
 80043c6:	9304      	str	r3, [sp, #16]
 80043c8:	4698      	mov	r8, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	e7da      	b.n	8004384 <_dtoa_r+0x2f4>
 80043ce:	3101      	adds	r1, #1
 80043d0:	6071      	str	r1, [r6, #4]
 80043d2:	0052      	lsls	r2, r2, #1
 80043d4:	e787      	b.n	80042e6 <_dtoa_r+0x256>
 80043d6:	07f1      	lsls	r1, r6, #31
 80043d8:	d508      	bpl.n	80043ec <_dtoa_r+0x35c>
 80043da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80043de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043e2:	f7fc f879 	bl	80004d8 <__aeabi_dmul>
 80043e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80043ea:	3501      	adds	r5, #1
 80043ec:	1076      	asrs	r6, r6, #1
 80043ee:	3708      	adds	r7, #8
 80043f0:	2e00      	cmp	r6, #0
 80043f2:	d1f0      	bne.n	80043d6 <_dtoa_r+0x346>
 80043f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80043f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043fc:	f7fc f996 	bl	800072c <__aeabi_ddiv>
 8004400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004404:	e01b      	b.n	800443e <_dtoa_r+0x3ae>
 8004406:	2502      	movs	r5, #2
 8004408:	e7a0      	b.n	800434c <_dtoa_r+0x2bc>
 800440a:	f000 80a4 	beq.w	8004556 <_dtoa_r+0x4c6>
 800440e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004412:	f1ca 0600 	rsb	r6, sl, #0
 8004416:	4ba0      	ldr	r3, [pc, #640]	; (8004698 <_dtoa_r+0x608>)
 8004418:	f006 020f 	and.w	r2, r6, #15
 800441c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	f7fc f858 	bl	80004d8 <__aeabi_dmul>
 8004428:	2502      	movs	r5, #2
 800442a:	2300      	movs	r3, #0
 800442c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004430:	4f9a      	ldr	r7, [pc, #616]	; (800469c <_dtoa_r+0x60c>)
 8004432:	1136      	asrs	r6, r6, #4
 8004434:	2e00      	cmp	r6, #0
 8004436:	f040 8083 	bne.w	8004540 <_dtoa_r+0x4b0>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e0      	bne.n	8004400 <_dtoa_r+0x370>
 800443e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 808a 	beq.w	800455a <_dtoa_r+0x4ca>
 8004446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800444a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800444e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004452:	2200      	movs	r2, #0
 8004454:	4b92      	ldr	r3, [pc, #584]	; (80046a0 <_dtoa_r+0x610>)
 8004456:	f7fc fab1 	bl	80009bc <__aeabi_dcmplt>
 800445a:	2800      	cmp	r0, #0
 800445c:	d07d      	beq.n	800455a <_dtoa_r+0x4ca>
 800445e:	f1b8 0f00 	cmp.w	r8, #0
 8004462:	d07a      	beq.n	800455a <_dtoa_r+0x4ca>
 8004464:	9b04      	ldr	r3, [sp, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	dd36      	ble.n	80044d8 <_dtoa_r+0x448>
 800446a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800446e:	2200      	movs	r2, #0
 8004470:	4b8c      	ldr	r3, [pc, #560]	; (80046a4 <_dtoa_r+0x614>)
 8004472:	f7fc f831 	bl	80004d8 <__aeabi_dmul>
 8004476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800447a:	9e04      	ldr	r6, [sp, #16]
 800447c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004480:	3501      	adds	r5, #1
 8004482:	4628      	mov	r0, r5
 8004484:	f7fb ffbe 	bl	8000404 <__aeabi_i2d>
 8004488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800448c:	f7fc f824 	bl	80004d8 <__aeabi_dmul>
 8004490:	2200      	movs	r2, #0
 8004492:	4b85      	ldr	r3, [pc, #532]	; (80046a8 <_dtoa_r+0x618>)
 8004494:	f7fb fe6a 	bl	800016c <__adddf3>
 8004498:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800449c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80044a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80044a2:	2e00      	cmp	r6, #0
 80044a4:	d15c      	bne.n	8004560 <_dtoa_r+0x4d0>
 80044a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044aa:	2200      	movs	r2, #0
 80044ac:	4b7f      	ldr	r3, [pc, #508]	; (80046ac <_dtoa_r+0x61c>)
 80044ae:	f7fb fe5b 	bl	8000168 <__aeabi_dsub>
 80044b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044b4:	462b      	mov	r3, r5
 80044b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044ba:	f7fc fa9d 	bl	80009f8 <__aeabi_dcmpgt>
 80044be:	2800      	cmp	r0, #0
 80044c0:	f040 8281 	bne.w	80049c6 <_dtoa_r+0x936>
 80044c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044ca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80044ce:	f7fc fa75 	bl	80009bc <__aeabi_dcmplt>
 80044d2:	2800      	cmp	r0, #0
 80044d4:	f040 8275 	bne.w	80049c2 <_dtoa_r+0x932>
 80044d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80044dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f2c0 814b 	blt.w	800477e <_dtoa_r+0x6ee>
 80044e8:	f1ba 0f0e 	cmp.w	sl, #14
 80044ec:	f300 8147 	bgt.w	800477e <_dtoa_r+0x6ee>
 80044f0:	4b69      	ldr	r3, [pc, #420]	; (8004698 <_dtoa_r+0x608>)
 80044f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004500:	2b00      	cmp	r3, #0
 8004502:	f280 80d7 	bge.w	80046b4 <_dtoa_r+0x624>
 8004506:	f1b8 0f00 	cmp.w	r8, #0
 800450a:	f300 80d3 	bgt.w	80046b4 <_dtoa_r+0x624>
 800450e:	f040 8257 	bne.w	80049c0 <_dtoa_r+0x930>
 8004512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004516:	2200      	movs	r2, #0
 8004518:	4b64      	ldr	r3, [pc, #400]	; (80046ac <_dtoa_r+0x61c>)
 800451a:	f7fb ffdd 	bl	80004d8 <__aeabi_dmul>
 800451e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004522:	f7fc fa5f 	bl	80009e4 <__aeabi_dcmpge>
 8004526:	4646      	mov	r6, r8
 8004528:	4647      	mov	r7, r8
 800452a:	2800      	cmp	r0, #0
 800452c:	f040 822d 	bne.w	800498a <_dtoa_r+0x8fa>
 8004530:	9b06      	ldr	r3, [sp, #24]
 8004532:	9a06      	ldr	r2, [sp, #24]
 8004534:	1c5d      	adds	r5, r3, #1
 8004536:	2331      	movs	r3, #49	; 0x31
 8004538:	f10a 0a01 	add.w	sl, sl, #1
 800453c:	7013      	strb	r3, [r2, #0]
 800453e:	e228      	b.n	8004992 <_dtoa_r+0x902>
 8004540:	07f2      	lsls	r2, r6, #31
 8004542:	d505      	bpl.n	8004550 <_dtoa_r+0x4c0>
 8004544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004548:	f7fb ffc6 	bl	80004d8 <__aeabi_dmul>
 800454c:	2301      	movs	r3, #1
 800454e:	3501      	adds	r5, #1
 8004550:	1076      	asrs	r6, r6, #1
 8004552:	3708      	adds	r7, #8
 8004554:	e76e      	b.n	8004434 <_dtoa_r+0x3a4>
 8004556:	2502      	movs	r5, #2
 8004558:	e771      	b.n	800443e <_dtoa_r+0x3ae>
 800455a:	4657      	mov	r7, sl
 800455c:	4646      	mov	r6, r8
 800455e:	e790      	b.n	8004482 <_dtoa_r+0x3f2>
 8004560:	4b4d      	ldr	r3, [pc, #308]	; (8004698 <_dtoa_r+0x608>)
 8004562:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004566:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800456a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456c:	2b00      	cmp	r3, #0
 800456e:	d048      	beq.n	8004602 <_dtoa_r+0x572>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	2000      	movs	r0, #0
 8004576:	494e      	ldr	r1, [pc, #312]	; (80046b0 <_dtoa_r+0x620>)
 8004578:	f7fc f8d8 	bl	800072c <__aeabi_ddiv>
 800457c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004580:	f7fb fdf2 	bl	8000168 <__aeabi_dsub>
 8004584:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004588:	9d06      	ldr	r5, [sp, #24]
 800458a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800458e:	f7fc fa53 	bl	8000a38 <__aeabi_d2iz>
 8004592:	9011      	str	r0, [sp, #68]	; 0x44
 8004594:	f7fb ff36 	bl	8000404 <__aeabi_i2d>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045a0:	f7fb fde2 	bl	8000168 <__aeabi_dsub>
 80045a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045aa:	3330      	adds	r3, #48	; 0x30
 80045ac:	f805 3b01 	strb.w	r3, [r5], #1
 80045b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80045b4:	f7fc fa02 	bl	80009bc <__aeabi_dcmplt>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d163      	bne.n	8004684 <_dtoa_r+0x5f4>
 80045bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045c0:	2000      	movs	r0, #0
 80045c2:	4937      	ldr	r1, [pc, #220]	; (80046a0 <_dtoa_r+0x610>)
 80045c4:	f7fb fdd0 	bl	8000168 <__aeabi_dsub>
 80045c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80045cc:	f7fc f9f6 	bl	80009bc <__aeabi_dcmplt>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	f040 80b5 	bne.w	8004740 <_dtoa_r+0x6b0>
 80045d6:	9b06      	ldr	r3, [sp, #24]
 80045d8:	1aeb      	subs	r3, r5, r3
 80045da:	429e      	cmp	r6, r3
 80045dc:	f77f af7c 	ble.w	80044d8 <_dtoa_r+0x448>
 80045e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80045e4:	2200      	movs	r2, #0
 80045e6:	4b2f      	ldr	r3, [pc, #188]	; (80046a4 <_dtoa_r+0x614>)
 80045e8:	f7fb ff76 	bl	80004d8 <__aeabi_dmul>
 80045ec:	2200      	movs	r2, #0
 80045ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045f6:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <_dtoa_r+0x614>)
 80045f8:	f7fb ff6e 	bl	80004d8 <__aeabi_dmul>
 80045fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004600:	e7c3      	b.n	800458a <_dtoa_r+0x4fa>
 8004602:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004606:	f7fb ff67 	bl	80004d8 <__aeabi_dmul>
 800460a:	9b06      	ldr	r3, [sp, #24]
 800460c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004610:	199d      	adds	r5, r3, r6
 8004612:	461e      	mov	r6, r3
 8004614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004618:	f7fc fa0e 	bl	8000a38 <__aeabi_d2iz>
 800461c:	9011      	str	r0, [sp, #68]	; 0x44
 800461e:	f7fb fef1 	bl	8000404 <__aeabi_i2d>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800462a:	f7fb fd9d 	bl	8000168 <__aeabi_dsub>
 800462e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004634:	3330      	adds	r3, #48	; 0x30
 8004636:	f806 3b01 	strb.w	r3, [r6], #1
 800463a:	42ae      	cmp	r6, r5
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	d124      	bne.n	800468c <_dtoa_r+0x5fc>
 8004642:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <_dtoa_r+0x620>)
 8004648:	f7fb fd90 	bl	800016c <__adddf3>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004654:	f7fc f9d0 	bl	80009f8 <__aeabi_dcmpgt>
 8004658:	2800      	cmp	r0, #0
 800465a:	d171      	bne.n	8004740 <_dtoa_r+0x6b0>
 800465c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004660:	2000      	movs	r0, #0
 8004662:	4913      	ldr	r1, [pc, #76]	; (80046b0 <_dtoa_r+0x620>)
 8004664:	f7fb fd80 	bl	8000168 <__aeabi_dsub>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004670:	f7fc f9a4 	bl	80009bc <__aeabi_dcmplt>
 8004674:	2800      	cmp	r0, #0
 8004676:	f43f af2f 	beq.w	80044d8 <_dtoa_r+0x448>
 800467a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800467e:	1e6a      	subs	r2, r5, #1
 8004680:	2b30      	cmp	r3, #48	; 0x30
 8004682:	d001      	beq.n	8004688 <_dtoa_r+0x5f8>
 8004684:	46ba      	mov	sl, r7
 8004686:	e04a      	b.n	800471e <_dtoa_r+0x68e>
 8004688:	4615      	mov	r5, r2
 800468a:	e7f6      	b.n	800467a <_dtoa_r+0x5ea>
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <_dtoa_r+0x614>)
 800468e:	f7fb ff23 	bl	80004d8 <__aeabi_dmul>
 8004692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004696:	e7bd      	b.n	8004614 <_dtoa_r+0x584>
 8004698:	08005e10 	.word	0x08005e10
 800469c:	08005de8 	.word	0x08005de8
 80046a0:	3ff00000 	.word	0x3ff00000
 80046a4:	40240000 	.word	0x40240000
 80046a8:	401c0000 	.word	0x401c0000
 80046ac:	40140000 	.word	0x40140000
 80046b0:	3fe00000 	.word	0x3fe00000
 80046b4:	9d06      	ldr	r5, [sp, #24]
 80046b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80046ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046be:	4630      	mov	r0, r6
 80046c0:	4639      	mov	r1, r7
 80046c2:	f7fc f833 	bl	800072c <__aeabi_ddiv>
 80046c6:	f7fc f9b7 	bl	8000a38 <__aeabi_d2iz>
 80046ca:	4681      	mov	r9, r0
 80046cc:	f7fb fe9a 	bl	8000404 <__aeabi_i2d>
 80046d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046d4:	f7fb ff00 	bl	80004d8 <__aeabi_dmul>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4630      	mov	r0, r6
 80046de:	4639      	mov	r1, r7
 80046e0:	f7fb fd42 	bl	8000168 <__aeabi_dsub>
 80046e4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80046e8:	f805 6b01 	strb.w	r6, [r5], #1
 80046ec:	9e06      	ldr	r6, [sp, #24]
 80046ee:	4602      	mov	r2, r0
 80046f0:	1bae      	subs	r6, r5, r6
 80046f2:	45b0      	cmp	r8, r6
 80046f4:	460b      	mov	r3, r1
 80046f6:	d135      	bne.n	8004764 <_dtoa_r+0x6d4>
 80046f8:	f7fb fd38 	bl	800016c <__adddf3>
 80046fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004700:	4606      	mov	r6, r0
 8004702:	460f      	mov	r7, r1
 8004704:	f7fc f978 	bl	80009f8 <__aeabi_dcmpgt>
 8004708:	b9c8      	cbnz	r0, 800473e <_dtoa_r+0x6ae>
 800470a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800470e:	4630      	mov	r0, r6
 8004710:	4639      	mov	r1, r7
 8004712:	f7fc f949 	bl	80009a8 <__aeabi_dcmpeq>
 8004716:	b110      	cbz	r0, 800471e <_dtoa_r+0x68e>
 8004718:	f019 0f01 	tst.w	r9, #1
 800471c:	d10f      	bne.n	800473e <_dtoa_r+0x6ae>
 800471e:	4659      	mov	r1, fp
 8004720:	4620      	mov	r0, r4
 8004722:	f000 fb96 	bl	8004e52 <_Bfree>
 8004726:	2300      	movs	r3, #0
 8004728:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800472a:	702b      	strb	r3, [r5, #0]
 800472c:	f10a 0301 	add.w	r3, sl, #1
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004734:	2b00      	cmp	r3, #0
 8004736:	f43f acf3 	beq.w	8004120 <_dtoa_r+0x90>
 800473a:	601d      	str	r5, [r3, #0]
 800473c:	e4f0      	b.n	8004120 <_dtoa_r+0x90>
 800473e:	4657      	mov	r7, sl
 8004740:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004744:	1e6b      	subs	r3, r5, #1
 8004746:	2a39      	cmp	r2, #57	; 0x39
 8004748:	d106      	bne.n	8004758 <_dtoa_r+0x6c8>
 800474a:	9a06      	ldr	r2, [sp, #24]
 800474c:	429a      	cmp	r2, r3
 800474e:	d107      	bne.n	8004760 <_dtoa_r+0x6d0>
 8004750:	2330      	movs	r3, #48	; 0x30
 8004752:	7013      	strb	r3, [r2, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	3701      	adds	r7, #1
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	3201      	adds	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	e791      	b.n	8004684 <_dtoa_r+0x5f4>
 8004760:	461d      	mov	r5, r3
 8004762:	e7ed      	b.n	8004740 <_dtoa_r+0x6b0>
 8004764:	2200      	movs	r2, #0
 8004766:	4b99      	ldr	r3, [pc, #612]	; (80049cc <_dtoa_r+0x93c>)
 8004768:	f7fb feb6 	bl	80004d8 <__aeabi_dmul>
 800476c:	2200      	movs	r2, #0
 800476e:	2300      	movs	r3, #0
 8004770:	4606      	mov	r6, r0
 8004772:	460f      	mov	r7, r1
 8004774:	f7fc f918 	bl	80009a8 <__aeabi_dcmpeq>
 8004778:	2800      	cmp	r0, #0
 800477a:	d09e      	beq.n	80046ba <_dtoa_r+0x62a>
 800477c:	e7cf      	b.n	800471e <_dtoa_r+0x68e>
 800477e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004780:	2a00      	cmp	r2, #0
 8004782:	f000 8088 	beq.w	8004896 <_dtoa_r+0x806>
 8004786:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004788:	2a01      	cmp	r2, #1
 800478a:	dc6d      	bgt.n	8004868 <_dtoa_r+0x7d8>
 800478c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800478e:	2a00      	cmp	r2, #0
 8004790:	d066      	beq.n	8004860 <_dtoa_r+0x7d0>
 8004792:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004796:	464d      	mov	r5, r9
 8004798:	9e08      	ldr	r6, [sp, #32]
 800479a:	9a07      	ldr	r2, [sp, #28]
 800479c:	2101      	movs	r1, #1
 800479e:	441a      	add	r2, r3
 80047a0:	4620      	mov	r0, r4
 80047a2:	4499      	add	r9, r3
 80047a4:	9207      	str	r2, [sp, #28]
 80047a6:	f000 fbf4 	bl	8004f92 <__i2b>
 80047aa:	4607      	mov	r7, r0
 80047ac:	2d00      	cmp	r5, #0
 80047ae:	dd0b      	ble.n	80047c8 <_dtoa_r+0x738>
 80047b0:	9b07      	ldr	r3, [sp, #28]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	dd08      	ble.n	80047c8 <_dtoa_r+0x738>
 80047b6:	42ab      	cmp	r3, r5
 80047b8:	bfa8      	it	ge
 80047ba:	462b      	movge	r3, r5
 80047bc:	9a07      	ldr	r2, [sp, #28]
 80047be:	eba9 0903 	sub.w	r9, r9, r3
 80047c2:	1aed      	subs	r5, r5, r3
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	9307      	str	r3, [sp, #28]
 80047c8:	9b08      	ldr	r3, [sp, #32]
 80047ca:	b1eb      	cbz	r3, 8004808 <_dtoa_r+0x778>
 80047cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d065      	beq.n	800489e <_dtoa_r+0x80e>
 80047d2:	b18e      	cbz	r6, 80047f8 <_dtoa_r+0x768>
 80047d4:	4639      	mov	r1, r7
 80047d6:	4632      	mov	r2, r6
 80047d8:	4620      	mov	r0, r4
 80047da:	f000 fc79 	bl	80050d0 <__pow5mult>
 80047de:	465a      	mov	r2, fp
 80047e0:	4601      	mov	r1, r0
 80047e2:	4607      	mov	r7, r0
 80047e4:	4620      	mov	r0, r4
 80047e6:	f000 fbdd 	bl	8004fa4 <__multiply>
 80047ea:	4659      	mov	r1, fp
 80047ec:	900a      	str	r0, [sp, #40]	; 0x28
 80047ee:	4620      	mov	r0, r4
 80047f0:	f000 fb2f 	bl	8004e52 <_Bfree>
 80047f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047f6:	469b      	mov	fp, r3
 80047f8:	9b08      	ldr	r3, [sp, #32]
 80047fa:	1b9a      	subs	r2, r3, r6
 80047fc:	d004      	beq.n	8004808 <_dtoa_r+0x778>
 80047fe:	4659      	mov	r1, fp
 8004800:	4620      	mov	r0, r4
 8004802:	f000 fc65 	bl	80050d0 <__pow5mult>
 8004806:	4683      	mov	fp, r0
 8004808:	2101      	movs	r1, #1
 800480a:	4620      	mov	r0, r4
 800480c:	f000 fbc1 	bl	8004f92 <__i2b>
 8004810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004812:	4606      	mov	r6, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 81c6 	beq.w	8004ba6 <_dtoa_r+0xb16>
 800481a:	461a      	mov	r2, r3
 800481c:	4601      	mov	r1, r0
 800481e:	4620      	mov	r0, r4
 8004820:	f000 fc56 	bl	80050d0 <__pow5mult>
 8004824:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004826:	4606      	mov	r6, r0
 8004828:	2b01      	cmp	r3, #1
 800482a:	dc3e      	bgt.n	80048aa <_dtoa_r+0x81a>
 800482c:	9b02      	ldr	r3, [sp, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d137      	bne.n	80048a2 <_dtoa_r+0x812>
 8004832:	9b03      	ldr	r3, [sp, #12]
 8004834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004838:	2b00      	cmp	r3, #0
 800483a:	d134      	bne.n	80048a6 <_dtoa_r+0x816>
 800483c:	9b03      	ldr	r3, [sp, #12]
 800483e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004842:	0d1b      	lsrs	r3, r3, #20
 8004844:	051b      	lsls	r3, r3, #20
 8004846:	b12b      	cbz	r3, 8004854 <_dtoa_r+0x7c4>
 8004848:	9b07      	ldr	r3, [sp, #28]
 800484a:	f109 0901 	add.w	r9, r9, #1
 800484e:	3301      	adds	r3, #1
 8004850:	9307      	str	r3, [sp, #28]
 8004852:	2301      	movs	r3, #1
 8004854:	9308      	str	r3, [sp, #32]
 8004856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d128      	bne.n	80048ae <_dtoa_r+0x81e>
 800485c:	2001      	movs	r0, #1
 800485e:	e02e      	b.n	80048be <_dtoa_r+0x82e>
 8004860:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004862:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004866:	e796      	b.n	8004796 <_dtoa_r+0x706>
 8004868:	9b08      	ldr	r3, [sp, #32]
 800486a:	f108 36ff 	add.w	r6, r8, #4294967295
 800486e:	42b3      	cmp	r3, r6
 8004870:	bfb7      	itett	lt
 8004872:	9b08      	ldrlt	r3, [sp, #32]
 8004874:	1b9e      	subge	r6, r3, r6
 8004876:	1af2      	sublt	r2, r6, r3
 8004878:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800487a:	bfbf      	itttt	lt
 800487c:	9608      	strlt	r6, [sp, #32]
 800487e:	189b      	addlt	r3, r3, r2
 8004880:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004882:	2600      	movlt	r6, #0
 8004884:	f1b8 0f00 	cmp.w	r8, #0
 8004888:	bfb9      	ittee	lt
 800488a:	eba9 0508 	sublt.w	r5, r9, r8
 800488e:	2300      	movlt	r3, #0
 8004890:	464d      	movge	r5, r9
 8004892:	4643      	movge	r3, r8
 8004894:	e781      	b.n	800479a <_dtoa_r+0x70a>
 8004896:	9e08      	ldr	r6, [sp, #32]
 8004898:	464d      	mov	r5, r9
 800489a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800489c:	e786      	b.n	80047ac <_dtoa_r+0x71c>
 800489e:	9a08      	ldr	r2, [sp, #32]
 80048a0:	e7ad      	b.n	80047fe <_dtoa_r+0x76e>
 80048a2:	2300      	movs	r3, #0
 80048a4:	e7d6      	b.n	8004854 <_dtoa_r+0x7c4>
 80048a6:	9b02      	ldr	r3, [sp, #8]
 80048a8:	e7d4      	b.n	8004854 <_dtoa_r+0x7c4>
 80048aa:	2300      	movs	r3, #0
 80048ac:	9308      	str	r3, [sp, #32]
 80048ae:	6933      	ldr	r3, [r6, #16]
 80048b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80048b4:	6918      	ldr	r0, [r3, #16]
 80048b6:	f000 fb1e 	bl	8004ef6 <__hi0bits>
 80048ba:	f1c0 0020 	rsb	r0, r0, #32
 80048be:	9b07      	ldr	r3, [sp, #28]
 80048c0:	4418      	add	r0, r3
 80048c2:	f010 001f 	ands.w	r0, r0, #31
 80048c6:	d047      	beq.n	8004958 <_dtoa_r+0x8c8>
 80048c8:	f1c0 0320 	rsb	r3, r0, #32
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	dd3b      	ble.n	8004948 <_dtoa_r+0x8b8>
 80048d0:	9b07      	ldr	r3, [sp, #28]
 80048d2:	f1c0 001c 	rsb	r0, r0, #28
 80048d6:	4481      	add	r9, r0
 80048d8:	4405      	add	r5, r0
 80048da:	4403      	add	r3, r0
 80048dc:	9307      	str	r3, [sp, #28]
 80048de:	f1b9 0f00 	cmp.w	r9, #0
 80048e2:	dd05      	ble.n	80048f0 <_dtoa_r+0x860>
 80048e4:	4659      	mov	r1, fp
 80048e6:	464a      	mov	r2, r9
 80048e8:	4620      	mov	r0, r4
 80048ea:	f000 fc3f 	bl	800516c <__lshift>
 80048ee:	4683      	mov	fp, r0
 80048f0:	9b07      	ldr	r3, [sp, #28]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	dd05      	ble.n	8004902 <_dtoa_r+0x872>
 80048f6:	4631      	mov	r1, r6
 80048f8:	461a      	mov	r2, r3
 80048fa:	4620      	mov	r0, r4
 80048fc:	f000 fc36 	bl	800516c <__lshift>
 8004900:	4606      	mov	r6, r0
 8004902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004904:	b353      	cbz	r3, 800495c <_dtoa_r+0x8cc>
 8004906:	4631      	mov	r1, r6
 8004908:	4658      	mov	r0, fp
 800490a:	f000 fc83 	bl	8005214 <__mcmp>
 800490e:	2800      	cmp	r0, #0
 8004910:	da24      	bge.n	800495c <_dtoa_r+0x8cc>
 8004912:	2300      	movs	r3, #0
 8004914:	4659      	mov	r1, fp
 8004916:	220a      	movs	r2, #10
 8004918:	4620      	mov	r0, r4
 800491a:	f000 fab1 	bl	8004e80 <__multadd>
 800491e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004920:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004924:	4683      	mov	fp, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8144 	beq.w	8004bb4 <_dtoa_r+0xb24>
 800492c:	2300      	movs	r3, #0
 800492e:	4639      	mov	r1, r7
 8004930:	220a      	movs	r2, #10
 8004932:	4620      	mov	r0, r4
 8004934:	f000 faa4 	bl	8004e80 <__multadd>
 8004938:	9b04      	ldr	r3, [sp, #16]
 800493a:	4607      	mov	r7, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	dc4d      	bgt.n	80049dc <_dtoa_r+0x94c>
 8004940:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004942:	2b02      	cmp	r3, #2
 8004944:	dd4a      	ble.n	80049dc <_dtoa_r+0x94c>
 8004946:	e011      	b.n	800496c <_dtoa_r+0x8dc>
 8004948:	d0c9      	beq.n	80048de <_dtoa_r+0x84e>
 800494a:	9a07      	ldr	r2, [sp, #28]
 800494c:	331c      	adds	r3, #28
 800494e:	441a      	add	r2, r3
 8004950:	4499      	add	r9, r3
 8004952:	441d      	add	r5, r3
 8004954:	4613      	mov	r3, r2
 8004956:	e7c1      	b.n	80048dc <_dtoa_r+0x84c>
 8004958:	4603      	mov	r3, r0
 800495a:	e7f6      	b.n	800494a <_dtoa_r+0x8ba>
 800495c:	f1b8 0f00 	cmp.w	r8, #0
 8004960:	dc36      	bgt.n	80049d0 <_dtoa_r+0x940>
 8004962:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004964:	2b02      	cmp	r3, #2
 8004966:	dd33      	ble.n	80049d0 <_dtoa_r+0x940>
 8004968:	f8cd 8010 	str.w	r8, [sp, #16]
 800496c:	9b04      	ldr	r3, [sp, #16]
 800496e:	b963      	cbnz	r3, 800498a <_dtoa_r+0x8fa>
 8004970:	4631      	mov	r1, r6
 8004972:	2205      	movs	r2, #5
 8004974:	4620      	mov	r0, r4
 8004976:	f000 fa83 	bl	8004e80 <__multadd>
 800497a:	4601      	mov	r1, r0
 800497c:	4606      	mov	r6, r0
 800497e:	4658      	mov	r0, fp
 8004980:	f000 fc48 	bl	8005214 <__mcmp>
 8004984:	2800      	cmp	r0, #0
 8004986:	f73f add3 	bgt.w	8004530 <_dtoa_r+0x4a0>
 800498a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800498c:	9d06      	ldr	r5, [sp, #24]
 800498e:	ea6f 0a03 	mvn.w	sl, r3
 8004992:	f04f 0900 	mov.w	r9, #0
 8004996:	4631      	mov	r1, r6
 8004998:	4620      	mov	r0, r4
 800499a:	f000 fa5a 	bl	8004e52 <_Bfree>
 800499e:	2f00      	cmp	r7, #0
 80049a0:	f43f aebd 	beq.w	800471e <_dtoa_r+0x68e>
 80049a4:	f1b9 0f00 	cmp.w	r9, #0
 80049a8:	d005      	beq.n	80049b6 <_dtoa_r+0x926>
 80049aa:	45b9      	cmp	r9, r7
 80049ac:	d003      	beq.n	80049b6 <_dtoa_r+0x926>
 80049ae:	4649      	mov	r1, r9
 80049b0:	4620      	mov	r0, r4
 80049b2:	f000 fa4e 	bl	8004e52 <_Bfree>
 80049b6:	4639      	mov	r1, r7
 80049b8:	4620      	mov	r0, r4
 80049ba:	f000 fa4a 	bl	8004e52 <_Bfree>
 80049be:	e6ae      	b.n	800471e <_dtoa_r+0x68e>
 80049c0:	2600      	movs	r6, #0
 80049c2:	4637      	mov	r7, r6
 80049c4:	e7e1      	b.n	800498a <_dtoa_r+0x8fa>
 80049c6:	46ba      	mov	sl, r7
 80049c8:	4637      	mov	r7, r6
 80049ca:	e5b1      	b.n	8004530 <_dtoa_r+0x4a0>
 80049cc:	40240000 	.word	0x40240000
 80049d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80f3 	beq.w	8004bc2 <_dtoa_r+0xb32>
 80049dc:	2d00      	cmp	r5, #0
 80049de:	dd05      	ble.n	80049ec <_dtoa_r+0x95c>
 80049e0:	4639      	mov	r1, r7
 80049e2:	462a      	mov	r2, r5
 80049e4:	4620      	mov	r0, r4
 80049e6:	f000 fbc1 	bl	800516c <__lshift>
 80049ea:	4607      	mov	r7, r0
 80049ec:	9b08      	ldr	r3, [sp, #32]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d04c      	beq.n	8004a8c <_dtoa_r+0x9fc>
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4620      	mov	r0, r4
 80049f6:	f000 f9f8 	bl	8004dea <_Balloc>
 80049fa:	4605      	mov	r5, r0
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	f107 010c 	add.w	r1, r7, #12
 8004a02:	3202      	adds	r2, #2
 8004a04:	0092      	lsls	r2, r2, #2
 8004a06:	300c      	adds	r0, #12
 8004a08:	f000 f9e4 	bl	8004dd4 <memcpy>
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	4629      	mov	r1, r5
 8004a10:	4620      	mov	r0, r4
 8004a12:	f000 fbab 	bl	800516c <__lshift>
 8004a16:	46b9      	mov	r9, r7
 8004a18:	4607      	mov	r7, r0
 8004a1a:	9b06      	ldr	r3, [sp, #24]
 8004a1c:	9307      	str	r3, [sp, #28]
 8004a1e:	9b02      	ldr	r3, [sp, #8]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	9308      	str	r3, [sp, #32]
 8004a26:	4631      	mov	r1, r6
 8004a28:	4658      	mov	r0, fp
 8004a2a:	f7ff faa3 	bl	8003f74 <quorem>
 8004a2e:	4649      	mov	r1, r9
 8004a30:	4605      	mov	r5, r0
 8004a32:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004a36:	4658      	mov	r0, fp
 8004a38:	f000 fbec 	bl	8005214 <__mcmp>
 8004a3c:	463a      	mov	r2, r7
 8004a3e:	9002      	str	r0, [sp, #8]
 8004a40:	4631      	mov	r1, r6
 8004a42:	4620      	mov	r0, r4
 8004a44:	f000 fc00 	bl	8005248 <__mdiff>
 8004a48:	68c3      	ldr	r3, [r0, #12]
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	bb03      	cbnz	r3, 8004a90 <_dtoa_r+0xa00>
 8004a4e:	4601      	mov	r1, r0
 8004a50:	9009      	str	r0, [sp, #36]	; 0x24
 8004a52:	4658      	mov	r0, fp
 8004a54:	f000 fbde 	bl	8005214 <__mcmp>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	4620      	mov	r0, r4
 8004a60:	9309      	str	r3, [sp, #36]	; 0x24
 8004a62:	f000 f9f6 	bl	8004e52 <_Bfree>
 8004a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a68:	b9a3      	cbnz	r3, 8004a94 <_dtoa_r+0xa04>
 8004a6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004a6c:	b992      	cbnz	r2, 8004a94 <_dtoa_r+0xa04>
 8004a6e:	9a08      	ldr	r2, [sp, #32]
 8004a70:	b982      	cbnz	r2, 8004a94 <_dtoa_r+0xa04>
 8004a72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004a76:	d029      	beq.n	8004acc <_dtoa_r+0xa3c>
 8004a78:	9b02      	ldr	r3, [sp, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	dd01      	ble.n	8004a82 <_dtoa_r+0x9f2>
 8004a7e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004a82:	9b07      	ldr	r3, [sp, #28]
 8004a84:	1c5d      	adds	r5, r3, #1
 8004a86:	f883 8000 	strb.w	r8, [r3]
 8004a8a:	e784      	b.n	8004996 <_dtoa_r+0x906>
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	e7c2      	b.n	8004a16 <_dtoa_r+0x986>
 8004a90:	2301      	movs	r3, #1
 8004a92:	e7e3      	b.n	8004a5c <_dtoa_r+0x9cc>
 8004a94:	9a02      	ldr	r2, [sp, #8]
 8004a96:	2a00      	cmp	r2, #0
 8004a98:	db04      	blt.n	8004aa4 <_dtoa_r+0xa14>
 8004a9a:	d123      	bne.n	8004ae4 <_dtoa_r+0xa54>
 8004a9c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004a9e:	bb0a      	cbnz	r2, 8004ae4 <_dtoa_r+0xa54>
 8004aa0:	9a08      	ldr	r2, [sp, #32]
 8004aa2:	b9fa      	cbnz	r2, 8004ae4 <_dtoa_r+0xa54>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	ddec      	ble.n	8004a82 <_dtoa_r+0x9f2>
 8004aa8:	4659      	mov	r1, fp
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4620      	mov	r0, r4
 8004aae:	f000 fb5d 	bl	800516c <__lshift>
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4683      	mov	fp, r0
 8004ab6:	f000 fbad 	bl	8005214 <__mcmp>
 8004aba:	2800      	cmp	r0, #0
 8004abc:	dc03      	bgt.n	8004ac6 <_dtoa_r+0xa36>
 8004abe:	d1e0      	bne.n	8004a82 <_dtoa_r+0x9f2>
 8004ac0:	f018 0f01 	tst.w	r8, #1
 8004ac4:	d0dd      	beq.n	8004a82 <_dtoa_r+0x9f2>
 8004ac6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004aca:	d1d8      	bne.n	8004a7e <_dtoa_r+0x9ee>
 8004acc:	9b07      	ldr	r3, [sp, #28]
 8004ace:	9a07      	ldr	r2, [sp, #28]
 8004ad0:	1c5d      	adds	r5, r3, #1
 8004ad2:	2339      	movs	r3, #57	; 0x39
 8004ad4:	7013      	strb	r3, [r2, #0]
 8004ad6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004ada:	1e6a      	subs	r2, r5, #1
 8004adc:	2b39      	cmp	r3, #57	; 0x39
 8004ade:	d04d      	beq.n	8004b7c <_dtoa_r+0xaec>
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	e052      	b.n	8004b8a <_dtoa_r+0xafa>
 8004ae4:	9a07      	ldr	r2, [sp, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f102 0501 	add.w	r5, r2, #1
 8004aec:	dd06      	ble.n	8004afc <_dtoa_r+0xa6c>
 8004aee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004af2:	d0eb      	beq.n	8004acc <_dtoa_r+0xa3c>
 8004af4:	f108 0801 	add.w	r8, r8, #1
 8004af8:	9b07      	ldr	r3, [sp, #28]
 8004afa:	e7c4      	b.n	8004a86 <_dtoa_r+0x9f6>
 8004afc:	9b06      	ldr	r3, [sp, #24]
 8004afe:	9a04      	ldr	r2, [sp, #16]
 8004b00:	1aeb      	subs	r3, r5, r3
 8004b02:	4293      	cmp	r3, r2
 8004b04:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004b08:	d021      	beq.n	8004b4e <_dtoa_r+0xabe>
 8004b0a:	4659      	mov	r1, fp
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	220a      	movs	r2, #10
 8004b10:	4620      	mov	r0, r4
 8004b12:	f000 f9b5 	bl	8004e80 <__multadd>
 8004b16:	45b9      	cmp	r9, r7
 8004b18:	4683      	mov	fp, r0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	f04f 020a 	mov.w	r2, #10
 8004b22:	4649      	mov	r1, r9
 8004b24:	4620      	mov	r0, r4
 8004b26:	d105      	bne.n	8004b34 <_dtoa_r+0xaa4>
 8004b28:	f000 f9aa 	bl	8004e80 <__multadd>
 8004b2c:	4681      	mov	r9, r0
 8004b2e:	4607      	mov	r7, r0
 8004b30:	9507      	str	r5, [sp, #28]
 8004b32:	e778      	b.n	8004a26 <_dtoa_r+0x996>
 8004b34:	f000 f9a4 	bl	8004e80 <__multadd>
 8004b38:	4639      	mov	r1, r7
 8004b3a:	4681      	mov	r9, r0
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	220a      	movs	r2, #10
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 f99d 	bl	8004e80 <__multadd>
 8004b46:	4607      	mov	r7, r0
 8004b48:	e7f2      	b.n	8004b30 <_dtoa_r+0xaa0>
 8004b4a:	f04f 0900 	mov.w	r9, #0
 8004b4e:	4659      	mov	r1, fp
 8004b50:	2201      	movs	r2, #1
 8004b52:	4620      	mov	r0, r4
 8004b54:	f000 fb0a 	bl	800516c <__lshift>
 8004b58:	4631      	mov	r1, r6
 8004b5a:	4683      	mov	fp, r0
 8004b5c:	f000 fb5a 	bl	8005214 <__mcmp>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	dcb8      	bgt.n	8004ad6 <_dtoa_r+0xa46>
 8004b64:	d102      	bne.n	8004b6c <_dtoa_r+0xadc>
 8004b66:	f018 0f01 	tst.w	r8, #1
 8004b6a:	d1b4      	bne.n	8004ad6 <_dtoa_r+0xa46>
 8004b6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b70:	1e6a      	subs	r2, r5, #1
 8004b72:	2b30      	cmp	r3, #48	; 0x30
 8004b74:	f47f af0f 	bne.w	8004996 <_dtoa_r+0x906>
 8004b78:	4615      	mov	r5, r2
 8004b7a:	e7f7      	b.n	8004b6c <_dtoa_r+0xadc>
 8004b7c:	9b06      	ldr	r3, [sp, #24]
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d105      	bne.n	8004b8e <_dtoa_r+0xafe>
 8004b82:	2331      	movs	r3, #49	; 0x31
 8004b84:	9a06      	ldr	r2, [sp, #24]
 8004b86:	f10a 0a01 	add.w	sl, sl, #1
 8004b8a:	7013      	strb	r3, [r2, #0]
 8004b8c:	e703      	b.n	8004996 <_dtoa_r+0x906>
 8004b8e:	4615      	mov	r5, r2
 8004b90:	e7a1      	b.n	8004ad6 <_dtoa_r+0xa46>
 8004b92:	4b17      	ldr	r3, [pc, #92]	; (8004bf0 <_dtoa_r+0xb60>)
 8004b94:	f7ff bae1 	b.w	800415a <_dtoa_r+0xca>
 8004b98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f47f aabb 	bne.w	8004116 <_dtoa_r+0x86>
 8004ba0:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <_dtoa_r+0xb64>)
 8004ba2:	f7ff bada 	b.w	800415a <_dtoa_r+0xca>
 8004ba6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	f77f ae3f 	ble.w	800482c <_dtoa_r+0x79c>
 8004bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bb0:	9308      	str	r3, [sp, #32]
 8004bb2:	e653      	b.n	800485c <_dtoa_r+0x7cc>
 8004bb4:	9b04      	ldr	r3, [sp, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	dc03      	bgt.n	8004bc2 <_dtoa_r+0xb32>
 8004bba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	f73f aed5 	bgt.w	800496c <_dtoa_r+0x8dc>
 8004bc2:	9d06      	ldr	r5, [sp, #24]
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	4658      	mov	r0, fp
 8004bc8:	f7ff f9d4 	bl	8003f74 <quorem>
 8004bcc:	9b06      	ldr	r3, [sp, #24]
 8004bce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004bd2:	f805 8b01 	strb.w	r8, [r5], #1
 8004bd6:	9a04      	ldr	r2, [sp, #16]
 8004bd8:	1aeb      	subs	r3, r5, r3
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	ddb5      	ble.n	8004b4a <_dtoa_r+0xaba>
 8004bde:	4659      	mov	r1, fp
 8004be0:	2300      	movs	r3, #0
 8004be2:	220a      	movs	r2, #10
 8004be4:	4620      	mov	r0, r4
 8004be6:	f000 f94b 	bl	8004e80 <__multadd>
 8004bea:	4683      	mov	fp, r0
 8004bec:	e7ea      	b.n	8004bc4 <_dtoa_r+0xb34>
 8004bee:	bf00      	nop
 8004bf0:	08005d54 	.word	0x08005d54
 8004bf4:	08005d78 	.word	0x08005d78

08004bf8 <std>:
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	b510      	push	{r4, lr}
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8004c02:	6083      	str	r3, [r0, #8]
 8004c04:	8181      	strh	r1, [r0, #12]
 8004c06:	6643      	str	r3, [r0, #100]	; 0x64
 8004c08:	81c2      	strh	r2, [r0, #14]
 8004c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c0e:	6183      	str	r3, [r0, #24]
 8004c10:	4619      	mov	r1, r3
 8004c12:	2208      	movs	r2, #8
 8004c14:	305c      	adds	r0, #92	; 0x5c
 8004c16:	f7fe fd3d 	bl	8003694 <memset>
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <std+0x38>)
 8004c1c:	6224      	str	r4, [r4, #32]
 8004c1e:	6263      	str	r3, [r4, #36]	; 0x24
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <std+0x3c>)
 8004c22:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c24:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <std+0x40>)
 8004c26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <std+0x44>)
 8004c2a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c2c:	bd10      	pop	{r4, pc}
 8004c2e:	bf00      	nop
 8004c30:	080057a9 	.word	0x080057a9
 8004c34:	080057cb 	.word	0x080057cb
 8004c38:	08005803 	.word	0x08005803
 8004c3c:	08005827 	.word	0x08005827

08004c40 <_cleanup_r>:
 8004c40:	4901      	ldr	r1, [pc, #4]	; (8004c48 <_cleanup_r+0x8>)
 8004c42:	f000 b885 	b.w	8004d50 <_fwalk_reent>
 8004c46:	bf00      	nop
 8004c48:	08005b01 	.word	0x08005b01

08004c4c <__sfmoreglue>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	2568      	movs	r5, #104	; 0x68
 8004c50:	1e4a      	subs	r2, r1, #1
 8004c52:	4355      	muls	r5, r2
 8004c54:	460e      	mov	r6, r1
 8004c56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c5a:	f000 fbfd 	bl	8005458 <_malloc_r>
 8004c5e:	4604      	mov	r4, r0
 8004c60:	b140      	cbz	r0, 8004c74 <__sfmoreglue+0x28>
 8004c62:	2100      	movs	r1, #0
 8004c64:	e9c0 1600 	strd	r1, r6, [r0]
 8004c68:	300c      	adds	r0, #12
 8004c6a:	60a0      	str	r0, [r4, #8]
 8004c6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c70:	f7fe fd10 	bl	8003694 <memset>
 8004c74:	4620      	mov	r0, r4
 8004c76:	bd70      	pop	{r4, r5, r6, pc}

08004c78 <__sinit>:
 8004c78:	6983      	ldr	r3, [r0, #24]
 8004c7a:	b510      	push	{r4, lr}
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	bb33      	cbnz	r3, 8004cce <__sinit+0x56>
 8004c80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004c84:	6503      	str	r3, [r0, #80]	; 0x50
 8004c86:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <__sinit+0x58>)
 8004c88:	4a12      	ldr	r2, [pc, #72]	; (8004cd4 <__sinit+0x5c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6282      	str	r2, [r0, #40]	; 0x28
 8004c8e:	4298      	cmp	r0, r3
 8004c90:	bf04      	itt	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	6183      	streq	r3, [r0, #24]
 8004c96:	f000 f81f 	bl	8004cd8 <__sfp>
 8004c9a:	6060      	str	r0, [r4, #4]
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f000 f81b 	bl	8004cd8 <__sfp>
 8004ca2:	60a0      	str	r0, [r4, #8]
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f000 f817 	bl	8004cd8 <__sfp>
 8004caa:	2200      	movs	r2, #0
 8004cac:	60e0      	str	r0, [r4, #12]
 8004cae:	2104      	movs	r1, #4
 8004cb0:	6860      	ldr	r0, [r4, #4]
 8004cb2:	f7ff ffa1 	bl	8004bf8 <std>
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	2109      	movs	r1, #9
 8004cba:	68a0      	ldr	r0, [r4, #8]
 8004cbc:	f7ff ff9c 	bl	8004bf8 <std>
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	2112      	movs	r1, #18
 8004cc4:	68e0      	ldr	r0, [r4, #12]
 8004cc6:	f7ff ff97 	bl	8004bf8 <std>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	61a3      	str	r3, [r4, #24]
 8004cce:	bd10      	pop	{r4, pc}
 8004cd0:	08005d40 	.word	0x08005d40
 8004cd4:	08004c41 	.word	0x08004c41

08004cd8 <__sfp>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	4b1b      	ldr	r3, [pc, #108]	; (8004d48 <__sfp+0x70>)
 8004cdc:	4607      	mov	r7, r0
 8004cde:	681e      	ldr	r6, [r3, #0]
 8004ce0:	69b3      	ldr	r3, [r6, #24]
 8004ce2:	b913      	cbnz	r3, 8004cea <__sfp+0x12>
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f7ff ffc7 	bl	8004c78 <__sinit>
 8004cea:	3648      	adds	r6, #72	; 0x48
 8004cec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	d503      	bpl.n	8004cfc <__sfp+0x24>
 8004cf4:	6833      	ldr	r3, [r6, #0]
 8004cf6:	b133      	cbz	r3, 8004d06 <__sfp+0x2e>
 8004cf8:	6836      	ldr	r6, [r6, #0]
 8004cfa:	e7f7      	b.n	8004cec <__sfp+0x14>
 8004cfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d00:	b16d      	cbz	r5, 8004d1e <__sfp+0x46>
 8004d02:	3468      	adds	r4, #104	; 0x68
 8004d04:	e7f4      	b.n	8004cf0 <__sfp+0x18>
 8004d06:	2104      	movs	r1, #4
 8004d08:	4638      	mov	r0, r7
 8004d0a:	f7ff ff9f 	bl	8004c4c <__sfmoreglue>
 8004d0e:	6030      	str	r0, [r6, #0]
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d1f1      	bne.n	8004cf8 <__sfp+0x20>
 8004d14:	230c      	movs	r3, #12
 8004d16:	4604      	mov	r4, r0
 8004d18:	603b      	str	r3, [r7, #0]
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <__sfp+0x74>)
 8004d20:	6665      	str	r5, [r4, #100]	; 0x64
 8004d22:	e9c4 5500 	strd	r5, r5, [r4]
 8004d26:	60a5      	str	r5, [r4, #8]
 8004d28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004d2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004d30:	2208      	movs	r2, #8
 8004d32:	4629      	mov	r1, r5
 8004d34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d38:	f7fe fcac 	bl	8003694 <memset>
 8004d3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d44:	e7e9      	b.n	8004d1a <__sfp+0x42>
 8004d46:	bf00      	nop
 8004d48:	08005d40 	.word	0x08005d40
 8004d4c:	ffff0001 	.word	0xffff0001

08004d50 <_fwalk_reent>:
 8004d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d54:	4680      	mov	r8, r0
 8004d56:	4689      	mov	r9, r1
 8004d58:	2600      	movs	r6, #0
 8004d5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d5e:	b914      	cbnz	r4, 8004d66 <_fwalk_reent+0x16>
 8004d60:	4630      	mov	r0, r6
 8004d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004d6a:	3f01      	subs	r7, #1
 8004d6c:	d501      	bpl.n	8004d72 <_fwalk_reent+0x22>
 8004d6e:	6824      	ldr	r4, [r4, #0]
 8004d70:	e7f5      	b.n	8004d5e <_fwalk_reent+0xe>
 8004d72:	89ab      	ldrh	r3, [r5, #12]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d907      	bls.n	8004d88 <_fwalk_reent+0x38>
 8004d78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	d003      	beq.n	8004d88 <_fwalk_reent+0x38>
 8004d80:	4629      	mov	r1, r5
 8004d82:	4640      	mov	r0, r8
 8004d84:	47c8      	blx	r9
 8004d86:	4306      	orrs	r6, r0
 8004d88:	3568      	adds	r5, #104	; 0x68
 8004d8a:	e7ee      	b.n	8004d6a <_fwalk_reent+0x1a>

08004d8c <_localeconv_r>:
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <_localeconv_r+0x14>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6a18      	ldr	r0, [r3, #32]
 8004d92:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <_localeconv_r+0x18>)
 8004d94:	2800      	cmp	r0, #0
 8004d96:	bf08      	it	eq
 8004d98:	4618      	moveq	r0, r3
 8004d9a:	30f0      	adds	r0, #240	; 0xf0
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	2000000c 	.word	0x2000000c
 8004da4:	20000070 	.word	0x20000070

08004da8 <malloc>:
 8004da8:	4b02      	ldr	r3, [pc, #8]	; (8004db4 <malloc+0xc>)
 8004daa:	4601      	mov	r1, r0
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	f000 bb53 	b.w	8005458 <_malloc_r>
 8004db2:	bf00      	nop
 8004db4:	2000000c 	.word	0x2000000c

08004db8 <memchr>:
 8004db8:	b510      	push	{r4, lr}
 8004dba:	b2c9      	uxtb	r1, r1
 8004dbc:	4402      	add	r2, r0
 8004dbe:	4290      	cmp	r0, r2
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	d101      	bne.n	8004dc8 <memchr+0x10>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e003      	b.n	8004dd0 <memchr+0x18>
 8004dc8:	781c      	ldrb	r4, [r3, #0]
 8004dca:	3001      	adds	r0, #1
 8004dcc:	428c      	cmp	r4, r1
 8004dce:	d1f6      	bne.n	8004dbe <memchr+0x6>
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd10      	pop	{r4, pc}

08004dd4 <memcpy>:
 8004dd4:	b510      	push	{r4, lr}
 8004dd6:	1e43      	subs	r3, r0, #1
 8004dd8:	440a      	add	r2, r1
 8004dda:	4291      	cmp	r1, r2
 8004ddc:	d100      	bne.n	8004de0 <memcpy+0xc>
 8004dde:	bd10      	pop	{r4, pc}
 8004de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004de8:	e7f7      	b.n	8004dda <memcpy+0x6>

08004dea <_Balloc>:
 8004dea:	b570      	push	{r4, r5, r6, lr}
 8004dec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004dee:	4604      	mov	r4, r0
 8004df0:	460e      	mov	r6, r1
 8004df2:	b93d      	cbnz	r5, 8004e04 <_Balloc+0x1a>
 8004df4:	2010      	movs	r0, #16
 8004df6:	f7ff ffd7 	bl	8004da8 <malloc>
 8004dfa:	6260      	str	r0, [r4, #36]	; 0x24
 8004dfc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e00:	6005      	str	r5, [r0, #0]
 8004e02:	60c5      	str	r5, [r0, #12]
 8004e04:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004e06:	68eb      	ldr	r3, [r5, #12]
 8004e08:	b183      	cbz	r3, 8004e2c <_Balloc+0x42>
 8004e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004e12:	b9b8      	cbnz	r0, 8004e44 <_Balloc+0x5a>
 8004e14:	2101      	movs	r1, #1
 8004e16:	fa01 f506 	lsl.w	r5, r1, r6
 8004e1a:	1d6a      	adds	r2, r5, #5
 8004e1c:	0092      	lsls	r2, r2, #2
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f000 fabf 	bl	80053a2 <_calloc_r>
 8004e24:	b160      	cbz	r0, 8004e40 <_Balloc+0x56>
 8004e26:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004e2a:	e00e      	b.n	8004e4a <_Balloc+0x60>
 8004e2c:	2221      	movs	r2, #33	; 0x21
 8004e2e:	2104      	movs	r1, #4
 8004e30:	4620      	mov	r0, r4
 8004e32:	f000 fab6 	bl	80053a2 <_calloc_r>
 8004e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e38:	60e8      	str	r0, [r5, #12]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e4      	bne.n	8004e0a <_Balloc+0x20>
 8004e40:	2000      	movs	r0, #0
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	6802      	ldr	r2, [r0, #0]
 8004e46:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e50:	e7f7      	b.n	8004e42 <_Balloc+0x58>

08004e52 <_Bfree>:
 8004e52:	b570      	push	{r4, r5, r6, lr}
 8004e54:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004e56:	4606      	mov	r6, r0
 8004e58:	460d      	mov	r5, r1
 8004e5a:	b93c      	cbnz	r4, 8004e6c <_Bfree+0x1a>
 8004e5c:	2010      	movs	r0, #16
 8004e5e:	f7ff ffa3 	bl	8004da8 <malloc>
 8004e62:	6270      	str	r0, [r6, #36]	; 0x24
 8004e64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e68:	6004      	str	r4, [r0, #0]
 8004e6a:	60c4      	str	r4, [r0, #12]
 8004e6c:	b13d      	cbz	r5, 8004e7e <_Bfree+0x2c>
 8004e6e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004e70:	686a      	ldr	r2, [r5, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e78:	6029      	str	r1, [r5, #0]
 8004e7a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}

08004e80 <__multadd>:
 8004e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e84:	461f      	mov	r7, r3
 8004e86:	4606      	mov	r6, r0
 8004e88:	460c      	mov	r4, r1
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	690d      	ldr	r5, [r1, #16]
 8004e8e:	f101 0c14 	add.w	ip, r1, #20
 8004e92:	f8dc 0000 	ldr.w	r0, [ip]
 8004e96:	3301      	adds	r3, #1
 8004e98:	b281      	uxth	r1, r0
 8004e9a:	fb02 7101 	mla	r1, r2, r1, r7
 8004e9e:	0c00      	lsrs	r0, r0, #16
 8004ea0:	0c0f      	lsrs	r7, r1, #16
 8004ea2:	fb02 7000 	mla	r0, r2, r0, r7
 8004ea6:	b289      	uxth	r1, r1
 8004ea8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004eac:	429d      	cmp	r5, r3
 8004eae:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004eb2:	f84c 1b04 	str.w	r1, [ip], #4
 8004eb6:	dcec      	bgt.n	8004e92 <__multadd+0x12>
 8004eb8:	b1d7      	cbz	r7, 8004ef0 <__multadd+0x70>
 8004eba:	68a3      	ldr	r3, [r4, #8]
 8004ebc:	42ab      	cmp	r3, r5
 8004ebe:	dc12      	bgt.n	8004ee6 <__multadd+0x66>
 8004ec0:	6861      	ldr	r1, [r4, #4]
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	3101      	adds	r1, #1
 8004ec6:	f7ff ff90 	bl	8004dea <_Balloc>
 8004eca:	4680      	mov	r8, r0
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	f104 010c 	add.w	r1, r4, #12
 8004ed2:	3202      	adds	r2, #2
 8004ed4:	0092      	lsls	r2, r2, #2
 8004ed6:	300c      	adds	r0, #12
 8004ed8:	f7ff ff7c 	bl	8004dd4 <memcpy>
 8004edc:	4621      	mov	r1, r4
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f7ff ffb7 	bl	8004e52 <_Bfree>
 8004ee4:	4644      	mov	r4, r8
 8004ee6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004eea:	3501      	adds	r5, #1
 8004eec:	615f      	str	r7, [r3, #20]
 8004eee:	6125      	str	r5, [r4, #16]
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004ef6 <__hi0bits>:
 8004ef6:	0c02      	lsrs	r2, r0, #16
 8004ef8:	0412      	lsls	r2, r2, #16
 8004efa:	4603      	mov	r3, r0
 8004efc:	b9b2      	cbnz	r2, 8004f2c <__hi0bits+0x36>
 8004efe:	0403      	lsls	r3, r0, #16
 8004f00:	2010      	movs	r0, #16
 8004f02:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004f06:	bf04      	itt	eq
 8004f08:	021b      	lsleq	r3, r3, #8
 8004f0a:	3008      	addeq	r0, #8
 8004f0c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004f10:	bf04      	itt	eq
 8004f12:	011b      	lsleq	r3, r3, #4
 8004f14:	3004      	addeq	r0, #4
 8004f16:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004f1a:	bf04      	itt	eq
 8004f1c:	009b      	lsleq	r3, r3, #2
 8004f1e:	3002      	addeq	r0, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	db06      	blt.n	8004f32 <__hi0bits+0x3c>
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	d503      	bpl.n	8004f30 <__hi0bits+0x3a>
 8004f28:	3001      	adds	r0, #1
 8004f2a:	4770      	bx	lr
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	e7e8      	b.n	8004f02 <__hi0bits+0xc>
 8004f30:	2020      	movs	r0, #32
 8004f32:	4770      	bx	lr

08004f34 <__lo0bits>:
 8004f34:	6803      	ldr	r3, [r0, #0]
 8004f36:	4601      	mov	r1, r0
 8004f38:	f013 0207 	ands.w	r2, r3, #7
 8004f3c:	d00b      	beq.n	8004f56 <__lo0bits+0x22>
 8004f3e:	07da      	lsls	r2, r3, #31
 8004f40:	d423      	bmi.n	8004f8a <__lo0bits+0x56>
 8004f42:	0798      	lsls	r0, r3, #30
 8004f44:	bf49      	itett	mi
 8004f46:	085b      	lsrmi	r3, r3, #1
 8004f48:	089b      	lsrpl	r3, r3, #2
 8004f4a:	2001      	movmi	r0, #1
 8004f4c:	600b      	strmi	r3, [r1, #0]
 8004f4e:	bf5c      	itt	pl
 8004f50:	600b      	strpl	r3, [r1, #0]
 8004f52:	2002      	movpl	r0, #2
 8004f54:	4770      	bx	lr
 8004f56:	b298      	uxth	r0, r3
 8004f58:	b9a8      	cbnz	r0, 8004f86 <__lo0bits+0x52>
 8004f5a:	2010      	movs	r0, #16
 8004f5c:	0c1b      	lsrs	r3, r3, #16
 8004f5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004f62:	bf04      	itt	eq
 8004f64:	0a1b      	lsreq	r3, r3, #8
 8004f66:	3008      	addeq	r0, #8
 8004f68:	071a      	lsls	r2, r3, #28
 8004f6a:	bf04      	itt	eq
 8004f6c:	091b      	lsreq	r3, r3, #4
 8004f6e:	3004      	addeq	r0, #4
 8004f70:	079a      	lsls	r2, r3, #30
 8004f72:	bf04      	itt	eq
 8004f74:	089b      	lsreq	r3, r3, #2
 8004f76:	3002      	addeq	r0, #2
 8004f78:	07da      	lsls	r2, r3, #31
 8004f7a:	d402      	bmi.n	8004f82 <__lo0bits+0x4e>
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	d006      	beq.n	8004f8e <__lo0bits+0x5a>
 8004f80:	3001      	adds	r0, #1
 8004f82:	600b      	str	r3, [r1, #0]
 8004f84:	4770      	bx	lr
 8004f86:	4610      	mov	r0, r2
 8004f88:	e7e9      	b.n	8004f5e <__lo0bits+0x2a>
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	4770      	bx	lr
 8004f8e:	2020      	movs	r0, #32
 8004f90:	4770      	bx	lr

08004f92 <__i2b>:
 8004f92:	b510      	push	{r4, lr}
 8004f94:	460c      	mov	r4, r1
 8004f96:	2101      	movs	r1, #1
 8004f98:	f7ff ff27 	bl	8004dea <_Balloc>
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	6144      	str	r4, [r0, #20]
 8004fa0:	6102      	str	r2, [r0, #16]
 8004fa2:	bd10      	pop	{r4, pc}

08004fa4 <__multiply>:
 8004fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa8:	4614      	mov	r4, r2
 8004faa:	690a      	ldr	r2, [r1, #16]
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	4688      	mov	r8, r1
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	bfbe      	ittt	lt
 8004fb4:	460b      	movlt	r3, r1
 8004fb6:	46a0      	movlt	r8, r4
 8004fb8:	461c      	movlt	r4, r3
 8004fba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004fbe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004fc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004fc6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004fca:	eb07 0609 	add.w	r6, r7, r9
 8004fce:	42b3      	cmp	r3, r6
 8004fd0:	bfb8      	it	lt
 8004fd2:	3101      	addlt	r1, #1
 8004fd4:	f7ff ff09 	bl	8004dea <_Balloc>
 8004fd8:	f100 0514 	add.w	r5, r0, #20
 8004fdc:	462b      	mov	r3, r5
 8004fde:	2200      	movs	r2, #0
 8004fe0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004fe4:	4573      	cmp	r3, lr
 8004fe6:	d316      	bcc.n	8005016 <__multiply+0x72>
 8004fe8:	f104 0214 	add.w	r2, r4, #20
 8004fec:	f108 0114 	add.w	r1, r8, #20
 8004ff0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004ff4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	9b00      	ldr	r3, [sp, #0]
 8004ffc:	9201      	str	r2, [sp, #4]
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d80c      	bhi.n	800501c <__multiply+0x78>
 8005002:	2e00      	cmp	r6, #0
 8005004:	dd03      	ble.n	800500e <__multiply+0x6a>
 8005006:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800500a:	2b00      	cmp	r3, #0
 800500c:	d05d      	beq.n	80050ca <__multiply+0x126>
 800500e:	6106      	str	r6, [r0, #16]
 8005010:	b003      	add	sp, #12
 8005012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005016:	f843 2b04 	str.w	r2, [r3], #4
 800501a:	e7e3      	b.n	8004fe4 <__multiply+0x40>
 800501c:	f8b2 b000 	ldrh.w	fp, [r2]
 8005020:	f1bb 0f00 	cmp.w	fp, #0
 8005024:	d023      	beq.n	800506e <__multiply+0xca>
 8005026:	4689      	mov	r9, r1
 8005028:	46ac      	mov	ip, r5
 800502a:	f04f 0800 	mov.w	r8, #0
 800502e:	f859 4b04 	ldr.w	r4, [r9], #4
 8005032:	f8dc a000 	ldr.w	sl, [ip]
 8005036:	b2a3      	uxth	r3, r4
 8005038:	fa1f fa8a 	uxth.w	sl, sl
 800503c:	fb0b a303 	mla	r3, fp, r3, sl
 8005040:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005044:	f8dc 4000 	ldr.w	r4, [ip]
 8005048:	4443      	add	r3, r8
 800504a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800504e:	fb0b 840a 	mla	r4, fp, sl, r8
 8005052:	46e2      	mov	sl, ip
 8005054:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005058:	b29b      	uxth	r3, r3
 800505a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800505e:	454f      	cmp	r7, r9
 8005060:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005064:	f84a 3b04 	str.w	r3, [sl], #4
 8005068:	d82b      	bhi.n	80050c2 <__multiply+0x11e>
 800506a:	f8cc 8004 	str.w	r8, [ip, #4]
 800506e:	9b01      	ldr	r3, [sp, #4]
 8005070:	3204      	adds	r2, #4
 8005072:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005076:	f1ba 0f00 	cmp.w	sl, #0
 800507a:	d020      	beq.n	80050be <__multiply+0x11a>
 800507c:	4689      	mov	r9, r1
 800507e:	46a8      	mov	r8, r5
 8005080:	f04f 0b00 	mov.w	fp, #0
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	f8b9 c000 	ldrh.w	ip, [r9]
 800508a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800508e:	b29b      	uxth	r3, r3
 8005090:	fb0a 440c 	mla	r4, sl, ip, r4
 8005094:	46c4      	mov	ip, r8
 8005096:	445c      	add	r4, fp
 8005098:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800509c:	f84c 3b04 	str.w	r3, [ip], #4
 80050a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80050a4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80050a8:	0c1b      	lsrs	r3, r3, #16
 80050aa:	fb0a b303 	mla	r3, sl, r3, fp
 80050ae:	454f      	cmp	r7, r9
 80050b0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80050b4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80050b8:	d805      	bhi.n	80050c6 <__multiply+0x122>
 80050ba:	f8c8 3004 	str.w	r3, [r8, #4]
 80050be:	3504      	adds	r5, #4
 80050c0:	e79b      	b.n	8004ffa <__multiply+0x56>
 80050c2:	46d4      	mov	ip, sl
 80050c4:	e7b3      	b.n	800502e <__multiply+0x8a>
 80050c6:	46e0      	mov	r8, ip
 80050c8:	e7dd      	b.n	8005086 <__multiply+0xe2>
 80050ca:	3e01      	subs	r6, #1
 80050cc:	e799      	b.n	8005002 <__multiply+0x5e>
	...

080050d0 <__pow5mult>:
 80050d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050d4:	4615      	mov	r5, r2
 80050d6:	f012 0203 	ands.w	r2, r2, #3
 80050da:	4606      	mov	r6, r0
 80050dc:	460f      	mov	r7, r1
 80050de:	d007      	beq.n	80050f0 <__pow5mult+0x20>
 80050e0:	4c21      	ldr	r4, [pc, #132]	; (8005168 <__pow5mult+0x98>)
 80050e2:	3a01      	subs	r2, #1
 80050e4:	2300      	movs	r3, #0
 80050e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80050ea:	f7ff fec9 	bl	8004e80 <__multadd>
 80050ee:	4607      	mov	r7, r0
 80050f0:	10ad      	asrs	r5, r5, #2
 80050f2:	d035      	beq.n	8005160 <__pow5mult+0x90>
 80050f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80050f6:	b93c      	cbnz	r4, 8005108 <__pow5mult+0x38>
 80050f8:	2010      	movs	r0, #16
 80050fa:	f7ff fe55 	bl	8004da8 <malloc>
 80050fe:	6270      	str	r0, [r6, #36]	; 0x24
 8005100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005104:	6004      	str	r4, [r0, #0]
 8005106:	60c4      	str	r4, [r0, #12]
 8005108:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800510c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005110:	b94c      	cbnz	r4, 8005126 <__pow5mult+0x56>
 8005112:	f240 2171 	movw	r1, #625	; 0x271
 8005116:	4630      	mov	r0, r6
 8005118:	f7ff ff3b 	bl	8004f92 <__i2b>
 800511c:	2300      	movs	r3, #0
 800511e:	4604      	mov	r4, r0
 8005120:	f8c8 0008 	str.w	r0, [r8, #8]
 8005124:	6003      	str	r3, [r0, #0]
 8005126:	f04f 0800 	mov.w	r8, #0
 800512a:	07eb      	lsls	r3, r5, #31
 800512c:	d50a      	bpl.n	8005144 <__pow5mult+0x74>
 800512e:	4639      	mov	r1, r7
 8005130:	4622      	mov	r2, r4
 8005132:	4630      	mov	r0, r6
 8005134:	f7ff ff36 	bl	8004fa4 <__multiply>
 8005138:	4681      	mov	r9, r0
 800513a:	4639      	mov	r1, r7
 800513c:	4630      	mov	r0, r6
 800513e:	f7ff fe88 	bl	8004e52 <_Bfree>
 8005142:	464f      	mov	r7, r9
 8005144:	106d      	asrs	r5, r5, #1
 8005146:	d00b      	beq.n	8005160 <__pow5mult+0x90>
 8005148:	6820      	ldr	r0, [r4, #0]
 800514a:	b938      	cbnz	r0, 800515c <__pow5mult+0x8c>
 800514c:	4622      	mov	r2, r4
 800514e:	4621      	mov	r1, r4
 8005150:	4630      	mov	r0, r6
 8005152:	f7ff ff27 	bl	8004fa4 <__multiply>
 8005156:	6020      	str	r0, [r4, #0]
 8005158:	f8c0 8000 	str.w	r8, [r0]
 800515c:	4604      	mov	r4, r0
 800515e:	e7e4      	b.n	800512a <__pow5mult+0x5a>
 8005160:	4638      	mov	r0, r7
 8005162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005166:	bf00      	nop
 8005168:	08005ed8 	.word	0x08005ed8

0800516c <__lshift>:
 800516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	460c      	mov	r4, r1
 8005172:	4607      	mov	r7, r0
 8005174:	4616      	mov	r6, r2
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800517c:	eb0a 0903 	add.w	r9, sl, r3
 8005180:	6849      	ldr	r1, [r1, #4]
 8005182:	68a3      	ldr	r3, [r4, #8]
 8005184:	f109 0501 	add.w	r5, r9, #1
 8005188:	42ab      	cmp	r3, r5
 800518a:	db32      	blt.n	80051f2 <__lshift+0x86>
 800518c:	4638      	mov	r0, r7
 800518e:	f7ff fe2c 	bl	8004dea <_Balloc>
 8005192:	2300      	movs	r3, #0
 8005194:	4680      	mov	r8, r0
 8005196:	461a      	mov	r2, r3
 8005198:	f100 0114 	add.w	r1, r0, #20
 800519c:	4553      	cmp	r3, sl
 800519e:	db2b      	blt.n	80051f8 <__lshift+0x8c>
 80051a0:	6920      	ldr	r0, [r4, #16]
 80051a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051a6:	f104 0314 	add.w	r3, r4, #20
 80051aa:	f016 021f 	ands.w	r2, r6, #31
 80051ae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80051b2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80051b6:	d025      	beq.n	8005204 <__lshift+0x98>
 80051b8:	2000      	movs	r0, #0
 80051ba:	f1c2 0e20 	rsb	lr, r2, #32
 80051be:	468a      	mov	sl, r1
 80051c0:	681e      	ldr	r6, [r3, #0]
 80051c2:	4096      	lsls	r6, r2
 80051c4:	4330      	orrs	r0, r6
 80051c6:	f84a 0b04 	str.w	r0, [sl], #4
 80051ca:	f853 0b04 	ldr.w	r0, [r3], #4
 80051ce:	459c      	cmp	ip, r3
 80051d0:	fa20 f00e 	lsr.w	r0, r0, lr
 80051d4:	d814      	bhi.n	8005200 <__lshift+0x94>
 80051d6:	6048      	str	r0, [r1, #4]
 80051d8:	b108      	cbz	r0, 80051de <__lshift+0x72>
 80051da:	f109 0502 	add.w	r5, r9, #2
 80051de:	3d01      	subs	r5, #1
 80051e0:	4638      	mov	r0, r7
 80051e2:	f8c8 5010 	str.w	r5, [r8, #16]
 80051e6:	4621      	mov	r1, r4
 80051e8:	f7ff fe33 	bl	8004e52 <_Bfree>
 80051ec:	4640      	mov	r0, r8
 80051ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f2:	3101      	adds	r1, #1
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	e7c7      	b.n	8005188 <__lshift+0x1c>
 80051f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80051fc:	3301      	adds	r3, #1
 80051fe:	e7cd      	b.n	800519c <__lshift+0x30>
 8005200:	4651      	mov	r1, sl
 8005202:	e7dc      	b.n	80051be <__lshift+0x52>
 8005204:	3904      	subs	r1, #4
 8005206:	f853 2b04 	ldr.w	r2, [r3], #4
 800520a:	459c      	cmp	ip, r3
 800520c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005210:	d8f9      	bhi.n	8005206 <__lshift+0x9a>
 8005212:	e7e4      	b.n	80051de <__lshift+0x72>

08005214 <__mcmp>:
 8005214:	6903      	ldr	r3, [r0, #16]
 8005216:	690a      	ldr	r2, [r1, #16]
 8005218:	b530      	push	{r4, r5, lr}
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	d10c      	bne.n	8005238 <__mcmp+0x24>
 800521e:	0092      	lsls	r2, r2, #2
 8005220:	3014      	adds	r0, #20
 8005222:	3114      	adds	r1, #20
 8005224:	1884      	adds	r4, r0, r2
 8005226:	4411      	add	r1, r2
 8005228:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800522c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005230:	4295      	cmp	r5, r2
 8005232:	d003      	beq.n	800523c <__mcmp+0x28>
 8005234:	d305      	bcc.n	8005242 <__mcmp+0x2e>
 8005236:	2301      	movs	r3, #1
 8005238:	4618      	mov	r0, r3
 800523a:	bd30      	pop	{r4, r5, pc}
 800523c:	42a0      	cmp	r0, r4
 800523e:	d3f3      	bcc.n	8005228 <__mcmp+0x14>
 8005240:	e7fa      	b.n	8005238 <__mcmp+0x24>
 8005242:	f04f 33ff 	mov.w	r3, #4294967295
 8005246:	e7f7      	b.n	8005238 <__mcmp+0x24>

08005248 <__mdiff>:
 8005248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800524c:	460d      	mov	r5, r1
 800524e:	4607      	mov	r7, r0
 8005250:	4611      	mov	r1, r2
 8005252:	4628      	mov	r0, r5
 8005254:	4614      	mov	r4, r2
 8005256:	f7ff ffdd 	bl	8005214 <__mcmp>
 800525a:	1e06      	subs	r6, r0, #0
 800525c:	d108      	bne.n	8005270 <__mdiff+0x28>
 800525e:	4631      	mov	r1, r6
 8005260:	4638      	mov	r0, r7
 8005262:	f7ff fdc2 	bl	8004dea <_Balloc>
 8005266:	2301      	movs	r3, #1
 8005268:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800526c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005270:	bfa4      	itt	ge
 8005272:	4623      	movge	r3, r4
 8005274:	462c      	movge	r4, r5
 8005276:	4638      	mov	r0, r7
 8005278:	6861      	ldr	r1, [r4, #4]
 800527a:	bfa6      	itte	ge
 800527c:	461d      	movge	r5, r3
 800527e:	2600      	movge	r6, #0
 8005280:	2601      	movlt	r6, #1
 8005282:	f7ff fdb2 	bl	8004dea <_Balloc>
 8005286:	f04f 0e00 	mov.w	lr, #0
 800528a:	60c6      	str	r6, [r0, #12]
 800528c:	692b      	ldr	r3, [r5, #16]
 800528e:	6926      	ldr	r6, [r4, #16]
 8005290:	f104 0214 	add.w	r2, r4, #20
 8005294:	f105 0914 	add.w	r9, r5, #20
 8005298:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800529c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80052a0:	f100 0114 	add.w	r1, r0, #20
 80052a4:	f852 ab04 	ldr.w	sl, [r2], #4
 80052a8:	f859 5b04 	ldr.w	r5, [r9], #4
 80052ac:	fa1f f38a 	uxth.w	r3, sl
 80052b0:	4473      	add	r3, lr
 80052b2:	b2ac      	uxth	r4, r5
 80052b4:	1b1b      	subs	r3, r3, r4
 80052b6:	0c2c      	lsrs	r4, r5, #16
 80052b8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80052bc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80052c6:	45c8      	cmp	r8, r9
 80052c8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80052cc:	4694      	mov	ip, r2
 80052ce:	f841 4b04 	str.w	r4, [r1], #4
 80052d2:	d8e7      	bhi.n	80052a4 <__mdiff+0x5c>
 80052d4:	45bc      	cmp	ip, r7
 80052d6:	d304      	bcc.n	80052e2 <__mdiff+0x9a>
 80052d8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80052dc:	b183      	cbz	r3, 8005300 <__mdiff+0xb8>
 80052de:	6106      	str	r6, [r0, #16]
 80052e0:	e7c4      	b.n	800526c <__mdiff+0x24>
 80052e2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80052e6:	b2a2      	uxth	r2, r4
 80052e8:	4472      	add	r2, lr
 80052ea:	1413      	asrs	r3, r2, #16
 80052ec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80052f0:	b292      	uxth	r2, r2
 80052f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80052f6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80052fa:	f841 2b04 	str.w	r2, [r1], #4
 80052fe:	e7e9      	b.n	80052d4 <__mdiff+0x8c>
 8005300:	3e01      	subs	r6, #1
 8005302:	e7e9      	b.n	80052d8 <__mdiff+0x90>

08005304 <__d2b>:
 8005304:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005308:	461c      	mov	r4, r3
 800530a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800530e:	2101      	movs	r1, #1
 8005310:	4690      	mov	r8, r2
 8005312:	f7ff fd6a 	bl	8004dea <_Balloc>
 8005316:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800531a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800531e:	4607      	mov	r7, r0
 8005320:	bb34      	cbnz	r4, 8005370 <__d2b+0x6c>
 8005322:	9201      	str	r2, [sp, #4]
 8005324:	f1b8 0200 	subs.w	r2, r8, #0
 8005328:	d027      	beq.n	800537a <__d2b+0x76>
 800532a:	a802      	add	r0, sp, #8
 800532c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005330:	f7ff fe00 	bl	8004f34 <__lo0bits>
 8005334:	9900      	ldr	r1, [sp, #0]
 8005336:	b1f0      	cbz	r0, 8005376 <__d2b+0x72>
 8005338:	9a01      	ldr	r2, [sp, #4]
 800533a:	f1c0 0320 	rsb	r3, r0, #32
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	430b      	orrs	r3, r1
 8005344:	40c2      	lsrs	r2, r0
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	9201      	str	r2, [sp, #4]
 800534a:	9b01      	ldr	r3, [sp, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	bf14      	ite	ne
 8005350:	2102      	movne	r1, #2
 8005352:	2101      	moveq	r1, #1
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	6139      	str	r1, [r7, #16]
 8005358:	b1c4      	cbz	r4, 800538c <__d2b+0x88>
 800535a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800535e:	4404      	add	r4, r0
 8005360:	6034      	str	r4, [r6, #0]
 8005362:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005366:	6028      	str	r0, [r5, #0]
 8005368:	4638      	mov	r0, r7
 800536a:	b002      	add	sp, #8
 800536c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005370:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005374:	e7d5      	b.n	8005322 <__d2b+0x1e>
 8005376:	6179      	str	r1, [r7, #20]
 8005378:	e7e7      	b.n	800534a <__d2b+0x46>
 800537a:	a801      	add	r0, sp, #4
 800537c:	f7ff fdda 	bl	8004f34 <__lo0bits>
 8005380:	2101      	movs	r1, #1
 8005382:	9b01      	ldr	r3, [sp, #4]
 8005384:	6139      	str	r1, [r7, #16]
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	3020      	adds	r0, #32
 800538a:	e7e5      	b.n	8005358 <__d2b+0x54>
 800538c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005390:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005394:	6030      	str	r0, [r6, #0]
 8005396:	6918      	ldr	r0, [r3, #16]
 8005398:	f7ff fdad 	bl	8004ef6 <__hi0bits>
 800539c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80053a0:	e7e1      	b.n	8005366 <__d2b+0x62>

080053a2 <_calloc_r>:
 80053a2:	b538      	push	{r3, r4, r5, lr}
 80053a4:	fb02 f401 	mul.w	r4, r2, r1
 80053a8:	4621      	mov	r1, r4
 80053aa:	f000 f855 	bl	8005458 <_malloc_r>
 80053ae:	4605      	mov	r5, r0
 80053b0:	b118      	cbz	r0, 80053ba <_calloc_r+0x18>
 80053b2:	4622      	mov	r2, r4
 80053b4:	2100      	movs	r1, #0
 80053b6:	f7fe f96d 	bl	8003694 <memset>
 80053ba:	4628      	mov	r0, r5
 80053bc:	bd38      	pop	{r3, r4, r5, pc}
	...

080053c0 <_free_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4605      	mov	r5, r0
 80053c4:	2900      	cmp	r1, #0
 80053c6:	d043      	beq.n	8005450 <_free_r+0x90>
 80053c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053cc:	1f0c      	subs	r4, r1, #4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	bfb8      	it	lt
 80053d2:	18e4      	addlt	r4, r4, r3
 80053d4:	f000 fc46 	bl	8005c64 <__malloc_lock>
 80053d8:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <_free_r+0x94>)
 80053da:	6813      	ldr	r3, [r2, #0]
 80053dc:	4610      	mov	r0, r2
 80053de:	b933      	cbnz	r3, 80053ee <_free_r+0x2e>
 80053e0:	6063      	str	r3, [r4, #4]
 80053e2:	6014      	str	r4, [r2, #0]
 80053e4:	4628      	mov	r0, r5
 80053e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053ea:	f000 bc3c 	b.w	8005c66 <__malloc_unlock>
 80053ee:	42a3      	cmp	r3, r4
 80053f0:	d90b      	bls.n	800540a <_free_r+0x4a>
 80053f2:	6821      	ldr	r1, [r4, #0]
 80053f4:	1862      	adds	r2, r4, r1
 80053f6:	4293      	cmp	r3, r2
 80053f8:	bf01      	itttt	eq
 80053fa:	681a      	ldreq	r2, [r3, #0]
 80053fc:	685b      	ldreq	r3, [r3, #4]
 80053fe:	1852      	addeq	r2, r2, r1
 8005400:	6022      	streq	r2, [r4, #0]
 8005402:	6063      	str	r3, [r4, #4]
 8005404:	6004      	str	r4, [r0, #0]
 8005406:	e7ed      	b.n	80053e4 <_free_r+0x24>
 8005408:	4613      	mov	r3, r2
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	b10a      	cbz	r2, 8005412 <_free_r+0x52>
 800540e:	42a2      	cmp	r2, r4
 8005410:	d9fa      	bls.n	8005408 <_free_r+0x48>
 8005412:	6819      	ldr	r1, [r3, #0]
 8005414:	1858      	adds	r0, r3, r1
 8005416:	42a0      	cmp	r0, r4
 8005418:	d10b      	bne.n	8005432 <_free_r+0x72>
 800541a:	6820      	ldr	r0, [r4, #0]
 800541c:	4401      	add	r1, r0
 800541e:	1858      	adds	r0, r3, r1
 8005420:	4282      	cmp	r2, r0
 8005422:	6019      	str	r1, [r3, #0]
 8005424:	d1de      	bne.n	80053e4 <_free_r+0x24>
 8005426:	6810      	ldr	r0, [r2, #0]
 8005428:	6852      	ldr	r2, [r2, #4]
 800542a:	4401      	add	r1, r0
 800542c:	6019      	str	r1, [r3, #0]
 800542e:	605a      	str	r2, [r3, #4]
 8005430:	e7d8      	b.n	80053e4 <_free_r+0x24>
 8005432:	d902      	bls.n	800543a <_free_r+0x7a>
 8005434:	230c      	movs	r3, #12
 8005436:	602b      	str	r3, [r5, #0]
 8005438:	e7d4      	b.n	80053e4 <_free_r+0x24>
 800543a:	6820      	ldr	r0, [r4, #0]
 800543c:	1821      	adds	r1, r4, r0
 800543e:	428a      	cmp	r2, r1
 8005440:	bf01      	itttt	eq
 8005442:	6811      	ldreq	r1, [r2, #0]
 8005444:	6852      	ldreq	r2, [r2, #4]
 8005446:	1809      	addeq	r1, r1, r0
 8005448:	6021      	streq	r1, [r4, #0]
 800544a:	6062      	str	r2, [r4, #4]
 800544c:	605c      	str	r4, [r3, #4]
 800544e:	e7c9      	b.n	80053e4 <_free_r+0x24>
 8005450:	bd38      	pop	{r3, r4, r5, pc}
 8005452:	bf00      	nop
 8005454:	200001fc 	.word	0x200001fc

08005458 <_malloc_r>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	1ccd      	adds	r5, r1, #3
 800545c:	f025 0503 	bic.w	r5, r5, #3
 8005460:	3508      	adds	r5, #8
 8005462:	2d0c      	cmp	r5, #12
 8005464:	bf38      	it	cc
 8005466:	250c      	movcc	r5, #12
 8005468:	2d00      	cmp	r5, #0
 800546a:	4606      	mov	r6, r0
 800546c:	db01      	blt.n	8005472 <_malloc_r+0x1a>
 800546e:	42a9      	cmp	r1, r5
 8005470:	d903      	bls.n	800547a <_malloc_r+0x22>
 8005472:	230c      	movs	r3, #12
 8005474:	6033      	str	r3, [r6, #0]
 8005476:	2000      	movs	r0, #0
 8005478:	bd70      	pop	{r4, r5, r6, pc}
 800547a:	f000 fbf3 	bl	8005c64 <__malloc_lock>
 800547e:	4a21      	ldr	r2, [pc, #132]	; (8005504 <_malloc_r+0xac>)
 8005480:	6814      	ldr	r4, [r2, #0]
 8005482:	4621      	mov	r1, r4
 8005484:	b991      	cbnz	r1, 80054ac <_malloc_r+0x54>
 8005486:	4c20      	ldr	r4, [pc, #128]	; (8005508 <_malloc_r+0xb0>)
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	b91b      	cbnz	r3, 8005494 <_malloc_r+0x3c>
 800548c:	4630      	mov	r0, r6
 800548e:	f000 f97b 	bl	8005788 <_sbrk_r>
 8005492:	6020      	str	r0, [r4, #0]
 8005494:	4629      	mov	r1, r5
 8005496:	4630      	mov	r0, r6
 8005498:	f000 f976 	bl	8005788 <_sbrk_r>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d124      	bne.n	80054ea <_malloc_r+0x92>
 80054a0:	230c      	movs	r3, #12
 80054a2:	4630      	mov	r0, r6
 80054a4:	6033      	str	r3, [r6, #0]
 80054a6:	f000 fbde 	bl	8005c66 <__malloc_unlock>
 80054aa:	e7e4      	b.n	8005476 <_malloc_r+0x1e>
 80054ac:	680b      	ldr	r3, [r1, #0]
 80054ae:	1b5b      	subs	r3, r3, r5
 80054b0:	d418      	bmi.n	80054e4 <_malloc_r+0x8c>
 80054b2:	2b0b      	cmp	r3, #11
 80054b4:	d90f      	bls.n	80054d6 <_malloc_r+0x7e>
 80054b6:	600b      	str	r3, [r1, #0]
 80054b8:	18cc      	adds	r4, r1, r3
 80054ba:	50cd      	str	r5, [r1, r3]
 80054bc:	4630      	mov	r0, r6
 80054be:	f000 fbd2 	bl	8005c66 <__malloc_unlock>
 80054c2:	f104 000b 	add.w	r0, r4, #11
 80054c6:	1d23      	adds	r3, r4, #4
 80054c8:	f020 0007 	bic.w	r0, r0, #7
 80054cc:	1ac3      	subs	r3, r0, r3
 80054ce:	d0d3      	beq.n	8005478 <_malloc_r+0x20>
 80054d0:	425a      	negs	r2, r3
 80054d2:	50e2      	str	r2, [r4, r3]
 80054d4:	e7d0      	b.n	8005478 <_malloc_r+0x20>
 80054d6:	684b      	ldr	r3, [r1, #4]
 80054d8:	428c      	cmp	r4, r1
 80054da:	bf16      	itet	ne
 80054dc:	6063      	strne	r3, [r4, #4]
 80054de:	6013      	streq	r3, [r2, #0]
 80054e0:	460c      	movne	r4, r1
 80054e2:	e7eb      	b.n	80054bc <_malloc_r+0x64>
 80054e4:	460c      	mov	r4, r1
 80054e6:	6849      	ldr	r1, [r1, #4]
 80054e8:	e7cc      	b.n	8005484 <_malloc_r+0x2c>
 80054ea:	1cc4      	adds	r4, r0, #3
 80054ec:	f024 0403 	bic.w	r4, r4, #3
 80054f0:	42a0      	cmp	r0, r4
 80054f2:	d005      	beq.n	8005500 <_malloc_r+0xa8>
 80054f4:	1a21      	subs	r1, r4, r0
 80054f6:	4630      	mov	r0, r6
 80054f8:	f000 f946 	bl	8005788 <_sbrk_r>
 80054fc:	3001      	adds	r0, #1
 80054fe:	d0cf      	beq.n	80054a0 <_malloc_r+0x48>
 8005500:	6025      	str	r5, [r4, #0]
 8005502:	e7db      	b.n	80054bc <_malloc_r+0x64>
 8005504:	200001fc 	.word	0x200001fc
 8005508:	20000200 	.word	0x20000200

0800550c <__sfputc_r>:
 800550c:	6893      	ldr	r3, [r2, #8]
 800550e:	b410      	push	{r4}
 8005510:	3b01      	subs	r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	6093      	str	r3, [r2, #8]
 8005516:	da07      	bge.n	8005528 <__sfputc_r+0x1c>
 8005518:	6994      	ldr	r4, [r2, #24]
 800551a:	42a3      	cmp	r3, r4
 800551c:	db01      	blt.n	8005522 <__sfputc_r+0x16>
 800551e:	290a      	cmp	r1, #10
 8005520:	d102      	bne.n	8005528 <__sfputc_r+0x1c>
 8005522:	bc10      	pop	{r4}
 8005524:	f000 b984 	b.w	8005830 <__swbuf_r>
 8005528:	6813      	ldr	r3, [r2, #0]
 800552a:	1c58      	adds	r0, r3, #1
 800552c:	6010      	str	r0, [r2, #0]
 800552e:	7019      	strb	r1, [r3, #0]
 8005530:	4608      	mov	r0, r1
 8005532:	bc10      	pop	{r4}
 8005534:	4770      	bx	lr

08005536 <__sfputs_r>:
 8005536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005538:	4606      	mov	r6, r0
 800553a:	460f      	mov	r7, r1
 800553c:	4614      	mov	r4, r2
 800553e:	18d5      	adds	r5, r2, r3
 8005540:	42ac      	cmp	r4, r5
 8005542:	d101      	bne.n	8005548 <__sfputs_r+0x12>
 8005544:	2000      	movs	r0, #0
 8005546:	e007      	b.n	8005558 <__sfputs_r+0x22>
 8005548:	463a      	mov	r2, r7
 800554a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800554e:	4630      	mov	r0, r6
 8005550:	f7ff ffdc 	bl	800550c <__sfputc_r>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d1f3      	bne.n	8005540 <__sfputs_r+0xa>
 8005558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800555c <_vfiprintf_r>:
 800555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005560:	460c      	mov	r4, r1
 8005562:	b09d      	sub	sp, #116	; 0x74
 8005564:	4617      	mov	r7, r2
 8005566:	461d      	mov	r5, r3
 8005568:	4606      	mov	r6, r0
 800556a:	b118      	cbz	r0, 8005574 <_vfiprintf_r+0x18>
 800556c:	6983      	ldr	r3, [r0, #24]
 800556e:	b90b      	cbnz	r3, 8005574 <_vfiprintf_r+0x18>
 8005570:	f7ff fb82 	bl	8004c78 <__sinit>
 8005574:	4b7c      	ldr	r3, [pc, #496]	; (8005768 <_vfiprintf_r+0x20c>)
 8005576:	429c      	cmp	r4, r3
 8005578:	d158      	bne.n	800562c <_vfiprintf_r+0xd0>
 800557a:	6874      	ldr	r4, [r6, #4]
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	0718      	lsls	r0, r3, #28
 8005580:	d55e      	bpl.n	8005640 <_vfiprintf_r+0xe4>
 8005582:	6923      	ldr	r3, [r4, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d05b      	beq.n	8005640 <_vfiprintf_r+0xe4>
 8005588:	2300      	movs	r3, #0
 800558a:	9309      	str	r3, [sp, #36]	; 0x24
 800558c:	2320      	movs	r3, #32
 800558e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005592:	2330      	movs	r3, #48	; 0x30
 8005594:	f04f 0b01 	mov.w	fp, #1
 8005598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800559c:	9503      	str	r5, [sp, #12]
 800559e:	46b8      	mov	r8, r7
 80055a0:	4645      	mov	r5, r8
 80055a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80055a6:	b10b      	cbz	r3, 80055ac <_vfiprintf_r+0x50>
 80055a8:	2b25      	cmp	r3, #37	; 0x25
 80055aa:	d154      	bne.n	8005656 <_vfiprintf_r+0xfa>
 80055ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80055b0:	d00b      	beq.n	80055ca <_vfiprintf_r+0x6e>
 80055b2:	4653      	mov	r3, sl
 80055b4:	463a      	mov	r2, r7
 80055b6:	4621      	mov	r1, r4
 80055b8:	4630      	mov	r0, r6
 80055ba:	f7ff ffbc 	bl	8005536 <__sfputs_r>
 80055be:	3001      	adds	r0, #1
 80055c0:	f000 80c2 	beq.w	8005748 <_vfiprintf_r+0x1ec>
 80055c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c6:	4453      	add	r3, sl
 80055c8:	9309      	str	r3, [sp, #36]	; 0x24
 80055ca:	f898 3000 	ldrb.w	r3, [r8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 80ba 	beq.w	8005748 <_vfiprintf_r+0x1ec>
 80055d4:	2300      	movs	r3, #0
 80055d6:	f04f 32ff 	mov.w	r2, #4294967295
 80055da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055de:	9304      	str	r3, [sp, #16]
 80055e0:	9307      	str	r3, [sp, #28]
 80055e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055e6:	931a      	str	r3, [sp, #104]	; 0x68
 80055e8:	46a8      	mov	r8, r5
 80055ea:	2205      	movs	r2, #5
 80055ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 80055f0:	485e      	ldr	r0, [pc, #376]	; (800576c <_vfiprintf_r+0x210>)
 80055f2:	f7ff fbe1 	bl	8004db8 <memchr>
 80055f6:	9b04      	ldr	r3, [sp, #16]
 80055f8:	bb78      	cbnz	r0, 800565a <_vfiprintf_r+0xfe>
 80055fa:	06d9      	lsls	r1, r3, #27
 80055fc:	bf44      	itt	mi
 80055fe:	2220      	movmi	r2, #32
 8005600:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005604:	071a      	lsls	r2, r3, #28
 8005606:	bf44      	itt	mi
 8005608:	222b      	movmi	r2, #43	; 0x2b
 800560a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800560e:	782a      	ldrb	r2, [r5, #0]
 8005610:	2a2a      	cmp	r2, #42	; 0x2a
 8005612:	d02a      	beq.n	800566a <_vfiprintf_r+0x10e>
 8005614:	46a8      	mov	r8, r5
 8005616:	2000      	movs	r0, #0
 8005618:	250a      	movs	r5, #10
 800561a:	9a07      	ldr	r2, [sp, #28]
 800561c:	4641      	mov	r1, r8
 800561e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005622:	3b30      	subs	r3, #48	; 0x30
 8005624:	2b09      	cmp	r3, #9
 8005626:	d969      	bls.n	80056fc <_vfiprintf_r+0x1a0>
 8005628:	b360      	cbz	r0, 8005684 <_vfiprintf_r+0x128>
 800562a:	e024      	b.n	8005676 <_vfiprintf_r+0x11a>
 800562c:	4b50      	ldr	r3, [pc, #320]	; (8005770 <_vfiprintf_r+0x214>)
 800562e:	429c      	cmp	r4, r3
 8005630:	d101      	bne.n	8005636 <_vfiprintf_r+0xda>
 8005632:	68b4      	ldr	r4, [r6, #8]
 8005634:	e7a2      	b.n	800557c <_vfiprintf_r+0x20>
 8005636:	4b4f      	ldr	r3, [pc, #316]	; (8005774 <_vfiprintf_r+0x218>)
 8005638:	429c      	cmp	r4, r3
 800563a:	bf08      	it	eq
 800563c:	68f4      	ldreq	r4, [r6, #12]
 800563e:	e79d      	b.n	800557c <_vfiprintf_r+0x20>
 8005640:	4621      	mov	r1, r4
 8005642:	4630      	mov	r0, r6
 8005644:	f000 f958 	bl	80058f8 <__swsetup_r>
 8005648:	2800      	cmp	r0, #0
 800564a:	d09d      	beq.n	8005588 <_vfiprintf_r+0x2c>
 800564c:	f04f 30ff 	mov.w	r0, #4294967295
 8005650:	b01d      	add	sp, #116	; 0x74
 8005652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005656:	46a8      	mov	r8, r5
 8005658:	e7a2      	b.n	80055a0 <_vfiprintf_r+0x44>
 800565a:	4a44      	ldr	r2, [pc, #272]	; (800576c <_vfiprintf_r+0x210>)
 800565c:	4645      	mov	r5, r8
 800565e:	1a80      	subs	r0, r0, r2
 8005660:	fa0b f000 	lsl.w	r0, fp, r0
 8005664:	4318      	orrs	r0, r3
 8005666:	9004      	str	r0, [sp, #16]
 8005668:	e7be      	b.n	80055e8 <_vfiprintf_r+0x8c>
 800566a:	9a03      	ldr	r2, [sp, #12]
 800566c:	1d11      	adds	r1, r2, #4
 800566e:	6812      	ldr	r2, [r2, #0]
 8005670:	9103      	str	r1, [sp, #12]
 8005672:	2a00      	cmp	r2, #0
 8005674:	db01      	blt.n	800567a <_vfiprintf_r+0x11e>
 8005676:	9207      	str	r2, [sp, #28]
 8005678:	e004      	b.n	8005684 <_vfiprintf_r+0x128>
 800567a:	4252      	negs	r2, r2
 800567c:	f043 0302 	orr.w	r3, r3, #2
 8005680:	9207      	str	r2, [sp, #28]
 8005682:	9304      	str	r3, [sp, #16]
 8005684:	f898 3000 	ldrb.w	r3, [r8]
 8005688:	2b2e      	cmp	r3, #46	; 0x2e
 800568a:	d10e      	bne.n	80056aa <_vfiprintf_r+0x14e>
 800568c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005690:	2b2a      	cmp	r3, #42	; 0x2a
 8005692:	d138      	bne.n	8005706 <_vfiprintf_r+0x1aa>
 8005694:	9b03      	ldr	r3, [sp, #12]
 8005696:	f108 0802 	add.w	r8, r8, #2
 800569a:	1d1a      	adds	r2, r3, #4
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	9203      	str	r2, [sp, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bfb8      	it	lt
 80056a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80056a8:	9305      	str	r3, [sp, #20]
 80056aa:	4d33      	ldr	r5, [pc, #204]	; (8005778 <_vfiprintf_r+0x21c>)
 80056ac:	2203      	movs	r2, #3
 80056ae:	f898 1000 	ldrb.w	r1, [r8]
 80056b2:	4628      	mov	r0, r5
 80056b4:	f7ff fb80 	bl	8004db8 <memchr>
 80056b8:	b140      	cbz	r0, 80056cc <_vfiprintf_r+0x170>
 80056ba:	2340      	movs	r3, #64	; 0x40
 80056bc:	1b40      	subs	r0, r0, r5
 80056be:	fa03 f000 	lsl.w	r0, r3, r0
 80056c2:	9b04      	ldr	r3, [sp, #16]
 80056c4:	f108 0801 	add.w	r8, r8, #1
 80056c8:	4303      	orrs	r3, r0
 80056ca:	9304      	str	r3, [sp, #16]
 80056cc:	f898 1000 	ldrb.w	r1, [r8]
 80056d0:	2206      	movs	r2, #6
 80056d2:	482a      	ldr	r0, [pc, #168]	; (800577c <_vfiprintf_r+0x220>)
 80056d4:	f108 0701 	add.w	r7, r8, #1
 80056d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056dc:	f7ff fb6c 	bl	8004db8 <memchr>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d037      	beq.n	8005754 <_vfiprintf_r+0x1f8>
 80056e4:	4b26      	ldr	r3, [pc, #152]	; (8005780 <_vfiprintf_r+0x224>)
 80056e6:	bb1b      	cbnz	r3, 8005730 <_vfiprintf_r+0x1d4>
 80056e8:	9b03      	ldr	r3, [sp, #12]
 80056ea:	3307      	adds	r3, #7
 80056ec:	f023 0307 	bic.w	r3, r3, #7
 80056f0:	3308      	adds	r3, #8
 80056f2:	9303      	str	r3, [sp, #12]
 80056f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f6:	444b      	add	r3, r9
 80056f8:	9309      	str	r3, [sp, #36]	; 0x24
 80056fa:	e750      	b.n	800559e <_vfiprintf_r+0x42>
 80056fc:	fb05 3202 	mla	r2, r5, r2, r3
 8005700:	2001      	movs	r0, #1
 8005702:	4688      	mov	r8, r1
 8005704:	e78a      	b.n	800561c <_vfiprintf_r+0xc0>
 8005706:	2300      	movs	r3, #0
 8005708:	250a      	movs	r5, #10
 800570a:	4619      	mov	r1, r3
 800570c:	f108 0801 	add.w	r8, r8, #1
 8005710:	9305      	str	r3, [sp, #20]
 8005712:	4640      	mov	r0, r8
 8005714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005718:	3a30      	subs	r2, #48	; 0x30
 800571a:	2a09      	cmp	r2, #9
 800571c:	d903      	bls.n	8005726 <_vfiprintf_r+0x1ca>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0c3      	beq.n	80056aa <_vfiprintf_r+0x14e>
 8005722:	9105      	str	r1, [sp, #20]
 8005724:	e7c1      	b.n	80056aa <_vfiprintf_r+0x14e>
 8005726:	fb05 2101 	mla	r1, r5, r1, r2
 800572a:	2301      	movs	r3, #1
 800572c:	4680      	mov	r8, r0
 800572e:	e7f0      	b.n	8005712 <_vfiprintf_r+0x1b6>
 8005730:	ab03      	add	r3, sp, #12
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	4622      	mov	r2, r4
 8005736:	4b13      	ldr	r3, [pc, #76]	; (8005784 <_vfiprintf_r+0x228>)
 8005738:	a904      	add	r1, sp, #16
 800573a:	4630      	mov	r0, r6
 800573c:	f7fe f844 	bl	80037c8 <_printf_float>
 8005740:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005744:	4681      	mov	r9, r0
 8005746:	d1d5      	bne.n	80056f4 <_vfiprintf_r+0x198>
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	065b      	lsls	r3, r3, #25
 800574c:	f53f af7e 	bmi.w	800564c <_vfiprintf_r+0xf0>
 8005750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005752:	e77d      	b.n	8005650 <_vfiprintf_r+0xf4>
 8005754:	ab03      	add	r3, sp, #12
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	4622      	mov	r2, r4
 800575a:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <_vfiprintf_r+0x228>)
 800575c:	a904      	add	r1, sp, #16
 800575e:	4630      	mov	r0, r6
 8005760:	f7fe fade 	bl	8003d20 <_printf_i>
 8005764:	e7ec      	b.n	8005740 <_vfiprintf_r+0x1e4>
 8005766:	bf00      	nop
 8005768:	08005da8 	.word	0x08005da8
 800576c:	08005ee4 	.word	0x08005ee4
 8005770:	08005dc8 	.word	0x08005dc8
 8005774:	08005d88 	.word	0x08005d88
 8005778:	08005eea 	.word	0x08005eea
 800577c:	08005eee 	.word	0x08005eee
 8005780:	080037c9 	.word	0x080037c9
 8005784:	08005537 	.word	0x08005537

08005788 <_sbrk_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	2300      	movs	r3, #0
 800578c:	4c05      	ldr	r4, [pc, #20]	; (80057a4 <_sbrk_r+0x1c>)
 800578e:	4605      	mov	r5, r0
 8005790:	4608      	mov	r0, r1
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	f7fb fe58 	bl	8001448 <_sbrk>
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	d102      	bne.n	80057a2 <_sbrk_r+0x1a>
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	b103      	cbz	r3, 80057a2 <_sbrk_r+0x1a>
 80057a0:	602b      	str	r3, [r5, #0]
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	200002b4 	.word	0x200002b4

080057a8 <__sread>:
 80057a8:	b510      	push	{r4, lr}
 80057aa:	460c      	mov	r4, r1
 80057ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b0:	f000 fa5a 	bl	8005c68 <_read_r>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	bfab      	itete	ge
 80057b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057ba:	89a3      	ldrhlt	r3, [r4, #12]
 80057bc:	181b      	addge	r3, r3, r0
 80057be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057c2:	bfac      	ite	ge
 80057c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80057c6:	81a3      	strhlt	r3, [r4, #12]
 80057c8:	bd10      	pop	{r4, pc}

080057ca <__swrite>:
 80057ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ce:	461f      	mov	r7, r3
 80057d0:	898b      	ldrh	r3, [r1, #12]
 80057d2:	4605      	mov	r5, r0
 80057d4:	05db      	lsls	r3, r3, #23
 80057d6:	460c      	mov	r4, r1
 80057d8:	4616      	mov	r6, r2
 80057da:	d505      	bpl.n	80057e8 <__swrite+0x1e>
 80057dc:	2302      	movs	r3, #2
 80057de:	2200      	movs	r2, #0
 80057e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e4:	f000 f9b6 	bl	8005b54 <_lseek_r>
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	4632      	mov	r2, r6
 80057ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057f6:	463b      	mov	r3, r7
 80057f8:	4628      	mov	r0, r5
 80057fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057fe:	f000 b869 	b.w	80058d4 <_write_r>

08005802 <__sseek>:
 8005802:	b510      	push	{r4, lr}
 8005804:	460c      	mov	r4, r1
 8005806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580a:	f000 f9a3 	bl	8005b54 <_lseek_r>
 800580e:	1c43      	adds	r3, r0, #1
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	bf15      	itete	ne
 8005814:	6560      	strne	r0, [r4, #84]	; 0x54
 8005816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800581a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800581e:	81a3      	strheq	r3, [r4, #12]
 8005820:	bf18      	it	ne
 8005822:	81a3      	strhne	r3, [r4, #12]
 8005824:	bd10      	pop	{r4, pc}

08005826 <__sclose>:
 8005826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582a:	f000 b8d3 	b.w	80059d4 <_close_r>
	...

08005830 <__swbuf_r>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	460e      	mov	r6, r1
 8005834:	4614      	mov	r4, r2
 8005836:	4605      	mov	r5, r0
 8005838:	b118      	cbz	r0, 8005842 <__swbuf_r+0x12>
 800583a:	6983      	ldr	r3, [r0, #24]
 800583c:	b90b      	cbnz	r3, 8005842 <__swbuf_r+0x12>
 800583e:	f7ff fa1b 	bl	8004c78 <__sinit>
 8005842:	4b21      	ldr	r3, [pc, #132]	; (80058c8 <__swbuf_r+0x98>)
 8005844:	429c      	cmp	r4, r3
 8005846:	d12a      	bne.n	800589e <__swbuf_r+0x6e>
 8005848:	686c      	ldr	r4, [r5, #4]
 800584a:	69a3      	ldr	r3, [r4, #24]
 800584c:	60a3      	str	r3, [r4, #8]
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	071a      	lsls	r2, r3, #28
 8005852:	d52e      	bpl.n	80058b2 <__swbuf_r+0x82>
 8005854:	6923      	ldr	r3, [r4, #16]
 8005856:	b363      	cbz	r3, 80058b2 <__swbuf_r+0x82>
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	6820      	ldr	r0, [r4, #0]
 800585c:	b2f6      	uxtb	r6, r6
 800585e:	1ac0      	subs	r0, r0, r3
 8005860:	6963      	ldr	r3, [r4, #20]
 8005862:	4637      	mov	r7, r6
 8005864:	4283      	cmp	r3, r0
 8005866:	dc04      	bgt.n	8005872 <__swbuf_r+0x42>
 8005868:	4621      	mov	r1, r4
 800586a:	4628      	mov	r0, r5
 800586c:	f000 f948 	bl	8005b00 <_fflush_r>
 8005870:	bb28      	cbnz	r0, 80058be <__swbuf_r+0x8e>
 8005872:	68a3      	ldr	r3, [r4, #8]
 8005874:	3001      	adds	r0, #1
 8005876:	3b01      	subs	r3, #1
 8005878:	60a3      	str	r3, [r4, #8]
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	6022      	str	r2, [r4, #0]
 8005880:	701e      	strb	r6, [r3, #0]
 8005882:	6963      	ldr	r3, [r4, #20]
 8005884:	4283      	cmp	r3, r0
 8005886:	d004      	beq.n	8005892 <__swbuf_r+0x62>
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	07db      	lsls	r3, r3, #31
 800588c:	d519      	bpl.n	80058c2 <__swbuf_r+0x92>
 800588e:	2e0a      	cmp	r6, #10
 8005890:	d117      	bne.n	80058c2 <__swbuf_r+0x92>
 8005892:	4621      	mov	r1, r4
 8005894:	4628      	mov	r0, r5
 8005896:	f000 f933 	bl	8005b00 <_fflush_r>
 800589a:	b190      	cbz	r0, 80058c2 <__swbuf_r+0x92>
 800589c:	e00f      	b.n	80058be <__swbuf_r+0x8e>
 800589e:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <__swbuf_r+0x9c>)
 80058a0:	429c      	cmp	r4, r3
 80058a2:	d101      	bne.n	80058a8 <__swbuf_r+0x78>
 80058a4:	68ac      	ldr	r4, [r5, #8]
 80058a6:	e7d0      	b.n	800584a <__swbuf_r+0x1a>
 80058a8:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <__swbuf_r+0xa0>)
 80058aa:	429c      	cmp	r4, r3
 80058ac:	bf08      	it	eq
 80058ae:	68ec      	ldreq	r4, [r5, #12]
 80058b0:	e7cb      	b.n	800584a <__swbuf_r+0x1a>
 80058b2:	4621      	mov	r1, r4
 80058b4:	4628      	mov	r0, r5
 80058b6:	f000 f81f 	bl	80058f8 <__swsetup_r>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d0cc      	beq.n	8005858 <__swbuf_r+0x28>
 80058be:	f04f 37ff 	mov.w	r7, #4294967295
 80058c2:	4638      	mov	r0, r7
 80058c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c6:	bf00      	nop
 80058c8:	08005da8 	.word	0x08005da8
 80058cc:	08005dc8 	.word	0x08005dc8
 80058d0:	08005d88 	.word	0x08005d88

080058d4 <_write_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4605      	mov	r5, r0
 80058d8:	4608      	mov	r0, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	2200      	movs	r2, #0
 80058de:	4c05      	ldr	r4, [pc, #20]	; (80058f4 <_write_r+0x20>)
 80058e0:	6022      	str	r2, [r4, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f7fb fd63 	bl	80013ae <_write>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d102      	bne.n	80058f2 <_write_r+0x1e>
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	b103      	cbz	r3, 80058f2 <_write_r+0x1e>
 80058f0:	602b      	str	r3, [r5, #0]
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	200002b4 	.word	0x200002b4

080058f8 <__swsetup_r>:
 80058f8:	4b32      	ldr	r3, [pc, #200]	; (80059c4 <__swsetup_r+0xcc>)
 80058fa:	b570      	push	{r4, r5, r6, lr}
 80058fc:	681d      	ldr	r5, [r3, #0]
 80058fe:	4606      	mov	r6, r0
 8005900:	460c      	mov	r4, r1
 8005902:	b125      	cbz	r5, 800590e <__swsetup_r+0x16>
 8005904:	69ab      	ldr	r3, [r5, #24]
 8005906:	b913      	cbnz	r3, 800590e <__swsetup_r+0x16>
 8005908:	4628      	mov	r0, r5
 800590a:	f7ff f9b5 	bl	8004c78 <__sinit>
 800590e:	4b2e      	ldr	r3, [pc, #184]	; (80059c8 <__swsetup_r+0xd0>)
 8005910:	429c      	cmp	r4, r3
 8005912:	d10f      	bne.n	8005934 <__swsetup_r+0x3c>
 8005914:	686c      	ldr	r4, [r5, #4]
 8005916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800591a:	b29a      	uxth	r2, r3
 800591c:	0715      	lsls	r5, r2, #28
 800591e:	d42c      	bmi.n	800597a <__swsetup_r+0x82>
 8005920:	06d0      	lsls	r0, r2, #27
 8005922:	d411      	bmi.n	8005948 <__swsetup_r+0x50>
 8005924:	2209      	movs	r2, #9
 8005926:	6032      	str	r2, [r6, #0]
 8005928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800592c:	81a3      	strh	r3, [r4, #12]
 800592e:	f04f 30ff 	mov.w	r0, #4294967295
 8005932:	e03e      	b.n	80059b2 <__swsetup_r+0xba>
 8005934:	4b25      	ldr	r3, [pc, #148]	; (80059cc <__swsetup_r+0xd4>)
 8005936:	429c      	cmp	r4, r3
 8005938:	d101      	bne.n	800593e <__swsetup_r+0x46>
 800593a:	68ac      	ldr	r4, [r5, #8]
 800593c:	e7eb      	b.n	8005916 <__swsetup_r+0x1e>
 800593e:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <__swsetup_r+0xd8>)
 8005940:	429c      	cmp	r4, r3
 8005942:	bf08      	it	eq
 8005944:	68ec      	ldreq	r4, [r5, #12]
 8005946:	e7e6      	b.n	8005916 <__swsetup_r+0x1e>
 8005948:	0751      	lsls	r1, r2, #29
 800594a:	d512      	bpl.n	8005972 <__swsetup_r+0x7a>
 800594c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800594e:	b141      	cbz	r1, 8005962 <__swsetup_r+0x6a>
 8005950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005954:	4299      	cmp	r1, r3
 8005956:	d002      	beq.n	800595e <__swsetup_r+0x66>
 8005958:	4630      	mov	r0, r6
 800595a:	f7ff fd31 	bl	80053c0 <_free_r>
 800595e:	2300      	movs	r3, #0
 8005960:	6363      	str	r3, [r4, #52]	; 0x34
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005968:	81a3      	strh	r3, [r4, #12]
 800596a:	2300      	movs	r3, #0
 800596c:	6063      	str	r3, [r4, #4]
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f043 0308 	orr.w	r3, r3, #8
 8005978:	81a3      	strh	r3, [r4, #12]
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	b94b      	cbnz	r3, 8005992 <__swsetup_r+0x9a>
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005988:	d003      	beq.n	8005992 <__swsetup_r+0x9a>
 800598a:	4621      	mov	r1, r4
 800598c:	4630      	mov	r0, r6
 800598e:	f000 f917 	bl	8005bc0 <__smakebuf_r>
 8005992:	89a2      	ldrh	r2, [r4, #12]
 8005994:	f012 0301 	ands.w	r3, r2, #1
 8005998:	d00c      	beq.n	80059b4 <__swsetup_r+0xbc>
 800599a:	2300      	movs	r3, #0
 800599c:	60a3      	str	r3, [r4, #8]
 800599e:	6963      	ldr	r3, [r4, #20]
 80059a0:	425b      	negs	r3, r3
 80059a2:	61a3      	str	r3, [r4, #24]
 80059a4:	6923      	ldr	r3, [r4, #16]
 80059a6:	b953      	cbnz	r3, 80059be <__swsetup_r+0xc6>
 80059a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80059b0:	d1ba      	bne.n	8005928 <__swsetup_r+0x30>
 80059b2:	bd70      	pop	{r4, r5, r6, pc}
 80059b4:	0792      	lsls	r2, r2, #30
 80059b6:	bf58      	it	pl
 80059b8:	6963      	ldrpl	r3, [r4, #20]
 80059ba:	60a3      	str	r3, [r4, #8]
 80059bc:	e7f2      	b.n	80059a4 <__swsetup_r+0xac>
 80059be:	2000      	movs	r0, #0
 80059c0:	e7f7      	b.n	80059b2 <__swsetup_r+0xba>
 80059c2:	bf00      	nop
 80059c4:	2000000c 	.word	0x2000000c
 80059c8:	08005da8 	.word	0x08005da8
 80059cc:	08005dc8 	.word	0x08005dc8
 80059d0:	08005d88 	.word	0x08005d88

080059d4 <_close_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	2300      	movs	r3, #0
 80059d8:	4c05      	ldr	r4, [pc, #20]	; (80059f0 <_close_r+0x1c>)
 80059da:	4605      	mov	r5, r0
 80059dc:	4608      	mov	r0, r1
 80059de:	6023      	str	r3, [r4, #0]
 80059e0:	f7fb fd01 	bl	80013e6 <_close>
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	d102      	bne.n	80059ee <_close_r+0x1a>
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	b103      	cbz	r3, 80059ee <_close_r+0x1a>
 80059ec:	602b      	str	r3, [r5, #0]
 80059ee:	bd38      	pop	{r3, r4, r5, pc}
 80059f0:	200002b4 	.word	0x200002b4

080059f4 <__sflush_r>:
 80059f4:	898a      	ldrh	r2, [r1, #12]
 80059f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fa:	4605      	mov	r5, r0
 80059fc:	0710      	lsls	r0, r2, #28
 80059fe:	460c      	mov	r4, r1
 8005a00:	d458      	bmi.n	8005ab4 <__sflush_r+0xc0>
 8005a02:	684b      	ldr	r3, [r1, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	dc05      	bgt.n	8005a14 <__sflush_r+0x20>
 8005a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	dc02      	bgt.n	8005a14 <__sflush_r+0x20>
 8005a0e:	2000      	movs	r0, #0
 8005a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a16:	2e00      	cmp	r6, #0
 8005a18:	d0f9      	beq.n	8005a0e <__sflush_r+0x1a>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a20:	682f      	ldr	r7, [r5, #0]
 8005a22:	6a21      	ldr	r1, [r4, #32]
 8005a24:	602b      	str	r3, [r5, #0]
 8005a26:	d032      	beq.n	8005a8e <__sflush_r+0x9a>
 8005a28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	075a      	lsls	r2, r3, #29
 8005a2e:	d505      	bpl.n	8005a3c <__sflush_r+0x48>
 8005a30:	6863      	ldr	r3, [r4, #4]
 8005a32:	1ac0      	subs	r0, r0, r3
 8005a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a36:	b10b      	cbz	r3, 8005a3c <__sflush_r+0x48>
 8005a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a3a:	1ac0      	subs	r0, r0, r3
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4602      	mov	r2, r0
 8005a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a42:	6a21      	ldr	r1, [r4, #32]
 8005a44:	4628      	mov	r0, r5
 8005a46:	47b0      	blx	r6
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	d106      	bne.n	8005a5c <__sflush_r+0x68>
 8005a4e:	6829      	ldr	r1, [r5, #0]
 8005a50:	291d      	cmp	r1, #29
 8005a52:	d848      	bhi.n	8005ae6 <__sflush_r+0xf2>
 8005a54:	4a29      	ldr	r2, [pc, #164]	; (8005afc <__sflush_r+0x108>)
 8005a56:	40ca      	lsrs	r2, r1
 8005a58:	07d6      	lsls	r6, r2, #31
 8005a5a:	d544      	bpl.n	8005ae6 <__sflush_r+0xf2>
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	6062      	str	r2, [r4, #4]
 8005a60:	6922      	ldr	r2, [r4, #16]
 8005a62:	04d9      	lsls	r1, r3, #19
 8005a64:	6022      	str	r2, [r4, #0]
 8005a66:	d504      	bpl.n	8005a72 <__sflush_r+0x7e>
 8005a68:	1c42      	adds	r2, r0, #1
 8005a6a:	d101      	bne.n	8005a70 <__sflush_r+0x7c>
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	b903      	cbnz	r3, 8005a72 <__sflush_r+0x7e>
 8005a70:	6560      	str	r0, [r4, #84]	; 0x54
 8005a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a74:	602f      	str	r7, [r5, #0]
 8005a76:	2900      	cmp	r1, #0
 8005a78:	d0c9      	beq.n	8005a0e <__sflush_r+0x1a>
 8005a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a7e:	4299      	cmp	r1, r3
 8005a80:	d002      	beq.n	8005a88 <__sflush_r+0x94>
 8005a82:	4628      	mov	r0, r5
 8005a84:	f7ff fc9c 	bl	80053c0 <_free_r>
 8005a88:	2000      	movs	r0, #0
 8005a8a:	6360      	str	r0, [r4, #52]	; 0x34
 8005a8c:	e7c0      	b.n	8005a10 <__sflush_r+0x1c>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4628      	mov	r0, r5
 8005a92:	47b0      	blx	r6
 8005a94:	1c41      	adds	r1, r0, #1
 8005a96:	d1c8      	bne.n	8005a2a <__sflush_r+0x36>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0c5      	beq.n	8005a2a <__sflush_r+0x36>
 8005a9e:	2b1d      	cmp	r3, #29
 8005aa0:	d001      	beq.n	8005aa6 <__sflush_r+0xb2>
 8005aa2:	2b16      	cmp	r3, #22
 8005aa4:	d101      	bne.n	8005aaa <__sflush_r+0xb6>
 8005aa6:	602f      	str	r7, [r5, #0]
 8005aa8:	e7b1      	b.n	8005a0e <__sflush_r+0x1a>
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab0:	81a3      	strh	r3, [r4, #12]
 8005ab2:	e7ad      	b.n	8005a10 <__sflush_r+0x1c>
 8005ab4:	690f      	ldr	r7, [r1, #16]
 8005ab6:	2f00      	cmp	r7, #0
 8005ab8:	d0a9      	beq.n	8005a0e <__sflush_r+0x1a>
 8005aba:	0793      	lsls	r3, r2, #30
 8005abc:	bf18      	it	ne
 8005abe:	2300      	movne	r3, #0
 8005ac0:	680e      	ldr	r6, [r1, #0]
 8005ac2:	bf08      	it	eq
 8005ac4:	694b      	ldreq	r3, [r1, #20]
 8005ac6:	eba6 0807 	sub.w	r8, r6, r7
 8005aca:	600f      	str	r7, [r1, #0]
 8005acc:	608b      	str	r3, [r1, #8]
 8005ace:	f1b8 0f00 	cmp.w	r8, #0
 8005ad2:	dd9c      	ble.n	8005a0e <__sflush_r+0x1a>
 8005ad4:	4643      	mov	r3, r8
 8005ad6:	463a      	mov	r2, r7
 8005ad8:	6a21      	ldr	r1, [r4, #32]
 8005ada:	4628      	mov	r0, r5
 8005adc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ade:	47b0      	blx	r6
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	dc06      	bgt.n	8005af2 <__sflush_r+0xfe>
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aea:	81a3      	strh	r3, [r4, #12]
 8005aec:	f04f 30ff 	mov.w	r0, #4294967295
 8005af0:	e78e      	b.n	8005a10 <__sflush_r+0x1c>
 8005af2:	4407      	add	r7, r0
 8005af4:	eba8 0800 	sub.w	r8, r8, r0
 8005af8:	e7e9      	b.n	8005ace <__sflush_r+0xda>
 8005afa:	bf00      	nop
 8005afc:	20400001 	.word	0x20400001

08005b00 <_fflush_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	690b      	ldr	r3, [r1, #16]
 8005b04:	4605      	mov	r5, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	b1db      	cbz	r3, 8005b42 <_fflush_r+0x42>
 8005b0a:	b118      	cbz	r0, 8005b14 <_fflush_r+0x14>
 8005b0c:	6983      	ldr	r3, [r0, #24]
 8005b0e:	b90b      	cbnz	r3, 8005b14 <_fflush_r+0x14>
 8005b10:	f7ff f8b2 	bl	8004c78 <__sinit>
 8005b14:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <_fflush_r+0x48>)
 8005b16:	429c      	cmp	r4, r3
 8005b18:	d109      	bne.n	8005b2e <_fflush_r+0x2e>
 8005b1a:	686c      	ldr	r4, [r5, #4]
 8005b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b20:	b17b      	cbz	r3, 8005b42 <_fflush_r+0x42>
 8005b22:	4621      	mov	r1, r4
 8005b24:	4628      	mov	r0, r5
 8005b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b2a:	f7ff bf63 	b.w	80059f4 <__sflush_r>
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <_fflush_r+0x4c>)
 8005b30:	429c      	cmp	r4, r3
 8005b32:	d101      	bne.n	8005b38 <_fflush_r+0x38>
 8005b34:	68ac      	ldr	r4, [r5, #8]
 8005b36:	e7f1      	b.n	8005b1c <_fflush_r+0x1c>
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <_fflush_r+0x50>)
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	bf08      	it	eq
 8005b3e:	68ec      	ldreq	r4, [r5, #12]
 8005b40:	e7ec      	b.n	8005b1c <_fflush_r+0x1c>
 8005b42:	2000      	movs	r0, #0
 8005b44:	bd38      	pop	{r3, r4, r5, pc}
 8005b46:	bf00      	nop
 8005b48:	08005da8 	.word	0x08005da8
 8005b4c:	08005dc8 	.word	0x08005dc8
 8005b50:	08005d88 	.word	0x08005d88

08005b54 <_lseek_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4605      	mov	r5, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4c05      	ldr	r4, [pc, #20]	; (8005b74 <_lseek_r+0x20>)
 8005b60:	6022      	str	r2, [r4, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f7fb fc63 	bl	800142e <_lseek>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_lseek_r+0x1e>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_lseek_r+0x1e>
 8005b70:	602b      	str	r3, [r5, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	200002b4 	.word	0x200002b4

08005b78 <__swhatbuf_r>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	460e      	mov	r6, r1
 8005b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b80:	b096      	sub	sp, #88	; 0x58
 8005b82:	2900      	cmp	r1, #0
 8005b84:	4614      	mov	r4, r2
 8005b86:	461d      	mov	r5, r3
 8005b88:	da07      	bge.n	8005b9a <__swhatbuf_r+0x22>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	602b      	str	r3, [r5, #0]
 8005b8e:	89b3      	ldrh	r3, [r6, #12]
 8005b90:	061a      	lsls	r2, r3, #24
 8005b92:	d410      	bmi.n	8005bb6 <__swhatbuf_r+0x3e>
 8005b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b98:	e00e      	b.n	8005bb8 <__swhatbuf_r+0x40>
 8005b9a:	466a      	mov	r2, sp
 8005b9c:	f000 f884 	bl	8005ca8 <_fstat_r>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	dbf2      	blt.n	8005b8a <__swhatbuf_r+0x12>
 8005ba4:	9a01      	ldr	r2, [sp, #4]
 8005ba6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005baa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bae:	425a      	negs	r2, r3
 8005bb0:	415a      	adcs	r2, r3
 8005bb2:	602a      	str	r2, [r5, #0]
 8005bb4:	e7ee      	b.n	8005b94 <__swhatbuf_r+0x1c>
 8005bb6:	2340      	movs	r3, #64	; 0x40
 8005bb8:	2000      	movs	r0, #0
 8005bba:	6023      	str	r3, [r4, #0]
 8005bbc:	b016      	add	sp, #88	; 0x58
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}

08005bc0 <__smakebuf_r>:
 8005bc0:	898b      	ldrh	r3, [r1, #12]
 8005bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bc4:	079d      	lsls	r5, r3, #30
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460c      	mov	r4, r1
 8005bca:	d507      	bpl.n	8005bdc <__smakebuf_r+0x1c>
 8005bcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	6123      	str	r3, [r4, #16]
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	6163      	str	r3, [r4, #20]
 8005bd8:	b002      	add	sp, #8
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
 8005bdc:	ab01      	add	r3, sp, #4
 8005bde:	466a      	mov	r2, sp
 8005be0:	f7ff ffca 	bl	8005b78 <__swhatbuf_r>
 8005be4:	9900      	ldr	r1, [sp, #0]
 8005be6:	4605      	mov	r5, r0
 8005be8:	4630      	mov	r0, r6
 8005bea:	f7ff fc35 	bl	8005458 <_malloc_r>
 8005bee:	b948      	cbnz	r0, 8005c04 <__smakebuf_r+0x44>
 8005bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bf4:	059a      	lsls	r2, r3, #22
 8005bf6:	d4ef      	bmi.n	8005bd8 <__smakebuf_r+0x18>
 8005bf8:	f023 0303 	bic.w	r3, r3, #3
 8005bfc:	f043 0302 	orr.w	r3, r3, #2
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	e7e3      	b.n	8005bcc <__smakebuf_r+0xc>
 8005c04:	4b0d      	ldr	r3, [pc, #52]	; (8005c3c <__smakebuf_r+0x7c>)
 8005c06:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	6020      	str	r0, [r4, #0]
 8005c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c10:	81a3      	strh	r3, [r4, #12]
 8005c12:	9b00      	ldr	r3, [sp, #0]
 8005c14:	6120      	str	r0, [r4, #16]
 8005c16:	6163      	str	r3, [r4, #20]
 8005c18:	9b01      	ldr	r3, [sp, #4]
 8005c1a:	b15b      	cbz	r3, 8005c34 <__smakebuf_r+0x74>
 8005c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c20:	4630      	mov	r0, r6
 8005c22:	f000 f853 	bl	8005ccc <_isatty_r>
 8005c26:	b128      	cbz	r0, 8005c34 <__smakebuf_r+0x74>
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	81a3      	strh	r3, [r4, #12]
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	431d      	orrs	r5, r3
 8005c38:	81a5      	strh	r5, [r4, #12]
 8005c3a:	e7cd      	b.n	8005bd8 <__smakebuf_r+0x18>
 8005c3c:	08004c41 	.word	0x08004c41

08005c40 <__ascii_mbtowc>:
 8005c40:	b082      	sub	sp, #8
 8005c42:	b901      	cbnz	r1, 8005c46 <__ascii_mbtowc+0x6>
 8005c44:	a901      	add	r1, sp, #4
 8005c46:	b142      	cbz	r2, 8005c5a <__ascii_mbtowc+0x1a>
 8005c48:	b14b      	cbz	r3, 8005c5e <__ascii_mbtowc+0x1e>
 8005c4a:	7813      	ldrb	r3, [r2, #0]
 8005c4c:	600b      	str	r3, [r1, #0]
 8005c4e:	7812      	ldrb	r2, [r2, #0]
 8005c50:	1c10      	adds	r0, r2, #0
 8005c52:	bf18      	it	ne
 8005c54:	2001      	movne	r0, #1
 8005c56:	b002      	add	sp, #8
 8005c58:	4770      	bx	lr
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	e7fb      	b.n	8005c56 <__ascii_mbtowc+0x16>
 8005c5e:	f06f 0001 	mvn.w	r0, #1
 8005c62:	e7f8      	b.n	8005c56 <__ascii_mbtowc+0x16>

08005c64 <__malloc_lock>:
 8005c64:	4770      	bx	lr

08005c66 <__malloc_unlock>:
 8005c66:	4770      	bx	lr

08005c68 <_read_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	4611      	mov	r1, r2
 8005c70:	2200      	movs	r2, #0
 8005c72:	4c05      	ldr	r4, [pc, #20]	; (8005c88 <_read_r+0x20>)
 8005c74:	6022      	str	r2, [r4, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	f7fb fb7c 	bl	8001374 <_read>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d102      	bne.n	8005c86 <_read_r+0x1e>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	b103      	cbz	r3, 8005c86 <_read_r+0x1e>
 8005c84:	602b      	str	r3, [r5, #0]
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	200002b4 	.word	0x200002b4

08005c8c <__ascii_wctomb>:
 8005c8c:	b149      	cbz	r1, 8005ca2 <__ascii_wctomb+0x16>
 8005c8e:	2aff      	cmp	r2, #255	; 0xff
 8005c90:	bf8b      	itete	hi
 8005c92:	238a      	movhi	r3, #138	; 0x8a
 8005c94:	700a      	strbls	r2, [r1, #0]
 8005c96:	6003      	strhi	r3, [r0, #0]
 8005c98:	2001      	movls	r0, #1
 8005c9a:	bf88      	it	hi
 8005c9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005ca0:	4770      	bx	lr
 8005ca2:	4608      	mov	r0, r1
 8005ca4:	4770      	bx	lr
	...

08005ca8 <_fstat_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	2300      	movs	r3, #0
 8005cac:	4c06      	ldr	r4, [pc, #24]	; (8005cc8 <_fstat_r+0x20>)
 8005cae:	4605      	mov	r5, r0
 8005cb0:	4608      	mov	r0, r1
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	f7fb fba1 	bl	80013fc <_fstat>
 8005cba:	1c43      	adds	r3, r0, #1
 8005cbc:	d102      	bne.n	8005cc4 <_fstat_r+0x1c>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	b103      	cbz	r3, 8005cc4 <_fstat_r+0x1c>
 8005cc2:	602b      	str	r3, [r5, #0]
 8005cc4:	bd38      	pop	{r3, r4, r5, pc}
 8005cc6:	bf00      	nop
 8005cc8:	200002b4 	.word	0x200002b4

08005ccc <_isatty_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	2300      	movs	r3, #0
 8005cd0:	4c05      	ldr	r4, [pc, #20]	; (8005ce8 <_isatty_r+0x1c>)
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	6023      	str	r3, [r4, #0]
 8005cd8:	f7fb fb9f 	bl	800141a <_isatty>
 8005cdc:	1c43      	adds	r3, r0, #1
 8005cde:	d102      	bne.n	8005ce6 <_isatty_r+0x1a>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	b103      	cbz	r3, 8005ce6 <_isatty_r+0x1a>
 8005ce4:	602b      	str	r3, [r5, #0]
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	200002b4 	.word	0x200002b4

08005cec <_init>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	bf00      	nop
 8005cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf2:	bc08      	pop	{r3}
 8005cf4:	469e      	mov	lr, r3
 8005cf6:	4770      	bx	lr

08005cf8 <_fini>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	bf00      	nop
 8005cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfe:	bc08      	pop	{r3}
 8005d00:	469e      	mov	lr, r3
 8005d02:	4770      	bx	lr
