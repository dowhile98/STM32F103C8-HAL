
013_TIMER_INPUT_CAPTURE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000532c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08005440  08005440  00015440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057e8  080057e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080057e8  080057e8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057e8  080057e8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080057f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  200001e0  080059d0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080059d0  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb25  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ac5  00000000  00000000  0002bd2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0002d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a88  00000000  00000000  0002e358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015406  00000000  00000000  0002ede0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000080b5  00000000  00000000  000441e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072928  00000000  00000000  0004c29b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bebc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d5c  00000000  00000000  000bec40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005424 	.word	0x08005424

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08005424 	.word	0x08005424

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
void SystemClock_Config(void);
void UART1_Init(void);
void TIM2_Init(void);
void GPIO_Init(void);

int main(void){
 8000a88:	b598      	push	{r3, r4, r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	//inicializacion de bajo nivel
	HAL_Init();
 8000a8c:	f000 fb44 	bl	8001118 <HAL_Init>
	//inicializacion del reloj
	SystemClock_Config();
 8000a90:	f000 f84a 	bl	8000b28 <SystemClock_Config>
	//inicializacion del USART1
	UART1_Init();
 8000a94:	f000 f888 	bl	8000ba8 <UART1_Init>
	//inicializacion del timer2
	TIM2_Init();
 8000a98:	f000 f8b0 	bl	8000bfc <TIM2_Init>
	//se inicializa el pin GPIO_PIN_2 como salida
	GPIO_Init();
 8000a9c:	f000 f8e6 	bl	8000c6c <GPIO_Init>

	printf("INICIALIZACION DEL UART1 EXITOSA\r\n");
 8000aa0:	4818      	ldr	r0, [pc, #96]	; (8000b04 <main+0x7c>)
 8000aa2:	f002 fdf9 	bl	8003698 <puts>
	printf("\nSE IMPRIMEN LOS VALORES DE LOS RELOJES\r\n");
 8000aa6:	4818      	ldr	r0, [pc, #96]	; (8000b08 <main+0x80>)
 8000aa8:	f002 fdf6 	bl	8003698 <puts>
	printf("SYSCLOK->%ld\r\n",HAL_RCC_GetSysClockFreq());
 8000aac:	f001 f9fc 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4815      	ldr	r0, [pc, #84]	; (8000b0c <main+0x84>)
 8000ab6:	f002 fd7b 	bl	80035b0 <iprintf>
	printf("HBCLCOK->%ld\r\n",HAL_RCC_GetHCLKFreq());
 8000aba:	f001 fa57 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4813      	ldr	r0, [pc, #76]	; (8000b10 <main+0x88>)
 8000ac4:	f002 fd74 	bl	80035b0 <iprintf>
	printf("APB1CLOCK->%ld\r\n",HAL_RCC_GetPCLK1Freq());
 8000ac8:	f001 fa5a 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4810      	ldr	r0, [pc, #64]	; (8000b14 <main+0x8c>)
 8000ad2:	f002 fd6d 	bl	80035b0 <iprintf>
	printf("APB2CLOCK->%ld\r\n",HAL_RCC_GetPCLK2Freq());
 8000ad6:	f001 fa67 	bl	8001fa8 <HAL_RCC_GetPCLK2Freq>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4619      	mov	r1, r3
 8000ade:	480e      	ldr	r0, [pc, #56]	; (8000b18 <main+0x90>)
 8000ae0:	f002 fd66 	bl	80035b0 <iprintf>
	/*Se inicia la captura de entrada*/
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <main+0x94>)
 8000ae8:	f001 fabc 	bl	8002064 <HAL_TIM_IC_Start_IT>
	//bucle infinito
	while(1){
		printf("frecuencia medida->%.2f Hz\r\n",freq_ic);
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <main+0x98>)
 8000aee:	cb18      	ldmia	r3, {r3, r4}
 8000af0:	461a      	mov	r2, r3
 8000af2:	4623      	mov	r3, r4
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <main+0x9c>)
 8000af6:	f002 fd5b 	bl	80035b0 <iprintf>
		HAL_Delay(300);
 8000afa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000afe:	f000 fb6d 	bl	80011dc <HAL_Delay>
		printf("frecuencia medida->%.2f Hz\r\n",freq_ic);
 8000b02:	e7f3      	b.n	8000aec <main+0x64>
 8000b04:	08005440 	.word	0x08005440
 8000b08:	08005464 	.word	0x08005464
 8000b0c:	08005490 	.word	0x08005490
 8000b10:	080054a0 	.word	0x080054a0
 8000b14:	080054b0 	.word	0x080054b0
 8000b18:	080054c4 	.word	0x080054c4
 8000b1c:	20000268 	.word	0x20000268
 8000b20:	20000208 	.word	0x20000208
 8000b24:	080054d8 	.word	0x080054d8

08000b28 <SystemClock_Config>:
	}
}


void SystemClock_Config(void){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b090      	sub	sp, #64	; 0x40
 8000b2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	//configuracion de parametros para la configuracion del reloj
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
	osc_init.HSEState = RCC_HSE_ON;
 8000b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b36:	61fb      	str	r3, [r7, #28]

	//se configura el reloj
	if(HAL_RCC_OscConfig(&osc_init)!=HAL_OK){
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 fe11 	bl	8001764 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x24>
		Error_Handler();
 8000b48:	f000 f944 	bl	8000dd4 <Error_Handler>
	}
	clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	607b      	str	r3, [r7, #4]
			 	 	 	 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_SYSCLK;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000b50:	2301      	movs	r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
	//se configura la fuente de reloj y los prescaler del reloj
	if(HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0)!=HAL_OK){
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2101      	movs	r1, #1
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 f87d 	bl	8001c64 <HAL_RCC_ClockConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x4c>
		Error_Handler();
 8000b70:	f000 f930 	bl	8000dd4 <Error_Handler>
	}
	//se inicializa los paramentros del systick
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);				//1kHZ
 8000b74:	f001 f9fa 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <SystemClock_Config+0x7c>)
 8000b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8000b80:	099b      	lsrs	r3, r3, #6
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fc4d 	bl	8001422 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000b88:	2004      	movs	r0, #4
 8000b8a:	f000 fc57 	bl	800143c <HAL_SYSTICK_CLKSourceConfig>
	//se elige la señal de salida por el MCO1
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000b94:	2000      	movs	r0, #0
 8000b96:	f001 f94f 	bl	8001e38 <HAL_RCC_MCOConfig>

}
 8000b9a:	bf00      	nop
 8000b9c:	3740      	adds	r7, #64	; 0x40
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	10624dd3 	.word	0x10624dd3

08000ba8 <UART1_Init>:

void UART1_Init(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	//inicializacion de parametros del UART1
	huart1.Instance = USART1;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <UART1_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <UART1_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <UART1_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <UART1_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <UART1_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
	huart1.Init.Mode = UART_MODE_TX;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <UART1_Init+0x4c>)
 8000bc8:	2208      	movs	r2, #8
 8000bca:	615a      	str	r2, [r3, #20]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <UART1_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <UART1_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <UART1_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
	//se iniciliza el uart1
	if(HAL_UART_Init(&huart1)!=HAL_OK){
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <UART1_Init+0x4c>)
 8000be0:	f001 fe59 	bl	8002896 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <UART1_Init+0x46>
		Error_Handler();
 8000bea:	f000 f8f3 	bl	8000dd4 <Error_Handler>
	}
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000228 	.word	0x20000228
 8000bf8:	40013800 	.word	0x40013800

08000bfc <TIM2_Init>:

void TIM2_Init(void){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
	TIM_IC_InitTypeDef tim_ic = {0};
 8000c02:	463b      	mov	r3, r7
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
	//time-base init
	htim2.Instance = TIM2;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <TIM2_Init+0x6c>)
 8000c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c14:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <TIM2_Init+0x6c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <TIM2_Init+0x6c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFF-1;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <TIM2_Init+0x6c>)
 8000c24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c28:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_IC_Init(&htim2)!=HAL_OK){
 8000c2a:	480f      	ldr	r0, [pc, #60]	; (8000c68 <TIM2_Init+0x6c>)
 8000c2c:	f001 f9ee 	bl	800200c <HAL_TIM_IC_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <TIM2_Init+0x3e>
		Error_Handler();
 8000c36:	f000 f8cd 	bl	8000dd4 <Error_Handler>
	}
	//configuracion de parametros para el mode captura de entrada
	tim_ic.ICFilter = 0x0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
	tim_ic.ICPolarity = TIM_ICPOLARITY_RISING;			//deteccion de flanco ascendente
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
	tim_ic.ICPrescaler = TIM_ICPSC_DIV1;				//prescaler de la señal de entrada
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
	tim_ic.ICSelection = TIM_ICSELECTION_DIRECTTI;		//se selecciona canal de entrada directo
 8000c46:	2301      	movs	r3, #1
 8000c48:	607b      	str	r3, [r7, #4]
	if(HAL_TIM_IC_ConfigChannel(&htim2, &tim_ic, TIM_CHANNEL_1)!=HAL_OK){
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <TIM2_Init+0x6c>)
 8000c52:	f001 fb77 	bl	8002344 <HAL_TIM_IC_ConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <TIM2_Init+0x64>
		Error_Handler();
 8000c5c:	f000 f8ba 	bl	8000dd4 <Error_Handler>
	}
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000268 	.word	0x20000268

08000c6c <GPIO_Init>:

void GPIO_Init(void){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_init = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
	gpio_init.Pin = GPIO_PIN_2;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	603b      	str	r3, [r7, #0]
	gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	607b      	str	r3, [r7, #4]
	gpio_init.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
	gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &gpio_init);
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <GPIO_Init+0x34>)
 8000c94:	f000 fbf4 	bl	8001480 <HAL_GPIO_Init>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40010800 	.word	0x40010800

08000ca4 <HAL_SYSTICK_Callback>:
/*FUNCIONES QUE MANEJAN LAS INTERRUPCIONES*/
void HAL_SYSTICK_Callback(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000ca8:	2104      	movs	r1, #4
 8000caa:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <HAL_SYSTICK_Callback+0x10>)
 8000cac:	f000 fd42 	bl	8001734 <HAL_GPIO_TogglePin>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40010800 	.word	0x40010800

08000cb8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7f1b      	ldrb	r3, [r3, #28]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d161      	bne.n	8000d8c <HAL_TIM_IC_CaptureCallback+0xd4>
		if(count==1){
 8000cc8:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d10d      	bne.n	8000cec <HAL_TIM_IC_CaptureCallback+0x34>
			input_capture[0]= HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4831      	ldr	r0, [pc, #196]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000cd4:	f001 fbd2 	bl	800247c <HAL_TIM_ReadCapturedValue>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	4b30      	ldr	r3, [pc, #192]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000cdc:	601a      	str	r2, [r3, #0]
			count++;
 8000cde:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ce8:	701a      	strb	r2, [r3, #0]
			freq_ic = ((HAL_RCC_GetPCLK1Freq()/(htim->Init.Prescaler+1))/diferencia)	;

		}

	}
}
 8000cea:	e04f      	b.n	8000d8c <HAL_TIM_IC_CaptureCallback+0xd4>
		else if(count==2){
 8000cec:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d14b      	bne.n	8000d8c <HAL_TIM_IC_CaptureCallback+0xd4>
			input_capture[1]= HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4828      	ldr	r0, [pc, #160]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000cf8:	f001 fbc0 	bl	800247c <HAL_TIM_ReadCapturedValue>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000d00:	605a      	str	r2, [r3, #4]
			count = 1;
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
			if(input_capture[1]>input_capture[0]){
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d90d      	bls.n	8000d30 <HAL_TIM_IC_CaptureCallback+0x78>
				diferencia = (double)(input_capture[1]-input_capture[0]);
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fb60 	bl	80003e4 <__aeabi_ui2d>
 8000d24:	4603      	mov	r3, r0
 8000d26:	460c      	mov	r4, r1
 8000d28:	4a1d      	ldr	r2, [pc, #116]	; (8000da0 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000d2a:	e9c2 3400 	strd	r3, r4, [r2]
 8000d2e:	e017      	b.n	8000d60 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if(input_capture[0]>input_capture[1]){
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d90f      	bls.n	8000d5c <HAL_TIM_IC_CaptureCallback+0xa4>
				diferencia = (double)(0xFFFF-input_capture[0] + input_capture[1]+1);
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fb4a 	bl	80003e4 <__aeabi_ui2d>
 8000d50:	4603      	mov	r3, r0
 8000d52:	460c      	mov	r4, r1
 8000d54:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000d56:	e9c2 3400 	strd	r3, r4, [r2]
 8000d5a:	e001      	b.n	8000d60 <HAL_TIM_IC_CaptureCallback+0xa8>
				Error_Handler();
 8000d5c:	f000 f83a 	bl	8000dd4 <Error_Handler>
			freq_ic = ((HAL_RCC_GetPCLK1Freq()/(htim->Init.Prescaler+1))/diferencia)	;
 8000d60:	f001 f90e 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 8000d64:	4602      	mov	r2, r0
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fb37 	bl	80003e4 <__aeabi_ui2d>
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000d78:	cb18      	ldmia	r3, {r3, r4}
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4623      	mov	r3, r4
 8000d7e:	f7ff fcd5 	bl	800072c <__aeabi_ddiv>
 8000d82:	4603      	mov	r3, r0
 8000d84:	460c      	mov	r4, r1
 8000d86:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000d88:	e9c2 3400 	strd	r3, r4, [r2]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000268 	.word	0x20000268
 8000d9c:	200001fc 	.word	0x200001fc
 8000da0:	20000220 	.word	0x20000220
 8000da4:	20000208 	.word	0x20000208

08000da8 <__io_putchar>:
//funcion para el manejo del printf
int __io_putchar(int ch)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	uint8_t c;
	c = ch & 0x00FF;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 10);
 8000db6:	f107 010f 	add.w	r1, r7, #15
 8000dba:	230a      	movs	r3, #10
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <__io_putchar+0x28>)
 8000dc0:	f001 fdb6 	bl	8002930 <HAL_UART_Transmit>
	return ch;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000228 	.word	0x20000228

08000dd4 <Error_Handler>:

void Error_Handler(void){
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
	while(1);
 8000dd8:	e7fe      	b.n	8000dd8 <Error_Handler+0x4>
	...

08000ddc <HAL_MspInit>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"
extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim2;
void HAL_MspInit(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	/*se establece el grupo de prioridades del NVIC*/
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 fae9 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

	//2. se activa las exepciones que requiere el sistema
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <HAL_MspInit+0x40>)
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <HAL_MspInit+0x40>)
 8000dec:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000df0:	6253      	str	r3, [r2, #36]	; 0x24

	//3. se configura la prioridad de exepciones para el sistema
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	f06f 000b 	mvn.w	r0, #11
 8000dfa:	f000 fae8 	bl	80013ce <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	f06f 000a 	mvn.w	r0, #10
 8000e06:	f000 fae2 	bl	80013ce <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f06f 0009 	mvn.w	r0, #9
 8000e12:	f000 fadc 	bl	80013ce <HAL_NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <HAL_UART_MspInit>:
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
	//1.se activa el reloj para el uart1
	__HAL_RCC_USART1_CLK_ENABLE();
 8000e36:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <HAL_UART_MspInit+0x84>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ea4 <HAL_UART_MspInit+0x84>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	6193      	str	r3, [r2, #24]
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_UART_MspInit+0x84>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_UART_MspInit+0x84>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_UART_MspInit+0x84>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_UART_MspInit+0x84>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
	//2. se asignan pines al uart1
	gpio_uart.Pin = GPIO_PIN_9;
 8000e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6a:	613b      	str	r3, [r7, #16]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	617b      	str	r3, [r7, #20]
	gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e7c:	f000 fb00 	bl	8001480 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_10;
 8000e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e84:	613b      	str	r3, [r7, #16]
	gpio_uart.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
	gpio_uart.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4619      	mov	r1, r3
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e96:	f000 faf3 	bl	8001480 <HAL_GPIO_Init>
}
 8000e9a:	bf00      	nop
 8000e9c:	3720      	adds	r7, #32
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800

08000eac <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_ic = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
	//1. se activa el reloj para el tim2
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_TIM_IC_MspInit+0x60>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <HAL_TIM_IC_MspInit+0x60>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	61d3      	str	r3, [r2, #28]
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_TIM_IC_MspInit+0x60>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
	//2. se asocia un gpio para la entrada del CH1
	gpio_ic.Pin = GPIO_PIN_0;
 8000eda:	2301      	movs	r3, #1
 8000edc:	613b      	str	r3, [r7, #16]
	gpio_ic.Mode = GPIO_MODE_AF_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
	gpio_ic.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio_ic);
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4619      	mov	r1, r3
 8000eec:	4808      	ldr	r0, [pc, #32]	; (8000f10 <HAL_TIM_IC_MspInit+0x64>)
 8000eee:	f000 fac7 	bl	8001480 <HAL_GPIO_Init>

	//3. se activa la interrupcion para el tim2
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ef2:	201c      	movs	r0, #28
 8000ef4:	f000 fa87 	bl	8001406 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	210f      	movs	r1, #15
 8000efc:	201c      	movs	r0, #28
 8000efe:	f000 fa66 	bl	80013ce <HAL_NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010800 	.word	0x40010800

08000f14 <SysTick_Handler>:
#include "main.h"
#include "stm32f1xx_it.h"

extern TIM_HandleTypeDef htim2;
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000f18:	f000 f944 	bl	80011a4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000f1c:	f000 faaa 	bl	8001474 <HAL_SYSTICK_IRQHandler>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <TIM2_IRQHandler+0x10>)
 8000f2a:	f001 f903 	bl	8002134 <HAL_TIM_IRQHandler>
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000268 	.word	0x20000268

08000f38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e00a      	b.n	8000f60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f4a:	f3af 8000 	nop.w
 8000f4e:	4601      	mov	r1, r0
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	60ba      	str	r2, [r7, #8]
 8000f56:	b2ca      	uxtb	r2, r1
 8000f58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dbf0      	blt.n	8000f4a <_read+0x12>
	}

return len;
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e009      	b.n	8000f98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	60ba      	str	r2, [r7, #8]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff0b 	bl	8000da8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbf1      	blt.n	8000f84 <_write+0x12>
	}
	return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_close>:

int _close(int file)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	return -1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd0:	605a      	str	r2, [r3, #4]
	return 0;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <_isatty>:

int _isatty(int file)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
	return 1;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
	return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
	...

0800100c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_sbrk+0x50>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <_sbrk+0x16>
		heap_end = &end;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <_sbrk+0x50>)
 800101e:	4a10      	ldr	r2, [pc, #64]	; (8001060 <_sbrk+0x54>)
 8001020:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <_sbrk+0x50>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <_sbrk+0x50>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	466a      	mov	r2, sp
 8001032:	4293      	cmp	r3, r2
 8001034:	d907      	bls.n	8001046 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001036:	f001 fe39 	bl	8002cac <__errno>
 800103a:	4602      	mov	r2, r0
 800103c:	230c      	movs	r3, #12
 800103e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	e006      	b.n	8001054 <_sbrk+0x48>
	}

	heap_end += incr;
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <_sbrk+0x50>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	4a03      	ldr	r2, [pc, #12]	; (800105c <_sbrk+0x50>)
 8001050:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000210 	.word	0x20000210
 8001060:	200002b0 	.word	0x200002b0

08001064 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <SystemInit+0x5c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <SystemInit+0x5c>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <SystemInit+0x5c>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4911      	ldr	r1, [pc, #68]	; (80010c0 <SystemInit+0x5c>)
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <SystemInit+0x60>)
 800107c:	4013      	ands	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <SystemInit+0x5c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <SystemInit+0x5c>)
 8001086:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800108a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <SystemInit+0x5c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SystemInit+0x5c>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <SystemInit+0x5c>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <SystemInit+0x5c>)
 80010a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80010a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SystemInit+0x5c>)
 80010aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SystemInit+0x64>)
 80010b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	40021000 	.word	0x40021000
 80010c4:	f8ff0000 	.word	0xf8ff0000
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010ce:	e003      	b.n	80010d8 <LoopCopyDataInit>

080010d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010d6:	3104      	adds	r1, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010d8:	480a      	ldr	r0, [pc, #40]	; (8001104 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010e0:	d3f6      	bcc.n	80010d0 <CopyDataInit>
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010e4:	e002      	b.n	80010ec <LoopFillZerobss>

080010e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010e8:	f842 3b04 	str.w	r3, [r2], #4

080010ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010f0:	d3f9      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010f2:	f7ff ffb7 	bl	8001064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f6:	f001 fddf 	bl	8002cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010fa:	f7ff fcc5 	bl	8000a88 <main>
  bx lr
 80010fe:	4770      	bx	lr
  ldr r3, =_sidata
 8001100:	080057f0 	.word	0x080057f0
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001108:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 800110c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001110:	200002b0 	.word	0x200002b0

08001114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_2_IRQHandler>
	...

08001118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_Init+0x28>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_Init+0x28>)
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f945 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f808 	bl	8001144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001134:	f7ff fe52 	bl	8000ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40022000 	.word	0x40022000

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x54>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x58>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f95d 	bl	8001422 <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00e      	b.n	8001190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d80a      	bhi.n	800118e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f000 f925 	bl	80013ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_InitTick+0x5c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000004 	.word	0x20000004
 800119c:	2000000c 	.word	0x2000000c
 80011a0:	20000008 	.word	0x20000008

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_IncTick+0x1c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_IncTick+0x20>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a03      	ldr	r2, [pc, #12]	; (80011c4 <HAL_IncTick+0x20>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	2000000c 	.word	0x2000000c
 80011c4:	200002a8 	.word	0x200002a8

080011c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <HAL_GetTick+0x10>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	200002a8 	.word	0x200002a8

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff fff0 	bl	80011c8 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_Delay+0x40>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffe0 	bl	80011c8 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000000c 	.word	0x2000000c

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4906      	ldr	r1, [pc, #24]	; (80012b8 <__NVIC_EnableIRQ+0x34>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	; (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001384:	d301      	bcc.n	800138a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001386:	2301      	movs	r3, #1
 8001388:	e00f      	b.n	80013aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <SysTick_Config+0x40>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001392:	210f      	movs	r1, #15
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f7ff ff90 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <SysTick_Config+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <SysTick_Config+0x40>)
 80013a4:	2207      	movs	r2, #7
 80013a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff2d 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e0:	f7ff ff42 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff ff90 	bl	8001310 <NVIC_EncodePriority>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff5f 	bl	80012bc <__NVIC_SetPriority>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff35 	bl	8001284 <__NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffa2 	bl	8001374 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b04      	cmp	r3, #4
 8001448:	d106      	bne.n	8001458 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001456:	e005      	b.n	8001464 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800145e:	f023 0304 	bic.w	r3, r3, #4
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001478:	f7ff fc14 	bl	8000ca4 <HAL_SYSTICK_Callback>
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001480:	b480      	push	{r7}
 8001482:	b08b      	sub	sp, #44	; 0x2c
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001492:	e127      	b.n	80016e4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001494:	2201      	movs	r2, #1
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	f040 8116 	bne.w	80016de <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b12      	cmp	r3, #18
 80014b8:	d034      	beq.n	8001524 <HAL_GPIO_Init+0xa4>
 80014ba:	2b12      	cmp	r3, #18
 80014bc:	d80d      	bhi.n	80014da <HAL_GPIO_Init+0x5a>
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d02b      	beq.n	800151a <HAL_GPIO_Init+0x9a>
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d804      	bhi.n	80014d0 <HAL_GPIO_Init+0x50>
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d031      	beq.n	800152e <HAL_GPIO_Init+0xae>
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d01c      	beq.n	8001508 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ce:	e048      	b.n	8001562 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d043      	beq.n	800155c <HAL_GPIO_Init+0xdc>
 80014d4:	2b11      	cmp	r3, #17
 80014d6:	d01b      	beq.n	8001510 <HAL_GPIO_Init+0x90>
          break;
 80014d8:	e043      	b.n	8001562 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014da:	4a89      	ldr	r2, [pc, #548]	; (8001700 <HAL_GPIO_Init+0x280>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d026      	beq.n	800152e <HAL_GPIO_Init+0xae>
 80014e0:	4a87      	ldr	r2, [pc, #540]	; (8001700 <HAL_GPIO_Init+0x280>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d806      	bhi.n	80014f4 <HAL_GPIO_Init+0x74>
 80014e6:	4a87      	ldr	r2, [pc, #540]	; (8001704 <HAL_GPIO_Init+0x284>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d020      	beq.n	800152e <HAL_GPIO_Init+0xae>
 80014ec:	4a86      	ldr	r2, [pc, #536]	; (8001708 <HAL_GPIO_Init+0x288>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d01d      	beq.n	800152e <HAL_GPIO_Init+0xae>
          break;
 80014f2:	e036      	b.n	8001562 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014f4:	4a85      	ldr	r2, [pc, #532]	; (800170c <HAL_GPIO_Init+0x28c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d019      	beq.n	800152e <HAL_GPIO_Init+0xae>
 80014fa:	4a85      	ldr	r2, [pc, #532]	; (8001710 <HAL_GPIO_Init+0x290>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d016      	beq.n	800152e <HAL_GPIO_Init+0xae>
 8001500:	4a84      	ldr	r2, [pc, #528]	; (8001714 <HAL_GPIO_Init+0x294>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0xae>
          break;
 8001506:	e02c      	b.n	8001562 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e028      	b.n	8001562 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	3304      	adds	r3, #4
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	e023      	b.n	8001562 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	3308      	adds	r3, #8
 8001520:	623b      	str	r3, [r7, #32]
          break;
 8001522:	e01e      	b.n	8001562 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	330c      	adds	r3, #12
 800152a:	623b      	str	r3, [r7, #32]
          break;
 800152c:	e019      	b.n	8001562 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001536:	2304      	movs	r3, #4
 8001538:	623b      	str	r3, [r7, #32]
          break;
 800153a:	e012      	b.n	8001562 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d105      	bne.n	8001550 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001544:	2308      	movs	r3, #8
 8001546:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	611a      	str	r2, [r3, #16]
          break;
 800154e:	e008      	b.n	8001562 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	615a      	str	r2, [r3, #20]
          break;
 800155a:	e002      	b.n	8001562 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2bff      	cmp	r3, #255	; 0xff
 8001566:	d801      	bhi.n	800156c <HAL_GPIO_Init+0xec>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	e001      	b.n	8001570 <HAL_GPIO_Init+0xf0>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3304      	adds	r3, #4
 8001570:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2bff      	cmp	r3, #255	; 0xff
 8001576:	d802      	bhi.n	800157e <HAL_GPIO_Init+0xfe>
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	e002      	b.n	8001584 <HAL_GPIO_Init+0x104>
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	3b08      	subs	r3, #8
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	210f      	movs	r1, #15
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	401a      	ands	r2, r3
 8001596:	6a39      	ldr	r1, [r7, #32]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	431a      	orrs	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 8096 	beq.w	80016de <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015b2:	4b59      	ldr	r3, [pc, #356]	; (8001718 <HAL_GPIO_Init+0x298>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a58      	ldr	r2, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x298>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b56      	ldr	r3, [pc, #344]	; (8001718 <HAL_GPIO_Init+0x298>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015ca:	4a54      	ldr	r2, [pc, #336]	; (800171c <HAL_GPIO_Init+0x29c>)
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4b      	ldr	r2, [pc, #300]	; (8001720 <HAL_GPIO_Init+0x2a0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0x19e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4a      	ldr	r2, [pc, #296]	; (8001724 <HAL_GPIO_Init+0x2a4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00d      	beq.n	800161a <HAL_GPIO_Init+0x19a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a49      	ldr	r2, [pc, #292]	; (8001728 <HAL_GPIO_Init+0x2a8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x196>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a48      	ldr	r2, [pc, #288]	; (800172c <HAL_GPIO_Init+0x2ac>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_GPIO_Init+0x192>
 800160e:	2303      	movs	r3, #3
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x1a0>
 8001612:	2304      	movs	r3, #4
 8001614:	e004      	b.n	8001620 <HAL_GPIO_Init+0x1a0>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <HAL_GPIO_Init+0x1a0>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x1a0>
 800161e:	2300      	movs	r3, #0
 8001620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001622:	f002 0203 	and.w	r2, r2, #3
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001630:	493a      	ldr	r1, [pc, #232]	; (800171c <HAL_GPIO_Init+0x29c>)
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800164a:	4b39      	ldr	r3, [pc, #228]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4938      	ldr	r1, [pc, #224]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	600b      	str	r3, [r1, #0]
 8001656:	e006      	b.n	8001666 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001658:	4b35      	ldr	r3, [pc, #212]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	43db      	mvns	r3, r3
 8001660:	4933      	ldr	r1, [pc, #204]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 8001662:	4013      	ands	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001672:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	492e      	ldr	r1, [pc, #184]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	604b      	str	r3, [r1, #4]
 800167e:	e006      	b.n	800168e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	43db      	mvns	r3, r3
 8001688:	4929      	ldr	r1, [pc, #164]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 800168a:	4013      	ands	r3, r2
 800168c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	4924      	ldr	r1, [pc, #144]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
 80016a6:	e006      	b.n	80016b6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	491f      	ldr	r1, [pc, #124]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d006      	beq.n	80016d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	491a      	ldr	r1, [pc, #104]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60cb      	str	r3, [r1, #12]
 80016ce:	e006      	b.n	80016de <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	4915      	ldr	r1, [pc, #84]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 80016da:	4013      	ands	r3, r2
 80016dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	3301      	adds	r3, #1
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f47f aed0 	bne.w	8001494 <HAL_GPIO_Init+0x14>
  }
}
 80016f4:	bf00      	nop
 80016f6:	372c      	adds	r7, #44	; 0x2c
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	10210000 	.word	0x10210000
 8001704:	10110000 	.word	0x10110000
 8001708:	10120000 	.word	0x10120000
 800170c:	10310000 	.word	0x10310000
 8001710:	10320000 	.word	0x10320000
 8001714:	10220000 	.word	0x10220000
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	40010800 	.word	0x40010800
 8001724:	40010c00 	.word	0x40010c00
 8001728:	40011000 	.word	0x40011000
 800172c:	40011400 	.word	0x40011400
 8001730:	40010400 	.word	0x40010400

08001734 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800174c:	887a      	ldrh	r2, [r7, #2]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001752:	e002      	b.n	800175a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001754:	887a      	ldrh	r2, [r7, #2]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	611a      	str	r2, [r3, #16]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e26c      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8087 	beq.w	8001892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001784:	4b92      	ldr	r3, [pc, #584]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b04      	cmp	r3, #4
 800178e:	d00c      	beq.n	80017aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001790:	4b8f      	ldr	r3, [pc, #572]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b08      	cmp	r3, #8
 800179a:	d112      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e>
 800179c:	4b8c      	ldr	r3, [pc, #560]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a8:	d10b      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017aa:	4b89      	ldr	r3, [pc, #548]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d06c      	beq.n	8001890 <HAL_RCC_OscConfig+0x12c>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d168      	bne.n	8001890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e246      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x76>
 80017cc:	4b80      	ldr	r3, [pc, #512]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a7f      	ldr	r2, [pc, #508]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e02e      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x98>
 80017e2:	4b7b      	ldr	r3, [pc, #492]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a7a      	ldr	r2, [pc, #488]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b78      	ldr	r3, [pc, #480]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a77      	ldr	r2, [pc, #476]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0xbc>
 8001806:	4b72      	ldr	r3, [pc, #456]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a71      	ldr	r2, [pc, #452]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6e      	ldr	r2, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 8001820:	4b6b      	ldr	r3, [pc, #428]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a6a      	ldr	r2, [pc, #424]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a67      	ldr	r2, [pc, #412]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fcc2 	bl	80011c8 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fcbe 	bl	80011c8 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e1fa      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b5d      	ldr	r3, [pc, #372]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0xe4>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fcae 	bl	80011c8 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fcaa 	bl	80011c8 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1e6      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x10c>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d063      	beq.n	8001966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800189e:	4b4c      	ldr	r3, [pc, #304]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018aa:	4b49      	ldr	r3, [pc, #292]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d11c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x18c>
 80018b6:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d116      	bne.n	80018f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	4b43      	ldr	r3, [pc, #268]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x176>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d001      	beq.n	80018da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1ba      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4939      	ldr	r1, [pc, #228]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	e03a      	b.n	8001966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f8:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <HAL_RCC_OscConfig+0x270>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff fc63 	bl	80011c8 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff fc5f 	bl	80011c8 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e19b      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4927      	ldr	r1, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <HAL_RCC_OscConfig+0x270>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fc42 	bl	80011c8 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff fc3e 	bl	80011c8 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e17a      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d03a      	beq.n	80019e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d019      	beq.n	80019ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_RCC_OscConfig+0x274>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff fc22 	bl	80011c8 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff fc1e 	bl	80011c8 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e15a      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 fb12 	bl	8001fd0 <RCC_Delay>
 80019ac:	e01c      	b.n	80019e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_RCC_OscConfig+0x274>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7ff fc08 	bl	80011c8 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ba:	e00f      	b.n	80019dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019bc:	f7ff fc04 	bl	80011c8 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d908      	bls.n	80019dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e140      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	42420000 	.word	0x42420000
 80019d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	4b9e      	ldr	r3, [pc, #632]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1e9      	bne.n	80019bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80a6 	beq.w	8001b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fa:	4b97      	ldr	r3, [pc, #604]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10d      	bne.n	8001a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b94      	ldr	r3, [pc, #592]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a93      	ldr	r2, [pc, #588]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	61d3      	str	r3, [r2, #28]
 8001a12:	4b91      	ldr	r3, [pc, #580]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a22:	4b8e      	ldr	r3, [pc, #568]	; (8001c5c <HAL_RCC_OscConfig+0x4f8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d118      	bne.n	8001a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2e:	4b8b      	ldr	r3, [pc, #556]	; (8001c5c <HAL_RCC_OscConfig+0x4f8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a8a      	ldr	r2, [pc, #552]	; (8001c5c <HAL_RCC_OscConfig+0x4f8>)
 8001a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fbc5 	bl	80011c8 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7ff fbc1 	bl	80011c8 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b64      	cmp	r3, #100	; 0x64
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0fd      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	4b81      	ldr	r3, [pc, #516]	; (8001c5c <HAL_RCC_OscConfig+0x4f8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x312>
 8001a68:	4b7b      	ldr	r3, [pc, #492]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4a7a      	ldr	r2, [pc, #488]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6213      	str	r3, [r2, #32]
 8001a74:	e02d      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x334>
 8001a7e:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4a75      	ldr	r2, [pc, #468]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6213      	str	r3, [r2, #32]
 8001a8a:	4b73      	ldr	r3, [pc, #460]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a72      	ldr	r2, [pc, #456]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	f023 0304 	bic.w	r3, r3, #4
 8001a94:	6213      	str	r3, [r2, #32]
 8001a96:	e01c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d10c      	bne.n	8001aba <HAL_RCC_OscConfig+0x356>
 8001aa0:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4a6c      	ldr	r2, [pc, #432]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	6213      	str	r3, [r2, #32]
 8001aac:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a69      	ldr	r2, [pc, #420]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6213      	str	r3, [r2, #32]
 8001ab8:	e00b      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001aba:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a66      	ldr	r2, [pc, #408]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	4b64      	ldr	r3, [pc, #400]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a63      	ldr	r2, [pc, #396]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d015      	beq.n	8001b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fb75 	bl	80011c8 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7ff fb71 	bl	80011c8 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0ab      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af8:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ee      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x37e>
 8001b04:	e014      	b.n	8001b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7ff fb5f 	bl	80011c8 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff fb5b 	bl	80011c8 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e095      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b24:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1ee      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d105      	bne.n	8001b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a47      	ldr	r2, [pc, #284]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8081 	beq.w	8001c4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4c:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d061      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d146      	bne.n	8001bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b60:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <HAL_RCC_OscConfig+0x4fc>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff fb2f 	bl	80011c8 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff fb2b 	bl	80011c8 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e067      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b94:	d108      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	492d      	ldr	r1, [pc, #180]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a19      	ldr	r1, [r3, #32]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	4927      	ldr	r1, [pc, #156]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_RCC_OscConfig+0x4fc>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff faff 	bl	80011c8 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7ff fafb 	bl	80011c8 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e037      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x46a>
 8001bec:	e02f      	b.n	8001c4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_RCC_OscConfig+0x4fc>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fae8 	bl	80011c8 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff fae4 	bl	80011c8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e020      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x498>
 8001c1a:	e018      	b.n	8001c4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e013      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	42420060 	.word	0x42420060

08001c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0d0      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d910      	bls.n	8001ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c86:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 0207 	bic.w	r2, r3, #7
 8001c8e:	4965      	ldr	r1, [pc, #404]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b63      	ldr	r3, [pc, #396]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0b8      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc0:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cd8:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce4:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	494d      	ldr	r1, [pc, #308]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d040      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d115      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e07f      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d22:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e073      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e06b      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f023 0203 	bic.w	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4936      	ldr	r1, [pc, #216]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d54:	f7ff fa38 	bl	80011c8 <HAL_GetTick>
 8001d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f7ff fa34 	bl	80011c8 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e053      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 020c 	and.w	r2, r3, #12
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d1eb      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d210      	bcs.n	8001db4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 0207 	bic.w	r2, r3, #7
 8001d9a:	4922      	ldr	r1, [pc, #136]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e032      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4916      	ldr	r1, [pc, #88]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	490e      	ldr	r1, [pc, #56]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001df2:	f000 f859 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 8001df6:	4601      	mov	r1, r0
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_RCC_ClockConfig+0x1c8>)
 8001e04:	5cd3      	ldrb	r3, [r2, r3]
 8001e06:	fa21 f303 	lsr.w	r3, r1, r3
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_RCC_ClockConfig+0x1cc>)
 8001e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_RCC_ClockConfig+0x1d0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff f996 	bl	8001144 <HAL_InitTick>

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40022000 	.word	0x40022000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	0800550c 	.word	0x0800550c
 8001e30:	20000004 	.word	0x20000004
 8001e34:	20000008 	.word	0x20000008

08001e38 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8001e44:	f107 0318 	add.w	r3, r7, #24
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8001e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e62:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_RCC_MCOConfig+0x68>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a0d      	ldr	r2, [pc, #52]	; (8001ea0 <HAL_RCC_MCOConfig+0x68>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_MCOConfig+0x68>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	4619      	mov	r1, r3
 8001e82:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <HAL_RCC_MCOConfig+0x6c>)
 8001e84:	f7ff fafc 	bl	8001480 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_RCC_MCOConfig+0x68>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001e90:	4903      	ldr	r1, [pc, #12]	; (8001ea0 <HAL_RCC_MCOConfig+0x68>)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
}
 8001e98:	bf00      	nop
 8001e9a:	3728      	adds	r7, #40	; 0x28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010800 	.word	0x40010800

08001ea8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea8:	b490      	push	{r4, r7}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001eb0:	1d3c      	adds	r4, r7, #4
 8001eb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ed2:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d002      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d003      	beq.n	8001eee <HAL_RCC_GetSysClockFreq+0x46>
 8001ee6:	e02d      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ee8:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eea:	623b      	str	r3, [r7, #32]
      break;
 8001eec:	e02d      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	0c9b      	lsrs	r3, r3, #18
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001efa:	4413      	add	r3, r2
 8001efc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d013      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	0c5b      	lsrs	r3, r3, #17
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f26:	fb02 f203 	mul.w	r2, r2, r3
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
 8001f32:	e004      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	623b      	str	r3, [r7, #32]
      break;
 8001f42:	e002      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f46:	623b      	str	r3, [r7, #32]
      break;
 8001f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc90      	pop	{r4, r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	080054f8 	.word	0x080054f8
 8001f5c:	08005508 	.word	0x08005508
 8001f60:	40021000 	.word	0x40021000
 8001f64:	007a1200 	.word	0x007a1200
 8001f68:	003d0900 	.word	0x003d0900

08001f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	20000004 	.word	0x20000004

08001f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f84:	f7ff fff2 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001f88:	4601      	mov	r1, r0
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	4a03      	ldr	r2, [pc, #12]	; (8001fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	0800551c 	.word	0x0800551c

08001fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fac:	f7ff ffde 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	0adb      	lsrs	r3, r3, #11
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	4a03      	ldr	r2, [pc, #12]	; (8001fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	0800551c 	.word	0x0800551c

08001fd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <RCC_Delay+0x34>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <RCC_Delay+0x38>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0a5b      	lsrs	r3, r3, #9
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fec:	bf00      	nop
  }
  while (Delay --);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	60fa      	str	r2, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f9      	bne.n	8001fec <RCC_Delay+0x1c>
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000004 	.word	0x20000004
 8002008:	10624dd3 	.word	0x10624dd3

0800200c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e01d      	b.n	800205a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d106      	bne.n	8002038 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe ff3a 	bl	8000eac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3304      	adds	r3, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4610      	mov	r0, r2
 800204c:	f000 fa7e 	bl	800254c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b0c      	cmp	r3, #12
 8002072:	d841      	bhi.n	80020f8 <HAL_TIM_IC_Start_IT+0x94>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <HAL_TIM_IC_Start_IT+0x18>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	080020b1 	.word	0x080020b1
 8002080:	080020f9 	.word	0x080020f9
 8002084:	080020f9 	.word	0x080020f9
 8002088:	080020f9 	.word	0x080020f9
 800208c:	080020c3 	.word	0x080020c3
 8002090:	080020f9 	.word	0x080020f9
 8002094:	080020f9 	.word	0x080020f9
 8002098:	080020f9 	.word	0x080020f9
 800209c:	080020d5 	.word	0x080020d5
 80020a0:	080020f9 	.word	0x080020f9
 80020a4:	080020f9 	.word	0x080020f9
 80020a8:	080020f9 	.word	0x080020f9
 80020ac:	080020e7 	.word	0x080020e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0202 	orr.w	r2, r2, #2
 80020be:	60da      	str	r2, [r3, #12]
      break;
 80020c0:	e01b      	b.n	80020fa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0204 	orr.w	r2, r2, #4
 80020d0:	60da      	str	r2, [r3, #12]
      break;
 80020d2:	e012      	b.n	80020fa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0208 	orr.w	r2, r2, #8
 80020e2:	60da      	str	r2, [r3, #12]
      break;
 80020e4:	e009      	b.n	80020fa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0210 	orr.w	r2, r2, #16
 80020f4:	60da      	str	r2, [r3, #12]
      break;
 80020f6:	e000      	b.n	80020fa <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80020f8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	6839      	ldr	r1, [r7, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fb91 	bl	800282a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b06      	cmp	r3, #6
 8002118:	d007      	beq.n	800212a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0201 	orr.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b02      	cmp	r3, #2
 8002148:	d122      	bne.n	8002190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b02      	cmp	r3, #2
 8002156:	d11b      	bne.n	8002190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0202 	mvn.w	r2, #2
 8002160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe fd9e 	bl	8000cb8 <HAL_TIM_IC_CaptureCallback>
 800217c:	e005      	b.n	800218a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f9c9 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f9cf 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b04      	cmp	r3, #4
 800219c:	d122      	bne.n	80021e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d11b      	bne.n	80021e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0204 	mvn.w	r2, #4
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fd74 	bl	8000cb8 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f99f 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f9a5 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d122      	bne.n	8002238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d11b      	bne.n	8002238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0208 	mvn.w	r2, #8
 8002208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2204      	movs	r2, #4
 800220e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe fd4a 	bl	8000cb8 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f975 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f97b 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b10      	cmp	r3, #16
 8002244:	d122      	bne.n	800228c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b10      	cmp	r3, #16
 8002252:	d11b      	bne.n	800228c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0210 	mvn.w	r2, #16
 800225c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2208      	movs	r2, #8
 8002262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fd20 	bl	8000cb8 <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f94b 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f951 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b01      	cmp	r3, #1
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0201 	mvn.w	r2, #1
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f926 	bl	8002504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c2:	2b80      	cmp	r3, #128	; 0x80
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	d107      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fad0 	bl	8002884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ee:	2b40      	cmp	r3, #64	; 0x40
 80022f0:	d10e      	bne.n	8002310 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	d107      	bne.n	8002310 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f915 	bl	800253a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b20      	cmp	r3, #32
 800231c:	d10e      	bne.n	800233c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b20      	cmp	r3, #32
 800232a:	d107      	bne.n	800233c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0220 	mvn.w	r2, #32
 8002334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fa9b 	bl	8002872 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_TIM_IC_ConfigChannel+0x1a>
 800235a:	2302      	movs	r3, #2
 800235c:	e08a      	b.n	8002474 <HAL_TIM_IC_ConfigChannel+0x130>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d11b      	bne.n	80023ac <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f000 f944 	bl	8002610 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 020c 	bic.w	r2, r2, #12
 8002396:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6999      	ldr	r1, [r3, #24]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	619a      	str	r2, [r3, #24]
 80023aa:	e05a      	b.n	8002462 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d11c      	bne.n	80023ec <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f000 f97f 	bl	80026c4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699a      	ldr	r2, [r3, #24]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6999      	ldr	r1, [r3, #24]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	021a      	lsls	r2, r3, #8
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	619a      	str	r2, [r3, #24]
 80023ea:	e03a      	b.n	8002462 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d11b      	bne.n	800242a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	6819      	ldr	r1, [r3, #0]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f000 f99b 	bl	800273c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 020c 	bic.w	r2, r2, #12
 8002414:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69d9      	ldr	r1, [r3, #28]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	61da      	str	r2, [r3, #28]
 8002428:	e01b      	b.n	8002462 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f000 f9ba 	bl	80027b2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800244c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69d9      	ldr	r1, [r3, #28]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	021a      	lsls	r2, r3, #8
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b0c      	cmp	r3, #12
 800248e:	d831      	bhi.n	80024f4 <HAL_TIM_ReadCapturedValue+0x78>
 8002490:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002496:	bf00      	nop
 8002498:	080024cd 	.word	0x080024cd
 800249c:	080024f5 	.word	0x080024f5
 80024a0:	080024f5 	.word	0x080024f5
 80024a4:	080024f5 	.word	0x080024f5
 80024a8:	080024d7 	.word	0x080024d7
 80024ac:	080024f5 	.word	0x080024f5
 80024b0:	080024f5 	.word	0x080024f5
 80024b4:	080024f5 	.word	0x080024f5
 80024b8:	080024e1 	.word	0x080024e1
 80024bc:	080024f5 	.word	0x080024f5
 80024c0:	080024f5 	.word	0x080024f5
 80024c4:	080024f5 	.word	0x080024f5
 80024c8:	080024eb 	.word	0x080024eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d2:	60fb      	str	r3, [r7, #12]

      break;
 80024d4:	e00f      	b.n	80024f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	60fb      	str	r3, [r7, #12]

      break;
 80024de:	e00a      	b.n	80024f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	60fb      	str	r3, [r7, #12]

      break;
 80024e8:	e005      	b.n	80024f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	60fb      	str	r3, [r7, #12]

      break;
 80024f2:	e000      	b.n	80024f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80024f4:	bf00      	nop
  }

  return tmpreg;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop

08002504 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a29      	ldr	r2, [pc, #164]	; (8002604 <TIM_Base_SetConfig+0xb8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00b      	beq.n	800257c <TIM_Base_SetConfig+0x30>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256a:	d007      	beq.n	800257c <TIM_Base_SetConfig+0x30>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a26      	ldr	r2, [pc, #152]	; (8002608 <TIM_Base_SetConfig+0xbc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d003      	beq.n	800257c <TIM_Base_SetConfig+0x30>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a25      	ldr	r2, [pc, #148]	; (800260c <TIM_Base_SetConfig+0xc0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d108      	bne.n	800258e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <TIM_Base_SetConfig+0xb8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00b      	beq.n	80025ae <TIM_Base_SetConfig+0x62>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d007      	beq.n	80025ae <TIM_Base_SetConfig+0x62>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a19      	ldr	r2, [pc, #100]	; (8002608 <TIM_Base_SetConfig+0xbc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d003      	beq.n	80025ae <TIM_Base_SetConfig+0x62>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a18      	ldr	r2, [pc, #96]	; (800260c <TIM_Base_SetConfig+0xc0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d108      	bne.n	80025c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a07      	ldr	r2, [pc, #28]	; (8002604 <TIM_Base_SetConfig+0xb8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d103      	bne.n	80025f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	615a      	str	r2, [r3, #20]
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40000400 	.word	0x40000400
 800260c:	40000800 	.word	0x40000800

08002610 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f023 0201 	bic.w	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <TIM_TI1_SetConfig+0xa8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00b      	beq.n	8002656 <TIM_TI1_SetConfig+0x46>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002644:	d007      	beq.n	8002656 <TIM_TI1_SetConfig+0x46>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <TIM_TI1_SetConfig+0xac>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d003      	beq.n	8002656 <TIM_TI1_SetConfig+0x46>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a1b      	ldr	r2, [pc, #108]	; (80026c0 <TIM_TI1_SetConfig+0xb0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <TIM_TI1_SetConfig+0x4a>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <TIM_TI1_SetConfig+0x4c>
 800265a:	2300      	movs	r3, #0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	e003      	b.n	800267a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002680:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	b2db      	uxtb	r3, r3
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f023 030a 	bic.w	r3, r3, #10
 8002694:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f003 030a 	and.w	r3, r3, #10
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	621a      	str	r2, [r3, #32]
}
 80026ae:	bf00      	nop
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40000800 	.word	0x40000800

080026c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f023 0210 	bic.w	r2, r3, #16
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002702:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	031b      	lsls	r3, r3, #12
 8002708:	b29b      	uxth	r3, r3
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002716:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	621a      	str	r2, [r3, #32]
}
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f023 0303 	bic.w	r3, r3, #3
 8002768:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002778:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	b2db      	uxtb	r3, r3
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800278c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	621a      	str	r2, [r3, #32]
}
 80027a8:	bf00      	nop
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b087      	sub	sp, #28
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	031b      	lsls	r3, r3, #12
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002804:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	031b      	lsls	r3, r3, #12
 800280a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	621a      	str	r2, [r3, #32]
}
 8002820:	bf00      	nop
 8002822:	371c      	adds	r7, #28
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800282a:	b480      	push	{r7}
 800282c:	b087      	sub	sp, #28
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	2201      	movs	r2, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	43db      	mvns	r3, r3
 800284c:	401a      	ands	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a1a      	ldr	r2, [r3, #32]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	431a      	orrs	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	621a      	str	r2, [r3, #32]
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e03f      	b.n	8002928 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7fe faaf 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2224      	movs	r2, #36	; 0x24
 80028c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f90c 	bl	8002af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800290e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b20      	cmp	r3, #32
 800294e:	f040 8083 	bne.w	8002a58 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_UART_Transmit+0x2e>
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e07b      	b.n	8002a5a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_UART_Transmit+0x40>
 800296c:	2302      	movs	r3, #2
 800296e:	e074      	b.n	8002a5a <HAL_UART_Transmit+0x12a>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2221      	movs	r2, #33	; 0x21
 8002982:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002986:	f7fe fc1f 	bl	80011c8 <HAL_GetTick>
 800298a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	88fa      	ldrh	r2, [r7, #6]
 8002990:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002998:	e042      	b.n	8002a20 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b0:	d122      	bne.n	80029f8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f850 	bl	8002a62 <UART_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e046      	b.n	8002a5a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029de:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d103      	bne.n	80029f0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	3302      	adds	r3, #2
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	e017      	b.n	8002a20 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	3301      	adds	r3, #1
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	e013      	b.n	8002a20 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2200      	movs	r2, #0
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f82d 	bl	8002a62 <UART_WaitOnFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e023      	b.n	8002a5a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	60ba      	str	r2, [r7, #8]
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1b7      	bne.n	800299a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2140      	movs	r1, #64	; 0x40
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f814 	bl	8002a62 <UART_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e00a      	b.n	8002a5a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a72:	e02c      	b.n	8002ace <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d028      	beq.n	8002ace <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a82:	f7fe fba1 	bl	80011c8 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d21d      	bcs.n	8002ace <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002aa0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0201 	bic.w	r2, r2, #1
 8002ab0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e00f      	b.n	8002aee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	bf0c      	ite	eq
 8002ade:	2301      	moveq	r3, #1
 8002ae0:	2300      	movne	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d0c3      	beq.n	8002a74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b32:	f023 030c 	bic.w	r3, r3, #12
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	68f9      	ldr	r1, [r7, #12]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <UART_SetConfig+0x1ac>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d14e      	bne.n	8002bfe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b60:	f7ff fa22 	bl	8001fa8 <HAL_RCC_GetPCLK2Freq>
 8002b64:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009a      	lsls	r2, r3, #2
 8002b70:	441a      	add	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7c:	4a4a      	ldr	r2, [pc, #296]	; (8002ca8 <UART_SetConfig+0x1b0>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	0119      	lsls	r1, r3, #4
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	441a      	add	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b9c:	4b42      	ldr	r3, [pc, #264]	; (8002ca8 <UART_SetConfig+0x1b0>)
 8002b9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2064      	movs	r0, #100	; 0x64
 8002ba6:	fb00 f303 	mul.w	r3, r0, r3
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	3332      	adds	r3, #50	; 0x32
 8002bb0:	4a3d      	ldr	r2, [pc, #244]	; (8002ca8 <UART_SetConfig+0x1b0>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bbc:	4419      	add	r1, r3
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009a      	lsls	r2, r3, #2
 8002bc8:	441a      	add	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bd4:	4b34      	ldr	r3, [pc, #208]	; (8002ca8 <UART_SetConfig+0x1b0>)
 8002bd6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2064      	movs	r0, #100	; 0x64
 8002bde:	fb00 f303 	mul.w	r3, r0, r3
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	3332      	adds	r3, #50	; 0x32
 8002be8:	4a2f      	ldr	r2, [pc, #188]	; (8002ca8 <UART_SetConfig+0x1b0>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	f003 020f 	and.w	r2, r3, #15
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	440a      	add	r2, r1
 8002bfa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002bfc:	e04d      	b.n	8002c9a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bfe:	f7ff f9bf 	bl	8001f80 <HAL_RCC_GetPCLK1Freq>
 8002c02:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009a      	lsls	r2, r3, #2
 8002c0e:	441a      	add	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1a:	4a23      	ldr	r2, [pc, #140]	; (8002ca8 <UART_SetConfig+0x1b0>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	0119      	lsls	r1, r3, #4
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009a      	lsls	r2, r3, #2
 8002c2e:	441a      	add	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <UART_SetConfig+0x1b0>)
 8002c3c:	fba3 0302 	umull	r0, r3, r3, r2
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	2064      	movs	r0, #100	; 0x64
 8002c44:	fb00 f303 	mul.w	r3, r0, r3
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	3332      	adds	r3, #50	; 0x32
 8002c4e:	4a16      	ldr	r2, [pc, #88]	; (8002ca8 <UART_SetConfig+0x1b0>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c5a:	4419      	add	r1, r3
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	009a      	lsls	r2, r3, #2
 8002c66:	441a      	add	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <UART_SetConfig+0x1b0>)
 8002c74:	fba3 0302 	umull	r0, r3, r3, r2
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	2064      	movs	r0, #100	; 0x64
 8002c7c:	fb00 f303 	mul.w	r3, r0, r3
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	3332      	adds	r3, #50	; 0x32
 8002c86:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <UART_SetConfig+0x1b0>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	f003 020f 	and.w	r2, r3, #15
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	440a      	add	r2, r1
 8002c98:	609a      	str	r2, [r3, #8]
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	51eb851f 	.word	0x51eb851f

08002cac <__errno>:
 8002cac:	4b01      	ldr	r3, [pc, #4]	; (8002cb4 <__errno+0x8>)
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000010 	.word	0x20000010

08002cb8 <__libc_init_array>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	2500      	movs	r5, #0
 8002cbc:	4e0c      	ldr	r6, [pc, #48]	; (8002cf0 <__libc_init_array+0x38>)
 8002cbe:	4c0d      	ldr	r4, [pc, #52]	; (8002cf4 <__libc_init_array+0x3c>)
 8002cc0:	1ba4      	subs	r4, r4, r6
 8002cc2:	10a4      	asrs	r4, r4, #2
 8002cc4:	42a5      	cmp	r5, r4
 8002cc6:	d109      	bne.n	8002cdc <__libc_init_array+0x24>
 8002cc8:	f002 fbac 	bl	8005424 <_init>
 8002ccc:	2500      	movs	r5, #0
 8002cce:	4e0a      	ldr	r6, [pc, #40]	; (8002cf8 <__libc_init_array+0x40>)
 8002cd0:	4c0a      	ldr	r4, [pc, #40]	; (8002cfc <__libc_init_array+0x44>)
 8002cd2:	1ba4      	subs	r4, r4, r6
 8002cd4:	10a4      	asrs	r4, r4, #2
 8002cd6:	42a5      	cmp	r5, r4
 8002cd8:	d105      	bne.n	8002ce6 <__libc_init_array+0x2e>
 8002cda:	bd70      	pop	{r4, r5, r6, pc}
 8002cdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ce0:	4798      	blx	r3
 8002ce2:	3501      	adds	r5, #1
 8002ce4:	e7ee      	b.n	8002cc4 <__libc_init_array+0xc>
 8002ce6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cea:	4798      	blx	r3
 8002cec:	3501      	adds	r5, #1
 8002cee:	e7f2      	b.n	8002cd6 <__libc_init_array+0x1e>
 8002cf0:	080057e8 	.word	0x080057e8
 8002cf4:	080057e8 	.word	0x080057e8
 8002cf8:	080057e8 	.word	0x080057e8
 8002cfc:	080057ec 	.word	0x080057ec

08002d00 <memset>:
 8002d00:	4603      	mov	r3, r0
 8002d02:	4402      	add	r2, r0
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d100      	bne.n	8002d0a <memset+0xa>
 8002d08:	4770      	bx	lr
 8002d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d0e:	e7f9      	b.n	8002d04 <memset+0x4>

08002d10 <__cvt>:
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d16:	461e      	mov	r6, r3
 8002d18:	bfbb      	ittet	lt
 8002d1a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002d1e:	461e      	movlt	r6, r3
 8002d20:	2300      	movge	r3, #0
 8002d22:	232d      	movlt	r3, #45	; 0x2d
 8002d24:	b088      	sub	sp, #32
 8002d26:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002d28:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002d2c:	f027 0720 	bic.w	r7, r7, #32
 8002d30:	2f46      	cmp	r7, #70	; 0x46
 8002d32:	4614      	mov	r4, r2
 8002d34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002d36:	700b      	strb	r3, [r1, #0]
 8002d38:	d004      	beq.n	8002d44 <__cvt+0x34>
 8002d3a:	2f45      	cmp	r7, #69	; 0x45
 8002d3c:	d100      	bne.n	8002d40 <__cvt+0x30>
 8002d3e:	3501      	adds	r5, #1
 8002d40:	2302      	movs	r3, #2
 8002d42:	e000      	b.n	8002d46 <__cvt+0x36>
 8002d44:	2303      	movs	r3, #3
 8002d46:	aa07      	add	r2, sp, #28
 8002d48:	9204      	str	r2, [sp, #16]
 8002d4a:	aa06      	add	r2, sp, #24
 8002d4c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002d50:	e9cd 3500 	strd	r3, r5, [sp]
 8002d54:	4622      	mov	r2, r4
 8002d56:	4633      	mov	r3, r6
 8002d58:	f000 fdf6 	bl	8003948 <_dtoa_r>
 8002d5c:	2f47      	cmp	r7, #71	; 0x47
 8002d5e:	4680      	mov	r8, r0
 8002d60:	d102      	bne.n	8002d68 <__cvt+0x58>
 8002d62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d64:	07db      	lsls	r3, r3, #31
 8002d66:	d526      	bpl.n	8002db6 <__cvt+0xa6>
 8002d68:	2f46      	cmp	r7, #70	; 0x46
 8002d6a:	eb08 0905 	add.w	r9, r8, r5
 8002d6e:	d111      	bne.n	8002d94 <__cvt+0x84>
 8002d70:	f898 3000 	ldrb.w	r3, [r8]
 8002d74:	2b30      	cmp	r3, #48	; 0x30
 8002d76:	d10a      	bne.n	8002d8e <__cvt+0x7e>
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	4631      	mov	r1, r6
 8002d80:	f7fd fe12 	bl	80009a8 <__aeabi_dcmpeq>
 8002d84:	b918      	cbnz	r0, 8002d8e <__cvt+0x7e>
 8002d86:	f1c5 0501 	rsb	r5, r5, #1
 8002d8a:	f8ca 5000 	str.w	r5, [sl]
 8002d8e:	f8da 3000 	ldr.w	r3, [sl]
 8002d92:	4499      	add	r9, r3
 8002d94:	2200      	movs	r2, #0
 8002d96:	2300      	movs	r3, #0
 8002d98:	4620      	mov	r0, r4
 8002d9a:	4631      	mov	r1, r6
 8002d9c:	f7fd fe04 	bl	80009a8 <__aeabi_dcmpeq>
 8002da0:	b938      	cbnz	r0, 8002db2 <__cvt+0xa2>
 8002da2:	2230      	movs	r2, #48	; 0x30
 8002da4:	9b07      	ldr	r3, [sp, #28]
 8002da6:	454b      	cmp	r3, r9
 8002da8:	d205      	bcs.n	8002db6 <__cvt+0xa6>
 8002daa:	1c59      	adds	r1, r3, #1
 8002dac:	9107      	str	r1, [sp, #28]
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e7f8      	b.n	8002da4 <__cvt+0x94>
 8002db2:	f8cd 901c 	str.w	r9, [sp, #28]
 8002db6:	4640      	mov	r0, r8
 8002db8:	9b07      	ldr	r3, [sp, #28]
 8002dba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002dbc:	eba3 0308 	sub.w	r3, r3, r8
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	b008      	add	sp, #32
 8002dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002dc8 <__exponent>:
 8002dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dca:	2900      	cmp	r1, #0
 8002dcc:	bfb4      	ite	lt
 8002dce:	232d      	movlt	r3, #45	; 0x2d
 8002dd0:	232b      	movge	r3, #43	; 0x2b
 8002dd2:	4604      	mov	r4, r0
 8002dd4:	bfb8      	it	lt
 8002dd6:	4249      	neglt	r1, r1
 8002dd8:	2909      	cmp	r1, #9
 8002dda:	f804 2b02 	strb.w	r2, [r4], #2
 8002dde:	7043      	strb	r3, [r0, #1]
 8002de0:	dd21      	ble.n	8002e26 <__exponent+0x5e>
 8002de2:	f10d 0307 	add.w	r3, sp, #7
 8002de6:	461f      	mov	r7, r3
 8002de8:	260a      	movs	r6, #10
 8002dea:	fb91 f5f6 	sdiv	r5, r1, r6
 8002dee:	fb06 1115 	mls	r1, r6, r5, r1
 8002df2:	2d09      	cmp	r5, #9
 8002df4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002df8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002dfc:	f103 32ff 	add.w	r2, r3, #4294967295
 8002e00:	4629      	mov	r1, r5
 8002e02:	dc09      	bgt.n	8002e18 <__exponent+0x50>
 8002e04:	3130      	adds	r1, #48	; 0x30
 8002e06:	3b02      	subs	r3, #2
 8002e08:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002e0c:	42bb      	cmp	r3, r7
 8002e0e:	4622      	mov	r2, r4
 8002e10:	d304      	bcc.n	8002e1c <__exponent+0x54>
 8002e12:	1a10      	subs	r0, r2, r0
 8002e14:	b003      	add	sp, #12
 8002e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e18:	4613      	mov	r3, r2
 8002e1a:	e7e6      	b.n	8002dea <__exponent+0x22>
 8002e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e20:	f804 2b01 	strb.w	r2, [r4], #1
 8002e24:	e7f2      	b.n	8002e0c <__exponent+0x44>
 8002e26:	2330      	movs	r3, #48	; 0x30
 8002e28:	4419      	add	r1, r3
 8002e2a:	7083      	strb	r3, [r0, #2]
 8002e2c:	1d02      	adds	r2, r0, #4
 8002e2e:	70c1      	strb	r1, [r0, #3]
 8002e30:	e7ef      	b.n	8002e12 <__exponent+0x4a>
	...

08002e34 <_printf_float>:
 8002e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e38:	b091      	sub	sp, #68	; 0x44
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002e3e:	4693      	mov	fp, r2
 8002e40:	461e      	mov	r6, r3
 8002e42:	4605      	mov	r5, r0
 8002e44:	f001 fcae 	bl	80047a4 <_localeconv_r>
 8002e48:	6803      	ldr	r3, [r0, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e4e:	f7fd f97f 	bl	8000150 <strlen>
 8002e52:	2300      	movs	r3, #0
 8002e54:	930e      	str	r3, [sp, #56]	; 0x38
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	900a      	str	r0, [sp, #40]	; 0x28
 8002e5a:	3307      	adds	r3, #7
 8002e5c:	f023 0307 	bic.w	r3, r3, #7
 8002e60:	f103 0208 	add.w	r2, r3, #8
 8002e64:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002e68:	f8d4 a000 	ldr.w	sl, [r4]
 8002e6c:	603a      	str	r2, [r7, #0]
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002e76:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002e7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e80:	f04f 32ff 	mov.w	r2, #4294967295
 8002e84:	4ba6      	ldr	r3, [pc, #664]	; (8003120 <_printf_float+0x2ec>)
 8002e86:	4638      	mov	r0, r7
 8002e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e8a:	f7fd fdbf 	bl	8000a0c <__aeabi_dcmpun>
 8002e8e:	bb68      	cbnz	r0, 8002eec <_printf_float+0xb8>
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	4ba2      	ldr	r3, [pc, #648]	; (8003120 <_printf_float+0x2ec>)
 8002e96:	4638      	mov	r0, r7
 8002e98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e9a:	f7fd fd99 	bl	80009d0 <__aeabi_dcmple>
 8002e9e:	bb28      	cbnz	r0, 8002eec <_printf_float+0xb8>
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	4638      	mov	r0, r7
 8002ea6:	4649      	mov	r1, r9
 8002ea8:	f7fd fd88 	bl	80009bc <__aeabi_dcmplt>
 8002eac:	b110      	cbz	r0, 8002eb4 <_printf_float+0x80>
 8002eae:	232d      	movs	r3, #45	; 0x2d
 8002eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eb4:	4f9b      	ldr	r7, [pc, #620]	; (8003124 <_printf_float+0x2f0>)
 8002eb6:	4b9c      	ldr	r3, [pc, #624]	; (8003128 <_printf_float+0x2f4>)
 8002eb8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002ebc:	bf98      	it	ls
 8002ebe:	461f      	movls	r7, r3
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	f04f 0900 	mov.w	r9, #0
 8002ec6:	6123      	str	r3, [r4, #16]
 8002ec8:	f02a 0304 	bic.w	r3, sl, #4
 8002ecc:	6023      	str	r3, [r4, #0]
 8002ece:	9600      	str	r6, [sp, #0]
 8002ed0:	465b      	mov	r3, fp
 8002ed2:	aa0f      	add	r2, sp, #60	; 0x3c
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f000 f9e2 	bl	80032a0 <_printf_common>
 8002edc:	3001      	adds	r0, #1
 8002ede:	f040 8090 	bne.w	8003002 <_printf_float+0x1ce>
 8002ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee6:	b011      	add	sp, #68	; 0x44
 8002ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eec:	463a      	mov	r2, r7
 8002eee:	464b      	mov	r3, r9
 8002ef0:	4638      	mov	r0, r7
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	f7fd fd8a 	bl	8000a0c <__aeabi_dcmpun>
 8002ef8:	b110      	cbz	r0, 8002f00 <_printf_float+0xcc>
 8002efa:	4f8c      	ldr	r7, [pc, #560]	; (800312c <_printf_float+0x2f8>)
 8002efc:	4b8c      	ldr	r3, [pc, #560]	; (8003130 <_printf_float+0x2fc>)
 8002efe:	e7db      	b.n	8002eb8 <_printf_float+0x84>
 8002f00:	6863      	ldr	r3, [r4, #4]
 8002f02:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002f06:	1c59      	adds	r1, r3, #1
 8002f08:	a80d      	add	r0, sp, #52	; 0x34
 8002f0a:	a90e      	add	r1, sp, #56	; 0x38
 8002f0c:	d140      	bne.n	8002f90 <_printf_float+0x15c>
 8002f0e:	2306      	movs	r3, #6
 8002f10:	6063      	str	r3, [r4, #4]
 8002f12:	f04f 0c00 	mov.w	ip, #0
 8002f16:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002f1a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002f1e:	6863      	ldr	r3, [r4, #4]
 8002f20:	6022      	str	r2, [r4, #0]
 8002f22:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	463a      	mov	r2, r7
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002f30:	4628      	mov	r0, r5
 8002f32:	f7ff feed 	bl	8002d10 <__cvt>
 8002f36:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002f3a:	2b47      	cmp	r3, #71	; 0x47
 8002f3c:	4607      	mov	r7, r0
 8002f3e:	d109      	bne.n	8002f54 <_printf_float+0x120>
 8002f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f42:	1cd8      	adds	r0, r3, #3
 8002f44:	db02      	blt.n	8002f4c <_printf_float+0x118>
 8002f46:	6862      	ldr	r2, [r4, #4]
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	dd47      	ble.n	8002fdc <_printf_float+0x1a8>
 8002f4c:	f1a8 0802 	sub.w	r8, r8, #2
 8002f50:	fa5f f888 	uxtb.w	r8, r8
 8002f54:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002f58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002f5a:	d824      	bhi.n	8002fa6 <_printf_float+0x172>
 8002f5c:	3901      	subs	r1, #1
 8002f5e:	4642      	mov	r2, r8
 8002f60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002f64:	910d      	str	r1, [sp, #52]	; 0x34
 8002f66:	f7ff ff2f 	bl	8002dc8 <__exponent>
 8002f6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f6c:	4681      	mov	r9, r0
 8002f6e:	1813      	adds	r3, r2, r0
 8002f70:	2a01      	cmp	r2, #1
 8002f72:	6123      	str	r3, [r4, #16]
 8002f74:	dc02      	bgt.n	8002f7c <_printf_float+0x148>
 8002f76:	6822      	ldr	r2, [r4, #0]
 8002f78:	07d1      	lsls	r1, r2, #31
 8002f7a:	d501      	bpl.n	8002f80 <_printf_float+0x14c>
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	6123      	str	r3, [r4, #16]
 8002f80:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0a2      	beq.n	8002ece <_printf_float+0x9a>
 8002f88:	232d      	movs	r3, #45	; 0x2d
 8002f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f8e:	e79e      	b.n	8002ece <_printf_float+0x9a>
 8002f90:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002f94:	f000 816e 	beq.w	8003274 <_printf_float+0x440>
 8002f98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f9c:	d1b9      	bne.n	8002f12 <_printf_float+0xde>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1b7      	bne.n	8002f12 <_printf_float+0xde>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e7b4      	b.n	8002f10 <_printf_float+0xdc>
 8002fa6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002faa:	d119      	bne.n	8002fe0 <_printf_float+0x1ac>
 8002fac:	2900      	cmp	r1, #0
 8002fae:	6863      	ldr	r3, [r4, #4]
 8002fb0:	dd0c      	ble.n	8002fcc <_printf_float+0x198>
 8002fb2:	6121      	str	r1, [r4, #16]
 8002fb4:	b913      	cbnz	r3, 8002fbc <_printf_float+0x188>
 8002fb6:	6822      	ldr	r2, [r4, #0]
 8002fb8:	07d2      	lsls	r2, r2, #31
 8002fba:	d502      	bpl.n	8002fc2 <_printf_float+0x18e>
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	440b      	add	r3, r1
 8002fc0:	6123      	str	r3, [r4, #16]
 8002fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fc4:	f04f 0900 	mov.w	r9, #0
 8002fc8:	65a3      	str	r3, [r4, #88]	; 0x58
 8002fca:	e7d9      	b.n	8002f80 <_printf_float+0x14c>
 8002fcc:	b913      	cbnz	r3, 8002fd4 <_printf_float+0x1a0>
 8002fce:	6822      	ldr	r2, [r4, #0]
 8002fd0:	07d0      	lsls	r0, r2, #31
 8002fd2:	d501      	bpl.n	8002fd8 <_printf_float+0x1a4>
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	e7f3      	b.n	8002fc0 <_printf_float+0x18c>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e7f1      	b.n	8002fc0 <_printf_float+0x18c>
 8002fdc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002fe0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	db05      	blt.n	8002ff4 <_printf_float+0x1c0>
 8002fe8:	6822      	ldr	r2, [r4, #0]
 8002fea:	6123      	str	r3, [r4, #16]
 8002fec:	07d1      	lsls	r1, r2, #31
 8002fee:	d5e8      	bpl.n	8002fc2 <_printf_float+0x18e>
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	e7e5      	b.n	8002fc0 <_printf_float+0x18c>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bfcc      	ite	gt
 8002ff8:	2301      	movgt	r3, #1
 8002ffa:	f1c3 0302 	rsble	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	e7de      	b.n	8002fc0 <_printf_float+0x18c>
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	055a      	lsls	r2, r3, #21
 8003006:	d407      	bmi.n	8003018 <_printf_float+0x1e4>
 8003008:	6923      	ldr	r3, [r4, #16]
 800300a:	463a      	mov	r2, r7
 800300c:	4659      	mov	r1, fp
 800300e:	4628      	mov	r0, r5
 8003010:	47b0      	blx	r6
 8003012:	3001      	adds	r0, #1
 8003014:	d129      	bne.n	800306a <_printf_float+0x236>
 8003016:	e764      	b.n	8002ee2 <_printf_float+0xae>
 8003018:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800301c:	f240 80d7 	bls.w	80031ce <_printf_float+0x39a>
 8003020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003024:	2200      	movs	r2, #0
 8003026:	2300      	movs	r3, #0
 8003028:	f7fd fcbe 	bl	80009a8 <__aeabi_dcmpeq>
 800302c:	b388      	cbz	r0, 8003092 <_printf_float+0x25e>
 800302e:	2301      	movs	r3, #1
 8003030:	4a40      	ldr	r2, [pc, #256]	; (8003134 <_printf_float+0x300>)
 8003032:	4659      	mov	r1, fp
 8003034:	4628      	mov	r0, r5
 8003036:	47b0      	blx	r6
 8003038:	3001      	adds	r0, #1
 800303a:	f43f af52 	beq.w	8002ee2 <_printf_float+0xae>
 800303e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003042:	429a      	cmp	r2, r3
 8003044:	db02      	blt.n	800304c <_printf_float+0x218>
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	07d8      	lsls	r0, r3, #31
 800304a:	d50e      	bpl.n	800306a <_printf_float+0x236>
 800304c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003050:	4659      	mov	r1, fp
 8003052:	4628      	mov	r0, r5
 8003054:	47b0      	blx	r6
 8003056:	3001      	adds	r0, #1
 8003058:	f43f af43 	beq.w	8002ee2 <_printf_float+0xae>
 800305c:	2700      	movs	r7, #0
 800305e:	f104 081a 	add.w	r8, r4, #26
 8003062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003064:	3b01      	subs	r3, #1
 8003066:	42bb      	cmp	r3, r7
 8003068:	dc09      	bgt.n	800307e <_printf_float+0x24a>
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	079f      	lsls	r7, r3, #30
 800306e:	f100 80fd 	bmi.w	800326c <_printf_float+0x438>
 8003072:	68e0      	ldr	r0, [r4, #12]
 8003074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003076:	4298      	cmp	r0, r3
 8003078:	bfb8      	it	lt
 800307a:	4618      	movlt	r0, r3
 800307c:	e733      	b.n	8002ee6 <_printf_float+0xb2>
 800307e:	2301      	movs	r3, #1
 8003080:	4642      	mov	r2, r8
 8003082:	4659      	mov	r1, fp
 8003084:	4628      	mov	r0, r5
 8003086:	47b0      	blx	r6
 8003088:	3001      	adds	r0, #1
 800308a:	f43f af2a 	beq.w	8002ee2 <_printf_float+0xae>
 800308e:	3701      	adds	r7, #1
 8003090:	e7e7      	b.n	8003062 <_printf_float+0x22e>
 8003092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003094:	2b00      	cmp	r3, #0
 8003096:	dc2b      	bgt.n	80030f0 <_printf_float+0x2bc>
 8003098:	2301      	movs	r3, #1
 800309a:	4a26      	ldr	r2, [pc, #152]	; (8003134 <_printf_float+0x300>)
 800309c:	4659      	mov	r1, fp
 800309e:	4628      	mov	r0, r5
 80030a0:	47b0      	blx	r6
 80030a2:	3001      	adds	r0, #1
 80030a4:	f43f af1d 	beq.w	8002ee2 <_printf_float+0xae>
 80030a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030aa:	b923      	cbnz	r3, 80030b6 <_printf_float+0x282>
 80030ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030ae:	b913      	cbnz	r3, 80030b6 <_printf_float+0x282>
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	07d9      	lsls	r1, r3, #31
 80030b4:	d5d9      	bpl.n	800306a <_printf_float+0x236>
 80030b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030ba:	4659      	mov	r1, fp
 80030bc:	4628      	mov	r0, r5
 80030be:	47b0      	blx	r6
 80030c0:	3001      	adds	r0, #1
 80030c2:	f43f af0e 	beq.w	8002ee2 <_printf_float+0xae>
 80030c6:	f04f 0800 	mov.w	r8, #0
 80030ca:	f104 091a 	add.w	r9, r4, #26
 80030ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030d0:	425b      	negs	r3, r3
 80030d2:	4543      	cmp	r3, r8
 80030d4:	dc01      	bgt.n	80030da <_printf_float+0x2a6>
 80030d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030d8:	e797      	b.n	800300a <_printf_float+0x1d6>
 80030da:	2301      	movs	r3, #1
 80030dc:	464a      	mov	r2, r9
 80030de:	4659      	mov	r1, fp
 80030e0:	4628      	mov	r0, r5
 80030e2:	47b0      	blx	r6
 80030e4:	3001      	adds	r0, #1
 80030e6:	f43f aefc 	beq.w	8002ee2 <_printf_float+0xae>
 80030ea:	f108 0801 	add.w	r8, r8, #1
 80030ee:	e7ee      	b.n	80030ce <_printf_float+0x29a>
 80030f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030f4:	429a      	cmp	r2, r3
 80030f6:	bfa8      	it	ge
 80030f8:	461a      	movge	r2, r3
 80030fa:	2a00      	cmp	r2, #0
 80030fc:	4690      	mov	r8, r2
 80030fe:	dd07      	ble.n	8003110 <_printf_float+0x2dc>
 8003100:	4613      	mov	r3, r2
 8003102:	4659      	mov	r1, fp
 8003104:	463a      	mov	r2, r7
 8003106:	4628      	mov	r0, r5
 8003108:	47b0      	blx	r6
 800310a:	3001      	adds	r0, #1
 800310c:	f43f aee9 	beq.w	8002ee2 <_printf_float+0xae>
 8003110:	f104 031a 	add.w	r3, r4, #26
 8003114:	f04f 0a00 	mov.w	sl, #0
 8003118:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800311c:	930b      	str	r3, [sp, #44]	; 0x2c
 800311e:	e015      	b.n	800314c <_printf_float+0x318>
 8003120:	7fefffff 	.word	0x7fefffff
 8003124:	0800552c 	.word	0x0800552c
 8003128:	08005528 	.word	0x08005528
 800312c:	08005534 	.word	0x08005534
 8003130:	08005530 	.word	0x08005530
 8003134:	08005538 	.word	0x08005538
 8003138:	2301      	movs	r3, #1
 800313a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800313c:	4659      	mov	r1, fp
 800313e:	4628      	mov	r0, r5
 8003140:	47b0      	blx	r6
 8003142:	3001      	adds	r0, #1
 8003144:	f43f aecd 	beq.w	8002ee2 <_printf_float+0xae>
 8003148:	f10a 0a01 	add.w	sl, sl, #1
 800314c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003150:	eba9 0308 	sub.w	r3, r9, r8
 8003154:	4553      	cmp	r3, sl
 8003156:	dcef      	bgt.n	8003138 <_printf_float+0x304>
 8003158:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800315c:	429a      	cmp	r2, r3
 800315e:	444f      	add	r7, r9
 8003160:	db14      	blt.n	800318c <_printf_float+0x358>
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	07da      	lsls	r2, r3, #31
 8003166:	d411      	bmi.n	800318c <_printf_float+0x358>
 8003168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800316a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800316c:	eba3 0209 	sub.w	r2, r3, r9
 8003170:	eba3 0901 	sub.w	r9, r3, r1
 8003174:	4591      	cmp	r9, r2
 8003176:	bfa8      	it	ge
 8003178:	4691      	movge	r9, r2
 800317a:	f1b9 0f00 	cmp.w	r9, #0
 800317e:	dc0d      	bgt.n	800319c <_printf_float+0x368>
 8003180:	2700      	movs	r7, #0
 8003182:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003186:	f104 081a 	add.w	r8, r4, #26
 800318a:	e018      	b.n	80031be <_printf_float+0x38a>
 800318c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003190:	4659      	mov	r1, fp
 8003192:	4628      	mov	r0, r5
 8003194:	47b0      	blx	r6
 8003196:	3001      	adds	r0, #1
 8003198:	d1e6      	bne.n	8003168 <_printf_float+0x334>
 800319a:	e6a2      	b.n	8002ee2 <_printf_float+0xae>
 800319c:	464b      	mov	r3, r9
 800319e:	463a      	mov	r2, r7
 80031a0:	4659      	mov	r1, fp
 80031a2:	4628      	mov	r0, r5
 80031a4:	47b0      	blx	r6
 80031a6:	3001      	adds	r0, #1
 80031a8:	d1ea      	bne.n	8003180 <_printf_float+0x34c>
 80031aa:	e69a      	b.n	8002ee2 <_printf_float+0xae>
 80031ac:	2301      	movs	r3, #1
 80031ae:	4642      	mov	r2, r8
 80031b0:	4659      	mov	r1, fp
 80031b2:	4628      	mov	r0, r5
 80031b4:	47b0      	blx	r6
 80031b6:	3001      	adds	r0, #1
 80031b8:	f43f ae93 	beq.w	8002ee2 <_printf_float+0xae>
 80031bc:	3701      	adds	r7, #1
 80031be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	eba3 0309 	sub.w	r3, r3, r9
 80031c8:	42bb      	cmp	r3, r7
 80031ca:	dcef      	bgt.n	80031ac <_printf_float+0x378>
 80031cc:	e74d      	b.n	800306a <_printf_float+0x236>
 80031ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031d0:	2a01      	cmp	r2, #1
 80031d2:	dc01      	bgt.n	80031d8 <_printf_float+0x3a4>
 80031d4:	07db      	lsls	r3, r3, #31
 80031d6:	d538      	bpl.n	800324a <_printf_float+0x416>
 80031d8:	2301      	movs	r3, #1
 80031da:	463a      	mov	r2, r7
 80031dc:	4659      	mov	r1, fp
 80031de:	4628      	mov	r0, r5
 80031e0:	47b0      	blx	r6
 80031e2:	3001      	adds	r0, #1
 80031e4:	f43f ae7d 	beq.w	8002ee2 <_printf_float+0xae>
 80031e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031ec:	4659      	mov	r1, fp
 80031ee:	4628      	mov	r0, r5
 80031f0:	47b0      	blx	r6
 80031f2:	3001      	adds	r0, #1
 80031f4:	f107 0701 	add.w	r7, r7, #1
 80031f8:	f43f ae73 	beq.w	8002ee2 <_printf_float+0xae>
 80031fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003202:	2200      	movs	r2, #0
 8003204:	f103 38ff 	add.w	r8, r3, #4294967295
 8003208:	2300      	movs	r3, #0
 800320a:	f7fd fbcd 	bl	80009a8 <__aeabi_dcmpeq>
 800320e:	b9c0      	cbnz	r0, 8003242 <_printf_float+0x40e>
 8003210:	4643      	mov	r3, r8
 8003212:	463a      	mov	r2, r7
 8003214:	4659      	mov	r1, fp
 8003216:	4628      	mov	r0, r5
 8003218:	47b0      	blx	r6
 800321a:	3001      	adds	r0, #1
 800321c:	d10d      	bne.n	800323a <_printf_float+0x406>
 800321e:	e660      	b.n	8002ee2 <_printf_float+0xae>
 8003220:	2301      	movs	r3, #1
 8003222:	4642      	mov	r2, r8
 8003224:	4659      	mov	r1, fp
 8003226:	4628      	mov	r0, r5
 8003228:	47b0      	blx	r6
 800322a:	3001      	adds	r0, #1
 800322c:	f43f ae59 	beq.w	8002ee2 <_printf_float+0xae>
 8003230:	3701      	adds	r7, #1
 8003232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003234:	3b01      	subs	r3, #1
 8003236:	42bb      	cmp	r3, r7
 8003238:	dcf2      	bgt.n	8003220 <_printf_float+0x3ec>
 800323a:	464b      	mov	r3, r9
 800323c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003240:	e6e4      	b.n	800300c <_printf_float+0x1d8>
 8003242:	2700      	movs	r7, #0
 8003244:	f104 081a 	add.w	r8, r4, #26
 8003248:	e7f3      	b.n	8003232 <_printf_float+0x3fe>
 800324a:	2301      	movs	r3, #1
 800324c:	e7e1      	b.n	8003212 <_printf_float+0x3de>
 800324e:	2301      	movs	r3, #1
 8003250:	4642      	mov	r2, r8
 8003252:	4659      	mov	r1, fp
 8003254:	4628      	mov	r0, r5
 8003256:	47b0      	blx	r6
 8003258:	3001      	adds	r0, #1
 800325a:	f43f ae42 	beq.w	8002ee2 <_printf_float+0xae>
 800325e:	3701      	adds	r7, #1
 8003260:	68e3      	ldr	r3, [r4, #12]
 8003262:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	42bb      	cmp	r3, r7
 8003268:	dcf1      	bgt.n	800324e <_printf_float+0x41a>
 800326a:	e702      	b.n	8003072 <_printf_float+0x23e>
 800326c:	2700      	movs	r7, #0
 800326e:	f104 0819 	add.w	r8, r4, #25
 8003272:	e7f5      	b.n	8003260 <_printf_float+0x42c>
 8003274:	2b00      	cmp	r3, #0
 8003276:	f43f ae94 	beq.w	8002fa2 <_printf_float+0x16e>
 800327a:	f04f 0c00 	mov.w	ip, #0
 800327e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003282:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003286:	6022      	str	r2, [r4, #0]
 8003288:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800328c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	463a      	mov	r2, r7
 8003294:	464b      	mov	r3, r9
 8003296:	4628      	mov	r0, r5
 8003298:	f7ff fd3a 	bl	8002d10 <__cvt>
 800329c:	4607      	mov	r7, r0
 800329e:	e64f      	b.n	8002f40 <_printf_float+0x10c>

080032a0 <_printf_common>:
 80032a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a4:	4691      	mov	r9, r2
 80032a6:	461f      	mov	r7, r3
 80032a8:	688a      	ldr	r2, [r1, #8]
 80032aa:	690b      	ldr	r3, [r1, #16]
 80032ac:	4606      	mov	r6, r0
 80032ae:	4293      	cmp	r3, r2
 80032b0:	bfb8      	it	lt
 80032b2:	4613      	movlt	r3, r2
 80032b4:	f8c9 3000 	str.w	r3, [r9]
 80032b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032bc:	460c      	mov	r4, r1
 80032be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032c2:	b112      	cbz	r2, 80032ca <_printf_common+0x2a>
 80032c4:	3301      	adds	r3, #1
 80032c6:	f8c9 3000 	str.w	r3, [r9]
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	0699      	lsls	r1, r3, #26
 80032ce:	bf42      	ittt	mi
 80032d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80032d4:	3302      	addmi	r3, #2
 80032d6:	f8c9 3000 	strmi.w	r3, [r9]
 80032da:	6825      	ldr	r5, [r4, #0]
 80032dc:	f015 0506 	ands.w	r5, r5, #6
 80032e0:	d107      	bne.n	80032f2 <_printf_common+0x52>
 80032e2:	f104 0a19 	add.w	sl, r4, #25
 80032e6:	68e3      	ldr	r3, [r4, #12]
 80032e8:	f8d9 2000 	ldr.w	r2, [r9]
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	42ab      	cmp	r3, r5
 80032f0:	dc29      	bgt.n	8003346 <_printf_common+0xa6>
 80032f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80032f6:	6822      	ldr	r2, [r4, #0]
 80032f8:	3300      	adds	r3, #0
 80032fa:	bf18      	it	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	0692      	lsls	r2, r2, #26
 8003300:	d42e      	bmi.n	8003360 <_printf_common+0xc0>
 8003302:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003306:	4639      	mov	r1, r7
 8003308:	4630      	mov	r0, r6
 800330a:	47c0      	blx	r8
 800330c:	3001      	adds	r0, #1
 800330e:	d021      	beq.n	8003354 <_printf_common+0xb4>
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	68e5      	ldr	r5, [r4, #12]
 8003314:	f003 0306 	and.w	r3, r3, #6
 8003318:	2b04      	cmp	r3, #4
 800331a:	bf18      	it	ne
 800331c:	2500      	movne	r5, #0
 800331e:	f8d9 2000 	ldr.w	r2, [r9]
 8003322:	f04f 0900 	mov.w	r9, #0
 8003326:	bf08      	it	eq
 8003328:	1aad      	subeq	r5, r5, r2
 800332a:	68a3      	ldr	r3, [r4, #8]
 800332c:	6922      	ldr	r2, [r4, #16]
 800332e:	bf08      	it	eq
 8003330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003334:	4293      	cmp	r3, r2
 8003336:	bfc4      	itt	gt
 8003338:	1a9b      	subgt	r3, r3, r2
 800333a:	18ed      	addgt	r5, r5, r3
 800333c:	341a      	adds	r4, #26
 800333e:	454d      	cmp	r5, r9
 8003340:	d11a      	bne.n	8003378 <_printf_common+0xd8>
 8003342:	2000      	movs	r0, #0
 8003344:	e008      	b.n	8003358 <_printf_common+0xb8>
 8003346:	2301      	movs	r3, #1
 8003348:	4652      	mov	r2, sl
 800334a:	4639      	mov	r1, r7
 800334c:	4630      	mov	r0, r6
 800334e:	47c0      	blx	r8
 8003350:	3001      	adds	r0, #1
 8003352:	d103      	bne.n	800335c <_printf_common+0xbc>
 8003354:	f04f 30ff 	mov.w	r0, #4294967295
 8003358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800335c:	3501      	adds	r5, #1
 800335e:	e7c2      	b.n	80032e6 <_printf_common+0x46>
 8003360:	2030      	movs	r0, #48	; 0x30
 8003362:	18e1      	adds	r1, r4, r3
 8003364:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800336e:	4422      	add	r2, r4
 8003370:	3302      	adds	r3, #2
 8003372:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003376:	e7c4      	b.n	8003302 <_printf_common+0x62>
 8003378:	2301      	movs	r3, #1
 800337a:	4622      	mov	r2, r4
 800337c:	4639      	mov	r1, r7
 800337e:	4630      	mov	r0, r6
 8003380:	47c0      	blx	r8
 8003382:	3001      	adds	r0, #1
 8003384:	d0e6      	beq.n	8003354 <_printf_common+0xb4>
 8003386:	f109 0901 	add.w	r9, r9, #1
 800338a:	e7d8      	b.n	800333e <_printf_common+0x9e>

0800338c <_printf_i>:
 800338c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003390:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003394:	460c      	mov	r4, r1
 8003396:	7e09      	ldrb	r1, [r1, #24]
 8003398:	b085      	sub	sp, #20
 800339a:	296e      	cmp	r1, #110	; 0x6e
 800339c:	4617      	mov	r7, r2
 800339e:	4606      	mov	r6, r0
 80033a0:	4698      	mov	r8, r3
 80033a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033a4:	f000 80b3 	beq.w	800350e <_printf_i+0x182>
 80033a8:	d822      	bhi.n	80033f0 <_printf_i+0x64>
 80033aa:	2963      	cmp	r1, #99	; 0x63
 80033ac:	d036      	beq.n	800341c <_printf_i+0x90>
 80033ae:	d80a      	bhi.n	80033c6 <_printf_i+0x3a>
 80033b0:	2900      	cmp	r1, #0
 80033b2:	f000 80b9 	beq.w	8003528 <_printf_i+0x19c>
 80033b6:	2958      	cmp	r1, #88	; 0x58
 80033b8:	f000 8083 	beq.w	80034c2 <_printf_i+0x136>
 80033bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80033c4:	e032      	b.n	800342c <_printf_i+0xa0>
 80033c6:	2964      	cmp	r1, #100	; 0x64
 80033c8:	d001      	beq.n	80033ce <_printf_i+0x42>
 80033ca:	2969      	cmp	r1, #105	; 0x69
 80033cc:	d1f6      	bne.n	80033bc <_printf_i+0x30>
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	6813      	ldr	r3, [r2, #0]
 80033d2:	0605      	lsls	r5, r0, #24
 80033d4:	f103 0104 	add.w	r1, r3, #4
 80033d8:	d52a      	bpl.n	8003430 <_printf_i+0xa4>
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6011      	str	r1, [r2, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	da03      	bge.n	80033ea <_printf_i+0x5e>
 80033e2:	222d      	movs	r2, #45	; 0x2d
 80033e4:	425b      	negs	r3, r3
 80033e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80033ea:	486f      	ldr	r0, [pc, #444]	; (80035a8 <_printf_i+0x21c>)
 80033ec:	220a      	movs	r2, #10
 80033ee:	e039      	b.n	8003464 <_printf_i+0xd8>
 80033f0:	2973      	cmp	r1, #115	; 0x73
 80033f2:	f000 809d 	beq.w	8003530 <_printf_i+0x1a4>
 80033f6:	d808      	bhi.n	800340a <_printf_i+0x7e>
 80033f8:	296f      	cmp	r1, #111	; 0x6f
 80033fa:	d020      	beq.n	800343e <_printf_i+0xb2>
 80033fc:	2970      	cmp	r1, #112	; 0x70
 80033fe:	d1dd      	bne.n	80033bc <_printf_i+0x30>
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	f043 0320 	orr.w	r3, r3, #32
 8003406:	6023      	str	r3, [r4, #0]
 8003408:	e003      	b.n	8003412 <_printf_i+0x86>
 800340a:	2975      	cmp	r1, #117	; 0x75
 800340c:	d017      	beq.n	800343e <_printf_i+0xb2>
 800340e:	2978      	cmp	r1, #120	; 0x78
 8003410:	d1d4      	bne.n	80033bc <_printf_i+0x30>
 8003412:	2378      	movs	r3, #120	; 0x78
 8003414:	4865      	ldr	r0, [pc, #404]	; (80035ac <_printf_i+0x220>)
 8003416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800341a:	e055      	b.n	80034c8 <_printf_i+0x13c>
 800341c:	6813      	ldr	r3, [r2, #0]
 800341e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003422:	1d19      	adds	r1, r3, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6011      	str	r1, [r2, #0]
 8003428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800342c:	2301      	movs	r3, #1
 800342e:	e08c      	b.n	800354a <_printf_i+0x1be>
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003436:	6011      	str	r1, [r2, #0]
 8003438:	bf18      	it	ne
 800343a:	b21b      	sxthne	r3, r3
 800343c:	e7cf      	b.n	80033de <_printf_i+0x52>
 800343e:	6813      	ldr	r3, [r2, #0]
 8003440:	6825      	ldr	r5, [r4, #0]
 8003442:	1d18      	adds	r0, r3, #4
 8003444:	6010      	str	r0, [r2, #0]
 8003446:	0628      	lsls	r0, r5, #24
 8003448:	d501      	bpl.n	800344e <_printf_i+0xc2>
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	e002      	b.n	8003454 <_printf_i+0xc8>
 800344e:	0668      	lsls	r0, r5, #25
 8003450:	d5fb      	bpl.n	800344a <_printf_i+0xbe>
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	296f      	cmp	r1, #111	; 0x6f
 8003456:	bf14      	ite	ne
 8003458:	220a      	movne	r2, #10
 800345a:	2208      	moveq	r2, #8
 800345c:	4852      	ldr	r0, [pc, #328]	; (80035a8 <_printf_i+0x21c>)
 800345e:	2100      	movs	r1, #0
 8003460:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003464:	6865      	ldr	r5, [r4, #4]
 8003466:	2d00      	cmp	r5, #0
 8003468:	60a5      	str	r5, [r4, #8]
 800346a:	f2c0 8095 	blt.w	8003598 <_printf_i+0x20c>
 800346e:	6821      	ldr	r1, [r4, #0]
 8003470:	f021 0104 	bic.w	r1, r1, #4
 8003474:	6021      	str	r1, [r4, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d13d      	bne.n	80034f6 <_printf_i+0x16a>
 800347a:	2d00      	cmp	r5, #0
 800347c:	f040 808e 	bne.w	800359c <_printf_i+0x210>
 8003480:	4665      	mov	r5, ip
 8003482:	2a08      	cmp	r2, #8
 8003484:	d10b      	bne.n	800349e <_printf_i+0x112>
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	07db      	lsls	r3, r3, #31
 800348a:	d508      	bpl.n	800349e <_printf_i+0x112>
 800348c:	6923      	ldr	r3, [r4, #16]
 800348e:	6862      	ldr	r2, [r4, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	bfde      	ittt	le
 8003494:	2330      	movle	r3, #48	; 0x30
 8003496:	f805 3c01 	strble.w	r3, [r5, #-1]
 800349a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800349e:	ebac 0305 	sub.w	r3, ip, r5
 80034a2:	6123      	str	r3, [r4, #16]
 80034a4:	f8cd 8000 	str.w	r8, [sp]
 80034a8:	463b      	mov	r3, r7
 80034aa:	aa03      	add	r2, sp, #12
 80034ac:	4621      	mov	r1, r4
 80034ae:	4630      	mov	r0, r6
 80034b0:	f7ff fef6 	bl	80032a0 <_printf_common>
 80034b4:	3001      	adds	r0, #1
 80034b6:	d14d      	bne.n	8003554 <_printf_i+0x1c8>
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	b005      	add	sp, #20
 80034be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034c2:	4839      	ldr	r0, [pc, #228]	; (80035a8 <_printf_i+0x21c>)
 80034c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80034c8:	6813      	ldr	r3, [r2, #0]
 80034ca:	6821      	ldr	r1, [r4, #0]
 80034cc:	1d1d      	adds	r5, r3, #4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6015      	str	r5, [r2, #0]
 80034d2:	060a      	lsls	r2, r1, #24
 80034d4:	d50b      	bpl.n	80034ee <_printf_i+0x162>
 80034d6:	07ca      	lsls	r2, r1, #31
 80034d8:	bf44      	itt	mi
 80034da:	f041 0120 	orrmi.w	r1, r1, #32
 80034de:	6021      	strmi	r1, [r4, #0]
 80034e0:	b91b      	cbnz	r3, 80034ea <_printf_i+0x15e>
 80034e2:	6822      	ldr	r2, [r4, #0]
 80034e4:	f022 0220 	bic.w	r2, r2, #32
 80034e8:	6022      	str	r2, [r4, #0]
 80034ea:	2210      	movs	r2, #16
 80034ec:	e7b7      	b.n	800345e <_printf_i+0xd2>
 80034ee:	064d      	lsls	r5, r1, #25
 80034f0:	bf48      	it	mi
 80034f2:	b29b      	uxthmi	r3, r3
 80034f4:	e7ef      	b.n	80034d6 <_printf_i+0x14a>
 80034f6:	4665      	mov	r5, ip
 80034f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80034fc:	fb02 3311 	mls	r3, r2, r1, r3
 8003500:	5cc3      	ldrb	r3, [r0, r3]
 8003502:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003506:	460b      	mov	r3, r1
 8003508:	2900      	cmp	r1, #0
 800350a:	d1f5      	bne.n	80034f8 <_printf_i+0x16c>
 800350c:	e7b9      	b.n	8003482 <_printf_i+0xf6>
 800350e:	6813      	ldr	r3, [r2, #0]
 8003510:	6825      	ldr	r5, [r4, #0]
 8003512:	1d18      	adds	r0, r3, #4
 8003514:	6961      	ldr	r1, [r4, #20]
 8003516:	6010      	str	r0, [r2, #0]
 8003518:	0628      	lsls	r0, r5, #24
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	d501      	bpl.n	8003522 <_printf_i+0x196>
 800351e:	6019      	str	r1, [r3, #0]
 8003520:	e002      	b.n	8003528 <_printf_i+0x19c>
 8003522:	066a      	lsls	r2, r5, #25
 8003524:	d5fb      	bpl.n	800351e <_printf_i+0x192>
 8003526:	8019      	strh	r1, [r3, #0]
 8003528:	2300      	movs	r3, #0
 800352a:	4665      	mov	r5, ip
 800352c:	6123      	str	r3, [r4, #16]
 800352e:	e7b9      	b.n	80034a4 <_printf_i+0x118>
 8003530:	6813      	ldr	r3, [r2, #0]
 8003532:	1d19      	adds	r1, r3, #4
 8003534:	6011      	str	r1, [r2, #0]
 8003536:	681d      	ldr	r5, [r3, #0]
 8003538:	6862      	ldr	r2, [r4, #4]
 800353a:	2100      	movs	r1, #0
 800353c:	4628      	mov	r0, r5
 800353e:	f001 f9ab 	bl	8004898 <memchr>
 8003542:	b108      	cbz	r0, 8003548 <_printf_i+0x1bc>
 8003544:	1b40      	subs	r0, r0, r5
 8003546:	6060      	str	r0, [r4, #4]
 8003548:	6863      	ldr	r3, [r4, #4]
 800354a:	6123      	str	r3, [r4, #16]
 800354c:	2300      	movs	r3, #0
 800354e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003552:	e7a7      	b.n	80034a4 <_printf_i+0x118>
 8003554:	6923      	ldr	r3, [r4, #16]
 8003556:	462a      	mov	r2, r5
 8003558:	4639      	mov	r1, r7
 800355a:	4630      	mov	r0, r6
 800355c:	47c0      	blx	r8
 800355e:	3001      	adds	r0, #1
 8003560:	d0aa      	beq.n	80034b8 <_printf_i+0x12c>
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	079b      	lsls	r3, r3, #30
 8003566:	d413      	bmi.n	8003590 <_printf_i+0x204>
 8003568:	68e0      	ldr	r0, [r4, #12]
 800356a:	9b03      	ldr	r3, [sp, #12]
 800356c:	4298      	cmp	r0, r3
 800356e:	bfb8      	it	lt
 8003570:	4618      	movlt	r0, r3
 8003572:	e7a3      	b.n	80034bc <_printf_i+0x130>
 8003574:	2301      	movs	r3, #1
 8003576:	464a      	mov	r2, r9
 8003578:	4639      	mov	r1, r7
 800357a:	4630      	mov	r0, r6
 800357c:	47c0      	blx	r8
 800357e:	3001      	adds	r0, #1
 8003580:	d09a      	beq.n	80034b8 <_printf_i+0x12c>
 8003582:	3501      	adds	r5, #1
 8003584:	68e3      	ldr	r3, [r4, #12]
 8003586:	9a03      	ldr	r2, [sp, #12]
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	42ab      	cmp	r3, r5
 800358c:	dcf2      	bgt.n	8003574 <_printf_i+0x1e8>
 800358e:	e7eb      	b.n	8003568 <_printf_i+0x1dc>
 8003590:	2500      	movs	r5, #0
 8003592:	f104 0919 	add.w	r9, r4, #25
 8003596:	e7f5      	b.n	8003584 <_printf_i+0x1f8>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ac      	bne.n	80034f6 <_printf_i+0x16a>
 800359c:	7803      	ldrb	r3, [r0, #0]
 800359e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035a6:	e76c      	b.n	8003482 <_printf_i+0xf6>
 80035a8:	0800553a 	.word	0x0800553a
 80035ac:	0800554b 	.word	0x0800554b

080035b0 <iprintf>:
 80035b0:	b40f      	push	{r0, r1, r2, r3}
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <iprintf+0x2c>)
 80035b4:	b513      	push	{r0, r1, r4, lr}
 80035b6:	681c      	ldr	r4, [r3, #0]
 80035b8:	b124      	cbz	r4, 80035c4 <iprintf+0x14>
 80035ba:	69a3      	ldr	r3, [r4, #24]
 80035bc:	b913      	cbnz	r3, 80035c4 <iprintf+0x14>
 80035be:	4620      	mov	r0, r4
 80035c0:	f001 f866 	bl	8004690 <__sinit>
 80035c4:	ab05      	add	r3, sp, #20
 80035c6:	9a04      	ldr	r2, [sp, #16]
 80035c8:	68a1      	ldr	r1, [r4, #8]
 80035ca:	4620      	mov	r0, r4
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	f001 fd35 	bl	800503c <_vfiprintf_r>
 80035d2:	b002      	add	sp, #8
 80035d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035d8:	b004      	add	sp, #16
 80035da:	4770      	bx	lr
 80035dc:	20000010 	.word	0x20000010

080035e0 <_puts_r>:
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	460e      	mov	r6, r1
 80035e4:	4605      	mov	r5, r0
 80035e6:	b118      	cbz	r0, 80035f0 <_puts_r+0x10>
 80035e8:	6983      	ldr	r3, [r0, #24]
 80035ea:	b90b      	cbnz	r3, 80035f0 <_puts_r+0x10>
 80035ec:	f001 f850 	bl	8004690 <__sinit>
 80035f0:	69ab      	ldr	r3, [r5, #24]
 80035f2:	68ac      	ldr	r4, [r5, #8]
 80035f4:	b913      	cbnz	r3, 80035fc <_puts_r+0x1c>
 80035f6:	4628      	mov	r0, r5
 80035f8:	f001 f84a 	bl	8004690 <__sinit>
 80035fc:	4b23      	ldr	r3, [pc, #140]	; (800368c <_puts_r+0xac>)
 80035fe:	429c      	cmp	r4, r3
 8003600:	d117      	bne.n	8003632 <_puts_r+0x52>
 8003602:	686c      	ldr	r4, [r5, #4]
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	071b      	lsls	r3, r3, #28
 8003608:	d51d      	bpl.n	8003646 <_puts_r+0x66>
 800360a:	6923      	ldr	r3, [r4, #16]
 800360c:	b1db      	cbz	r3, 8003646 <_puts_r+0x66>
 800360e:	3e01      	subs	r6, #1
 8003610:	68a3      	ldr	r3, [r4, #8]
 8003612:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003616:	3b01      	subs	r3, #1
 8003618:	60a3      	str	r3, [r4, #8]
 800361a:	b9e9      	cbnz	r1, 8003658 <_puts_r+0x78>
 800361c:	2b00      	cmp	r3, #0
 800361e:	da2e      	bge.n	800367e <_puts_r+0x9e>
 8003620:	4622      	mov	r2, r4
 8003622:	210a      	movs	r1, #10
 8003624:	4628      	mov	r0, r5
 8003626:	f000 f83f 	bl	80036a8 <__swbuf_r>
 800362a:	3001      	adds	r0, #1
 800362c:	d011      	beq.n	8003652 <_puts_r+0x72>
 800362e:	200a      	movs	r0, #10
 8003630:	e011      	b.n	8003656 <_puts_r+0x76>
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <_puts_r+0xb0>)
 8003634:	429c      	cmp	r4, r3
 8003636:	d101      	bne.n	800363c <_puts_r+0x5c>
 8003638:	68ac      	ldr	r4, [r5, #8]
 800363a:	e7e3      	b.n	8003604 <_puts_r+0x24>
 800363c:	4b15      	ldr	r3, [pc, #84]	; (8003694 <_puts_r+0xb4>)
 800363e:	429c      	cmp	r4, r3
 8003640:	bf08      	it	eq
 8003642:	68ec      	ldreq	r4, [r5, #12]
 8003644:	e7de      	b.n	8003604 <_puts_r+0x24>
 8003646:	4621      	mov	r1, r4
 8003648:	4628      	mov	r0, r5
 800364a:	f000 f87f 	bl	800374c <__swsetup_r>
 800364e:	2800      	cmp	r0, #0
 8003650:	d0dd      	beq.n	800360e <_puts_r+0x2e>
 8003652:	f04f 30ff 	mov.w	r0, #4294967295
 8003656:	bd70      	pop	{r4, r5, r6, pc}
 8003658:	2b00      	cmp	r3, #0
 800365a:	da04      	bge.n	8003666 <_puts_r+0x86>
 800365c:	69a2      	ldr	r2, [r4, #24]
 800365e:	429a      	cmp	r2, r3
 8003660:	dc06      	bgt.n	8003670 <_puts_r+0x90>
 8003662:	290a      	cmp	r1, #10
 8003664:	d004      	beq.n	8003670 <_puts_r+0x90>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	6022      	str	r2, [r4, #0]
 800366c:	7019      	strb	r1, [r3, #0]
 800366e:	e7cf      	b.n	8003610 <_puts_r+0x30>
 8003670:	4622      	mov	r2, r4
 8003672:	4628      	mov	r0, r5
 8003674:	f000 f818 	bl	80036a8 <__swbuf_r>
 8003678:	3001      	adds	r0, #1
 800367a:	d1c9      	bne.n	8003610 <_puts_r+0x30>
 800367c:	e7e9      	b.n	8003652 <_puts_r+0x72>
 800367e:	200a      	movs	r0, #10
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	6022      	str	r2, [r4, #0]
 8003686:	7018      	strb	r0, [r3, #0]
 8003688:	e7e5      	b.n	8003656 <_puts_r+0x76>
 800368a:	bf00      	nop
 800368c:	0800558c 	.word	0x0800558c
 8003690:	080055ac 	.word	0x080055ac
 8003694:	0800556c 	.word	0x0800556c

08003698 <puts>:
 8003698:	4b02      	ldr	r3, [pc, #8]	; (80036a4 <puts+0xc>)
 800369a:	4601      	mov	r1, r0
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	f7ff bf9f 	b.w	80035e0 <_puts_r>
 80036a2:	bf00      	nop
 80036a4:	20000010 	.word	0x20000010

080036a8 <__swbuf_r>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	460e      	mov	r6, r1
 80036ac:	4614      	mov	r4, r2
 80036ae:	4605      	mov	r5, r0
 80036b0:	b118      	cbz	r0, 80036ba <__swbuf_r+0x12>
 80036b2:	6983      	ldr	r3, [r0, #24]
 80036b4:	b90b      	cbnz	r3, 80036ba <__swbuf_r+0x12>
 80036b6:	f000 ffeb 	bl	8004690 <__sinit>
 80036ba:	4b21      	ldr	r3, [pc, #132]	; (8003740 <__swbuf_r+0x98>)
 80036bc:	429c      	cmp	r4, r3
 80036be:	d12a      	bne.n	8003716 <__swbuf_r+0x6e>
 80036c0:	686c      	ldr	r4, [r5, #4]
 80036c2:	69a3      	ldr	r3, [r4, #24]
 80036c4:	60a3      	str	r3, [r4, #8]
 80036c6:	89a3      	ldrh	r3, [r4, #12]
 80036c8:	071a      	lsls	r2, r3, #28
 80036ca:	d52e      	bpl.n	800372a <__swbuf_r+0x82>
 80036cc:	6923      	ldr	r3, [r4, #16]
 80036ce:	b363      	cbz	r3, 800372a <__swbuf_r+0x82>
 80036d0:	6923      	ldr	r3, [r4, #16]
 80036d2:	6820      	ldr	r0, [r4, #0]
 80036d4:	b2f6      	uxtb	r6, r6
 80036d6:	1ac0      	subs	r0, r0, r3
 80036d8:	6963      	ldr	r3, [r4, #20]
 80036da:	4637      	mov	r7, r6
 80036dc:	4283      	cmp	r3, r0
 80036de:	dc04      	bgt.n	80036ea <__swbuf_r+0x42>
 80036e0:	4621      	mov	r1, r4
 80036e2:	4628      	mov	r0, r5
 80036e4:	f000 ff6a 	bl	80045bc <_fflush_r>
 80036e8:	bb28      	cbnz	r0, 8003736 <__swbuf_r+0x8e>
 80036ea:	68a3      	ldr	r3, [r4, #8]
 80036ec:	3001      	adds	r0, #1
 80036ee:	3b01      	subs	r3, #1
 80036f0:	60a3      	str	r3, [r4, #8]
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	6022      	str	r2, [r4, #0]
 80036f8:	701e      	strb	r6, [r3, #0]
 80036fa:	6963      	ldr	r3, [r4, #20]
 80036fc:	4283      	cmp	r3, r0
 80036fe:	d004      	beq.n	800370a <__swbuf_r+0x62>
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	07db      	lsls	r3, r3, #31
 8003704:	d519      	bpl.n	800373a <__swbuf_r+0x92>
 8003706:	2e0a      	cmp	r6, #10
 8003708:	d117      	bne.n	800373a <__swbuf_r+0x92>
 800370a:	4621      	mov	r1, r4
 800370c:	4628      	mov	r0, r5
 800370e:	f000 ff55 	bl	80045bc <_fflush_r>
 8003712:	b190      	cbz	r0, 800373a <__swbuf_r+0x92>
 8003714:	e00f      	b.n	8003736 <__swbuf_r+0x8e>
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <__swbuf_r+0x9c>)
 8003718:	429c      	cmp	r4, r3
 800371a:	d101      	bne.n	8003720 <__swbuf_r+0x78>
 800371c:	68ac      	ldr	r4, [r5, #8]
 800371e:	e7d0      	b.n	80036c2 <__swbuf_r+0x1a>
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <__swbuf_r+0xa0>)
 8003722:	429c      	cmp	r4, r3
 8003724:	bf08      	it	eq
 8003726:	68ec      	ldreq	r4, [r5, #12]
 8003728:	e7cb      	b.n	80036c2 <__swbuf_r+0x1a>
 800372a:	4621      	mov	r1, r4
 800372c:	4628      	mov	r0, r5
 800372e:	f000 f80d 	bl	800374c <__swsetup_r>
 8003732:	2800      	cmp	r0, #0
 8003734:	d0cc      	beq.n	80036d0 <__swbuf_r+0x28>
 8003736:	f04f 37ff 	mov.w	r7, #4294967295
 800373a:	4638      	mov	r0, r7
 800373c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800373e:	bf00      	nop
 8003740:	0800558c 	.word	0x0800558c
 8003744:	080055ac 	.word	0x080055ac
 8003748:	0800556c 	.word	0x0800556c

0800374c <__swsetup_r>:
 800374c:	4b32      	ldr	r3, [pc, #200]	; (8003818 <__swsetup_r+0xcc>)
 800374e:	b570      	push	{r4, r5, r6, lr}
 8003750:	681d      	ldr	r5, [r3, #0]
 8003752:	4606      	mov	r6, r0
 8003754:	460c      	mov	r4, r1
 8003756:	b125      	cbz	r5, 8003762 <__swsetup_r+0x16>
 8003758:	69ab      	ldr	r3, [r5, #24]
 800375a:	b913      	cbnz	r3, 8003762 <__swsetup_r+0x16>
 800375c:	4628      	mov	r0, r5
 800375e:	f000 ff97 	bl	8004690 <__sinit>
 8003762:	4b2e      	ldr	r3, [pc, #184]	; (800381c <__swsetup_r+0xd0>)
 8003764:	429c      	cmp	r4, r3
 8003766:	d10f      	bne.n	8003788 <__swsetup_r+0x3c>
 8003768:	686c      	ldr	r4, [r5, #4]
 800376a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800376e:	b29a      	uxth	r2, r3
 8003770:	0715      	lsls	r5, r2, #28
 8003772:	d42c      	bmi.n	80037ce <__swsetup_r+0x82>
 8003774:	06d0      	lsls	r0, r2, #27
 8003776:	d411      	bmi.n	800379c <__swsetup_r+0x50>
 8003778:	2209      	movs	r2, #9
 800377a:	6032      	str	r2, [r6, #0]
 800377c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003780:	81a3      	strh	r3, [r4, #12]
 8003782:	f04f 30ff 	mov.w	r0, #4294967295
 8003786:	e03e      	b.n	8003806 <__swsetup_r+0xba>
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <__swsetup_r+0xd4>)
 800378a:	429c      	cmp	r4, r3
 800378c:	d101      	bne.n	8003792 <__swsetup_r+0x46>
 800378e:	68ac      	ldr	r4, [r5, #8]
 8003790:	e7eb      	b.n	800376a <__swsetup_r+0x1e>
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <__swsetup_r+0xd8>)
 8003794:	429c      	cmp	r4, r3
 8003796:	bf08      	it	eq
 8003798:	68ec      	ldreq	r4, [r5, #12]
 800379a:	e7e6      	b.n	800376a <__swsetup_r+0x1e>
 800379c:	0751      	lsls	r1, r2, #29
 800379e:	d512      	bpl.n	80037c6 <__swsetup_r+0x7a>
 80037a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037a2:	b141      	cbz	r1, 80037b6 <__swsetup_r+0x6a>
 80037a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037a8:	4299      	cmp	r1, r3
 80037aa:	d002      	beq.n	80037b2 <__swsetup_r+0x66>
 80037ac:	4630      	mov	r0, r6
 80037ae:	f001 fb77 	bl	8004ea0 <_free_r>
 80037b2:	2300      	movs	r3, #0
 80037b4:	6363      	str	r3, [r4, #52]	; 0x34
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037bc:	81a3      	strh	r3, [r4, #12]
 80037be:	2300      	movs	r3, #0
 80037c0:	6063      	str	r3, [r4, #4]
 80037c2:	6923      	ldr	r3, [r4, #16]
 80037c4:	6023      	str	r3, [r4, #0]
 80037c6:	89a3      	ldrh	r3, [r4, #12]
 80037c8:	f043 0308 	orr.w	r3, r3, #8
 80037cc:	81a3      	strh	r3, [r4, #12]
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	b94b      	cbnz	r3, 80037e6 <__swsetup_r+0x9a>
 80037d2:	89a3      	ldrh	r3, [r4, #12]
 80037d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037dc:	d003      	beq.n	80037e6 <__swsetup_r+0x9a>
 80037de:	4621      	mov	r1, r4
 80037e0:	4630      	mov	r0, r6
 80037e2:	f001 f811 	bl	8004808 <__smakebuf_r>
 80037e6:	89a2      	ldrh	r2, [r4, #12]
 80037e8:	f012 0301 	ands.w	r3, r2, #1
 80037ec:	d00c      	beq.n	8003808 <__swsetup_r+0xbc>
 80037ee:	2300      	movs	r3, #0
 80037f0:	60a3      	str	r3, [r4, #8]
 80037f2:	6963      	ldr	r3, [r4, #20]
 80037f4:	425b      	negs	r3, r3
 80037f6:	61a3      	str	r3, [r4, #24]
 80037f8:	6923      	ldr	r3, [r4, #16]
 80037fa:	b953      	cbnz	r3, 8003812 <__swsetup_r+0xc6>
 80037fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003800:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003804:	d1ba      	bne.n	800377c <__swsetup_r+0x30>
 8003806:	bd70      	pop	{r4, r5, r6, pc}
 8003808:	0792      	lsls	r2, r2, #30
 800380a:	bf58      	it	pl
 800380c:	6963      	ldrpl	r3, [r4, #20]
 800380e:	60a3      	str	r3, [r4, #8]
 8003810:	e7f2      	b.n	80037f8 <__swsetup_r+0xac>
 8003812:	2000      	movs	r0, #0
 8003814:	e7f7      	b.n	8003806 <__swsetup_r+0xba>
 8003816:	bf00      	nop
 8003818:	20000010 	.word	0x20000010
 800381c:	0800558c 	.word	0x0800558c
 8003820:	080055ac 	.word	0x080055ac
 8003824:	0800556c 	.word	0x0800556c

08003828 <quorem>:
 8003828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800382c:	6903      	ldr	r3, [r0, #16]
 800382e:	690c      	ldr	r4, [r1, #16]
 8003830:	4680      	mov	r8, r0
 8003832:	42a3      	cmp	r3, r4
 8003834:	f2c0 8084 	blt.w	8003940 <quorem+0x118>
 8003838:	3c01      	subs	r4, #1
 800383a:	f101 0714 	add.w	r7, r1, #20
 800383e:	f100 0614 	add.w	r6, r0, #20
 8003842:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003846:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800384a:	3501      	adds	r5, #1
 800384c:	fbb0 f5f5 	udiv	r5, r0, r5
 8003850:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003854:	eb06 030c 	add.w	r3, r6, ip
 8003858:	eb07 090c 	add.w	r9, r7, ip
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	b39d      	cbz	r5, 80038c8 <quorem+0xa0>
 8003860:	f04f 0a00 	mov.w	sl, #0
 8003864:	4638      	mov	r0, r7
 8003866:	46b6      	mov	lr, r6
 8003868:	46d3      	mov	fp, sl
 800386a:	f850 2b04 	ldr.w	r2, [r0], #4
 800386e:	b293      	uxth	r3, r2
 8003870:	fb05 a303 	mla	r3, r5, r3, sl
 8003874:	0c12      	lsrs	r2, r2, #16
 8003876:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800387a:	fb05 a202 	mla	r2, r5, r2, sl
 800387e:	b29b      	uxth	r3, r3
 8003880:	ebab 0303 	sub.w	r3, fp, r3
 8003884:	f8de b000 	ldr.w	fp, [lr]
 8003888:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800388c:	fa1f fb8b 	uxth.w	fp, fp
 8003890:	445b      	add	r3, fp
 8003892:	fa1f fb82 	uxth.w	fp, r2
 8003896:	f8de 2000 	ldr.w	r2, [lr]
 800389a:	4581      	cmp	r9, r0
 800389c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80038a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038aa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80038ae:	f84e 3b04 	str.w	r3, [lr], #4
 80038b2:	d2da      	bcs.n	800386a <quorem+0x42>
 80038b4:	f856 300c 	ldr.w	r3, [r6, ip]
 80038b8:	b933      	cbnz	r3, 80038c8 <quorem+0xa0>
 80038ba:	9b01      	ldr	r3, [sp, #4]
 80038bc:	3b04      	subs	r3, #4
 80038be:	429e      	cmp	r6, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	d331      	bcc.n	8003928 <quorem+0x100>
 80038c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80038c8:	4640      	mov	r0, r8
 80038ca:	f001 fa13 	bl	8004cf4 <__mcmp>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	db26      	blt.n	8003920 <quorem+0xf8>
 80038d2:	4630      	mov	r0, r6
 80038d4:	f04f 0c00 	mov.w	ip, #0
 80038d8:	3501      	adds	r5, #1
 80038da:	f857 1b04 	ldr.w	r1, [r7], #4
 80038de:	f8d0 e000 	ldr.w	lr, [r0]
 80038e2:	b28b      	uxth	r3, r1
 80038e4:	ebac 0303 	sub.w	r3, ip, r3
 80038e8:	fa1f f28e 	uxth.w	r2, lr
 80038ec:	4413      	add	r3, r2
 80038ee:	0c0a      	lsrs	r2, r1, #16
 80038f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80038f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038fe:	45b9      	cmp	r9, r7
 8003900:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003904:	f840 3b04 	str.w	r3, [r0], #4
 8003908:	d2e7      	bcs.n	80038da <quorem+0xb2>
 800390a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800390e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003912:	b92a      	cbnz	r2, 8003920 <quorem+0xf8>
 8003914:	3b04      	subs	r3, #4
 8003916:	429e      	cmp	r6, r3
 8003918:	461a      	mov	r2, r3
 800391a:	d30b      	bcc.n	8003934 <quorem+0x10c>
 800391c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003920:	4628      	mov	r0, r5
 8003922:	b003      	add	sp, #12
 8003924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	3b04      	subs	r3, #4
 800392c:	2a00      	cmp	r2, #0
 800392e:	d1c9      	bne.n	80038c4 <quorem+0x9c>
 8003930:	3c01      	subs	r4, #1
 8003932:	e7c4      	b.n	80038be <quorem+0x96>
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	3b04      	subs	r3, #4
 8003938:	2a00      	cmp	r2, #0
 800393a:	d1ef      	bne.n	800391c <quorem+0xf4>
 800393c:	3c01      	subs	r4, #1
 800393e:	e7ea      	b.n	8003916 <quorem+0xee>
 8003940:	2000      	movs	r0, #0
 8003942:	e7ee      	b.n	8003922 <quorem+0xfa>
 8003944:	0000      	movs	r0, r0
	...

08003948 <_dtoa_r>:
 8003948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394c:	4616      	mov	r6, r2
 800394e:	461f      	mov	r7, r3
 8003950:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003952:	b095      	sub	sp, #84	; 0x54
 8003954:	4604      	mov	r4, r0
 8003956:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800395a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800395e:	b93d      	cbnz	r5, 8003970 <_dtoa_r+0x28>
 8003960:	2010      	movs	r0, #16
 8003962:	f000 ff91 	bl	8004888 <malloc>
 8003966:	6260      	str	r0, [r4, #36]	; 0x24
 8003968:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800396c:	6005      	str	r5, [r0, #0]
 800396e:	60c5      	str	r5, [r0, #12]
 8003970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	b151      	cbz	r1, 800398c <_dtoa_r+0x44>
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	2301      	movs	r3, #1
 800397a:	4093      	lsls	r3, r2
 800397c:	604a      	str	r2, [r1, #4]
 800397e:	608b      	str	r3, [r1, #8]
 8003980:	4620      	mov	r0, r4
 8003982:	f000 ffd6 	bl	8004932 <_Bfree>
 8003986:	2200      	movs	r2, #0
 8003988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	1e3b      	subs	r3, r7, #0
 800398e:	bfaf      	iteee	ge
 8003990:	2300      	movge	r3, #0
 8003992:	2201      	movlt	r2, #1
 8003994:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003998:	9303      	strlt	r3, [sp, #12]
 800399a:	bfac      	ite	ge
 800399c:	f8c8 3000 	strge.w	r3, [r8]
 80039a0:	f8c8 2000 	strlt.w	r2, [r8]
 80039a4:	4bae      	ldr	r3, [pc, #696]	; (8003c60 <_dtoa_r+0x318>)
 80039a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80039aa:	ea33 0308 	bics.w	r3, r3, r8
 80039ae:	d11b      	bne.n	80039e8 <_dtoa_r+0xa0>
 80039b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80039b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	9b02      	ldr	r3, [sp, #8]
 80039ba:	b923      	cbnz	r3, 80039c6 <_dtoa_r+0x7e>
 80039bc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80039c0:	2800      	cmp	r0, #0
 80039c2:	f000 8545 	beq.w	8004450 <_dtoa_r+0xb08>
 80039c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80039c8:	b953      	cbnz	r3, 80039e0 <_dtoa_r+0x98>
 80039ca:	4ba6      	ldr	r3, [pc, #664]	; (8003c64 <_dtoa_r+0x31c>)
 80039cc:	e021      	b.n	8003a12 <_dtoa_r+0xca>
 80039ce:	4ba6      	ldr	r3, [pc, #664]	; (8003c68 <_dtoa_r+0x320>)
 80039d0:	9306      	str	r3, [sp, #24]
 80039d2:	3308      	adds	r3, #8
 80039d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	9806      	ldr	r0, [sp, #24]
 80039da:	b015      	add	sp, #84	; 0x54
 80039dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e0:	4ba0      	ldr	r3, [pc, #640]	; (8003c64 <_dtoa_r+0x31c>)
 80039e2:	9306      	str	r3, [sp, #24]
 80039e4:	3303      	adds	r3, #3
 80039e6:	e7f5      	b.n	80039d4 <_dtoa_r+0x8c>
 80039e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80039ec:	2200      	movs	r2, #0
 80039ee:	2300      	movs	r3, #0
 80039f0:	4630      	mov	r0, r6
 80039f2:	4639      	mov	r1, r7
 80039f4:	f7fc ffd8 	bl	80009a8 <__aeabi_dcmpeq>
 80039f8:	4682      	mov	sl, r0
 80039fa:	b160      	cbz	r0, 8003a16 <_dtoa_r+0xce>
 80039fc:	2301      	movs	r3, #1
 80039fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8520 	beq.w	800444a <_dtoa_r+0xb02>
 8003a0a:	4b98      	ldr	r3, [pc, #608]	; (8003c6c <_dtoa_r+0x324>)
 8003a0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	9306      	str	r3, [sp, #24]
 8003a14:	e7e0      	b.n	80039d8 <_dtoa_r+0x90>
 8003a16:	ab12      	add	r3, sp, #72	; 0x48
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	ab13      	add	r3, sp, #76	; 0x4c
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	4632      	mov	r2, r6
 8003a20:	463b      	mov	r3, r7
 8003a22:	4620      	mov	r0, r4
 8003a24:	f001 f9de 	bl	8004de4 <__d2b>
 8003a28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003a2c:	4683      	mov	fp, r0
 8003a2e:	2d00      	cmp	r5, #0
 8003a30:	d07d      	beq.n	8003b2e <_dtoa_r+0x1e6>
 8003a32:	46b0      	mov	r8, r6
 8003a34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003a38:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003a3c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003a40:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003a44:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003a48:	2200      	movs	r2, #0
 8003a4a:	4b89      	ldr	r3, [pc, #548]	; (8003c70 <_dtoa_r+0x328>)
 8003a4c:	4640      	mov	r0, r8
 8003a4e:	4649      	mov	r1, r9
 8003a50:	f7fc fb8a 	bl	8000168 <__aeabi_dsub>
 8003a54:	a37c      	add	r3, pc, #496	; (adr r3, 8003c48 <_dtoa_r+0x300>)
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f7fc fd3d 	bl	80004d8 <__aeabi_dmul>
 8003a5e:	a37c      	add	r3, pc, #496	; (adr r3, 8003c50 <_dtoa_r+0x308>)
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f7fc fb82 	bl	800016c <__adddf3>
 8003a68:	4606      	mov	r6, r0
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	460f      	mov	r7, r1
 8003a6e:	f7fc fcc9 	bl	8000404 <__aeabi_i2d>
 8003a72:	a379      	add	r3, pc, #484	; (adr r3, 8003c58 <_dtoa_r+0x310>)
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f7fc fd2e 	bl	80004d8 <__aeabi_dmul>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4630      	mov	r0, r6
 8003a82:	4639      	mov	r1, r7
 8003a84:	f7fc fb72 	bl	800016c <__adddf3>
 8003a88:	4606      	mov	r6, r0
 8003a8a:	460f      	mov	r7, r1
 8003a8c:	f7fc ffd4 	bl	8000a38 <__aeabi_d2iz>
 8003a90:	2200      	movs	r2, #0
 8003a92:	4682      	mov	sl, r0
 8003a94:	2300      	movs	r3, #0
 8003a96:	4630      	mov	r0, r6
 8003a98:	4639      	mov	r1, r7
 8003a9a:	f7fc ff8f 	bl	80009bc <__aeabi_dcmplt>
 8003a9e:	b148      	cbz	r0, 8003ab4 <_dtoa_r+0x16c>
 8003aa0:	4650      	mov	r0, sl
 8003aa2:	f7fc fcaf 	bl	8000404 <__aeabi_i2d>
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	463b      	mov	r3, r7
 8003aaa:	f7fc ff7d 	bl	80009a8 <__aeabi_dcmpeq>
 8003aae:	b908      	cbnz	r0, 8003ab4 <_dtoa_r+0x16c>
 8003ab0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ab4:	f1ba 0f16 	cmp.w	sl, #22
 8003ab8:	d85a      	bhi.n	8003b70 <_dtoa_r+0x228>
 8003aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003abe:	496d      	ldr	r1, [pc, #436]	; (8003c74 <_dtoa_r+0x32c>)
 8003ac0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ac8:	f7fc ff96 	bl	80009f8 <__aeabi_dcmpgt>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d051      	beq.n	8003b74 <_dtoa_r+0x22c>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ad6:	930d      	str	r3, [sp, #52]	; 0x34
 8003ad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ada:	1b5d      	subs	r5, r3, r5
 8003adc:	1e6b      	subs	r3, r5, #1
 8003ade:	9307      	str	r3, [sp, #28]
 8003ae0:	bf43      	ittte	mi
 8003ae2:	2300      	movmi	r3, #0
 8003ae4:	f1c5 0901 	rsbmi	r9, r5, #1
 8003ae8:	9307      	strmi	r3, [sp, #28]
 8003aea:	f04f 0900 	movpl.w	r9, #0
 8003aee:	f1ba 0f00 	cmp.w	sl, #0
 8003af2:	db41      	blt.n	8003b78 <_dtoa_r+0x230>
 8003af4:	9b07      	ldr	r3, [sp, #28]
 8003af6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003afa:	4453      	add	r3, sl
 8003afc:	9307      	str	r3, [sp, #28]
 8003afe:	2300      	movs	r3, #0
 8003b00:	9308      	str	r3, [sp, #32]
 8003b02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003b04:	2b09      	cmp	r3, #9
 8003b06:	f200 808f 	bhi.w	8003c28 <_dtoa_r+0x2e0>
 8003b0a:	2b05      	cmp	r3, #5
 8003b0c:	bfc4      	itt	gt
 8003b0e:	3b04      	subgt	r3, #4
 8003b10:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003b12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003b14:	bfc8      	it	gt
 8003b16:	2500      	movgt	r5, #0
 8003b18:	f1a3 0302 	sub.w	r3, r3, #2
 8003b1c:	bfd8      	it	le
 8003b1e:	2501      	movle	r5, #1
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	f200 808d 	bhi.w	8003c40 <_dtoa_r+0x2f8>
 8003b26:	e8df f003 	tbb	[pc, r3]
 8003b2a:	7d7b      	.short	0x7d7b
 8003b2c:	6f2f      	.short	0x6f2f
 8003b2e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003b32:	441d      	add	r5, r3
 8003b34:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003b38:	2820      	cmp	r0, #32
 8003b3a:	dd13      	ble.n	8003b64 <_dtoa_r+0x21c>
 8003b3c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003b40:	9b02      	ldr	r3, [sp, #8]
 8003b42:	fa08 f800 	lsl.w	r8, r8, r0
 8003b46:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003b4a:	fa23 f000 	lsr.w	r0, r3, r0
 8003b4e:	ea48 0000 	orr.w	r0, r8, r0
 8003b52:	f7fc fc47 	bl	80003e4 <__aeabi_ui2d>
 8003b56:	2301      	movs	r3, #1
 8003b58:	4680      	mov	r8, r0
 8003b5a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003b5e:	3d01      	subs	r5, #1
 8003b60:	9310      	str	r3, [sp, #64]	; 0x40
 8003b62:	e771      	b.n	8003a48 <_dtoa_r+0x100>
 8003b64:	9b02      	ldr	r3, [sp, #8]
 8003b66:	f1c0 0020 	rsb	r0, r0, #32
 8003b6a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b6e:	e7f0      	b.n	8003b52 <_dtoa_r+0x20a>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e7b0      	b.n	8003ad6 <_dtoa_r+0x18e>
 8003b74:	900d      	str	r0, [sp, #52]	; 0x34
 8003b76:	e7af      	b.n	8003ad8 <_dtoa_r+0x190>
 8003b78:	f1ca 0300 	rsb	r3, sl, #0
 8003b7c:	9308      	str	r3, [sp, #32]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	eba9 090a 	sub.w	r9, r9, sl
 8003b84:	930c      	str	r3, [sp, #48]	; 0x30
 8003b86:	e7bc      	b.n	8003b02 <_dtoa_r+0x1ba>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	dd74      	ble.n	8003c7c <_dtoa_r+0x334>
 8003b92:	4698      	mov	r8, r3
 8003b94:	9304      	str	r3, [sp, #16]
 8003b96:	2200      	movs	r2, #0
 8003b98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003b9a:	6072      	str	r2, [r6, #4]
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	f102 0014 	add.w	r0, r2, #20
 8003ba2:	4298      	cmp	r0, r3
 8003ba4:	6871      	ldr	r1, [r6, #4]
 8003ba6:	d96e      	bls.n	8003c86 <_dtoa_r+0x33e>
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f000 fe8e 	bl	80048ca <_Balloc>
 8003bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bb0:	6030      	str	r0, [r6, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f1b8 0f0e 	cmp.w	r8, #14
 8003bb8:	9306      	str	r3, [sp, #24]
 8003bba:	f200 80ed 	bhi.w	8003d98 <_dtoa_r+0x450>
 8003bbe:	2d00      	cmp	r5, #0
 8003bc0:	f000 80ea 	beq.w	8003d98 <_dtoa_r+0x450>
 8003bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bc8:	f1ba 0f00 	cmp.w	sl, #0
 8003bcc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003bd0:	dd77      	ble.n	8003cc2 <_dtoa_r+0x37a>
 8003bd2:	4a28      	ldr	r2, [pc, #160]	; (8003c74 <_dtoa_r+0x32c>)
 8003bd4:	f00a 030f 	and.w	r3, sl, #15
 8003bd8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003bdc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003be0:	06f0      	lsls	r0, r6, #27
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003bea:	d568      	bpl.n	8003cbe <_dtoa_r+0x376>
 8003bec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003bf0:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <_dtoa_r+0x330>)
 8003bf2:	2503      	movs	r5, #3
 8003bf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003bf8:	f7fc fd98 	bl	800072c <__aeabi_ddiv>
 8003bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c00:	f006 060f 	and.w	r6, r6, #15
 8003c04:	4f1c      	ldr	r7, [pc, #112]	; (8003c78 <_dtoa_r+0x330>)
 8003c06:	e04f      	b.n	8003ca8 <_dtoa_r+0x360>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003c0e:	4453      	add	r3, sl
 8003c10:	f103 0801 	add.w	r8, r3, #1
 8003c14:	9304      	str	r3, [sp, #16]
 8003c16:	4643      	mov	r3, r8
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	bfb8      	it	lt
 8003c1c:	2301      	movlt	r3, #1
 8003c1e:	e7ba      	b.n	8003b96 <_dtoa_r+0x24e>
 8003c20:	2300      	movs	r3, #0
 8003c22:	e7b2      	b.n	8003b8a <_dtoa_r+0x242>
 8003c24:	2300      	movs	r3, #0
 8003c26:	e7f0      	b.n	8003c0a <_dtoa_r+0x2c2>
 8003c28:	2501      	movs	r5, #1
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9509      	str	r5, [sp, #36]	; 0x24
 8003c2e:	931e      	str	r3, [sp, #120]	; 0x78
 8003c30:	f04f 33ff 	mov.w	r3, #4294967295
 8003c34:	2200      	movs	r2, #0
 8003c36:	9304      	str	r3, [sp, #16]
 8003c38:	4698      	mov	r8, r3
 8003c3a:	2312      	movs	r3, #18
 8003c3c:	921f      	str	r2, [sp, #124]	; 0x7c
 8003c3e:	e7aa      	b.n	8003b96 <_dtoa_r+0x24e>
 8003c40:	2301      	movs	r3, #1
 8003c42:	9309      	str	r3, [sp, #36]	; 0x24
 8003c44:	e7f4      	b.n	8003c30 <_dtoa_r+0x2e8>
 8003c46:	bf00      	nop
 8003c48:	636f4361 	.word	0x636f4361
 8003c4c:	3fd287a7 	.word	0x3fd287a7
 8003c50:	8b60c8b3 	.word	0x8b60c8b3
 8003c54:	3fc68a28 	.word	0x3fc68a28
 8003c58:	509f79fb 	.word	0x509f79fb
 8003c5c:	3fd34413 	.word	0x3fd34413
 8003c60:	7ff00000 	.word	0x7ff00000
 8003c64:	08005565 	.word	0x08005565
 8003c68:	0800555c 	.word	0x0800555c
 8003c6c:	08005539 	.word	0x08005539
 8003c70:	3ff80000 	.word	0x3ff80000
 8003c74:	080055f8 	.word	0x080055f8
 8003c78:	080055d0 	.word	0x080055d0
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	9304      	str	r3, [sp, #16]
 8003c80:	4698      	mov	r8, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	e7da      	b.n	8003c3c <_dtoa_r+0x2f4>
 8003c86:	3101      	adds	r1, #1
 8003c88:	6071      	str	r1, [r6, #4]
 8003c8a:	0052      	lsls	r2, r2, #1
 8003c8c:	e787      	b.n	8003b9e <_dtoa_r+0x256>
 8003c8e:	07f1      	lsls	r1, r6, #31
 8003c90:	d508      	bpl.n	8003ca4 <_dtoa_r+0x35c>
 8003c92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003c96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c9a:	f7fc fc1d 	bl	80004d8 <__aeabi_dmul>
 8003c9e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ca2:	3501      	adds	r5, #1
 8003ca4:	1076      	asrs	r6, r6, #1
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	2e00      	cmp	r6, #0
 8003caa:	d1f0      	bne.n	8003c8e <_dtoa_r+0x346>
 8003cac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cb4:	f7fc fd3a 	bl	800072c <__aeabi_ddiv>
 8003cb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cbc:	e01b      	b.n	8003cf6 <_dtoa_r+0x3ae>
 8003cbe:	2502      	movs	r5, #2
 8003cc0:	e7a0      	b.n	8003c04 <_dtoa_r+0x2bc>
 8003cc2:	f000 80a4 	beq.w	8003e0e <_dtoa_r+0x4c6>
 8003cc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003cca:	f1ca 0600 	rsb	r6, sl, #0
 8003cce:	4ba0      	ldr	r3, [pc, #640]	; (8003f50 <_dtoa_r+0x608>)
 8003cd0:	f006 020f 	and.w	r2, r6, #15
 8003cd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f7fc fbfc 	bl	80004d8 <__aeabi_dmul>
 8003ce0:	2502      	movs	r5, #2
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ce8:	4f9a      	ldr	r7, [pc, #616]	; (8003f54 <_dtoa_r+0x60c>)
 8003cea:	1136      	asrs	r6, r6, #4
 8003cec:	2e00      	cmp	r6, #0
 8003cee:	f040 8083 	bne.w	8003df8 <_dtoa_r+0x4b0>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e0      	bne.n	8003cb8 <_dtoa_r+0x370>
 8003cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 808a 	beq.w	8003e12 <_dtoa_r+0x4ca>
 8003cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d02:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003d06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	4b92      	ldr	r3, [pc, #584]	; (8003f58 <_dtoa_r+0x610>)
 8003d0e:	f7fc fe55 	bl	80009bc <__aeabi_dcmplt>
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d07d      	beq.n	8003e12 <_dtoa_r+0x4ca>
 8003d16:	f1b8 0f00 	cmp.w	r8, #0
 8003d1a:	d07a      	beq.n	8003e12 <_dtoa_r+0x4ca>
 8003d1c:	9b04      	ldr	r3, [sp, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	dd36      	ble.n	8003d90 <_dtoa_r+0x448>
 8003d22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d26:	2200      	movs	r2, #0
 8003d28:	4b8c      	ldr	r3, [pc, #560]	; (8003f5c <_dtoa_r+0x614>)
 8003d2a:	f7fc fbd5 	bl	80004d8 <__aeabi_dmul>
 8003d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d32:	9e04      	ldr	r6, [sp, #16]
 8003d34:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003d38:	3501      	adds	r5, #1
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f7fc fb62 	bl	8000404 <__aeabi_i2d>
 8003d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d44:	f7fc fbc8 	bl	80004d8 <__aeabi_dmul>
 8003d48:	2200      	movs	r2, #0
 8003d4a:	4b85      	ldr	r3, [pc, #532]	; (8003f60 <_dtoa_r+0x618>)
 8003d4c:	f7fc fa0e 	bl	800016c <__adddf3>
 8003d50:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003d54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003d58:	950b      	str	r5, [sp, #44]	; 0x2c
 8003d5a:	2e00      	cmp	r6, #0
 8003d5c:	d15c      	bne.n	8003e18 <_dtoa_r+0x4d0>
 8003d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d62:	2200      	movs	r2, #0
 8003d64:	4b7f      	ldr	r3, [pc, #508]	; (8003f64 <_dtoa_r+0x61c>)
 8003d66:	f7fc f9ff 	bl	8000168 <__aeabi_dsub>
 8003d6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d6c:	462b      	mov	r3, r5
 8003d6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d72:	f7fc fe41 	bl	80009f8 <__aeabi_dcmpgt>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	f040 8281 	bne.w	800427e <_dtoa_r+0x936>
 8003d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d82:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003d86:	f7fc fe19 	bl	80009bc <__aeabi_dcmplt>
 8003d8a:	2800      	cmp	r0, #0
 8003d8c:	f040 8275 	bne.w	800427a <_dtoa_r+0x932>
 8003d90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003d94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f2c0 814b 	blt.w	8004036 <_dtoa_r+0x6ee>
 8003da0:	f1ba 0f0e 	cmp.w	sl, #14
 8003da4:	f300 8147 	bgt.w	8004036 <_dtoa_r+0x6ee>
 8003da8:	4b69      	ldr	r3, [pc, #420]	; (8003f50 <_dtoa_r+0x608>)
 8003daa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003db6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f280 80d7 	bge.w	8003f6c <_dtoa_r+0x624>
 8003dbe:	f1b8 0f00 	cmp.w	r8, #0
 8003dc2:	f300 80d3 	bgt.w	8003f6c <_dtoa_r+0x624>
 8003dc6:	f040 8257 	bne.w	8004278 <_dtoa_r+0x930>
 8003dca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4b64      	ldr	r3, [pc, #400]	; (8003f64 <_dtoa_r+0x61c>)
 8003dd2:	f7fc fb81 	bl	80004d8 <__aeabi_dmul>
 8003dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dda:	f7fc fe03 	bl	80009e4 <__aeabi_dcmpge>
 8003dde:	4646      	mov	r6, r8
 8003de0:	4647      	mov	r7, r8
 8003de2:	2800      	cmp	r0, #0
 8003de4:	f040 822d 	bne.w	8004242 <_dtoa_r+0x8fa>
 8003de8:	9b06      	ldr	r3, [sp, #24]
 8003dea:	9a06      	ldr	r2, [sp, #24]
 8003dec:	1c5d      	adds	r5, r3, #1
 8003dee:	2331      	movs	r3, #49	; 0x31
 8003df0:	f10a 0a01 	add.w	sl, sl, #1
 8003df4:	7013      	strb	r3, [r2, #0]
 8003df6:	e228      	b.n	800424a <_dtoa_r+0x902>
 8003df8:	07f2      	lsls	r2, r6, #31
 8003dfa:	d505      	bpl.n	8003e08 <_dtoa_r+0x4c0>
 8003dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e00:	f7fc fb6a 	bl	80004d8 <__aeabi_dmul>
 8003e04:	2301      	movs	r3, #1
 8003e06:	3501      	adds	r5, #1
 8003e08:	1076      	asrs	r6, r6, #1
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	e76e      	b.n	8003cec <_dtoa_r+0x3a4>
 8003e0e:	2502      	movs	r5, #2
 8003e10:	e771      	b.n	8003cf6 <_dtoa_r+0x3ae>
 8003e12:	4657      	mov	r7, sl
 8003e14:	4646      	mov	r6, r8
 8003e16:	e790      	b.n	8003d3a <_dtoa_r+0x3f2>
 8003e18:	4b4d      	ldr	r3, [pc, #308]	; (8003f50 <_dtoa_r+0x608>)
 8003e1a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003e1e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d048      	beq.n	8003eba <_dtoa_r+0x572>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	494e      	ldr	r1, [pc, #312]	; (8003f68 <_dtoa_r+0x620>)
 8003e30:	f7fc fc7c 	bl	800072c <__aeabi_ddiv>
 8003e34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003e38:	f7fc f996 	bl	8000168 <__aeabi_dsub>
 8003e3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003e40:	9d06      	ldr	r5, [sp, #24]
 8003e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e46:	f7fc fdf7 	bl	8000a38 <__aeabi_d2iz>
 8003e4a:	9011      	str	r0, [sp, #68]	; 0x44
 8003e4c:	f7fc fada 	bl	8000404 <__aeabi_i2d>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e58:	f7fc f986 	bl	8000168 <__aeabi_dsub>
 8003e5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e62:	3330      	adds	r3, #48	; 0x30
 8003e64:	f805 3b01 	strb.w	r3, [r5], #1
 8003e68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003e6c:	f7fc fda6 	bl	80009bc <__aeabi_dcmplt>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d163      	bne.n	8003f3c <_dtoa_r+0x5f4>
 8003e74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e78:	2000      	movs	r0, #0
 8003e7a:	4937      	ldr	r1, [pc, #220]	; (8003f58 <_dtoa_r+0x610>)
 8003e7c:	f7fc f974 	bl	8000168 <__aeabi_dsub>
 8003e80:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003e84:	f7fc fd9a 	bl	80009bc <__aeabi_dcmplt>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	f040 80b5 	bne.w	8003ff8 <_dtoa_r+0x6b0>
 8003e8e:	9b06      	ldr	r3, [sp, #24]
 8003e90:	1aeb      	subs	r3, r5, r3
 8003e92:	429e      	cmp	r6, r3
 8003e94:	f77f af7c 	ble.w	8003d90 <_dtoa_r+0x448>
 8003e98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	4b2f      	ldr	r3, [pc, #188]	; (8003f5c <_dtoa_r+0x614>)
 8003ea0:	f7fc fb1a 	bl	80004d8 <__aeabi_dmul>
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003eae:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <_dtoa_r+0x614>)
 8003eb0:	f7fc fb12 	bl	80004d8 <__aeabi_dmul>
 8003eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003eb8:	e7c3      	b.n	8003e42 <_dtoa_r+0x4fa>
 8003eba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ebe:	f7fc fb0b 	bl	80004d8 <__aeabi_dmul>
 8003ec2:	9b06      	ldr	r3, [sp, #24]
 8003ec4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ec8:	199d      	adds	r5, r3, r6
 8003eca:	461e      	mov	r6, r3
 8003ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ed0:	f7fc fdb2 	bl	8000a38 <__aeabi_d2iz>
 8003ed4:	9011      	str	r0, [sp, #68]	; 0x44
 8003ed6:	f7fc fa95 	bl	8000404 <__aeabi_i2d>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ee2:	f7fc f941 	bl	8000168 <__aeabi_dsub>
 8003ee6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003ee8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003eec:	3330      	adds	r3, #48	; 0x30
 8003eee:	f806 3b01 	strb.w	r3, [r6], #1
 8003ef2:	42ae      	cmp	r6, r5
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	d124      	bne.n	8003f44 <_dtoa_r+0x5fc>
 8003efa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003efe:	4b1a      	ldr	r3, [pc, #104]	; (8003f68 <_dtoa_r+0x620>)
 8003f00:	f7fc f934 	bl	800016c <__adddf3>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f0c:	f7fc fd74 	bl	80009f8 <__aeabi_dcmpgt>
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d171      	bne.n	8003ff8 <_dtoa_r+0x6b0>
 8003f14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003f18:	2000      	movs	r0, #0
 8003f1a:	4913      	ldr	r1, [pc, #76]	; (8003f68 <_dtoa_r+0x620>)
 8003f1c:	f7fc f924 	bl	8000168 <__aeabi_dsub>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f28:	f7fc fd48 	bl	80009bc <__aeabi_dcmplt>
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	f43f af2f 	beq.w	8003d90 <_dtoa_r+0x448>
 8003f32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f36:	1e6a      	subs	r2, r5, #1
 8003f38:	2b30      	cmp	r3, #48	; 0x30
 8003f3a:	d001      	beq.n	8003f40 <_dtoa_r+0x5f8>
 8003f3c:	46ba      	mov	sl, r7
 8003f3e:	e04a      	b.n	8003fd6 <_dtoa_r+0x68e>
 8003f40:	4615      	mov	r5, r2
 8003f42:	e7f6      	b.n	8003f32 <_dtoa_r+0x5ea>
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <_dtoa_r+0x614>)
 8003f46:	f7fc fac7 	bl	80004d8 <__aeabi_dmul>
 8003f4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f4e:	e7bd      	b.n	8003ecc <_dtoa_r+0x584>
 8003f50:	080055f8 	.word	0x080055f8
 8003f54:	080055d0 	.word	0x080055d0
 8003f58:	3ff00000 	.word	0x3ff00000
 8003f5c:	40240000 	.word	0x40240000
 8003f60:	401c0000 	.word	0x401c0000
 8003f64:	40140000 	.word	0x40140000
 8003f68:	3fe00000 	.word	0x3fe00000
 8003f6c:	9d06      	ldr	r5, [sp, #24]
 8003f6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f76:	4630      	mov	r0, r6
 8003f78:	4639      	mov	r1, r7
 8003f7a:	f7fc fbd7 	bl	800072c <__aeabi_ddiv>
 8003f7e:	f7fc fd5b 	bl	8000a38 <__aeabi_d2iz>
 8003f82:	4681      	mov	r9, r0
 8003f84:	f7fc fa3e 	bl	8000404 <__aeabi_i2d>
 8003f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f8c:	f7fc faa4 	bl	80004d8 <__aeabi_dmul>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4630      	mov	r0, r6
 8003f96:	4639      	mov	r1, r7
 8003f98:	f7fc f8e6 	bl	8000168 <__aeabi_dsub>
 8003f9c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003fa0:	f805 6b01 	strb.w	r6, [r5], #1
 8003fa4:	9e06      	ldr	r6, [sp, #24]
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	1bae      	subs	r6, r5, r6
 8003faa:	45b0      	cmp	r8, r6
 8003fac:	460b      	mov	r3, r1
 8003fae:	d135      	bne.n	800401c <_dtoa_r+0x6d4>
 8003fb0:	f7fc f8dc 	bl	800016c <__adddf3>
 8003fb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fb8:	4606      	mov	r6, r0
 8003fba:	460f      	mov	r7, r1
 8003fbc:	f7fc fd1c 	bl	80009f8 <__aeabi_dcmpgt>
 8003fc0:	b9c8      	cbnz	r0, 8003ff6 <_dtoa_r+0x6ae>
 8003fc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	4639      	mov	r1, r7
 8003fca:	f7fc fced 	bl	80009a8 <__aeabi_dcmpeq>
 8003fce:	b110      	cbz	r0, 8003fd6 <_dtoa_r+0x68e>
 8003fd0:	f019 0f01 	tst.w	r9, #1
 8003fd4:	d10f      	bne.n	8003ff6 <_dtoa_r+0x6ae>
 8003fd6:	4659      	mov	r1, fp
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f000 fcaa 	bl	8004932 <_Bfree>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003fe2:	702b      	strb	r3, [r5, #0]
 8003fe4:	f10a 0301 	add.w	r3, sl, #1
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f43f acf3 	beq.w	80039d8 <_dtoa_r+0x90>
 8003ff2:	601d      	str	r5, [r3, #0]
 8003ff4:	e4f0      	b.n	80039d8 <_dtoa_r+0x90>
 8003ff6:	4657      	mov	r7, sl
 8003ff8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003ffc:	1e6b      	subs	r3, r5, #1
 8003ffe:	2a39      	cmp	r2, #57	; 0x39
 8004000:	d106      	bne.n	8004010 <_dtoa_r+0x6c8>
 8004002:	9a06      	ldr	r2, [sp, #24]
 8004004:	429a      	cmp	r2, r3
 8004006:	d107      	bne.n	8004018 <_dtoa_r+0x6d0>
 8004008:	2330      	movs	r3, #48	; 0x30
 800400a:	7013      	strb	r3, [r2, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	3701      	adds	r7, #1
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	3201      	adds	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	e791      	b.n	8003f3c <_dtoa_r+0x5f4>
 8004018:	461d      	mov	r5, r3
 800401a:	e7ed      	b.n	8003ff8 <_dtoa_r+0x6b0>
 800401c:	2200      	movs	r2, #0
 800401e:	4b99      	ldr	r3, [pc, #612]	; (8004284 <_dtoa_r+0x93c>)
 8004020:	f7fc fa5a 	bl	80004d8 <__aeabi_dmul>
 8004024:	2200      	movs	r2, #0
 8004026:	2300      	movs	r3, #0
 8004028:	4606      	mov	r6, r0
 800402a:	460f      	mov	r7, r1
 800402c:	f7fc fcbc 	bl	80009a8 <__aeabi_dcmpeq>
 8004030:	2800      	cmp	r0, #0
 8004032:	d09e      	beq.n	8003f72 <_dtoa_r+0x62a>
 8004034:	e7cf      	b.n	8003fd6 <_dtoa_r+0x68e>
 8004036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004038:	2a00      	cmp	r2, #0
 800403a:	f000 8088 	beq.w	800414e <_dtoa_r+0x806>
 800403e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004040:	2a01      	cmp	r2, #1
 8004042:	dc6d      	bgt.n	8004120 <_dtoa_r+0x7d8>
 8004044:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004046:	2a00      	cmp	r2, #0
 8004048:	d066      	beq.n	8004118 <_dtoa_r+0x7d0>
 800404a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800404e:	464d      	mov	r5, r9
 8004050:	9e08      	ldr	r6, [sp, #32]
 8004052:	9a07      	ldr	r2, [sp, #28]
 8004054:	2101      	movs	r1, #1
 8004056:	441a      	add	r2, r3
 8004058:	4620      	mov	r0, r4
 800405a:	4499      	add	r9, r3
 800405c:	9207      	str	r2, [sp, #28]
 800405e:	f000 fd08 	bl	8004a72 <__i2b>
 8004062:	4607      	mov	r7, r0
 8004064:	2d00      	cmp	r5, #0
 8004066:	dd0b      	ble.n	8004080 <_dtoa_r+0x738>
 8004068:	9b07      	ldr	r3, [sp, #28]
 800406a:	2b00      	cmp	r3, #0
 800406c:	dd08      	ble.n	8004080 <_dtoa_r+0x738>
 800406e:	42ab      	cmp	r3, r5
 8004070:	bfa8      	it	ge
 8004072:	462b      	movge	r3, r5
 8004074:	9a07      	ldr	r2, [sp, #28]
 8004076:	eba9 0903 	sub.w	r9, r9, r3
 800407a:	1aed      	subs	r5, r5, r3
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	9307      	str	r3, [sp, #28]
 8004080:	9b08      	ldr	r3, [sp, #32]
 8004082:	b1eb      	cbz	r3, 80040c0 <_dtoa_r+0x778>
 8004084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004086:	2b00      	cmp	r3, #0
 8004088:	d065      	beq.n	8004156 <_dtoa_r+0x80e>
 800408a:	b18e      	cbz	r6, 80040b0 <_dtoa_r+0x768>
 800408c:	4639      	mov	r1, r7
 800408e:	4632      	mov	r2, r6
 8004090:	4620      	mov	r0, r4
 8004092:	f000 fd8d 	bl	8004bb0 <__pow5mult>
 8004096:	465a      	mov	r2, fp
 8004098:	4601      	mov	r1, r0
 800409a:	4607      	mov	r7, r0
 800409c:	4620      	mov	r0, r4
 800409e:	f000 fcf1 	bl	8004a84 <__multiply>
 80040a2:	4659      	mov	r1, fp
 80040a4:	900a      	str	r0, [sp, #40]	; 0x28
 80040a6:	4620      	mov	r0, r4
 80040a8:	f000 fc43 	bl	8004932 <_Bfree>
 80040ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ae:	469b      	mov	fp, r3
 80040b0:	9b08      	ldr	r3, [sp, #32]
 80040b2:	1b9a      	subs	r2, r3, r6
 80040b4:	d004      	beq.n	80040c0 <_dtoa_r+0x778>
 80040b6:	4659      	mov	r1, fp
 80040b8:	4620      	mov	r0, r4
 80040ba:	f000 fd79 	bl	8004bb0 <__pow5mult>
 80040be:	4683      	mov	fp, r0
 80040c0:	2101      	movs	r1, #1
 80040c2:	4620      	mov	r0, r4
 80040c4:	f000 fcd5 	bl	8004a72 <__i2b>
 80040c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040ca:	4606      	mov	r6, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 81c6 	beq.w	800445e <_dtoa_r+0xb16>
 80040d2:	461a      	mov	r2, r3
 80040d4:	4601      	mov	r1, r0
 80040d6:	4620      	mov	r0, r4
 80040d8:	f000 fd6a 	bl	8004bb0 <__pow5mult>
 80040dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80040de:	4606      	mov	r6, r0
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	dc3e      	bgt.n	8004162 <_dtoa_r+0x81a>
 80040e4:	9b02      	ldr	r3, [sp, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d137      	bne.n	800415a <_dtoa_r+0x812>
 80040ea:	9b03      	ldr	r3, [sp, #12]
 80040ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d134      	bne.n	800415e <_dtoa_r+0x816>
 80040f4:	9b03      	ldr	r3, [sp, #12]
 80040f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040fa:	0d1b      	lsrs	r3, r3, #20
 80040fc:	051b      	lsls	r3, r3, #20
 80040fe:	b12b      	cbz	r3, 800410c <_dtoa_r+0x7c4>
 8004100:	9b07      	ldr	r3, [sp, #28]
 8004102:	f109 0901 	add.w	r9, r9, #1
 8004106:	3301      	adds	r3, #1
 8004108:	9307      	str	r3, [sp, #28]
 800410a:	2301      	movs	r3, #1
 800410c:	9308      	str	r3, [sp, #32]
 800410e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004110:	2b00      	cmp	r3, #0
 8004112:	d128      	bne.n	8004166 <_dtoa_r+0x81e>
 8004114:	2001      	movs	r0, #1
 8004116:	e02e      	b.n	8004176 <_dtoa_r+0x82e>
 8004118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800411a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800411e:	e796      	b.n	800404e <_dtoa_r+0x706>
 8004120:	9b08      	ldr	r3, [sp, #32]
 8004122:	f108 36ff 	add.w	r6, r8, #4294967295
 8004126:	42b3      	cmp	r3, r6
 8004128:	bfb7      	itett	lt
 800412a:	9b08      	ldrlt	r3, [sp, #32]
 800412c:	1b9e      	subge	r6, r3, r6
 800412e:	1af2      	sublt	r2, r6, r3
 8004130:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004132:	bfbf      	itttt	lt
 8004134:	9608      	strlt	r6, [sp, #32]
 8004136:	189b      	addlt	r3, r3, r2
 8004138:	930c      	strlt	r3, [sp, #48]	; 0x30
 800413a:	2600      	movlt	r6, #0
 800413c:	f1b8 0f00 	cmp.w	r8, #0
 8004140:	bfb9      	ittee	lt
 8004142:	eba9 0508 	sublt.w	r5, r9, r8
 8004146:	2300      	movlt	r3, #0
 8004148:	464d      	movge	r5, r9
 800414a:	4643      	movge	r3, r8
 800414c:	e781      	b.n	8004052 <_dtoa_r+0x70a>
 800414e:	9e08      	ldr	r6, [sp, #32]
 8004150:	464d      	mov	r5, r9
 8004152:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004154:	e786      	b.n	8004064 <_dtoa_r+0x71c>
 8004156:	9a08      	ldr	r2, [sp, #32]
 8004158:	e7ad      	b.n	80040b6 <_dtoa_r+0x76e>
 800415a:	2300      	movs	r3, #0
 800415c:	e7d6      	b.n	800410c <_dtoa_r+0x7c4>
 800415e:	9b02      	ldr	r3, [sp, #8]
 8004160:	e7d4      	b.n	800410c <_dtoa_r+0x7c4>
 8004162:	2300      	movs	r3, #0
 8004164:	9308      	str	r3, [sp, #32]
 8004166:	6933      	ldr	r3, [r6, #16]
 8004168:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800416c:	6918      	ldr	r0, [r3, #16]
 800416e:	f000 fc32 	bl	80049d6 <__hi0bits>
 8004172:	f1c0 0020 	rsb	r0, r0, #32
 8004176:	9b07      	ldr	r3, [sp, #28]
 8004178:	4418      	add	r0, r3
 800417a:	f010 001f 	ands.w	r0, r0, #31
 800417e:	d047      	beq.n	8004210 <_dtoa_r+0x8c8>
 8004180:	f1c0 0320 	rsb	r3, r0, #32
 8004184:	2b04      	cmp	r3, #4
 8004186:	dd3b      	ble.n	8004200 <_dtoa_r+0x8b8>
 8004188:	9b07      	ldr	r3, [sp, #28]
 800418a:	f1c0 001c 	rsb	r0, r0, #28
 800418e:	4481      	add	r9, r0
 8004190:	4405      	add	r5, r0
 8004192:	4403      	add	r3, r0
 8004194:	9307      	str	r3, [sp, #28]
 8004196:	f1b9 0f00 	cmp.w	r9, #0
 800419a:	dd05      	ble.n	80041a8 <_dtoa_r+0x860>
 800419c:	4659      	mov	r1, fp
 800419e:	464a      	mov	r2, r9
 80041a0:	4620      	mov	r0, r4
 80041a2:	f000 fd53 	bl	8004c4c <__lshift>
 80041a6:	4683      	mov	fp, r0
 80041a8:	9b07      	ldr	r3, [sp, #28]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	dd05      	ble.n	80041ba <_dtoa_r+0x872>
 80041ae:	4631      	mov	r1, r6
 80041b0:	461a      	mov	r2, r3
 80041b2:	4620      	mov	r0, r4
 80041b4:	f000 fd4a 	bl	8004c4c <__lshift>
 80041b8:	4606      	mov	r6, r0
 80041ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041bc:	b353      	cbz	r3, 8004214 <_dtoa_r+0x8cc>
 80041be:	4631      	mov	r1, r6
 80041c0:	4658      	mov	r0, fp
 80041c2:	f000 fd97 	bl	8004cf4 <__mcmp>
 80041c6:	2800      	cmp	r0, #0
 80041c8:	da24      	bge.n	8004214 <_dtoa_r+0x8cc>
 80041ca:	2300      	movs	r3, #0
 80041cc:	4659      	mov	r1, fp
 80041ce:	220a      	movs	r2, #10
 80041d0:	4620      	mov	r0, r4
 80041d2:	f000 fbc5 	bl	8004960 <__multadd>
 80041d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041dc:	4683      	mov	fp, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8144 	beq.w	800446c <_dtoa_r+0xb24>
 80041e4:	2300      	movs	r3, #0
 80041e6:	4639      	mov	r1, r7
 80041e8:	220a      	movs	r2, #10
 80041ea:	4620      	mov	r0, r4
 80041ec:	f000 fbb8 	bl	8004960 <__multadd>
 80041f0:	9b04      	ldr	r3, [sp, #16]
 80041f2:	4607      	mov	r7, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	dc4d      	bgt.n	8004294 <_dtoa_r+0x94c>
 80041f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	dd4a      	ble.n	8004294 <_dtoa_r+0x94c>
 80041fe:	e011      	b.n	8004224 <_dtoa_r+0x8dc>
 8004200:	d0c9      	beq.n	8004196 <_dtoa_r+0x84e>
 8004202:	9a07      	ldr	r2, [sp, #28]
 8004204:	331c      	adds	r3, #28
 8004206:	441a      	add	r2, r3
 8004208:	4499      	add	r9, r3
 800420a:	441d      	add	r5, r3
 800420c:	4613      	mov	r3, r2
 800420e:	e7c1      	b.n	8004194 <_dtoa_r+0x84c>
 8004210:	4603      	mov	r3, r0
 8004212:	e7f6      	b.n	8004202 <_dtoa_r+0x8ba>
 8004214:	f1b8 0f00 	cmp.w	r8, #0
 8004218:	dc36      	bgt.n	8004288 <_dtoa_r+0x940>
 800421a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800421c:	2b02      	cmp	r3, #2
 800421e:	dd33      	ble.n	8004288 <_dtoa_r+0x940>
 8004220:	f8cd 8010 	str.w	r8, [sp, #16]
 8004224:	9b04      	ldr	r3, [sp, #16]
 8004226:	b963      	cbnz	r3, 8004242 <_dtoa_r+0x8fa>
 8004228:	4631      	mov	r1, r6
 800422a:	2205      	movs	r2, #5
 800422c:	4620      	mov	r0, r4
 800422e:	f000 fb97 	bl	8004960 <__multadd>
 8004232:	4601      	mov	r1, r0
 8004234:	4606      	mov	r6, r0
 8004236:	4658      	mov	r0, fp
 8004238:	f000 fd5c 	bl	8004cf4 <__mcmp>
 800423c:	2800      	cmp	r0, #0
 800423e:	f73f add3 	bgt.w	8003de8 <_dtoa_r+0x4a0>
 8004242:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004244:	9d06      	ldr	r5, [sp, #24]
 8004246:	ea6f 0a03 	mvn.w	sl, r3
 800424a:	f04f 0900 	mov.w	r9, #0
 800424e:	4631      	mov	r1, r6
 8004250:	4620      	mov	r0, r4
 8004252:	f000 fb6e 	bl	8004932 <_Bfree>
 8004256:	2f00      	cmp	r7, #0
 8004258:	f43f aebd 	beq.w	8003fd6 <_dtoa_r+0x68e>
 800425c:	f1b9 0f00 	cmp.w	r9, #0
 8004260:	d005      	beq.n	800426e <_dtoa_r+0x926>
 8004262:	45b9      	cmp	r9, r7
 8004264:	d003      	beq.n	800426e <_dtoa_r+0x926>
 8004266:	4649      	mov	r1, r9
 8004268:	4620      	mov	r0, r4
 800426a:	f000 fb62 	bl	8004932 <_Bfree>
 800426e:	4639      	mov	r1, r7
 8004270:	4620      	mov	r0, r4
 8004272:	f000 fb5e 	bl	8004932 <_Bfree>
 8004276:	e6ae      	b.n	8003fd6 <_dtoa_r+0x68e>
 8004278:	2600      	movs	r6, #0
 800427a:	4637      	mov	r7, r6
 800427c:	e7e1      	b.n	8004242 <_dtoa_r+0x8fa>
 800427e:	46ba      	mov	sl, r7
 8004280:	4637      	mov	r7, r6
 8004282:	e5b1      	b.n	8003de8 <_dtoa_r+0x4a0>
 8004284:	40240000 	.word	0x40240000
 8004288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800428a:	f8cd 8010 	str.w	r8, [sp, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80f3 	beq.w	800447a <_dtoa_r+0xb32>
 8004294:	2d00      	cmp	r5, #0
 8004296:	dd05      	ble.n	80042a4 <_dtoa_r+0x95c>
 8004298:	4639      	mov	r1, r7
 800429a:	462a      	mov	r2, r5
 800429c:	4620      	mov	r0, r4
 800429e:	f000 fcd5 	bl	8004c4c <__lshift>
 80042a2:	4607      	mov	r7, r0
 80042a4:	9b08      	ldr	r3, [sp, #32]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d04c      	beq.n	8004344 <_dtoa_r+0x9fc>
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 fb0c 	bl	80048ca <_Balloc>
 80042b2:	4605      	mov	r5, r0
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	f107 010c 	add.w	r1, r7, #12
 80042ba:	3202      	adds	r2, #2
 80042bc:	0092      	lsls	r2, r2, #2
 80042be:	300c      	adds	r0, #12
 80042c0:	f000 faf8 	bl	80048b4 <memcpy>
 80042c4:	2201      	movs	r2, #1
 80042c6:	4629      	mov	r1, r5
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 fcbf 	bl	8004c4c <__lshift>
 80042ce:	46b9      	mov	r9, r7
 80042d0:	4607      	mov	r7, r0
 80042d2:	9b06      	ldr	r3, [sp, #24]
 80042d4:	9307      	str	r3, [sp, #28]
 80042d6:	9b02      	ldr	r3, [sp, #8]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	9308      	str	r3, [sp, #32]
 80042de:	4631      	mov	r1, r6
 80042e0:	4658      	mov	r0, fp
 80042e2:	f7ff faa1 	bl	8003828 <quorem>
 80042e6:	4649      	mov	r1, r9
 80042e8:	4605      	mov	r5, r0
 80042ea:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80042ee:	4658      	mov	r0, fp
 80042f0:	f000 fd00 	bl	8004cf4 <__mcmp>
 80042f4:	463a      	mov	r2, r7
 80042f6:	9002      	str	r0, [sp, #8]
 80042f8:	4631      	mov	r1, r6
 80042fa:	4620      	mov	r0, r4
 80042fc:	f000 fd14 	bl	8004d28 <__mdiff>
 8004300:	68c3      	ldr	r3, [r0, #12]
 8004302:	4602      	mov	r2, r0
 8004304:	bb03      	cbnz	r3, 8004348 <_dtoa_r+0xa00>
 8004306:	4601      	mov	r1, r0
 8004308:	9009      	str	r0, [sp, #36]	; 0x24
 800430a:	4658      	mov	r0, fp
 800430c:	f000 fcf2 	bl	8004cf4 <__mcmp>
 8004310:	4603      	mov	r3, r0
 8004312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004314:	4611      	mov	r1, r2
 8004316:	4620      	mov	r0, r4
 8004318:	9309      	str	r3, [sp, #36]	; 0x24
 800431a:	f000 fb0a 	bl	8004932 <_Bfree>
 800431e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004320:	b9a3      	cbnz	r3, 800434c <_dtoa_r+0xa04>
 8004322:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004324:	b992      	cbnz	r2, 800434c <_dtoa_r+0xa04>
 8004326:	9a08      	ldr	r2, [sp, #32]
 8004328:	b982      	cbnz	r2, 800434c <_dtoa_r+0xa04>
 800432a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800432e:	d029      	beq.n	8004384 <_dtoa_r+0xa3c>
 8004330:	9b02      	ldr	r3, [sp, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	dd01      	ble.n	800433a <_dtoa_r+0x9f2>
 8004336:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800433a:	9b07      	ldr	r3, [sp, #28]
 800433c:	1c5d      	adds	r5, r3, #1
 800433e:	f883 8000 	strb.w	r8, [r3]
 8004342:	e784      	b.n	800424e <_dtoa_r+0x906>
 8004344:	4638      	mov	r0, r7
 8004346:	e7c2      	b.n	80042ce <_dtoa_r+0x986>
 8004348:	2301      	movs	r3, #1
 800434a:	e7e3      	b.n	8004314 <_dtoa_r+0x9cc>
 800434c:	9a02      	ldr	r2, [sp, #8]
 800434e:	2a00      	cmp	r2, #0
 8004350:	db04      	blt.n	800435c <_dtoa_r+0xa14>
 8004352:	d123      	bne.n	800439c <_dtoa_r+0xa54>
 8004354:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004356:	bb0a      	cbnz	r2, 800439c <_dtoa_r+0xa54>
 8004358:	9a08      	ldr	r2, [sp, #32]
 800435a:	b9fa      	cbnz	r2, 800439c <_dtoa_r+0xa54>
 800435c:	2b00      	cmp	r3, #0
 800435e:	ddec      	ble.n	800433a <_dtoa_r+0x9f2>
 8004360:	4659      	mov	r1, fp
 8004362:	2201      	movs	r2, #1
 8004364:	4620      	mov	r0, r4
 8004366:	f000 fc71 	bl	8004c4c <__lshift>
 800436a:	4631      	mov	r1, r6
 800436c:	4683      	mov	fp, r0
 800436e:	f000 fcc1 	bl	8004cf4 <__mcmp>
 8004372:	2800      	cmp	r0, #0
 8004374:	dc03      	bgt.n	800437e <_dtoa_r+0xa36>
 8004376:	d1e0      	bne.n	800433a <_dtoa_r+0x9f2>
 8004378:	f018 0f01 	tst.w	r8, #1
 800437c:	d0dd      	beq.n	800433a <_dtoa_r+0x9f2>
 800437e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004382:	d1d8      	bne.n	8004336 <_dtoa_r+0x9ee>
 8004384:	9b07      	ldr	r3, [sp, #28]
 8004386:	9a07      	ldr	r2, [sp, #28]
 8004388:	1c5d      	adds	r5, r3, #1
 800438a:	2339      	movs	r3, #57	; 0x39
 800438c:	7013      	strb	r3, [r2, #0]
 800438e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004392:	1e6a      	subs	r2, r5, #1
 8004394:	2b39      	cmp	r3, #57	; 0x39
 8004396:	d04d      	beq.n	8004434 <_dtoa_r+0xaec>
 8004398:	3301      	adds	r3, #1
 800439a:	e052      	b.n	8004442 <_dtoa_r+0xafa>
 800439c:	9a07      	ldr	r2, [sp, #28]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f102 0501 	add.w	r5, r2, #1
 80043a4:	dd06      	ble.n	80043b4 <_dtoa_r+0xa6c>
 80043a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80043aa:	d0eb      	beq.n	8004384 <_dtoa_r+0xa3c>
 80043ac:	f108 0801 	add.w	r8, r8, #1
 80043b0:	9b07      	ldr	r3, [sp, #28]
 80043b2:	e7c4      	b.n	800433e <_dtoa_r+0x9f6>
 80043b4:	9b06      	ldr	r3, [sp, #24]
 80043b6:	9a04      	ldr	r2, [sp, #16]
 80043b8:	1aeb      	subs	r3, r5, r3
 80043ba:	4293      	cmp	r3, r2
 80043bc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80043c0:	d021      	beq.n	8004406 <_dtoa_r+0xabe>
 80043c2:	4659      	mov	r1, fp
 80043c4:	2300      	movs	r3, #0
 80043c6:	220a      	movs	r2, #10
 80043c8:	4620      	mov	r0, r4
 80043ca:	f000 fac9 	bl	8004960 <__multadd>
 80043ce:	45b9      	cmp	r9, r7
 80043d0:	4683      	mov	fp, r0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	f04f 020a 	mov.w	r2, #10
 80043da:	4649      	mov	r1, r9
 80043dc:	4620      	mov	r0, r4
 80043de:	d105      	bne.n	80043ec <_dtoa_r+0xaa4>
 80043e0:	f000 fabe 	bl	8004960 <__multadd>
 80043e4:	4681      	mov	r9, r0
 80043e6:	4607      	mov	r7, r0
 80043e8:	9507      	str	r5, [sp, #28]
 80043ea:	e778      	b.n	80042de <_dtoa_r+0x996>
 80043ec:	f000 fab8 	bl	8004960 <__multadd>
 80043f0:	4639      	mov	r1, r7
 80043f2:	4681      	mov	r9, r0
 80043f4:	2300      	movs	r3, #0
 80043f6:	220a      	movs	r2, #10
 80043f8:	4620      	mov	r0, r4
 80043fa:	f000 fab1 	bl	8004960 <__multadd>
 80043fe:	4607      	mov	r7, r0
 8004400:	e7f2      	b.n	80043e8 <_dtoa_r+0xaa0>
 8004402:	f04f 0900 	mov.w	r9, #0
 8004406:	4659      	mov	r1, fp
 8004408:	2201      	movs	r2, #1
 800440a:	4620      	mov	r0, r4
 800440c:	f000 fc1e 	bl	8004c4c <__lshift>
 8004410:	4631      	mov	r1, r6
 8004412:	4683      	mov	fp, r0
 8004414:	f000 fc6e 	bl	8004cf4 <__mcmp>
 8004418:	2800      	cmp	r0, #0
 800441a:	dcb8      	bgt.n	800438e <_dtoa_r+0xa46>
 800441c:	d102      	bne.n	8004424 <_dtoa_r+0xadc>
 800441e:	f018 0f01 	tst.w	r8, #1
 8004422:	d1b4      	bne.n	800438e <_dtoa_r+0xa46>
 8004424:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004428:	1e6a      	subs	r2, r5, #1
 800442a:	2b30      	cmp	r3, #48	; 0x30
 800442c:	f47f af0f 	bne.w	800424e <_dtoa_r+0x906>
 8004430:	4615      	mov	r5, r2
 8004432:	e7f7      	b.n	8004424 <_dtoa_r+0xadc>
 8004434:	9b06      	ldr	r3, [sp, #24]
 8004436:	4293      	cmp	r3, r2
 8004438:	d105      	bne.n	8004446 <_dtoa_r+0xafe>
 800443a:	2331      	movs	r3, #49	; 0x31
 800443c:	9a06      	ldr	r2, [sp, #24]
 800443e:	f10a 0a01 	add.w	sl, sl, #1
 8004442:	7013      	strb	r3, [r2, #0]
 8004444:	e703      	b.n	800424e <_dtoa_r+0x906>
 8004446:	4615      	mov	r5, r2
 8004448:	e7a1      	b.n	800438e <_dtoa_r+0xa46>
 800444a:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <_dtoa_r+0xb60>)
 800444c:	f7ff bae1 	b.w	8003a12 <_dtoa_r+0xca>
 8004450:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004452:	2b00      	cmp	r3, #0
 8004454:	f47f aabb 	bne.w	80039ce <_dtoa_r+0x86>
 8004458:	4b14      	ldr	r3, [pc, #80]	; (80044ac <_dtoa_r+0xb64>)
 800445a:	f7ff bada 	b.w	8003a12 <_dtoa_r+0xca>
 800445e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004460:	2b01      	cmp	r3, #1
 8004462:	f77f ae3f 	ble.w	80040e4 <_dtoa_r+0x79c>
 8004466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004468:	9308      	str	r3, [sp, #32]
 800446a:	e653      	b.n	8004114 <_dtoa_r+0x7cc>
 800446c:	9b04      	ldr	r3, [sp, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	dc03      	bgt.n	800447a <_dtoa_r+0xb32>
 8004472:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004474:	2b02      	cmp	r3, #2
 8004476:	f73f aed5 	bgt.w	8004224 <_dtoa_r+0x8dc>
 800447a:	9d06      	ldr	r5, [sp, #24]
 800447c:	4631      	mov	r1, r6
 800447e:	4658      	mov	r0, fp
 8004480:	f7ff f9d2 	bl	8003828 <quorem>
 8004484:	9b06      	ldr	r3, [sp, #24]
 8004486:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800448a:	f805 8b01 	strb.w	r8, [r5], #1
 800448e:	9a04      	ldr	r2, [sp, #16]
 8004490:	1aeb      	subs	r3, r5, r3
 8004492:	429a      	cmp	r2, r3
 8004494:	ddb5      	ble.n	8004402 <_dtoa_r+0xaba>
 8004496:	4659      	mov	r1, fp
 8004498:	2300      	movs	r3, #0
 800449a:	220a      	movs	r2, #10
 800449c:	4620      	mov	r0, r4
 800449e:	f000 fa5f 	bl	8004960 <__multadd>
 80044a2:	4683      	mov	fp, r0
 80044a4:	e7ea      	b.n	800447c <_dtoa_r+0xb34>
 80044a6:	bf00      	nop
 80044a8:	08005538 	.word	0x08005538
 80044ac:	0800555c 	.word	0x0800555c

080044b0 <__sflush_r>:
 80044b0:	898a      	ldrh	r2, [r1, #12]
 80044b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b6:	4605      	mov	r5, r0
 80044b8:	0710      	lsls	r0, r2, #28
 80044ba:	460c      	mov	r4, r1
 80044bc:	d458      	bmi.n	8004570 <__sflush_r+0xc0>
 80044be:	684b      	ldr	r3, [r1, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	dc05      	bgt.n	80044d0 <__sflush_r+0x20>
 80044c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	dc02      	bgt.n	80044d0 <__sflush_r+0x20>
 80044ca:	2000      	movs	r0, #0
 80044cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044d2:	2e00      	cmp	r6, #0
 80044d4:	d0f9      	beq.n	80044ca <__sflush_r+0x1a>
 80044d6:	2300      	movs	r3, #0
 80044d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044dc:	682f      	ldr	r7, [r5, #0]
 80044de:	6a21      	ldr	r1, [r4, #32]
 80044e0:	602b      	str	r3, [r5, #0]
 80044e2:	d032      	beq.n	800454a <__sflush_r+0x9a>
 80044e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	075a      	lsls	r2, r3, #29
 80044ea:	d505      	bpl.n	80044f8 <__sflush_r+0x48>
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	1ac0      	subs	r0, r0, r3
 80044f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044f2:	b10b      	cbz	r3, 80044f8 <__sflush_r+0x48>
 80044f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044f6:	1ac0      	subs	r0, r0, r3
 80044f8:	2300      	movs	r3, #0
 80044fa:	4602      	mov	r2, r0
 80044fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044fe:	6a21      	ldr	r1, [r4, #32]
 8004500:	4628      	mov	r0, r5
 8004502:	47b0      	blx	r6
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	d106      	bne.n	8004518 <__sflush_r+0x68>
 800450a:	6829      	ldr	r1, [r5, #0]
 800450c:	291d      	cmp	r1, #29
 800450e:	d848      	bhi.n	80045a2 <__sflush_r+0xf2>
 8004510:	4a29      	ldr	r2, [pc, #164]	; (80045b8 <__sflush_r+0x108>)
 8004512:	40ca      	lsrs	r2, r1
 8004514:	07d6      	lsls	r6, r2, #31
 8004516:	d544      	bpl.n	80045a2 <__sflush_r+0xf2>
 8004518:	2200      	movs	r2, #0
 800451a:	6062      	str	r2, [r4, #4]
 800451c:	6922      	ldr	r2, [r4, #16]
 800451e:	04d9      	lsls	r1, r3, #19
 8004520:	6022      	str	r2, [r4, #0]
 8004522:	d504      	bpl.n	800452e <__sflush_r+0x7e>
 8004524:	1c42      	adds	r2, r0, #1
 8004526:	d101      	bne.n	800452c <__sflush_r+0x7c>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	b903      	cbnz	r3, 800452e <__sflush_r+0x7e>
 800452c:	6560      	str	r0, [r4, #84]	; 0x54
 800452e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004530:	602f      	str	r7, [r5, #0]
 8004532:	2900      	cmp	r1, #0
 8004534:	d0c9      	beq.n	80044ca <__sflush_r+0x1a>
 8004536:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800453a:	4299      	cmp	r1, r3
 800453c:	d002      	beq.n	8004544 <__sflush_r+0x94>
 800453e:	4628      	mov	r0, r5
 8004540:	f000 fcae 	bl	8004ea0 <_free_r>
 8004544:	2000      	movs	r0, #0
 8004546:	6360      	str	r0, [r4, #52]	; 0x34
 8004548:	e7c0      	b.n	80044cc <__sflush_r+0x1c>
 800454a:	2301      	movs	r3, #1
 800454c:	4628      	mov	r0, r5
 800454e:	47b0      	blx	r6
 8004550:	1c41      	adds	r1, r0, #1
 8004552:	d1c8      	bne.n	80044e6 <__sflush_r+0x36>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0c5      	beq.n	80044e6 <__sflush_r+0x36>
 800455a:	2b1d      	cmp	r3, #29
 800455c:	d001      	beq.n	8004562 <__sflush_r+0xb2>
 800455e:	2b16      	cmp	r3, #22
 8004560:	d101      	bne.n	8004566 <__sflush_r+0xb6>
 8004562:	602f      	str	r7, [r5, #0]
 8004564:	e7b1      	b.n	80044ca <__sflush_r+0x1a>
 8004566:	89a3      	ldrh	r3, [r4, #12]
 8004568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456c:	81a3      	strh	r3, [r4, #12]
 800456e:	e7ad      	b.n	80044cc <__sflush_r+0x1c>
 8004570:	690f      	ldr	r7, [r1, #16]
 8004572:	2f00      	cmp	r7, #0
 8004574:	d0a9      	beq.n	80044ca <__sflush_r+0x1a>
 8004576:	0793      	lsls	r3, r2, #30
 8004578:	bf18      	it	ne
 800457a:	2300      	movne	r3, #0
 800457c:	680e      	ldr	r6, [r1, #0]
 800457e:	bf08      	it	eq
 8004580:	694b      	ldreq	r3, [r1, #20]
 8004582:	eba6 0807 	sub.w	r8, r6, r7
 8004586:	600f      	str	r7, [r1, #0]
 8004588:	608b      	str	r3, [r1, #8]
 800458a:	f1b8 0f00 	cmp.w	r8, #0
 800458e:	dd9c      	ble.n	80044ca <__sflush_r+0x1a>
 8004590:	4643      	mov	r3, r8
 8004592:	463a      	mov	r2, r7
 8004594:	6a21      	ldr	r1, [r4, #32]
 8004596:	4628      	mov	r0, r5
 8004598:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800459a:	47b0      	blx	r6
 800459c:	2800      	cmp	r0, #0
 800459e:	dc06      	bgt.n	80045ae <__sflush_r+0xfe>
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a6:	81a3      	strh	r3, [r4, #12]
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	e78e      	b.n	80044cc <__sflush_r+0x1c>
 80045ae:	4407      	add	r7, r0
 80045b0:	eba8 0800 	sub.w	r8, r8, r0
 80045b4:	e7e9      	b.n	800458a <__sflush_r+0xda>
 80045b6:	bf00      	nop
 80045b8:	20400001 	.word	0x20400001

080045bc <_fflush_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	690b      	ldr	r3, [r1, #16]
 80045c0:	4605      	mov	r5, r0
 80045c2:	460c      	mov	r4, r1
 80045c4:	b1db      	cbz	r3, 80045fe <_fflush_r+0x42>
 80045c6:	b118      	cbz	r0, 80045d0 <_fflush_r+0x14>
 80045c8:	6983      	ldr	r3, [r0, #24]
 80045ca:	b90b      	cbnz	r3, 80045d0 <_fflush_r+0x14>
 80045cc:	f000 f860 	bl	8004690 <__sinit>
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <_fflush_r+0x48>)
 80045d2:	429c      	cmp	r4, r3
 80045d4:	d109      	bne.n	80045ea <_fflush_r+0x2e>
 80045d6:	686c      	ldr	r4, [r5, #4]
 80045d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045dc:	b17b      	cbz	r3, 80045fe <_fflush_r+0x42>
 80045de:	4621      	mov	r1, r4
 80045e0:	4628      	mov	r0, r5
 80045e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045e6:	f7ff bf63 	b.w	80044b0 <__sflush_r>
 80045ea:	4b07      	ldr	r3, [pc, #28]	; (8004608 <_fflush_r+0x4c>)
 80045ec:	429c      	cmp	r4, r3
 80045ee:	d101      	bne.n	80045f4 <_fflush_r+0x38>
 80045f0:	68ac      	ldr	r4, [r5, #8]
 80045f2:	e7f1      	b.n	80045d8 <_fflush_r+0x1c>
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <_fflush_r+0x50>)
 80045f6:	429c      	cmp	r4, r3
 80045f8:	bf08      	it	eq
 80045fa:	68ec      	ldreq	r4, [r5, #12]
 80045fc:	e7ec      	b.n	80045d8 <_fflush_r+0x1c>
 80045fe:	2000      	movs	r0, #0
 8004600:	bd38      	pop	{r3, r4, r5, pc}
 8004602:	bf00      	nop
 8004604:	0800558c 	.word	0x0800558c
 8004608:	080055ac 	.word	0x080055ac
 800460c:	0800556c 	.word	0x0800556c

08004610 <std>:
 8004610:	2300      	movs	r3, #0
 8004612:	b510      	push	{r4, lr}
 8004614:	4604      	mov	r4, r0
 8004616:	e9c0 3300 	strd	r3, r3, [r0]
 800461a:	6083      	str	r3, [r0, #8]
 800461c:	8181      	strh	r1, [r0, #12]
 800461e:	6643      	str	r3, [r0, #100]	; 0x64
 8004620:	81c2      	strh	r2, [r0, #14]
 8004622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004626:	6183      	str	r3, [r0, #24]
 8004628:	4619      	mov	r1, r3
 800462a:	2208      	movs	r2, #8
 800462c:	305c      	adds	r0, #92	; 0x5c
 800462e:	f7fe fb67 	bl	8002d00 <memset>
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <std+0x38>)
 8004634:	6224      	str	r4, [r4, #32]
 8004636:	6263      	str	r3, [r4, #36]	; 0x24
 8004638:	4b04      	ldr	r3, [pc, #16]	; (800464c <std+0x3c>)
 800463a:	62a3      	str	r3, [r4, #40]	; 0x28
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <std+0x40>)
 800463e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004640:	4b04      	ldr	r3, [pc, #16]	; (8004654 <std+0x44>)
 8004642:	6323      	str	r3, [r4, #48]	; 0x30
 8004644:	bd10      	pop	{r4, pc}
 8004646:	bf00      	nop
 8004648:	08005289 	.word	0x08005289
 800464c:	080052ab 	.word	0x080052ab
 8004650:	080052e3 	.word	0x080052e3
 8004654:	08005307 	.word	0x08005307

08004658 <_cleanup_r>:
 8004658:	4901      	ldr	r1, [pc, #4]	; (8004660 <_cleanup_r+0x8>)
 800465a:	f000 b885 	b.w	8004768 <_fwalk_reent>
 800465e:	bf00      	nop
 8004660:	080045bd 	.word	0x080045bd

08004664 <__sfmoreglue>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	2568      	movs	r5, #104	; 0x68
 8004668:	1e4a      	subs	r2, r1, #1
 800466a:	4355      	muls	r5, r2
 800466c:	460e      	mov	r6, r1
 800466e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004672:	f000 fc61 	bl	8004f38 <_malloc_r>
 8004676:	4604      	mov	r4, r0
 8004678:	b140      	cbz	r0, 800468c <__sfmoreglue+0x28>
 800467a:	2100      	movs	r1, #0
 800467c:	e9c0 1600 	strd	r1, r6, [r0]
 8004680:	300c      	adds	r0, #12
 8004682:	60a0      	str	r0, [r4, #8]
 8004684:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004688:	f7fe fb3a 	bl	8002d00 <memset>
 800468c:	4620      	mov	r0, r4
 800468e:	bd70      	pop	{r4, r5, r6, pc}

08004690 <__sinit>:
 8004690:	6983      	ldr	r3, [r0, #24]
 8004692:	b510      	push	{r4, lr}
 8004694:	4604      	mov	r4, r0
 8004696:	bb33      	cbnz	r3, 80046e6 <__sinit+0x56>
 8004698:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800469c:	6503      	str	r3, [r0, #80]	; 0x50
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <__sinit+0x58>)
 80046a0:	4a12      	ldr	r2, [pc, #72]	; (80046ec <__sinit+0x5c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6282      	str	r2, [r0, #40]	; 0x28
 80046a6:	4298      	cmp	r0, r3
 80046a8:	bf04      	itt	eq
 80046aa:	2301      	moveq	r3, #1
 80046ac:	6183      	streq	r3, [r0, #24]
 80046ae:	f000 f81f 	bl	80046f0 <__sfp>
 80046b2:	6060      	str	r0, [r4, #4]
 80046b4:	4620      	mov	r0, r4
 80046b6:	f000 f81b 	bl	80046f0 <__sfp>
 80046ba:	60a0      	str	r0, [r4, #8]
 80046bc:	4620      	mov	r0, r4
 80046be:	f000 f817 	bl	80046f0 <__sfp>
 80046c2:	2200      	movs	r2, #0
 80046c4:	60e0      	str	r0, [r4, #12]
 80046c6:	2104      	movs	r1, #4
 80046c8:	6860      	ldr	r0, [r4, #4]
 80046ca:	f7ff ffa1 	bl	8004610 <std>
 80046ce:	2201      	movs	r2, #1
 80046d0:	2109      	movs	r1, #9
 80046d2:	68a0      	ldr	r0, [r4, #8]
 80046d4:	f7ff ff9c 	bl	8004610 <std>
 80046d8:	2202      	movs	r2, #2
 80046da:	2112      	movs	r1, #18
 80046dc:	68e0      	ldr	r0, [r4, #12]
 80046de:	f7ff ff97 	bl	8004610 <std>
 80046e2:	2301      	movs	r3, #1
 80046e4:	61a3      	str	r3, [r4, #24]
 80046e6:	bd10      	pop	{r4, pc}
 80046e8:	08005524 	.word	0x08005524
 80046ec:	08004659 	.word	0x08004659

080046f0 <__sfp>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <__sfp+0x70>)
 80046f4:	4607      	mov	r7, r0
 80046f6:	681e      	ldr	r6, [r3, #0]
 80046f8:	69b3      	ldr	r3, [r6, #24]
 80046fa:	b913      	cbnz	r3, 8004702 <__sfp+0x12>
 80046fc:	4630      	mov	r0, r6
 80046fe:	f7ff ffc7 	bl	8004690 <__sinit>
 8004702:	3648      	adds	r6, #72	; 0x48
 8004704:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004708:	3b01      	subs	r3, #1
 800470a:	d503      	bpl.n	8004714 <__sfp+0x24>
 800470c:	6833      	ldr	r3, [r6, #0]
 800470e:	b133      	cbz	r3, 800471e <__sfp+0x2e>
 8004710:	6836      	ldr	r6, [r6, #0]
 8004712:	e7f7      	b.n	8004704 <__sfp+0x14>
 8004714:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004718:	b16d      	cbz	r5, 8004736 <__sfp+0x46>
 800471a:	3468      	adds	r4, #104	; 0x68
 800471c:	e7f4      	b.n	8004708 <__sfp+0x18>
 800471e:	2104      	movs	r1, #4
 8004720:	4638      	mov	r0, r7
 8004722:	f7ff ff9f 	bl	8004664 <__sfmoreglue>
 8004726:	6030      	str	r0, [r6, #0]
 8004728:	2800      	cmp	r0, #0
 800472a:	d1f1      	bne.n	8004710 <__sfp+0x20>
 800472c:	230c      	movs	r3, #12
 800472e:	4604      	mov	r4, r0
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	4620      	mov	r0, r4
 8004734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <__sfp+0x74>)
 8004738:	6665      	str	r5, [r4, #100]	; 0x64
 800473a:	e9c4 5500 	strd	r5, r5, [r4]
 800473e:	60a5      	str	r5, [r4, #8]
 8004740:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004744:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004748:	2208      	movs	r2, #8
 800474a:	4629      	mov	r1, r5
 800474c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004750:	f7fe fad6 	bl	8002d00 <memset>
 8004754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800475c:	e7e9      	b.n	8004732 <__sfp+0x42>
 800475e:	bf00      	nop
 8004760:	08005524 	.word	0x08005524
 8004764:	ffff0001 	.word	0xffff0001

08004768 <_fwalk_reent>:
 8004768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800476c:	4680      	mov	r8, r0
 800476e:	4689      	mov	r9, r1
 8004770:	2600      	movs	r6, #0
 8004772:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004776:	b914      	cbnz	r4, 800477e <_fwalk_reent+0x16>
 8004778:	4630      	mov	r0, r6
 800477a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800477e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004782:	3f01      	subs	r7, #1
 8004784:	d501      	bpl.n	800478a <_fwalk_reent+0x22>
 8004786:	6824      	ldr	r4, [r4, #0]
 8004788:	e7f5      	b.n	8004776 <_fwalk_reent+0xe>
 800478a:	89ab      	ldrh	r3, [r5, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d907      	bls.n	80047a0 <_fwalk_reent+0x38>
 8004790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004794:	3301      	adds	r3, #1
 8004796:	d003      	beq.n	80047a0 <_fwalk_reent+0x38>
 8004798:	4629      	mov	r1, r5
 800479a:	4640      	mov	r0, r8
 800479c:	47c8      	blx	r9
 800479e:	4306      	orrs	r6, r0
 80047a0:	3568      	adds	r5, #104	; 0x68
 80047a2:	e7ee      	b.n	8004782 <_fwalk_reent+0x1a>

080047a4 <_localeconv_r>:
 80047a4:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <_localeconv_r+0x14>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6a18      	ldr	r0, [r3, #32]
 80047aa:	4b04      	ldr	r3, [pc, #16]	; (80047bc <_localeconv_r+0x18>)
 80047ac:	2800      	cmp	r0, #0
 80047ae:	bf08      	it	eq
 80047b0:	4618      	moveq	r0, r3
 80047b2:	30f0      	adds	r0, #240	; 0xf0
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20000010 	.word	0x20000010
 80047bc:	20000074 	.word	0x20000074

080047c0 <__swhatbuf_r>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	460e      	mov	r6, r1
 80047c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c8:	b096      	sub	sp, #88	; 0x58
 80047ca:	2900      	cmp	r1, #0
 80047cc:	4614      	mov	r4, r2
 80047ce:	461d      	mov	r5, r3
 80047d0:	da07      	bge.n	80047e2 <__swhatbuf_r+0x22>
 80047d2:	2300      	movs	r3, #0
 80047d4:	602b      	str	r3, [r5, #0]
 80047d6:	89b3      	ldrh	r3, [r6, #12]
 80047d8:	061a      	lsls	r2, r3, #24
 80047da:	d410      	bmi.n	80047fe <__swhatbuf_r+0x3e>
 80047dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e0:	e00e      	b.n	8004800 <__swhatbuf_r+0x40>
 80047e2:	466a      	mov	r2, sp
 80047e4:	f000 fdb6 	bl	8005354 <_fstat_r>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	dbf2      	blt.n	80047d2 <__swhatbuf_r+0x12>
 80047ec:	9a01      	ldr	r2, [sp, #4]
 80047ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047f6:	425a      	negs	r2, r3
 80047f8:	415a      	adcs	r2, r3
 80047fa:	602a      	str	r2, [r5, #0]
 80047fc:	e7ee      	b.n	80047dc <__swhatbuf_r+0x1c>
 80047fe:	2340      	movs	r3, #64	; 0x40
 8004800:	2000      	movs	r0, #0
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	b016      	add	sp, #88	; 0x58
 8004806:	bd70      	pop	{r4, r5, r6, pc}

08004808 <__smakebuf_r>:
 8004808:	898b      	ldrh	r3, [r1, #12]
 800480a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800480c:	079d      	lsls	r5, r3, #30
 800480e:	4606      	mov	r6, r0
 8004810:	460c      	mov	r4, r1
 8004812:	d507      	bpl.n	8004824 <__smakebuf_r+0x1c>
 8004814:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	6123      	str	r3, [r4, #16]
 800481c:	2301      	movs	r3, #1
 800481e:	6163      	str	r3, [r4, #20]
 8004820:	b002      	add	sp, #8
 8004822:	bd70      	pop	{r4, r5, r6, pc}
 8004824:	ab01      	add	r3, sp, #4
 8004826:	466a      	mov	r2, sp
 8004828:	f7ff ffca 	bl	80047c0 <__swhatbuf_r>
 800482c:	9900      	ldr	r1, [sp, #0]
 800482e:	4605      	mov	r5, r0
 8004830:	4630      	mov	r0, r6
 8004832:	f000 fb81 	bl	8004f38 <_malloc_r>
 8004836:	b948      	cbnz	r0, 800484c <__smakebuf_r+0x44>
 8004838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800483c:	059a      	lsls	r2, r3, #22
 800483e:	d4ef      	bmi.n	8004820 <__smakebuf_r+0x18>
 8004840:	f023 0303 	bic.w	r3, r3, #3
 8004844:	f043 0302 	orr.w	r3, r3, #2
 8004848:	81a3      	strh	r3, [r4, #12]
 800484a:	e7e3      	b.n	8004814 <__smakebuf_r+0xc>
 800484c:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <__smakebuf_r+0x7c>)
 800484e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	6020      	str	r0, [r4, #0]
 8004854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	9b00      	ldr	r3, [sp, #0]
 800485c:	6120      	str	r0, [r4, #16]
 800485e:	6163      	str	r3, [r4, #20]
 8004860:	9b01      	ldr	r3, [sp, #4]
 8004862:	b15b      	cbz	r3, 800487c <__smakebuf_r+0x74>
 8004864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004868:	4630      	mov	r0, r6
 800486a:	f000 fd85 	bl	8005378 <_isatty_r>
 800486e:	b128      	cbz	r0, 800487c <__smakebuf_r+0x74>
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	81a3      	strh	r3, [r4, #12]
 800487c:	89a3      	ldrh	r3, [r4, #12]
 800487e:	431d      	orrs	r5, r3
 8004880:	81a5      	strh	r5, [r4, #12]
 8004882:	e7cd      	b.n	8004820 <__smakebuf_r+0x18>
 8004884:	08004659 	.word	0x08004659

08004888 <malloc>:
 8004888:	4b02      	ldr	r3, [pc, #8]	; (8004894 <malloc+0xc>)
 800488a:	4601      	mov	r1, r0
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	f000 bb53 	b.w	8004f38 <_malloc_r>
 8004892:	bf00      	nop
 8004894:	20000010 	.word	0x20000010

08004898 <memchr>:
 8004898:	b510      	push	{r4, lr}
 800489a:	b2c9      	uxtb	r1, r1
 800489c:	4402      	add	r2, r0
 800489e:	4290      	cmp	r0, r2
 80048a0:	4603      	mov	r3, r0
 80048a2:	d101      	bne.n	80048a8 <memchr+0x10>
 80048a4:	2300      	movs	r3, #0
 80048a6:	e003      	b.n	80048b0 <memchr+0x18>
 80048a8:	781c      	ldrb	r4, [r3, #0]
 80048aa:	3001      	adds	r0, #1
 80048ac:	428c      	cmp	r4, r1
 80048ae:	d1f6      	bne.n	800489e <memchr+0x6>
 80048b0:	4618      	mov	r0, r3
 80048b2:	bd10      	pop	{r4, pc}

080048b4 <memcpy>:
 80048b4:	b510      	push	{r4, lr}
 80048b6:	1e43      	subs	r3, r0, #1
 80048b8:	440a      	add	r2, r1
 80048ba:	4291      	cmp	r1, r2
 80048bc:	d100      	bne.n	80048c0 <memcpy+0xc>
 80048be:	bd10      	pop	{r4, pc}
 80048c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048c8:	e7f7      	b.n	80048ba <memcpy+0x6>

080048ca <_Balloc>:
 80048ca:	b570      	push	{r4, r5, r6, lr}
 80048cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80048ce:	4604      	mov	r4, r0
 80048d0:	460e      	mov	r6, r1
 80048d2:	b93d      	cbnz	r5, 80048e4 <_Balloc+0x1a>
 80048d4:	2010      	movs	r0, #16
 80048d6:	f7ff ffd7 	bl	8004888 <malloc>
 80048da:	6260      	str	r0, [r4, #36]	; 0x24
 80048dc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80048e0:	6005      	str	r5, [r0, #0]
 80048e2:	60c5      	str	r5, [r0, #12]
 80048e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80048e6:	68eb      	ldr	r3, [r5, #12]
 80048e8:	b183      	cbz	r3, 800490c <_Balloc+0x42>
 80048ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80048f2:	b9b8      	cbnz	r0, 8004924 <_Balloc+0x5a>
 80048f4:	2101      	movs	r1, #1
 80048f6:	fa01 f506 	lsl.w	r5, r1, r6
 80048fa:	1d6a      	adds	r2, r5, #5
 80048fc:	0092      	lsls	r2, r2, #2
 80048fe:	4620      	mov	r0, r4
 8004900:	f000 fabf 	bl	8004e82 <_calloc_r>
 8004904:	b160      	cbz	r0, 8004920 <_Balloc+0x56>
 8004906:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800490a:	e00e      	b.n	800492a <_Balloc+0x60>
 800490c:	2221      	movs	r2, #33	; 0x21
 800490e:	2104      	movs	r1, #4
 8004910:	4620      	mov	r0, r4
 8004912:	f000 fab6 	bl	8004e82 <_calloc_r>
 8004916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004918:	60e8      	str	r0, [r5, #12]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e4      	bne.n	80048ea <_Balloc+0x20>
 8004920:	2000      	movs	r0, #0
 8004922:	bd70      	pop	{r4, r5, r6, pc}
 8004924:	6802      	ldr	r2, [r0, #0]
 8004926:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800492a:	2300      	movs	r3, #0
 800492c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004930:	e7f7      	b.n	8004922 <_Balloc+0x58>

08004932 <_Bfree>:
 8004932:	b570      	push	{r4, r5, r6, lr}
 8004934:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004936:	4606      	mov	r6, r0
 8004938:	460d      	mov	r5, r1
 800493a:	b93c      	cbnz	r4, 800494c <_Bfree+0x1a>
 800493c:	2010      	movs	r0, #16
 800493e:	f7ff ffa3 	bl	8004888 <malloc>
 8004942:	6270      	str	r0, [r6, #36]	; 0x24
 8004944:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004948:	6004      	str	r4, [r0, #0]
 800494a:	60c4      	str	r4, [r0, #12]
 800494c:	b13d      	cbz	r5, 800495e <_Bfree+0x2c>
 800494e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004950:	686a      	ldr	r2, [r5, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004958:	6029      	str	r1, [r5, #0]
 800495a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800495e:	bd70      	pop	{r4, r5, r6, pc}

08004960 <__multadd>:
 8004960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004964:	461f      	mov	r7, r3
 8004966:	4606      	mov	r6, r0
 8004968:	460c      	mov	r4, r1
 800496a:	2300      	movs	r3, #0
 800496c:	690d      	ldr	r5, [r1, #16]
 800496e:	f101 0c14 	add.w	ip, r1, #20
 8004972:	f8dc 0000 	ldr.w	r0, [ip]
 8004976:	3301      	adds	r3, #1
 8004978:	b281      	uxth	r1, r0
 800497a:	fb02 7101 	mla	r1, r2, r1, r7
 800497e:	0c00      	lsrs	r0, r0, #16
 8004980:	0c0f      	lsrs	r7, r1, #16
 8004982:	fb02 7000 	mla	r0, r2, r0, r7
 8004986:	b289      	uxth	r1, r1
 8004988:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800498c:	429d      	cmp	r5, r3
 800498e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004992:	f84c 1b04 	str.w	r1, [ip], #4
 8004996:	dcec      	bgt.n	8004972 <__multadd+0x12>
 8004998:	b1d7      	cbz	r7, 80049d0 <__multadd+0x70>
 800499a:	68a3      	ldr	r3, [r4, #8]
 800499c:	42ab      	cmp	r3, r5
 800499e:	dc12      	bgt.n	80049c6 <__multadd+0x66>
 80049a0:	6861      	ldr	r1, [r4, #4]
 80049a2:	4630      	mov	r0, r6
 80049a4:	3101      	adds	r1, #1
 80049a6:	f7ff ff90 	bl	80048ca <_Balloc>
 80049aa:	4680      	mov	r8, r0
 80049ac:	6922      	ldr	r2, [r4, #16]
 80049ae:	f104 010c 	add.w	r1, r4, #12
 80049b2:	3202      	adds	r2, #2
 80049b4:	0092      	lsls	r2, r2, #2
 80049b6:	300c      	adds	r0, #12
 80049b8:	f7ff ff7c 	bl	80048b4 <memcpy>
 80049bc:	4621      	mov	r1, r4
 80049be:	4630      	mov	r0, r6
 80049c0:	f7ff ffb7 	bl	8004932 <_Bfree>
 80049c4:	4644      	mov	r4, r8
 80049c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80049ca:	3501      	adds	r5, #1
 80049cc:	615f      	str	r7, [r3, #20]
 80049ce:	6125      	str	r5, [r4, #16]
 80049d0:	4620      	mov	r0, r4
 80049d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080049d6 <__hi0bits>:
 80049d6:	0c02      	lsrs	r2, r0, #16
 80049d8:	0412      	lsls	r2, r2, #16
 80049da:	4603      	mov	r3, r0
 80049dc:	b9b2      	cbnz	r2, 8004a0c <__hi0bits+0x36>
 80049de:	0403      	lsls	r3, r0, #16
 80049e0:	2010      	movs	r0, #16
 80049e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80049e6:	bf04      	itt	eq
 80049e8:	021b      	lsleq	r3, r3, #8
 80049ea:	3008      	addeq	r0, #8
 80049ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80049f0:	bf04      	itt	eq
 80049f2:	011b      	lsleq	r3, r3, #4
 80049f4:	3004      	addeq	r0, #4
 80049f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80049fa:	bf04      	itt	eq
 80049fc:	009b      	lsleq	r3, r3, #2
 80049fe:	3002      	addeq	r0, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	db06      	blt.n	8004a12 <__hi0bits+0x3c>
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	d503      	bpl.n	8004a10 <__hi0bits+0x3a>
 8004a08:	3001      	adds	r0, #1
 8004a0a:	4770      	bx	lr
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	e7e8      	b.n	80049e2 <__hi0bits+0xc>
 8004a10:	2020      	movs	r0, #32
 8004a12:	4770      	bx	lr

08004a14 <__lo0bits>:
 8004a14:	6803      	ldr	r3, [r0, #0]
 8004a16:	4601      	mov	r1, r0
 8004a18:	f013 0207 	ands.w	r2, r3, #7
 8004a1c:	d00b      	beq.n	8004a36 <__lo0bits+0x22>
 8004a1e:	07da      	lsls	r2, r3, #31
 8004a20:	d423      	bmi.n	8004a6a <__lo0bits+0x56>
 8004a22:	0798      	lsls	r0, r3, #30
 8004a24:	bf49      	itett	mi
 8004a26:	085b      	lsrmi	r3, r3, #1
 8004a28:	089b      	lsrpl	r3, r3, #2
 8004a2a:	2001      	movmi	r0, #1
 8004a2c:	600b      	strmi	r3, [r1, #0]
 8004a2e:	bf5c      	itt	pl
 8004a30:	600b      	strpl	r3, [r1, #0]
 8004a32:	2002      	movpl	r0, #2
 8004a34:	4770      	bx	lr
 8004a36:	b298      	uxth	r0, r3
 8004a38:	b9a8      	cbnz	r0, 8004a66 <__lo0bits+0x52>
 8004a3a:	2010      	movs	r0, #16
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a42:	bf04      	itt	eq
 8004a44:	0a1b      	lsreq	r3, r3, #8
 8004a46:	3008      	addeq	r0, #8
 8004a48:	071a      	lsls	r2, r3, #28
 8004a4a:	bf04      	itt	eq
 8004a4c:	091b      	lsreq	r3, r3, #4
 8004a4e:	3004      	addeq	r0, #4
 8004a50:	079a      	lsls	r2, r3, #30
 8004a52:	bf04      	itt	eq
 8004a54:	089b      	lsreq	r3, r3, #2
 8004a56:	3002      	addeq	r0, #2
 8004a58:	07da      	lsls	r2, r3, #31
 8004a5a:	d402      	bmi.n	8004a62 <__lo0bits+0x4e>
 8004a5c:	085b      	lsrs	r3, r3, #1
 8004a5e:	d006      	beq.n	8004a6e <__lo0bits+0x5a>
 8004a60:	3001      	adds	r0, #1
 8004a62:	600b      	str	r3, [r1, #0]
 8004a64:	4770      	bx	lr
 8004a66:	4610      	mov	r0, r2
 8004a68:	e7e9      	b.n	8004a3e <__lo0bits+0x2a>
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	4770      	bx	lr
 8004a6e:	2020      	movs	r0, #32
 8004a70:	4770      	bx	lr

08004a72 <__i2b>:
 8004a72:	b510      	push	{r4, lr}
 8004a74:	460c      	mov	r4, r1
 8004a76:	2101      	movs	r1, #1
 8004a78:	f7ff ff27 	bl	80048ca <_Balloc>
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	6144      	str	r4, [r0, #20]
 8004a80:	6102      	str	r2, [r0, #16]
 8004a82:	bd10      	pop	{r4, pc}

08004a84 <__multiply>:
 8004a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a88:	4614      	mov	r4, r2
 8004a8a:	690a      	ldr	r2, [r1, #16]
 8004a8c:	6923      	ldr	r3, [r4, #16]
 8004a8e:	4688      	mov	r8, r1
 8004a90:	429a      	cmp	r2, r3
 8004a92:	bfbe      	ittt	lt
 8004a94:	460b      	movlt	r3, r1
 8004a96:	46a0      	movlt	r8, r4
 8004a98:	461c      	movlt	r4, r3
 8004a9a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004a9e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004aa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004aa6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004aaa:	eb07 0609 	add.w	r6, r7, r9
 8004aae:	42b3      	cmp	r3, r6
 8004ab0:	bfb8      	it	lt
 8004ab2:	3101      	addlt	r1, #1
 8004ab4:	f7ff ff09 	bl	80048ca <_Balloc>
 8004ab8:	f100 0514 	add.w	r5, r0, #20
 8004abc:	462b      	mov	r3, r5
 8004abe:	2200      	movs	r2, #0
 8004ac0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004ac4:	4573      	cmp	r3, lr
 8004ac6:	d316      	bcc.n	8004af6 <__multiply+0x72>
 8004ac8:	f104 0214 	add.w	r2, r4, #20
 8004acc:	f108 0114 	add.w	r1, r8, #20
 8004ad0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004ad4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	9b00      	ldr	r3, [sp, #0]
 8004adc:	9201      	str	r2, [sp, #4]
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d80c      	bhi.n	8004afc <__multiply+0x78>
 8004ae2:	2e00      	cmp	r6, #0
 8004ae4:	dd03      	ble.n	8004aee <__multiply+0x6a>
 8004ae6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d05d      	beq.n	8004baa <__multiply+0x126>
 8004aee:	6106      	str	r6, [r0, #16]
 8004af0:	b003      	add	sp, #12
 8004af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af6:	f843 2b04 	str.w	r2, [r3], #4
 8004afa:	e7e3      	b.n	8004ac4 <__multiply+0x40>
 8004afc:	f8b2 b000 	ldrh.w	fp, [r2]
 8004b00:	f1bb 0f00 	cmp.w	fp, #0
 8004b04:	d023      	beq.n	8004b4e <__multiply+0xca>
 8004b06:	4689      	mov	r9, r1
 8004b08:	46ac      	mov	ip, r5
 8004b0a:	f04f 0800 	mov.w	r8, #0
 8004b0e:	f859 4b04 	ldr.w	r4, [r9], #4
 8004b12:	f8dc a000 	ldr.w	sl, [ip]
 8004b16:	b2a3      	uxth	r3, r4
 8004b18:	fa1f fa8a 	uxth.w	sl, sl
 8004b1c:	fb0b a303 	mla	r3, fp, r3, sl
 8004b20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004b24:	f8dc 4000 	ldr.w	r4, [ip]
 8004b28:	4443      	add	r3, r8
 8004b2a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004b2e:	fb0b 840a 	mla	r4, fp, sl, r8
 8004b32:	46e2      	mov	sl, ip
 8004b34:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b3e:	454f      	cmp	r7, r9
 8004b40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004b44:	f84a 3b04 	str.w	r3, [sl], #4
 8004b48:	d82b      	bhi.n	8004ba2 <__multiply+0x11e>
 8004b4a:	f8cc 8004 	str.w	r8, [ip, #4]
 8004b4e:	9b01      	ldr	r3, [sp, #4]
 8004b50:	3204      	adds	r2, #4
 8004b52:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004b56:	f1ba 0f00 	cmp.w	sl, #0
 8004b5a:	d020      	beq.n	8004b9e <__multiply+0x11a>
 8004b5c:	4689      	mov	r9, r1
 8004b5e:	46a8      	mov	r8, r5
 8004b60:	f04f 0b00 	mov.w	fp, #0
 8004b64:	682b      	ldr	r3, [r5, #0]
 8004b66:	f8b9 c000 	ldrh.w	ip, [r9]
 8004b6a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	fb0a 440c 	mla	r4, sl, ip, r4
 8004b74:	46c4      	mov	ip, r8
 8004b76:	445c      	add	r4, fp
 8004b78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b7c:	f84c 3b04 	str.w	r3, [ip], #4
 8004b80:	f859 3b04 	ldr.w	r3, [r9], #4
 8004b84:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004b88:	0c1b      	lsrs	r3, r3, #16
 8004b8a:	fb0a b303 	mla	r3, sl, r3, fp
 8004b8e:	454f      	cmp	r7, r9
 8004b90:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004b94:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004b98:	d805      	bhi.n	8004ba6 <__multiply+0x122>
 8004b9a:	f8c8 3004 	str.w	r3, [r8, #4]
 8004b9e:	3504      	adds	r5, #4
 8004ba0:	e79b      	b.n	8004ada <__multiply+0x56>
 8004ba2:	46d4      	mov	ip, sl
 8004ba4:	e7b3      	b.n	8004b0e <__multiply+0x8a>
 8004ba6:	46e0      	mov	r8, ip
 8004ba8:	e7dd      	b.n	8004b66 <__multiply+0xe2>
 8004baa:	3e01      	subs	r6, #1
 8004bac:	e799      	b.n	8004ae2 <__multiply+0x5e>
	...

08004bb0 <__pow5mult>:
 8004bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bb4:	4615      	mov	r5, r2
 8004bb6:	f012 0203 	ands.w	r2, r2, #3
 8004bba:	4606      	mov	r6, r0
 8004bbc:	460f      	mov	r7, r1
 8004bbe:	d007      	beq.n	8004bd0 <__pow5mult+0x20>
 8004bc0:	4c21      	ldr	r4, [pc, #132]	; (8004c48 <__pow5mult+0x98>)
 8004bc2:	3a01      	subs	r2, #1
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004bca:	f7ff fec9 	bl	8004960 <__multadd>
 8004bce:	4607      	mov	r7, r0
 8004bd0:	10ad      	asrs	r5, r5, #2
 8004bd2:	d035      	beq.n	8004c40 <__pow5mult+0x90>
 8004bd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004bd6:	b93c      	cbnz	r4, 8004be8 <__pow5mult+0x38>
 8004bd8:	2010      	movs	r0, #16
 8004bda:	f7ff fe55 	bl	8004888 <malloc>
 8004bde:	6270      	str	r0, [r6, #36]	; 0x24
 8004be0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004be4:	6004      	str	r4, [r0, #0]
 8004be6:	60c4      	str	r4, [r0, #12]
 8004be8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004bec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004bf0:	b94c      	cbnz	r4, 8004c06 <__pow5mult+0x56>
 8004bf2:	f240 2171 	movw	r1, #625	; 0x271
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f7ff ff3b 	bl	8004a72 <__i2b>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	4604      	mov	r4, r0
 8004c00:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c04:	6003      	str	r3, [r0, #0]
 8004c06:	f04f 0800 	mov.w	r8, #0
 8004c0a:	07eb      	lsls	r3, r5, #31
 8004c0c:	d50a      	bpl.n	8004c24 <__pow5mult+0x74>
 8004c0e:	4639      	mov	r1, r7
 8004c10:	4622      	mov	r2, r4
 8004c12:	4630      	mov	r0, r6
 8004c14:	f7ff ff36 	bl	8004a84 <__multiply>
 8004c18:	4681      	mov	r9, r0
 8004c1a:	4639      	mov	r1, r7
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f7ff fe88 	bl	8004932 <_Bfree>
 8004c22:	464f      	mov	r7, r9
 8004c24:	106d      	asrs	r5, r5, #1
 8004c26:	d00b      	beq.n	8004c40 <__pow5mult+0x90>
 8004c28:	6820      	ldr	r0, [r4, #0]
 8004c2a:	b938      	cbnz	r0, 8004c3c <__pow5mult+0x8c>
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	4621      	mov	r1, r4
 8004c30:	4630      	mov	r0, r6
 8004c32:	f7ff ff27 	bl	8004a84 <__multiply>
 8004c36:	6020      	str	r0, [r4, #0]
 8004c38:	f8c0 8000 	str.w	r8, [r0]
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	e7e4      	b.n	8004c0a <__pow5mult+0x5a>
 8004c40:	4638      	mov	r0, r7
 8004c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c46:	bf00      	nop
 8004c48:	080056c0 	.word	0x080056c0

08004c4c <__lshift>:
 8004c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c50:	460c      	mov	r4, r1
 8004c52:	4607      	mov	r7, r0
 8004c54:	4616      	mov	r6, r2
 8004c56:	6923      	ldr	r3, [r4, #16]
 8004c58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c5c:	eb0a 0903 	add.w	r9, sl, r3
 8004c60:	6849      	ldr	r1, [r1, #4]
 8004c62:	68a3      	ldr	r3, [r4, #8]
 8004c64:	f109 0501 	add.w	r5, r9, #1
 8004c68:	42ab      	cmp	r3, r5
 8004c6a:	db32      	blt.n	8004cd2 <__lshift+0x86>
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	f7ff fe2c 	bl	80048ca <_Balloc>
 8004c72:	2300      	movs	r3, #0
 8004c74:	4680      	mov	r8, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	f100 0114 	add.w	r1, r0, #20
 8004c7c:	4553      	cmp	r3, sl
 8004c7e:	db2b      	blt.n	8004cd8 <__lshift+0x8c>
 8004c80:	6920      	ldr	r0, [r4, #16]
 8004c82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c86:	f104 0314 	add.w	r3, r4, #20
 8004c8a:	f016 021f 	ands.w	r2, r6, #31
 8004c8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004c92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004c96:	d025      	beq.n	8004ce4 <__lshift+0x98>
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f1c2 0e20 	rsb	lr, r2, #32
 8004c9e:	468a      	mov	sl, r1
 8004ca0:	681e      	ldr	r6, [r3, #0]
 8004ca2:	4096      	lsls	r6, r2
 8004ca4:	4330      	orrs	r0, r6
 8004ca6:	f84a 0b04 	str.w	r0, [sl], #4
 8004caa:	f853 0b04 	ldr.w	r0, [r3], #4
 8004cae:	459c      	cmp	ip, r3
 8004cb0:	fa20 f00e 	lsr.w	r0, r0, lr
 8004cb4:	d814      	bhi.n	8004ce0 <__lshift+0x94>
 8004cb6:	6048      	str	r0, [r1, #4]
 8004cb8:	b108      	cbz	r0, 8004cbe <__lshift+0x72>
 8004cba:	f109 0502 	add.w	r5, r9, #2
 8004cbe:	3d01      	subs	r5, #1
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	f8c8 5010 	str.w	r5, [r8, #16]
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	f7ff fe33 	bl	8004932 <_Bfree>
 8004ccc:	4640      	mov	r0, r8
 8004cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd2:	3101      	adds	r1, #1
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	e7c7      	b.n	8004c68 <__lshift+0x1c>
 8004cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	e7cd      	b.n	8004c7c <__lshift+0x30>
 8004ce0:	4651      	mov	r1, sl
 8004ce2:	e7dc      	b.n	8004c9e <__lshift+0x52>
 8004ce4:	3904      	subs	r1, #4
 8004ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cea:	459c      	cmp	ip, r3
 8004cec:	f841 2f04 	str.w	r2, [r1, #4]!
 8004cf0:	d8f9      	bhi.n	8004ce6 <__lshift+0x9a>
 8004cf2:	e7e4      	b.n	8004cbe <__lshift+0x72>

08004cf4 <__mcmp>:
 8004cf4:	6903      	ldr	r3, [r0, #16]
 8004cf6:	690a      	ldr	r2, [r1, #16]
 8004cf8:	b530      	push	{r4, r5, lr}
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	d10c      	bne.n	8004d18 <__mcmp+0x24>
 8004cfe:	0092      	lsls	r2, r2, #2
 8004d00:	3014      	adds	r0, #20
 8004d02:	3114      	adds	r1, #20
 8004d04:	1884      	adds	r4, r0, r2
 8004d06:	4411      	add	r1, r2
 8004d08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004d0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004d10:	4295      	cmp	r5, r2
 8004d12:	d003      	beq.n	8004d1c <__mcmp+0x28>
 8004d14:	d305      	bcc.n	8004d22 <__mcmp+0x2e>
 8004d16:	2301      	movs	r3, #1
 8004d18:	4618      	mov	r0, r3
 8004d1a:	bd30      	pop	{r4, r5, pc}
 8004d1c:	42a0      	cmp	r0, r4
 8004d1e:	d3f3      	bcc.n	8004d08 <__mcmp+0x14>
 8004d20:	e7fa      	b.n	8004d18 <__mcmp+0x24>
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
 8004d26:	e7f7      	b.n	8004d18 <__mcmp+0x24>

08004d28 <__mdiff>:
 8004d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d2c:	460d      	mov	r5, r1
 8004d2e:	4607      	mov	r7, r0
 8004d30:	4611      	mov	r1, r2
 8004d32:	4628      	mov	r0, r5
 8004d34:	4614      	mov	r4, r2
 8004d36:	f7ff ffdd 	bl	8004cf4 <__mcmp>
 8004d3a:	1e06      	subs	r6, r0, #0
 8004d3c:	d108      	bne.n	8004d50 <__mdiff+0x28>
 8004d3e:	4631      	mov	r1, r6
 8004d40:	4638      	mov	r0, r7
 8004d42:	f7ff fdc2 	bl	80048ca <_Balloc>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d50:	bfa4      	itt	ge
 8004d52:	4623      	movge	r3, r4
 8004d54:	462c      	movge	r4, r5
 8004d56:	4638      	mov	r0, r7
 8004d58:	6861      	ldr	r1, [r4, #4]
 8004d5a:	bfa6      	itte	ge
 8004d5c:	461d      	movge	r5, r3
 8004d5e:	2600      	movge	r6, #0
 8004d60:	2601      	movlt	r6, #1
 8004d62:	f7ff fdb2 	bl	80048ca <_Balloc>
 8004d66:	f04f 0e00 	mov.w	lr, #0
 8004d6a:	60c6      	str	r6, [r0, #12]
 8004d6c:	692b      	ldr	r3, [r5, #16]
 8004d6e:	6926      	ldr	r6, [r4, #16]
 8004d70:	f104 0214 	add.w	r2, r4, #20
 8004d74:	f105 0914 	add.w	r9, r5, #20
 8004d78:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004d7c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004d80:	f100 0114 	add.w	r1, r0, #20
 8004d84:	f852 ab04 	ldr.w	sl, [r2], #4
 8004d88:	f859 5b04 	ldr.w	r5, [r9], #4
 8004d8c:	fa1f f38a 	uxth.w	r3, sl
 8004d90:	4473      	add	r3, lr
 8004d92:	b2ac      	uxth	r4, r5
 8004d94:	1b1b      	subs	r3, r3, r4
 8004d96:	0c2c      	lsrs	r4, r5, #16
 8004d98:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004d9c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004da6:	45c8      	cmp	r8, r9
 8004da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004dac:	4694      	mov	ip, r2
 8004dae:	f841 4b04 	str.w	r4, [r1], #4
 8004db2:	d8e7      	bhi.n	8004d84 <__mdiff+0x5c>
 8004db4:	45bc      	cmp	ip, r7
 8004db6:	d304      	bcc.n	8004dc2 <__mdiff+0x9a>
 8004db8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004dbc:	b183      	cbz	r3, 8004de0 <__mdiff+0xb8>
 8004dbe:	6106      	str	r6, [r0, #16]
 8004dc0:	e7c4      	b.n	8004d4c <__mdiff+0x24>
 8004dc2:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004dc6:	b2a2      	uxth	r2, r4
 8004dc8:	4472      	add	r2, lr
 8004dca:	1413      	asrs	r3, r2, #16
 8004dcc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004dd0:	b292      	uxth	r2, r2
 8004dd2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004dd6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004dda:	f841 2b04 	str.w	r2, [r1], #4
 8004dde:	e7e9      	b.n	8004db4 <__mdiff+0x8c>
 8004de0:	3e01      	subs	r6, #1
 8004de2:	e7e9      	b.n	8004db8 <__mdiff+0x90>

08004de4 <__d2b>:
 8004de4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004de8:	461c      	mov	r4, r3
 8004dea:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004dee:	2101      	movs	r1, #1
 8004df0:	4690      	mov	r8, r2
 8004df2:	f7ff fd6a 	bl	80048ca <_Balloc>
 8004df6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004dfa:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004dfe:	4607      	mov	r7, r0
 8004e00:	bb34      	cbnz	r4, 8004e50 <__d2b+0x6c>
 8004e02:	9201      	str	r2, [sp, #4]
 8004e04:	f1b8 0200 	subs.w	r2, r8, #0
 8004e08:	d027      	beq.n	8004e5a <__d2b+0x76>
 8004e0a:	a802      	add	r0, sp, #8
 8004e0c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004e10:	f7ff fe00 	bl	8004a14 <__lo0bits>
 8004e14:	9900      	ldr	r1, [sp, #0]
 8004e16:	b1f0      	cbz	r0, 8004e56 <__d2b+0x72>
 8004e18:	9a01      	ldr	r2, [sp, #4]
 8004e1a:	f1c0 0320 	rsb	r3, r0, #32
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	430b      	orrs	r3, r1
 8004e24:	40c2      	lsrs	r2, r0
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	9201      	str	r2, [sp, #4]
 8004e2a:	9b01      	ldr	r3, [sp, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bf14      	ite	ne
 8004e30:	2102      	movne	r1, #2
 8004e32:	2101      	moveq	r1, #1
 8004e34:	61bb      	str	r3, [r7, #24]
 8004e36:	6139      	str	r1, [r7, #16]
 8004e38:	b1c4      	cbz	r4, 8004e6c <__d2b+0x88>
 8004e3a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004e3e:	4404      	add	r4, r0
 8004e40:	6034      	str	r4, [r6, #0]
 8004e42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e46:	6028      	str	r0, [r5, #0]
 8004e48:	4638      	mov	r0, r7
 8004e4a:	b002      	add	sp, #8
 8004e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004e54:	e7d5      	b.n	8004e02 <__d2b+0x1e>
 8004e56:	6179      	str	r1, [r7, #20]
 8004e58:	e7e7      	b.n	8004e2a <__d2b+0x46>
 8004e5a:	a801      	add	r0, sp, #4
 8004e5c:	f7ff fdda 	bl	8004a14 <__lo0bits>
 8004e60:	2101      	movs	r1, #1
 8004e62:	9b01      	ldr	r3, [sp, #4]
 8004e64:	6139      	str	r1, [r7, #16]
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	3020      	adds	r0, #32
 8004e6a:	e7e5      	b.n	8004e38 <__d2b+0x54>
 8004e6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e70:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004e74:	6030      	str	r0, [r6, #0]
 8004e76:	6918      	ldr	r0, [r3, #16]
 8004e78:	f7ff fdad 	bl	80049d6 <__hi0bits>
 8004e7c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004e80:	e7e1      	b.n	8004e46 <__d2b+0x62>

08004e82 <_calloc_r>:
 8004e82:	b538      	push	{r3, r4, r5, lr}
 8004e84:	fb02 f401 	mul.w	r4, r2, r1
 8004e88:	4621      	mov	r1, r4
 8004e8a:	f000 f855 	bl	8004f38 <_malloc_r>
 8004e8e:	4605      	mov	r5, r0
 8004e90:	b118      	cbz	r0, 8004e9a <_calloc_r+0x18>
 8004e92:	4622      	mov	r2, r4
 8004e94:	2100      	movs	r1, #0
 8004e96:	f7fd ff33 	bl	8002d00 <memset>
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004ea0 <_free_r>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	2900      	cmp	r1, #0
 8004ea6:	d043      	beq.n	8004f30 <_free_r+0x90>
 8004ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eac:	1f0c      	subs	r4, r1, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	bfb8      	it	lt
 8004eb2:	18e4      	addlt	r4, r4, r3
 8004eb4:	f000 fa94 	bl	80053e0 <__malloc_lock>
 8004eb8:	4a1e      	ldr	r2, [pc, #120]	; (8004f34 <_free_r+0x94>)
 8004eba:	6813      	ldr	r3, [r2, #0]
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	b933      	cbnz	r3, 8004ece <_free_r+0x2e>
 8004ec0:	6063      	str	r3, [r4, #4]
 8004ec2:	6014      	str	r4, [r2, #0]
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eca:	f000 ba8a 	b.w	80053e2 <__malloc_unlock>
 8004ece:	42a3      	cmp	r3, r4
 8004ed0:	d90b      	bls.n	8004eea <_free_r+0x4a>
 8004ed2:	6821      	ldr	r1, [r4, #0]
 8004ed4:	1862      	adds	r2, r4, r1
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	bf01      	itttt	eq
 8004eda:	681a      	ldreq	r2, [r3, #0]
 8004edc:	685b      	ldreq	r3, [r3, #4]
 8004ede:	1852      	addeq	r2, r2, r1
 8004ee0:	6022      	streq	r2, [r4, #0]
 8004ee2:	6063      	str	r3, [r4, #4]
 8004ee4:	6004      	str	r4, [r0, #0]
 8004ee6:	e7ed      	b.n	8004ec4 <_free_r+0x24>
 8004ee8:	4613      	mov	r3, r2
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	b10a      	cbz	r2, 8004ef2 <_free_r+0x52>
 8004eee:	42a2      	cmp	r2, r4
 8004ef0:	d9fa      	bls.n	8004ee8 <_free_r+0x48>
 8004ef2:	6819      	ldr	r1, [r3, #0]
 8004ef4:	1858      	adds	r0, r3, r1
 8004ef6:	42a0      	cmp	r0, r4
 8004ef8:	d10b      	bne.n	8004f12 <_free_r+0x72>
 8004efa:	6820      	ldr	r0, [r4, #0]
 8004efc:	4401      	add	r1, r0
 8004efe:	1858      	adds	r0, r3, r1
 8004f00:	4282      	cmp	r2, r0
 8004f02:	6019      	str	r1, [r3, #0]
 8004f04:	d1de      	bne.n	8004ec4 <_free_r+0x24>
 8004f06:	6810      	ldr	r0, [r2, #0]
 8004f08:	6852      	ldr	r2, [r2, #4]
 8004f0a:	4401      	add	r1, r0
 8004f0c:	6019      	str	r1, [r3, #0]
 8004f0e:	605a      	str	r2, [r3, #4]
 8004f10:	e7d8      	b.n	8004ec4 <_free_r+0x24>
 8004f12:	d902      	bls.n	8004f1a <_free_r+0x7a>
 8004f14:	230c      	movs	r3, #12
 8004f16:	602b      	str	r3, [r5, #0]
 8004f18:	e7d4      	b.n	8004ec4 <_free_r+0x24>
 8004f1a:	6820      	ldr	r0, [r4, #0]
 8004f1c:	1821      	adds	r1, r4, r0
 8004f1e:	428a      	cmp	r2, r1
 8004f20:	bf01      	itttt	eq
 8004f22:	6811      	ldreq	r1, [r2, #0]
 8004f24:	6852      	ldreq	r2, [r2, #4]
 8004f26:	1809      	addeq	r1, r1, r0
 8004f28:	6021      	streq	r1, [r4, #0]
 8004f2a:	6062      	str	r2, [r4, #4]
 8004f2c:	605c      	str	r4, [r3, #4]
 8004f2e:	e7c9      	b.n	8004ec4 <_free_r+0x24>
 8004f30:	bd38      	pop	{r3, r4, r5, pc}
 8004f32:	bf00      	nop
 8004f34:	20000214 	.word	0x20000214

08004f38 <_malloc_r>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	1ccd      	adds	r5, r1, #3
 8004f3c:	f025 0503 	bic.w	r5, r5, #3
 8004f40:	3508      	adds	r5, #8
 8004f42:	2d0c      	cmp	r5, #12
 8004f44:	bf38      	it	cc
 8004f46:	250c      	movcc	r5, #12
 8004f48:	2d00      	cmp	r5, #0
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	db01      	blt.n	8004f52 <_malloc_r+0x1a>
 8004f4e:	42a9      	cmp	r1, r5
 8004f50:	d903      	bls.n	8004f5a <_malloc_r+0x22>
 8004f52:	230c      	movs	r3, #12
 8004f54:	6033      	str	r3, [r6, #0]
 8004f56:	2000      	movs	r0, #0
 8004f58:	bd70      	pop	{r4, r5, r6, pc}
 8004f5a:	f000 fa41 	bl	80053e0 <__malloc_lock>
 8004f5e:	4a21      	ldr	r2, [pc, #132]	; (8004fe4 <_malloc_r+0xac>)
 8004f60:	6814      	ldr	r4, [r2, #0]
 8004f62:	4621      	mov	r1, r4
 8004f64:	b991      	cbnz	r1, 8004f8c <_malloc_r+0x54>
 8004f66:	4c20      	ldr	r4, [pc, #128]	; (8004fe8 <_malloc_r+0xb0>)
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	b91b      	cbnz	r3, 8004f74 <_malloc_r+0x3c>
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f000 f97b 	bl	8005268 <_sbrk_r>
 8004f72:	6020      	str	r0, [r4, #0]
 8004f74:	4629      	mov	r1, r5
 8004f76:	4630      	mov	r0, r6
 8004f78:	f000 f976 	bl	8005268 <_sbrk_r>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d124      	bne.n	8004fca <_malloc_r+0x92>
 8004f80:	230c      	movs	r3, #12
 8004f82:	4630      	mov	r0, r6
 8004f84:	6033      	str	r3, [r6, #0]
 8004f86:	f000 fa2c 	bl	80053e2 <__malloc_unlock>
 8004f8a:	e7e4      	b.n	8004f56 <_malloc_r+0x1e>
 8004f8c:	680b      	ldr	r3, [r1, #0]
 8004f8e:	1b5b      	subs	r3, r3, r5
 8004f90:	d418      	bmi.n	8004fc4 <_malloc_r+0x8c>
 8004f92:	2b0b      	cmp	r3, #11
 8004f94:	d90f      	bls.n	8004fb6 <_malloc_r+0x7e>
 8004f96:	600b      	str	r3, [r1, #0]
 8004f98:	18cc      	adds	r4, r1, r3
 8004f9a:	50cd      	str	r5, [r1, r3]
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f000 fa20 	bl	80053e2 <__malloc_unlock>
 8004fa2:	f104 000b 	add.w	r0, r4, #11
 8004fa6:	1d23      	adds	r3, r4, #4
 8004fa8:	f020 0007 	bic.w	r0, r0, #7
 8004fac:	1ac3      	subs	r3, r0, r3
 8004fae:	d0d3      	beq.n	8004f58 <_malloc_r+0x20>
 8004fb0:	425a      	negs	r2, r3
 8004fb2:	50e2      	str	r2, [r4, r3]
 8004fb4:	e7d0      	b.n	8004f58 <_malloc_r+0x20>
 8004fb6:	684b      	ldr	r3, [r1, #4]
 8004fb8:	428c      	cmp	r4, r1
 8004fba:	bf16      	itet	ne
 8004fbc:	6063      	strne	r3, [r4, #4]
 8004fbe:	6013      	streq	r3, [r2, #0]
 8004fc0:	460c      	movne	r4, r1
 8004fc2:	e7eb      	b.n	8004f9c <_malloc_r+0x64>
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	6849      	ldr	r1, [r1, #4]
 8004fc8:	e7cc      	b.n	8004f64 <_malloc_r+0x2c>
 8004fca:	1cc4      	adds	r4, r0, #3
 8004fcc:	f024 0403 	bic.w	r4, r4, #3
 8004fd0:	42a0      	cmp	r0, r4
 8004fd2:	d005      	beq.n	8004fe0 <_malloc_r+0xa8>
 8004fd4:	1a21      	subs	r1, r4, r0
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	f000 f946 	bl	8005268 <_sbrk_r>
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d0cf      	beq.n	8004f80 <_malloc_r+0x48>
 8004fe0:	6025      	str	r5, [r4, #0]
 8004fe2:	e7db      	b.n	8004f9c <_malloc_r+0x64>
 8004fe4:	20000214 	.word	0x20000214
 8004fe8:	20000218 	.word	0x20000218

08004fec <__sfputc_r>:
 8004fec:	6893      	ldr	r3, [r2, #8]
 8004fee:	b410      	push	{r4}
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	6093      	str	r3, [r2, #8]
 8004ff6:	da07      	bge.n	8005008 <__sfputc_r+0x1c>
 8004ff8:	6994      	ldr	r4, [r2, #24]
 8004ffa:	42a3      	cmp	r3, r4
 8004ffc:	db01      	blt.n	8005002 <__sfputc_r+0x16>
 8004ffe:	290a      	cmp	r1, #10
 8005000:	d102      	bne.n	8005008 <__sfputc_r+0x1c>
 8005002:	bc10      	pop	{r4}
 8005004:	f7fe bb50 	b.w	80036a8 <__swbuf_r>
 8005008:	6813      	ldr	r3, [r2, #0]
 800500a:	1c58      	adds	r0, r3, #1
 800500c:	6010      	str	r0, [r2, #0]
 800500e:	7019      	strb	r1, [r3, #0]
 8005010:	4608      	mov	r0, r1
 8005012:	bc10      	pop	{r4}
 8005014:	4770      	bx	lr

08005016 <__sfputs_r>:
 8005016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005018:	4606      	mov	r6, r0
 800501a:	460f      	mov	r7, r1
 800501c:	4614      	mov	r4, r2
 800501e:	18d5      	adds	r5, r2, r3
 8005020:	42ac      	cmp	r4, r5
 8005022:	d101      	bne.n	8005028 <__sfputs_r+0x12>
 8005024:	2000      	movs	r0, #0
 8005026:	e007      	b.n	8005038 <__sfputs_r+0x22>
 8005028:	463a      	mov	r2, r7
 800502a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800502e:	4630      	mov	r0, r6
 8005030:	f7ff ffdc 	bl	8004fec <__sfputc_r>
 8005034:	1c43      	adds	r3, r0, #1
 8005036:	d1f3      	bne.n	8005020 <__sfputs_r+0xa>
 8005038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800503c <_vfiprintf_r>:
 800503c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005040:	460c      	mov	r4, r1
 8005042:	b09d      	sub	sp, #116	; 0x74
 8005044:	4617      	mov	r7, r2
 8005046:	461d      	mov	r5, r3
 8005048:	4606      	mov	r6, r0
 800504a:	b118      	cbz	r0, 8005054 <_vfiprintf_r+0x18>
 800504c:	6983      	ldr	r3, [r0, #24]
 800504e:	b90b      	cbnz	r3, 8005054 <_vfiprintf_r+0x18>
 8005050:	f7ff fb1e 	bl	8004690 <__sinit>
 8005054:	4b7c      	ldr	r3, [pc, #496]	; (8005248 <_vfiprintf_r+0x20c>)
 8005056:	429c      	cmp	r4, r3
 8005058:	d158      	bne.n	800510c <_vfiprintf_r+0xd0>
 800505a:	6874      	ldr	r4, [r6, #4]
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	0718      	lsls	r0, r3, #28
 8005060:	d55e      	bpl.n	8005120 <_vfiprintf_r+0xe4>
 8005062:	6923      	ldr	r3, [r4, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d05b      	beq.n	8005120 <_vfiprintf_r+0xe4>
 8005068:	2300      	movs	r3, #0
 800506a:	9309      	str	r3, [sp, #36]	; 0x24
 800506c:	2320      	movs	r3, #32
 800506e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005072:	2330      	movs	r3, #48	; 0x30
 8005074:	f04f 0b01 	mov.w	fp, #1
 8005078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800507c:	9503      	str	r5, [sp, #12]
 800507e:	46b8      	mov	r8, r7
 8005080:	4645      	mov	r5, r8
 8005082:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005086:	b10b      	cbz	r3, 800508c <_vfiprintf_r+0x50>
 8005088:	2b25      	cmp	r3, #37	; 0x25
 800508a:	d154      	bne.n	8005136 <_vfiprintf_r+0xfa>
 800508c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005090:	d00b      	beq.n	80050aa <_vfiprintf_r+0x6e>
 8005092:	4653      	mov	r3, sl
 8005094:	463a      	mov	r2, r7
 8005096:	4621      	mov	r1, r4
 8005098:	4630      	mov	r0, r6
 800509a:	f7ff ffbc 	bl	8005016 <__sfputs_r>
 800509e:	3001      	adds	r0, #1
 80050a0:	f000 80c2 	beq.w	8005228 <_vfiprintf_r+0x1ec>
 80050a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a6:	4453      	add	r3, sl
 80050a8:	9309      	str	r3, [sp, #36]	; 0x24
 80050aa:	f898 3000 	ldrb.w	r3, [r8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 80ba 	beq.w	8005228 <_vfiprintf_r+0x1ec>
 80050b4:	2300      	movs	r3, #0
 80050b6:	f04f 32ff 	mov.w	r2, #4294967295
 80050ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050be:	9304      	str	r3, [sp, #16]
 80050c0:	9307      	str	r3, [sp, #28]
 80050c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050c6:	931a      	str	r3, [sp, #104]	; 0x68
 80050c8:	46a8      	mov	r8, r5
 80050ca:	2205      	movs	r2, #5
 80050cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80050d0:	485e      	ldr	r0, [pc, #376]	; (800524c <_vfiprintf_r+0x210>)
 80050d2:	f7ff fbe1 	bl	8004898 <memchr>
 80050d6:	9b04      	ldr	r3, [sp, #16]
 80050d8:	bb78      	cbnz	r0, 800513a <_vfiprintf_r+0xfe>
 80050da:	06d9      	lsls	r1, r3, #27
 80050dc:	bf44      	itt	mi
 80050de:	2220      	movmi	r2, #32
 80050e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050e4:	071a      	lsls	r2, r3, #28
 80050e6:	bf44      	itt	mi
 80050e8:	222b      	movmi	r2, #43	; 0x2b
 80050ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050ee:	782a      	ldrb	r2, [r5, #0]
 80050f0:	2a2a      	cmp	r2, #42	; 0x2a
 80050f2:	d02a      	beq.n	800514a <_vfiprintf_r+0x10e>
 80050f4:	46a8      	mov	r8, r5
 80050f6:	2000      	movs	r0, #0
 80050f8:	250a      	movs	r5, #10
 80050fa:	9a07      	ldr	r2, [sp, #28]
 80050fc:	4641      	mov	r1, r8
 80050fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005102:	3b30      	subs	r3, #48	; 0x30
 8005104:	2b09      	cmp	r3, #9
 8005106:	d969      	bls.n	80051dc <_vfiprintf_r+0x1a0>
 8005108:	b360      	cbz	r0, 8005164 <_vfiprintf_r+0x128>
 800510a:	e024      	b.n	8005156 <_vfiprintf_r+0x11a>
 800510c:	4b50      	ldr	r3, [pc, #320]	; (8005250 <_vfiprintf_r+0x214>)
 800510e:	429c      	cmp	r4, r3
 8005110:	d101      	bne.n	8005116 <_vfiprintf_r+0xda>
 8005112:	68b4      	ldr	r4, [r6, #8]
 8005114:	e7a2      	b.n	800505c <_vfiprintf_r+0x20>
 8005116:	4b4f      	ldr	r3, [pc, #316]	; (8005254 <_vfiprintf_r+0x218>)
 8005118:	429c      	cmp	r4, r3
 800511a:	bf08      	it	eq
 800511c:	68f4      	ldreq	r4, [r6, #12]
 800511e:	e79d      	b.n	800505c <_vfiprintf_r+0x20>
 8005120:	4621      	mov	r1, r4
 8005122:	4630      	mov	r0, r6
 8005124:	f7fe fb12 	bl	800374c <__swsetup_r>
 8005128:	2800      	cmp	r0, #0
 800512a:	d09d      	beq.n	8005068 <_vfiprintf_r+0x2c>
 800512c:	f04f 30ff 	mov.w	r0, #4294967295
 8005130:	b01d      	add	sp, #116	; 0x74
 8005132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005136:	46a8      	mov	r8, r5
 8005138:	e7a2      	b.n	8005080 <_vfiprintf_r+0x44>
 800513a:	4a44      	ldr	r2, [pc, #272]	; (800524c <_vfiprintf_r+0x210>)
 800513c:	4645      	mov	r5, r8
 800513e:	1a80      	subs	r0, r0, r2
 8005140:	fa0b f000 	lsl.w	r0, fp, r0
 8005144:	4318      	orrs	r0, r3
 8005146:	9004      	str	r0, [sp, #16]
 8005148:	e7be      	b.n	80050c8 <_vfiprintf_r+0x8c>
 800514a:	9a03      	ldr	r2, [sp, #12]
 800514c:	1d11      	adds	r1, r2, #4
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	9103      	str	r1, [sp, #12]
 8005152:	2a00      	cmp	r2, #0
 8005154:	db01      	blt.n	800515a <_vfiprintf_r+0x11e>
 8005156:	9207      	str	r2, [sp, #28]
 8005158:	e004      	b.n	8005164 <_vfiprintf_r+0x128>
 800515a:	4252      	negs	r2, r2
 800515c:	f043 0302 	orr.w	r3, r3, #2
 8005160:	9207      	str	r2, [sp, #28]
 8005162:	9304      	str	r3, [sp, #16]
 8005164:	f898 3000 	ldrb.w	r3, [r8]
 8005168:	2b2e      	cmp	r3, #46	; 0x2e
 800516a:	d10e      	bne.n	800518a <_vfiprintf_r+0x14e>
 800516c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005170:	2b2a      	cmp	r3, #42	; 0x2a
 8005172:	d138      	bne.n	80051e6 <_vfiprintf_r+0x1aa>
 8005174:	9b03      	ldr	r3, [sp, #12]
 8005176:	f108 0802 	add.w	r8, r8, #2
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	9203      	str	r2, [sp, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	bfb8      	it	lt
 8005184:	f04f 33ff 	movlt.w	r3, #4294967295
 8005188:	9305      	str	r3, [sp, #20]
 800518a:	4d33      	ldr	r5, [pc, #204]	; (8005258 <_vfiprintf_r+0x21c>)
 800518c:	2203      	movs	r2, #3
 800518e:	f898 1000 	ldrb.w	r1, [r8]
 8005192:	4628      	mov	r0, r5
 8005194:	f7ff fb80 	bl	8004898 <memchr>
 8005198:	b140      	cbz	r0, 80051ac <_vfiprintf_r+0x170>
 800519a:	2340      	movs	r3, #64	; 0x40
 800519c:	1b40      	subs	r0, r0, r5
 800519e:	fa03 f000 	lsl.w	r0, r3, r0
 80051a2:	9b04      	ldr	r3, [sp, #16]
 80051a4:	f108 0801 	add.w	r8, r8, #1
 80051a8:	4303      	orrs	r3, r0
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	f898 1000 	ldrb.w	r1, [r8]
 80051b0:	2206      	movs	r2, #6
 80051b2:	482a      	ldr	r0, [pc, #168]	; (800525c <_vfiprintf_r+0x220>)
 80051b4:	f108 0701 	add.w	r7, r8, #1
 80051b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051bc:	f7ff fb6c 	bl	8004898 <memchr>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d037      	beq.n	8005234 <_vfiprintf_r+0x1f8>
 80051c4:	4b26      	ldr	r3, [pc, #152]	; (8005260 <_vfiprintf_r+0x224>)
 80051c6:	bb1b      	cbnz	r3, 8005210 <_vfiprintf_r+0x1d4>
 80051c8:	9b03      	ldr	r3, [sp, #12]
 80051ca:	3307      	adds	r3, #7
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	3308      	adds	r3, #8
 80051d2:	9303      	str	r3, [sp, #12]
 80051d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d6:	444b      	add	r3, r9
 80051d8:	9309      	str	r3, [sp, #36]	; 0x24
 80051da:	e750      	b.n	800507e <_vfiprintf_r+0x42>
 80051dc:	fb05 3202 	mla	r2, r5, r2, r3
 80051e0:	2001      	movs	r0, #1
 80051e2:	4688      	mov	r8, r1
 80051e4:	e78a      	b.n	80050fc <_vfiprintf_r+0xc0>
 80051e6:	2300      	movs	r3, #0
 80051e8:	250a      	movs	r5, #10
 80051ea:	4619      	mov	r1, r3
 80051ec:	f108 0801 	add.w	r8, r8, #1
 80051f0:	9305      	str	r3, [sp, #20]
 80051f2:	4640      	mov	r0, r8
 80051f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051f8:	3a30      	subs	r2, #48	; 0x30
 80051fa:	2a09      	cmp	r2, #9
 80051fc:	d903      	bls.n	8005206 <_vfiprintf_r+0x1ca>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0c3      	beq.n	800518a <_vfiprintf_r+0x14e>
 8005202:	9105      	str	r1, [sp, #20]
 8005204:	e7c1      	b.n	800518a <_vfiprintf_r+0x14e>
 8005206:	fb05 2101 	mla	r1, r5, r1, r2
 800520a:	2301      	movs	r3, #1
 800520c:	4680      	mov	r8, r0
 800520e:	e7f0      	b.n	80051f2 <_vfiprintf_r+0x1b6>
 8005210:	ab03      	add	r3, sp, #12
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	4622      	mov	r2, r4
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <_vfiprintf_r+0x228>)
 8005218:	a904      	add	r1, sp, #16
 800521a:	4630      	mov	r0, r6
 800521c:	f7fd fe0a 	bl	8002e34 <_printf_float>
 8005220:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005224:	4681      	mov	r9, r0
 8005226:	d1d5      	bne.n	80051d4 <_vfiprintf_r+0x198>
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	065b      	lsls	r3, r3, #25
 800522c:	f53f af7e 	bmi.w	800512c <_vfiprintf_r+0xf0>
 8005230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005232:	e77d      	b.n	8005130 <_vfiprintf_r+0xf4>
 8005234:	ab03      	add	r3, sp, #12
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	4622      	mov	r2, r4
 800523a:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <_vfiprintf_r+0x228>)
 800523c:	a904      	add	r1, sp, #16
 800523e:	4630      	mov	r0, r6
 8005240:	f7fe f8a4 	bl	800338c <_printf_i>
 8005244:	e7ec      	b.n	8005220 <_vfiprintf_r+0x1e4>
 8005246:	bf00      	nop
 8005248:	0800558c 	.word	0x0800558c
 800524c:	080056cc 	.word	0x080056cc
 8005250:	080055ac 	.word	0x080055ac
 8005254:	0800556c 	.word	0x0800556c
 8005258:	080056d2 	.word	0x080056d2
 800525c:	080056d6 	.word	0x080056d6
 8005260:	08002e35 	.word	0x08002e35
 8005264:	08005017 	.word	0x08005017

08005268 <_sbrk_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	2300      	movs	r3, #0
 800526c:	4c05      	ldr	r4, [pc, #20]	; (8005284 <_sbrk_r+0x1c>)
 800526e:	4605      	mov	r5, r0
 8005270:	4608      	mov	r0, r1
 8005272:	6023      	str	r3, [r4, #0]
 8005274:	f7fb feca 	bl	800100c <_sbrk>
 8005278:	1c43      	adds	r3, r0, #1
 800527a:	d102      	bne.n	8005282 <_sbrk_r+0x1a>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	b103      	cbz	r3, 8005282 <_sbrk_r+0x1a>
 8005280:	602b      	str	r3, [r5, #0]
 8005282:	bd38      	pop	{r3, r4, r5, pc}
 8005284:	200002ac 	.word	0x200002ac

08005288 <__sread>:
 8005288:	b510      	push	{r4, lr}
 800528a:	460c      	mov	r4, r1
 800528c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005290:	f000 f8a8 	bl	80053e4 <_read_r>
 8005294:	2800      	cmp	r0, #0
 8005296:	bfab      	itete	ge
 8005298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800529a:	89a3      	ldrhlt	r3, [r4, #12]
 800529c:	181b      	addge	r3, r3, r0
 800529e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052a2:	bfac      	ite	ge
 80052a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80052a6:	81a3      	strhlt	r3, [r4, #12]
 80052a8:	bd10      	pop	{r4, pc}

080052aa <__swrite>:
 80052aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ae:	461f      	mov	r7, r3
 80052b0:	898b      	ldrh	r3, [r1, #12]
 80052b2:	4605      	mov	r5, r0
 80052b4:	05db      	lsls	r3, r3, #23
 80052b6:	460c      	mov	r4, r1
 80052b8:	4616      	mov	r6, r2
 80052ba:	d505      	bpl.n	80052c8 <__swrite+0x1e>
 80052bc:	2302      	movs	r3, #2
 80052be:	2200      	movs	r2, #0
 80052c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c4:	f000 f868 	bl	8005398 <_lseek_r>
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	4632      	mov	r2, r6
 80052cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052d0:	81a3      	strh	r3, [r4, #12]
 80052d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052d6:	463b      	mov	r3, r7
 80052d8:	4628      	mov	r0, r5
 80052da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052de:	f000 b817 	b.w	8005310 <_write_r>

080052e2 <__sseek>:
 80052e2:	b510      	push	{r4, lr}
 80052e4:	460c      	mov	r4, r1
 80052e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ea:	f000 f855 	bl	8005398 <_lseek_r>
 80052ee:	1c43      	adds	r3, r0, #1
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	bf15      	itete	ne
 80052f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80052f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052fe:	81a3      	strheq	r3, [r4, #12]
 8005300:	bf18      	it	ne
 8005302:	81a3      	strhne	r3, [r4, #12]
 8005304:	bd10      	pop	{r4, pc}

08005306 <__sclose>:
 8005306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530a:	f000 b813 	b.w	8005334 <_close_r>
	...

08005310 <_write_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4605      	mov	r5, r0
 8005314:	4608      	mov	r0, r1
 8005316:	4611      	mov	r1, r2
 8005318:	2200      	movs	r2, #0
 800531a:	4c05      	ldr	r4, [pc, #20]	; (8005330 <_write_r+0x20>)
 800531c:	6022      	str	r2, [r4, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	f7fb fe27 	bl	8000f72 <_write>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d102      	bne.n	800532e <_write_r+0x1e>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	b103      	cbz	r3, 800532e <_write_r+0x1e>
 800532c:	602b      	str	r3, [r5, #0]
 800532e:	bd38      	pop	{r3, r4, r5, pc}
 8005330:	200002ac 	.word	0x200002ac

08005334 <_close_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	2300      	movs	r3, #0
 8005338:	4c05      	ldr	r4, [pc, #20]	; (8005350 <_close_r+0x1c>)
 800533a:	4605      	mov	r5, r0
 800533c:	4608      	mov	r0, r1
 800533e:	6023      	str	r3, [r4, #0]
 8005340:	f7fb fe33 	bl	8000faa <_close>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_close_r+0x1a>
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	b103      	cbz	r3, 800534e <_close_r+0x1a>
 800534c:	602b      	str	r3, [r5, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	200002ac 	.word	0x200002ac

08005354 <_fstat_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	2300      	movs	r3, #0
 8005358:	4c06      	ldr	r4, [pc, #24]	; (8005374 <_fstat_r+0x20>)
 800535a:	4605      	mov	r5, r0
 800535c:	4608      	mov	r0, r1
 800535e:	4611      	mov	r1, r2
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	f7fb fe2d 	bl	8000fc0 <_fstat>
 8005366:	1c43      	adds	r3, r0, #1
 8005368:	d102      	bne.n	8005370 <_fstat_r+0x1c>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	b103      	cbz	r3, 8005370 <_fstat_r+0x1c>
 800536e:	602b      	str	r3, [r5, #0]
 8005370:	bd38      	pop	{r3, r4, r5, pc}
 8005372:	bf00      	nop
 8005374:	200002ac 	.word	0x200002ac

08005378 <_isatty_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	2300      	movs	r3, #0
 800537c:	4c05      	ldr	r4, [pc, #20]	; (8005394 <_isatty_r+0x1c>)
 800537e:	4605      	mov	r5, r0
 8005380:	4608      	mov	r0, r1
 8005382:	6023      	str	r3, [r4, #0]
 8005384:	f7fb fe2b 	bl	8000fde <_isatty>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d102      	bne.n	8005392 <_isatty_r+0x1a>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	b103      	cbz	r3, 8005392 <_isatty_r+0x1a>
 8005390:	602b      	str	r3, [r5, #0]
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	200002ac 	.word	0x200002ac

08005398 <_lseek_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	4605      	mov	r5, r0
 800539c:	4608      	mov	r0, r1
 800539e:	4611      	mov	r1, r2
 80053a0:	2200      	movs	r2, #0
 80053a2:	4c05      	ldr	r4, [pc, #20]	; (80053b8 <_lseek_r+0x20>)
 80053a4:	6022      	str	r2, [r4, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	f7fb fe23 	bl	8000ff2 <_lseek>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d102      	bne.n	80053b6 <_lseek_r+0x1e>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	b103      	cbz	r3, 80053b6 <_lseek_r+0x1e>
 80053b4:	602b      	str	r3, [r5, #0]
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	200002ac 	.word	0x200002ac

080053bc <__ascii_mbtowc>:
 80053bc:	b082      	sub	sp, #8
 80053be:	b901      	cbnz	r1, 80053c2 <__ascii_mbtowc+0x6>
 80053c0:	a901      	add	r1, sp, #4
 80053c2:	b142      	cbz	r2, 80053d6 <__ascii_mbtowc+0x1a>
 80053c4:	b14b      	cbz	r3, 80053da <__ascii_mbtowc+0x1e>
 80053c6:	7813      	ldrb	r3, [r2, #0]
 80053c8:	600b      	str	r3, [r1, #0]
 80053ca:	7812      	ldrb	r2, [r2, #0]
 80053cc:	1c10      	adds	r0, r2, #0
 80053ce:	bf18      	it	ne
 80053d0:	2001      	movne	r0, #1
 80053d2:	b002      	add	sp, #8
 80053d4:	4770      	bx	lr
 80053d6:	4610      	mov	r0, r2
 80053d8:	e7fb      	b.n	80053d2 <__ascii_mbtowc+0x16>
 80053da:	f06f 0001 	mvn.w	r0, #1
 80053de:	e7f8      	b.n	80053d2 <__ascii_mbtowc+0x16>

080053e0 <__malloc_lock>:
 80053e0:	4770      	bx	lr

080053e2 <__malloc_unlock>:
 80053e2:	4770      	bx	lr

080053e4 <_read_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4605      	mov	r5, r0
 80053e8:	4608      	mov	r0, r1
 80053ea:	4611      	mov	r1, r2
 80053ec:	2200      	movs	r2, #0
 80053ee:	4c05      	ldr	r4, [pc, #20]	; (8005404 <_read_r+0x20>)
 80053f0:	6022      	str	r2, [r4, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	f7fb fda0 	bl	8000f38 <_read>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_read_r+0x1e>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_read_r+0x1e>
 8005400:	602b      	str	r3, [r5, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	200002ac 	.word	0x200002ac

08005408 <__ascii_wctomb>:
 8005408:	b149      	cbz	r1, 800541e <__ascii_wctomb+0x16>
 800540a:	2aff      	cmp	r2, #255	; 0xff
 800540c:	bf8b      	itete	hi
 800540e:	238a      	movhi	r3, #138	; 0x8a
 8005410:	700a      	strbls	r2, [r1, #0]
 8005412:	6003      	strhi	r3, [r0, #0]
 8005414:	2001      	movls	r0, #1
 8005416:	bf88      	it	hi
 8005418:	f04f 30ff 	movhi.w	r0, #4294967295
 800541c:	4770      	bx	lr
 800541e:	4608      	mov	r0, r1
 8005420:	4770      	bx	lr
	...

08005424 <_init>:
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	bf00      	nop
 8005428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542a:	bc08      	pop	{r3}
 800542c:	469e      	mov	lr, r3
 800542e:	4770      	bx	lr

08005430 <_fini>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	bf00      	nop
 8005434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005436:	bc08      	pop	{r3}
 8005438:	469e      	mov	lr, r3
 800543a:	4770      	bx	lr
